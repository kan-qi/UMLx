<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\webrtc\audio\BluetoothStateManager.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>audio</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>bluetooth</name><operator>.</operator><name>BluetoothAdapter</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>bluetooth</name><operator>.</operator><name>BluetoothClass</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>bluetooth</name><operator>.</operator><name>BluetoothDevice</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>bluetooth</name><operator>.</operator><name>BluetoothHeadset</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>bluetooth</name><operator>.</operator><name>BluetoothProfile</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>BroadcastReceiver</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>IntentFilter</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>media</name><operator>.</operator><name>AudioManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>RequiresApi</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>logging</name><operator>.</operator><name>Log</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>ServiceUtil</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>atomic</name><operator>.</operator><name>AtomicBoolean</name></name>;</import>

<class><specifier>public</specifier> class <name>BluetoothStateManager</name> <block>{

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>BluetoothStateManager</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <enum><specifier>private</specifier> enum <name>ScoConnection</name> <block>{
    <decl><name>DISCONNECTED</name></decl>,
    <decl><name>IN_PROGRESS</name></decl>,
    <decl><name>CONNECTED</name></decl>
  }</block></enum>

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Object</name></type> <name>LOCK</name> <init>= <expr><operator>new</operator> <call><name>Object</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Context</name></type>                     <name>context</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>BluetoothAdapter</name></type>            <name>bluetoothAdapter</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier>       <type><name>BluetoothScoReceiver</name></type>        <name>bluetoothScoReceiver</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier>       <type><name>BluetoothConnectionReceiver</name></type> <name>bluetoothConnectionReceiver</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>BluetoothStateListener</name></type>      <name>listener</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>AtomicBoolean</name></type>               <name>destroyed</name></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><name>BluetoothHeadset</name></type> <name>bluetoothHeadset</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>ScoConnection</name></type>    <name>scoConnection</name>    <init>= <expr><name><name>ScoConnection</name><operator>.</operator><name>DISCONNECTED</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type>          <name>wantsConnection</name>  <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>BluetoothStateManager</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>BluetoothStateListener</name></type> <name>listener</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>context</name></name>                     <operator>=</operator> <call><name><name>context</name><operator>.</operator><name>getApplicationContext</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>bluetoothAdapter</name></name>            <operator>=</operator> <call><name><name>BluetoothAdapter</name><operator>.</operator><name>getDefaultAdapter</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>bluetoothScoReceiver</name></name>        <operator>=</operator> <operator>new</operator> <call><name>BluetoothScoReceiver</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>bluetoothConnectionReceiver</name></name> <operator>=</operator> <operator>new</operator> <call><name>BluetoothConnectionReceiver</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>listener</name></name>                    <operator>=</operator> <name>listener</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>destroyed</name></name>                   <operator>=</operator> <operator>new</operator> <call><name>AtomicBoolean</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>bluetoothAdapter</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
      <block type="pseudo"><return>return;</return></block></then></if>

    <expr_stmt><expr><call><name>requestHeadsetProxyProfile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>context</name><operator>.</operator><name>registerReceiver</name></name><argument_list>(<argument><expr><name>bluetoothConnectionReceiver</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>IntentFilter</name><argument_list>(<argument><expr><name><name>BluetoothHeadset</name><operator>.</operator><name>ACTION_CONNECTION_STATE_CHANGED</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>Intent</name></type> <name>sticky</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>context</name><operator>.</operator><name>registerReceiver</name></name><argument_list>(<argument><expr><name>bluetoothScoReceiver</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>IntentFilter</name><argument_list>(<argument><expr><call><name>getScoChangeIntent</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>sticky</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>bluetoothScoReceiver</name><operator>.</operator><name>onReceive</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>sticky</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><call><name>handleBluetoothStateChange</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>onDestroy</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>destroyed</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>bluetoothHeadset</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>bluetoothAdapter</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>bluetoothAdapter</name><operator>.</operator><name>closeProfileProxy</name></name><argument_list>(<argument><expr><name><name>BluetoothProfile</name><operator>.</operator><name>HEADSET</name></name></expr></argument>, <argument><expr><name>bluetoothHeadset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>bluetoothConnectionReceiver</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>context</name><operator>.</operator><name>unregisterReceiver</name></name><argument_list>(<argument><expr><name>bluetoothConnectionReceiver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>bluetoothConnectionReceiver</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>bluetoothScoReceiver</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>context</name><operator>.</operator><name>unregisterReceiver</name></name><argument_list>(<argument><expr><name>bluetoothScoReceiver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>bluetoothScoReceiver</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>bluetoothHeadset</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>setWantsConnection</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>enabled</name></decl></parameter>)</parameter_list> <block>{
    <synchronized>synchronized <init>(<expr><name>LOCK</name></expr>)</init> <block>{
      <decl_stmt><decl><type><name>AudioManager</name></type> <name>audioManager</name> <init>= <expr><call><name><name>ServiceUtil</name><operator>.</operator><name>getAudioManager</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>wantsConnection</name></name> <operator>=</operator> <name>enabled</name></expr>;</expr_stmt>

      <if>if <condition>(<expr><name>wantsConnection</name> <operator>&amp;&amp;</operator> <call><name>isBluetoothAvailable</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>scoConnection</name> <operator>==</operator> <name><name>ScoConnection</name><operator>.</operator><name>DISCONNECTED</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>audioManager</name><operator>.</operator><name>startBluetoothSco</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>scoConnection</name> <operator>=</operator> <name><name>ScoConnection</name><operator>.</operator><name>IN_PROGRESS</name></name></expr>;</expr_stmt>
      }</block></then> <elseif>else <if>if <condition>(<expr><operator>!</operator><name>wantsConnection</name> <operator>&amp;&amp;</operator> <name>scoConnection</name> <operator>==</operator> <name><name>ScoConnection</name><operator>.</operator><name>CONNECTED</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>audioManager</name><operator>.</operator><name>stopBluetoothSco</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>audioManager</name><operator>.</operator><name>setBluetoothScoOn</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>scoConnection</name> <operator>=</operator> <name><name>ScoConnection</name><operator>.</operator><name>DISCONNECTED</name></name></expr>;</expr_stmt>
      }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><operator>!</operator><name>wantsConnection</name> <operator>&amp;&amp;</operator> <name>scoConnection</name> <operator>==</operator> <name><name>ScoConnection</name><operator>.</operator><name>IN_PROGRESS</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>audioManager</name><operator>.</operator><name>stopBluetoothSco</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>scoConnection</name> <operator>=</operator> <name><name>ScoConnection</name><operator>.</operator><name>DISCONNECTED</name></name></expr>;</expr_stmt>
      }</block></then></if></elseif></if>
    }</block></synchronized>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>handleBluetoothStateChange</name><parameter_list>()</parameter_list> <block>{
    <if>if <condition>(<expr><name>listener</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>destroyed</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>listener</name><operator>.</operator><name>onBluetoothStateChanged</name></name><argument_list>(<argument><expr><call><name>isBluetoothAvailable</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
  }</block></function>

  <function><specifier>private</specifier> <type><name>boolean</name></type> <name>isBluetoothAvailable</name><parameter_list>()</parameter_list> <block>{
    <try>try <block>{
      <synchronized>synchronized <init>(<expr><name>LOCK</name></expr>)</init> <block>{
        <decl_stmt><decl><type><name>AudioManager</name></type> <name>audioManager</name> <init>= <expr><call><name><name>ServiceUtil</name><operator>.</operator><name>getAudioManager</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>bluetoothAdapter</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <operator>!</operator><call><name><name>bluetoothAdapter</name><operator>.</operator><name>isEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
        <if>if <condition>(<expr><operator>!</operator><call><name><name>audioManager</name><operator>.</operator><name>isBluetoothScoAvailableOffCall</name></name><argument_list>()</argument_list></call></expr>)</condition><then>            <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>

        <return>return <expr><name>bluetoothHeadset</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>bluetoothHeadset</name><operator>.</operator><name>getConnectedDevices</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr>;</return>
      }</block></synchronized>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    }</block></catch></try>
  }</block></function>

  <function><specifier>private</specifier> <type><name>String</name></type> <name>getScoChangeIntent</name><parameter_list>()</parameter_list> <block>{
    <if>if <condition>(<expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;=</operator> <literal type="number">14</literal></expr>)</condition><then> <block>{
      <return>return <expr><name><name>AudioManager</name><operator>.</operator><name>ACTION_SCO_AUDIO_STATE_UPDATED</name></name></expr>;</return>
    }</block></then> <else>else <block>{
      <return>return <expr><name><name>AudioManager</name><operator>.</operator><name>ACTION_SCO_AUDIO_STATE_CHANGED</name></name></expr>;</return>
    }</block></else></if>
  }</block></function>


  <function><specifier>private</specifier> <type><name>void</name></type> <name>requestHeadsetProxyProfile</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>bluetoothAdapter</name><operator>.</operator><name>getProfileProxy</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>BluetoothProfile</name><operator>.</operator><name>ServiceListener</name></name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>RequiresApi</name><argument_list>(<argument><expr><name>api</name> <operator>=</operator> <name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>HONEYCOMB</name></name></expr></argument>)</argument_list></annotation>
      <annotation>@<name>Override</name></annotation>
      <specifier>public</specifier> <type><name>void</name></type> <name>onServiceConnected</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>profile</name></decl></parameter>, <parameter><decl><type><name>BluetoothProfile</name></type> <name>proxy</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>destroyed</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Got bluetooth profile event after the service was destroyed. Ignoring."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return;</return>
        }</block></then></if>

        <if>if <condition>(<expr><name>profile</name> <operator>==</operator> <name><name>BluetoothProfile</name><operator>.</operator><name>HEADSET</name></name></expr>)</condition><then> <block>{
          <synchronized>synchronized <init>(<expr><name>LOCK</name></expr>)</init> <block>{
            <expr_stmt><expr><name>bluetoothHeadset</name> <operator>=</operator> <operator>(</operator><name>BluetoothHeadset</name><operator>)</operator> <name>proxy</name></expr>;</expr_stmt>
          }</block></synchronized>

          <decl_stmt><decl><type><name>Intent</name></type> <name>sticky</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>registerReceiver</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>IntentFilter</name><argument_list>(<argument><expr><call><name>getScoChangeIntent</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>bluetoothScoReceiver</name><operator>.</operator><name>onReceive</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>sticky</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <synchronized>synchronized <init>(<expr><name>LOCK</name></expr>)</init> <block>{
            <if>if <condition>(<expr><name>wantsConnection</name> <operator>&amp;&amp;</operator> <call><name>isBluetoothAvailable</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>scoConnection</name> <operator>==</operator> <name><name>ScoConnection</name><operator>.</operator><name>DISCONNECTED</name></name></expr>)</condition><then> <block>{
              <decl_stmt><decl><type><name>AudioManager</name></type> <name>audioManager</name> <init>= <expr><call><name><name>ServiceUtil</name><operator>.</operator><name>getAudioManager</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
              <expr_stmt><expr><call><name><name>audioManager</name><operator>.</operator><name>startBluetoothSco</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name>scoConnection</name> <operator>=</operator> <name><name>ScoConnection</name><operator>.</operator><name>IN_PROGRESS</name></name></expr>;</expr_stmt>
            }</block></then></if>
          }</block></synchronized>

          <expr_stmt><expr><call><name>handleBluetoothStateChange</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
      }</block></function>

      <function><annotation>@<name>Override</name></annotation>
      <specifier>public</specifier> <type><name>void</name></type> <name>onServiceDisconnected</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>profile</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"onServiceDisconnected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>profile</name> <operator>==</operator> <name><name>BluetoothProfile</name><operator>.</operator><name>HEADSET</name></name></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>bluetoothHeadset</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>handleBluetoothStateChange</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
      }</block></function>
    }</block></class></expr></argument>, <argument><expr><name><name>BluetoothProfile</name><operator>.</operator><name>HEADSET</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <class><specifier>private</specifier> class <name>BluetoothScoReceiver</name> <super><extends>extends <name>BroadcastReceiver</name></extends></super> <block>{
    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onReceive</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{
      <if>if <condition>(<expr><name>intent</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then></if>
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"onReceive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <synchronized>synchronized <init>(<expr><name>LOCK</name></expr>)</init> <block>{
        <if>if <condition>(<expr><call><name>getScoChangeIntent</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>intent</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
          <decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><call><name><name>intent</name><operator>.</operator><name>getIntExtra</name></name><argument_list>(<argument><expr><name><name>AudioManager</name><operator>.</operator><name>EXTRA_SCO_AUDIO_STATE</name></name></expr></argument>, <argument><expr><name><name>AudioManager</name><operator>.</operator><name>SCO_AUDIO_STATE_ERROR</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

          <if>if <condition>(<expr><name>status</name> <operator>==</operator> <name><name>AudioManager</name><operator>.</operator><name>SCO_AUDIO_STATE_CONNECTED</name></name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>bluetoothHeadset</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
              <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>BluetoothDevice</name></argument>&gt;</argument_list></name></type> <name>devices</name> <init>= <expr><call><name><name>bluetoothHeadset</name><operator>.</operator><name>getConnectedDevices</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

              <for>for <control>(<init><decl><type><name>BluetoothDevice</name></type> <name>device</name> <range>: <expr><name>devices</name></expr></range></decl></init>)</control> <block>{
                <if>if <condition>(<expr><call><name><name>bluetoothHeadset</name><operator>.</operator><name>isAudioConnected</name></name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                  <decl_stmt><decl><type><name>int</name></type> <name>deviceClass</name> <init>= <expr><call><name><name>device</name><operator>.</operator><name>getBluetoothClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDeviceClass</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                  <if>if <condition>(<expr><name>deviceClass</name> <operator>==</operator> <name><name>BluetoothClass</name><operator>.</operator><name>Device</name><operator>.</operator><name>AUDIO_VIDEO_HANDSFREE</name></name> <operator>||</operator>
                      <name>deviceClass</name> <operator>==</operator> <name><name>BluetoothClass</name><operator>.</operator><name>Device</name><operator>.</operator><name>AUDIO_VIDEO_CAR_AUDIO</name></name> <operator>||</operator>
                      <name>deviceClass</name> <operator>==</operator> <name><name>BluetoothClass</name><operator>.</operator><name>Device</name><operator>.</operator><name>AUDIO_VIDEO_WEARABLE_HEADSET</name></name></expr>)</condition><then>
                  <block>{
                    <expr_stmt><expr><name>scoConnection</name> <operator>=</operator> <name><name>ScoConnection</name><operator>.</operator><name>CONNECTED</name></name></expr>;</expr_stmt>

                    <if>if <condition>(<expr><name>wantsConnection</name></expr>)</condition><then> <block>{
                      <decl_stmt><decl><type><name>AudioManager</name></type> <name>audioManager</name> <init>= <expr><call><name><name>ServiceUtil</name><operator>.</operator><name>getAudioManager</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                      <expr_stmt><expr><call><name><name>audioManager</name><operator>.</operator><name>setBluetoothScoOn</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                  }</block></then></if>
                }</block></then></if>
              }</block></for>

            }</block></then></if>
          }</block></then></if>
        }</block></then></if>
      }</block></synchronized>

      <expr_stmt><expr><call><name>handleBluetoothStateChange</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
  }</block></class>

  <class><specifier>private</specifier> class <name>BluetoothConnectionReceiver</name> <super><extends>extends <name>BroadcastReceiver</name></extends></super> <block>{
    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onReceive</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"onReceive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>handleBluetoothStateChange</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
  }</block></class>

  <interface><specifier>public</specifier> interface <name>BluetoothStateListener</name> <block>{
    <function_decl><specifier>public</specifier> <type><name>void</name></type> <name>onBluetoothStateChanged</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>isAvailable</name></decl></parameter>)</parameter_list>;</function_decl>
  }</block></interface>

}</block></class>
</unit>
