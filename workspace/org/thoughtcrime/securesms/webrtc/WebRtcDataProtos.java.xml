<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\webrtc\WebRtcDataProtos.java"><comment type="line">// Generated by the protocol buffer compiler.  DO NOT EDIT!</comment>
<comment type="line">// source: WebRtcData.proto</comment>

<package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name></name>;</package>

<class><specifier>public</specifier> <specifier>final</specifier> class <name>WebRtcDataProtos</name> <block>{
  <constructor><specifier>private</specifier> <name>WebRtcDataProtos</name><parameter_list>()</parameter_list> <block>{}</block></constructor>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>registerAllExtensions</name><parameter_list>(
      <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistry</name></name></type> <name>registry</name></decl></parameter>)</parameter_list> <block>{
  }</block></function>
  <interface><specifier>public</specifier> interface <name>ConnectedOrBuilder</name>
      <super><extends>extends <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>MessageOrBuilder</name></name></extends></super> <block>{

    <comment type="line">// optional uint64 id = 1;</comment>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional uint64 id = 1;&lt;/code&gt;
     */</comment>
    <function_decl><type><name>boolean</name></type> <name>hasId</name><parameter_list>()</parameter_list>;</function_decl>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional uint64 id = 1;&lt;/code&gt;
     */</comment>
    <function_decl><type><name>long</name></type> <name>getId</name><parameter_list>()</parameter_list>;</function_decl>
  }</block></interface>
  <comment type="block" format="javadoc">/**
   * Protobuf type {@code signal.Connected}
   */</comment>
  <class><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>Connected</name> <super><extends>extends
      <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name></name></extends>
      <implements>implements <name>ConnectedOrBuilder</name></implements></super> <block>{
    <comment type="line">// Use Connected.newBuilder() to construct.</comment>
    <constructor><specifier>private</specifier> <name>Connected</name><parameter_list>(<parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name><name>Builder</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>unknownFields</name></name> <operator>=</operator> <call><name><name>builder</name><operator>.</operator><name>getUnknownFields</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    <constructor><specifier>private</specifier> <name>Connected</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>noInit</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name><name>this</name><operator>.</operator><name>unknownFields</name></name> <operator>=</operator> <call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>UnknownFieldSet</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> }</block></constructor>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Connected</name></type> <name>defaultInstance</name></decl>;</decl_stmt>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Connected</name></type> <name>getDefaultInstance</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>defaultInstance</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>Connected</name></type> <name>getDefaultInstanceForType</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>defaultInstance</name></expr>;</return>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>UnknownFieldSet</name></name></type> <name>unknownFields</name></decl>;</decl_stmt>
    <function><annotation>@<name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Override</name></name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>UnknownFieldSet</name></name></type>
        <name>getUnknownFields</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name><name>this</name><operator>.</operator><name>unknownFields</name></name></expr>;</return>
    }</block></function>
    <constructor><specifier>private</specifier> <name>Connected</name><parameter_list>(
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedInputStream</name></name></type> <name>input</name></decl></parameter>,
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></expr></argument></throws> <block>{
      <expr_stmt><expr><call><name>initFields</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>mutable_bitField0_</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>UnknownFieldSet</name><operator>.</operator><name>Builder</name></name></type> <name>unknownFields</name> <init>=
          <expr><call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>UnknownFieldSet</name><operator>.</operator><name>newBuilder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <try>try <block>{
        <decl_stmt><decl><type><name>boolean</name></type> <name>done</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><operator>!</operator><name>done</name></expr>)</condition> <block>{
          <decl_stmt><decl><type><name>int</name></type> <name>tag</name> <init>= <expr><call><name><name>input</name><operator>.</operator><name>readTag</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <switch>switch <condition>(<expr><name>tag</name></expr>)</condition> <block>{
            <case>case <expr><literal type="number">0</literal></expr>:</case>
              <expr_stmt><expr><name>done</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
              <break>break;</break>
            <default>default:</default> <block>{
              <if>if <condition>(<expr><operator>!</operator><call><name>parseUnknownField</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>unknownFields</name></expr></argument>,
                                     <argument><expr><name>extensionRegistry</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>done</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
              }</block></then></if>
              <break>break;</break>
            }</block>
            <case>case <expr><literal type="number">8</literal></expr>:</case> <block>{
              <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000001</literal></expr>;</expr_stmt>
              <expr_stmt><expr><name>id_</name> <operator>=</operator> <call><name><name>input</name><operator>.</operator><name>readUInt64</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <break>break;</break>
            }</block>
          }</block></switch>
        }</block></while>
      }</block> <catch>catch <parameter_list>(<parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
        <throw>throw <expr><call><name><name>e</name><operator>.</operator><name>setUnfinishedMessage</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</throw>
      }</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
        <throw>throw <expr><operator>new</operator> <call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name><argument_list>(
            <argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>setUnfinishedMessage</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</throw>
      }</block></catch> <finally>finally <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>unknownFields</name></name> <operator>=</operator> <call><name><name>unknownFields</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>makeExtensionsImmutable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></finally></try>
    }</block></constructor>
    <function><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>Descriptors</name><operator>.</operator><name>Descriptor</name></name></type>
        <name>getDescriptor</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>internal_static_signal_Connected_descriptor</name></name></expr>;</return>
    }</block></function>

    <function><specifier>protected</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name>FieldAccessorTable</name></name></type>
        <name>internalGetFieldAccessorTable</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>internal_static_signal_Connected_fieldAccessorTable</name>
          <operator>.</operator><name>ensureFieldAccessorsInitialized</name></name><argument_list>(
              <argument><expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Connected</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Connected</name><operator>.</operator><name>Builder</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name><name>Parser</name><argument_list type="generic">&lt;<argument><name>Connected</name></argument>&gt;</argument_list></name></name></type> <name>PARSER</name> <init>=
        <expr><operator>new</operator> <class><super><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name><name>AbstractParser</name><argument_list type="generic">&lt;<argument><name>Connected</name></argument>&gt;</argument_list></name></name></super><argument_list>()</argument_list> <block>{
      <function><specifier>public</specifier> <type><name>Connected</name></type> <name>parsePartialFrom</name><parameter_list>(
          <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedInputStream</name></name></type> <name>input</name></decl></parameter>,
          <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
          <throws>throws <argument><expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></expr></argument></throws> <block>{
        <return>return <expr><operator>new</operator> <call><name>Connected</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</return>
      }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Override</name></name></annotation>
    <specifier>public</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name><name>Parser</name><argument_list type="generic">&lt;<argument><name>Connected</name></argument>&gt;</argument_list></name></name></type> <name>getParserForType</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>PARSER</name></expr>;</return>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>bitField0_</name></decl>;</decl_stmt>
    <comment type="line">// optional uint64 id = 1;</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>ID_FIELD_NUMBER</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>long</name></type> <name>id_</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional uint64 id = 1;&lt;/code&gt;
     */</comment>
    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasId</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000001</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000001</literal><operator>)</operator></expr>;</return>
    }</block></function>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional uint64 id = 1;&lt;/code&gt;
     */</comment>
    <function><specifier>public</specifier> <type><name>long</name></type> <name>getId</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>id_</name></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>initFields</name><parameter_list>()</parameter_list> <block>{
      <expr_stmt><expr><name>id_</name> <operator>=</operator> <literal type="number">0L</literal></expr>;</expr_stmt>
    }</block></function>
    <decl_stmt><decl><specifier>private</specifier> <type><name>byte</name></type> <name>memoizedIsInitialized</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <function><specifier>public</specifier> <specifier>final</specifier> <type><name>boolean</name></type> <name>isInitialized</name><parameter_list>()</parameter_list> <block>{
      <decl_stmt><decl><type><name>byte</name></type> <name>isInitialized</name> <init>= <expr><name>memoizedIsInitialized</name></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>isInitialized</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>isInitialized</name> <operator>==</operator> <literal type="number">1</literal></expr>;</return></block></then></if>

      <expr_stmt><expr><name>memoizedIsInitialized</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>writeTo</name><parameter_list>(<parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedOutputStream</name></name></type> <name>output</name></decl></parameter>)</parameter_list>
                        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
      <expr_stmt><expr><call><name>getSerializedSize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000001</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000001</literal><operator>)</operator></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>output</name><operator>.</operator><name>writeUInt64</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>id_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      <expr_stmt><expr><call><name>getUnknownFields</name><argument_list>()</argument_list></call><operator>.</operator><call><name>writeTo</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>memoizedSerializedSize</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <function><specifier>public</specifier> <type><name>int</name></type> <name>getSerializedSize</name><parameter_list>()</parameter_list> <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name>memoizedSerializedSize</name></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>size</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>size</name></expr>;</return></block></then></if>

      <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000001</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000001</literal><operator>)</operator></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedOutputStream</name>
          <operator>.</operator><name>computeUInt64Size</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>id_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>getUnknownFields</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSerializedSize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>memoizedSerializedSize</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
      <return>return <expr><name>size</name></expr>;</return>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> <init>= <expr><literal type="number">0L</literal></expr></init></decl>;</decl_stmt>
    <function><annotation>@<name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Override</name></name></annotation>
    <specifier>protected</specifier> <type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Object</name></name></type> <name>writeReplace</name><parameter_list>()</parameter_list>
        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ObjectStreamException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>super</name><operator>.</operator><name>writeReplace</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Connected</name></name></type> <name>parseFrom</name><parameter_list>(
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name></type> <name>data</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Connected</name></name></type> <name>parseFrom</name><parameter_list>(
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name></type> <name>data</name></decl></parameter>,
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Connected</name></name></type> <name>parseFrom</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Connected</name></name></type> <name>parseFrom</name><parameter_list>(
        <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></parameter>,
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Connected</name></name></type> <name>parseFrom</name><parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name></type> <name>input</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Connected</name></name></type> <name>parseFrom</name><parameter_list>(
        <parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name></type> <name>input</name></decl></parameter>,
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Connected</name></name></type> <name>parseDelimitedFrom</name><parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name></type> <name>input</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseDelimitedFrom</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Connected</name></name></type> <name>parseDelimitedFrom</name><parameter_list>(
        <parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name></type> <name>input</name></decl></parameter>,
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseDelimitedFrom</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Connected</name></name></type> <name>parseFrom</name><parameter_list>(
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedInputStream</name></name></type> <name>input</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Connected</name></name></type> <name>parseFrom</name><parameter_list>(
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedInputStream</name></name></type> <name>input</name></decl></parameter>,
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Builder</name></type> <name>newBuilder</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name><name>Builder</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></function>
    <function><specifier>public</specifier> <type><name>Builder</name></type> <name>newBuilderForType</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>newBuilder</name><argument_list>()</argument_list></call></expr>;</return> }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Builder</name></type> <name>newBuilder</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Connected</name></name></type> <name>prototype</name></decl></parameter>)</parameter_list> <block>{
      <return>return <expr><call><name>newBuilder</name><argument_list>()</argument_list></call><operator>.</operator><call><name>mergeFrom</name><argument_list>(<argument><expr><name>prototype</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <type><name>Builder</name></type> <name>toBuilder</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>newBuilder</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>

    <function><annotation>@<name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Override</name></name></annotation>
    <specifier>protected</specifier> <type><name>Builder</name></type> <name>newBuilderForType</name><parameter_list>(
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name>BuilderParent</name></name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{
      <decl_stmt><decl><type><name>Builder</name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name>Builder</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr><name>builder</name></expr>;</return>
    }</block></function>
    <comment type="block" format="javadoc">/**
     * Protobuf type {@code signal.Connected}
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>Builder</name> <super><extends>extends
        <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name><name>Builder</name><argument_list type="generic">&lt;<argument><name>Builder</name></argument>&gt;</argument_list></name></name></extends>
       <implements>implements <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>ConnectedOrBuilder</name></name></implements></super> <block>{
      <function><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>Descriptors</name><operator>.</operator><name>Descriptor</name></name></type>
          <name>getDescriptor</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>internal_static_signal_Connected_descriptor</name></name></expr>;</return>
      }</block></function>

      <function><specifier>protected</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name>FieldAccessorTable</name></name></type>
          <name>internalGetFieldAccessorTable</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>internal_static_signal_Connected_fieldAccessorTable</name>
            <operator>.</operator><name>ensureFieldAccessorsInitialized</name></name><argument_list>(
                <argument><expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Connected</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Connected</name><operator>.</operator><name>Builder</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</return>
      }</block></function>

      <comment type="line">// Construct using org.thoughtcrime.securesms.webrtc.WebRtcDataProtos.Connected.newBuilder()</comment>
      <constructor><specifier>private</specifier> <name>Builder</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>maybeForceBuilderInitialization</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></constructor>

      <constructor><specifier>private</specifier> <name>Builder</name><parameter_list>(
          <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name>BuilderParent</name></name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>maybeForceBuilderInitialization</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></constructor>
      <function><specifier>private</specifier> <type><name>void</name></type> <name>maybeForceBuilderInitialization</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name>alwaysUseFieldBuilders</name></name></expr>)</condition><then> <block>{
        }</block></then></if>
      }</block></function>
      <function><specifier>private</specifier> <specifier>static</specifier> <type><name>Builder</name></type> <name>create</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><operator>new</operator> <call><name>Builder</name><argument_list>()</argument_list></call></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>id_</name> <operator>=</operator> <literal type="number">0L</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>bitField0_</name> <operator>=</operator> <operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x00000001</literal><operator>)</operator></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>clone</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>create</name><argument_list>()</argument_list></call><operator>.</operator><call><name>mergeFrom</name><argument_list>(<argument><expr><call><name>buildPartial</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>Descriptors</name><operator>.</operator><name>Descriptor</name></name></type>
          <name>getDescriptorForType</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>internal_static_signal_Connected_descriptor</name></name></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Connected</name></name></type> <name>getDefaultInstanceForType</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Connected</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Connected</name></name></type> <name>build</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Connected</name></name></type> <name>result</name> <init>= <expr><call><name>buildPartial</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><operator>!</operator><call><name><name>result</name><operator>.</operator><name>isInitialized</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
          <throw>throw <expr><call><name>newUninitializedMessageException</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Connected</name></name></type> <name>buildPartial</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Connected</name></name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Connected</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>from_bitField0_</name> <init>= <expr><name>bitField0_</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>to_bitField0_</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>from_bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000001</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000001</literal><operator>)</operator></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>to_bitField0_</name> <operator>|=</operator> <literal type="number">0x00000001</literal></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name><name>result</name><operator>.</operator><name>id_</name></name> <operator>=</operator> <name>id_</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>result</name><operator>.</operator><name>bitField0_</name></name> <operator>=</operator> <name>to_bitField0_</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>onBuilt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>mergeFrom</name><parameter_list>(<parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>Message</name></name></type> <name>other</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>other</name> <operator>instanceof</operator> <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Connected</name></name></expr>)</condition><then> <block>{
          <return>return <expr><call><name>mergeFrom</name><argument_list>(<argument><expr><operator>(</operator><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Connected</name></name><operator>)</operator><name>other</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>mergeFrom</name></name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>this</name></expr>;</return>
        }</block></else></if>
      }</block></function>

      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>mergeFrom</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Connected</name></name></type> <name>other</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>other</name> <operator>==</operator> <call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Connected</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>this</name></expr>;</return></block></then></if>
        <if>if <condition>(<expr><call><name><name>other</name><operator>.</operator><name>hasId</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name>setId</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>mergeUnknownFields</name></name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>getUnknownFields</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <specifier>final</specifier> <type><name>boolean</name></type> <name>isInitialized</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>mergeFrom</name><parameter_list>(
          <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedInputStream</name></name></type> <name>input</name></decl></parameter>,
          <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
          <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Connected</name></name></type> <name>parsedMessage</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <try>try <block>{
          <expr_stmt><expr><name>parsedMessage</name> <operator>=</operator> <call><name><name>PARSER</name><operator>.</operator><name>parsePartialFrom</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
          <expr_stmt><expr><name>parsedMessage</name> <operator>=</operator> <operator>(</operator><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Connected</name></name><operator>)</operator> <call><name><name>e</name><operator>.</operator><name>getUnfinishedMessage</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <throw>throw <expr><name>e</name></expr>;</throw>
        }</block></catch> <finally>finally <block>{
          <if>if <condition>(<expr><name>parsedMessage</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>mergeFrom</name><argument_list>(<argument><expr><name>parsedMessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></then></if>
        }</block></finally></try>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>
      <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>bitField0_</name></decl>;</decl_stmt>

      <comment type="line">// optional uint64 id = 1;</comment>
      <decl_stmt><decl><specifier>private</specifier> <type><name>long</name></type> <name>id_</name></decl> ;</decl_stmt>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional uint64 id = 1;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasId</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000001</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000001</literal><operator>)</operator></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional uint64 id = 1;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>long</name></type> <name>getId</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>id_</name></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional uint64 id = 1;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>setId</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000001</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>id_</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional uint64 id = 1;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>clearId</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>bitField0_</name> <operator>=</operator> <operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x00000001</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>id_</name> <operator>=</operator> <literal type="number">0L</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>

      <comment type="line">// @@protoc_insertion_point(builder_scope:signal.Connected)</comment>
    }</block></class>

    <static>static <block>{
      <expr_stmt><expr><name>defaultInstance</name> <operator>=</operator> <operator>new</operator> <call><name>Connected</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>defaultInstance</name><operator>.</operator><name>initFields</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></static>

    <comment type="line">// @@protoc_insertion_point(class_scope:signal.Connected)</comment>
  }</block></class>

  <interface><specifier>public</specifier> interface <name>HangupOrBuilder</name>
      <super><extends>extends <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>MessageOrBuilder</name></name></extends></super> <block>{

    <comment type="line">// optional uint64 id = 1;</comment>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional uint64 id = 1;&lt;/code&gt;
     */</comment>
    <function_decl><type><name>boolean</name></type> <name>hasId</name><parameter_list>()</parameter_list>;</function_decl>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional uint64 id = 1;&lt;/code&gt;
     */</comment>
    <function_decl><type><name>long</name></type> <name>getId</name><parameter_list>()</parameter_list>;</function_decl>
  }</block></interface>
  <comment type="block" format="javadoc">/**
   * Protobuf type {@code signal.Hangup}
   */</comment>
  <class><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>Hangup</name> <super><extends>extends
      <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name></name></extends>
      <implements>implements <name>HangupOrBuilder</name></implements></super> <block>{
    <comment type="line">// Use Hangup.newBuilder() to construct.</comment>
    <constructor><specifier>private</specifier> <name>Hangup</name><parameter_list>(<parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name><name>Builder</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>unknownFields</name></name> <operator>=</operator> <call><name><name>builder</name><operator>.</operator><name>getUnknownFields</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    <constructor><specifier>private</specifier> <name>Hangup</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>noInit</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name><name>this</name><operator>.</operator><name>unknownFields</name></name> <operator>=</operator> <call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>UnknownFieldSet</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> }</block></constructor>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Hangup</name></type> <name>defaultInstance</name></decl>;</decl_stmt>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Hangup</name></type> <name>getDefaultInstance</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>defaultInstance</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>Hangup</name></type> <name>getDefaultInstanceForType</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>defaultInstance</name></expr>;</return>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>UnknownFieldSet</name></name></type> <name>unknownFields</name></decl>;</decl_stmt>
    <function><annotation>@<name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Override</name></name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>UnknownFieldSet</name></name></type>
        <name>getUnknownFields</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name><name>this</name><operator>.</operator><name>unknownFields</name></name></expr>;</return>
    }</block></function>
    <constructor><specifier>private</specifier> <name>Hangup</name><parameter_list>(
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedInputStream</name></name></type> <name>input</name></decl></parameter>,
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></expr></argument></throws> <block>{
      <expr_stmt><expr><call><name>initFields</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>mutable_bitField0_</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>UnknownFieldSet</name><operator>.</operator><name>Builder</name></name></type> <name>unknownFields</name> <init>=
          <expr><call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>UnknownFieldSet</name><operator>.</operator><name>newBuilder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <try>try <block>{
        <decl_stmt><decl><type><name>boolean</name></type> <name>done</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><operator>!</operator><name>done</name></expr>)</condition> <block>{
          <decl_stmt><decl><type><name>int</name></type> <name>tag</name> <init>= <expr><call><name><name>input</name><operator>.</operator><name>readTag</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <switch>switch <condition>(<expr><name>tag</name></expr>)</condition> <block>{
            <case>case <expr><literal type="number">0</literal></expr>:</case>
              <expr_stmt><expr><name>done</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
              <break>break;</break>
            <default>default:</default> <block>{
              <if>if <condition>(<expr><operator>!</operator><call><name>parseUnknownField</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>unknownFields</name></expr></argument>,
                                     <argument><expr><name>extensionRegistry</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>done</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
              }</block></then></if>
              <break>break;</break>
            }</block>
            <case>case <expr><literal type="number">8</literal></expr>:</case> <block>{
              <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000001</literal></expr>;</expr_stmt>
              <expr_stmt><expr><name>id_</name> <operator>=</operator> <call><name><name>input</name><operator>.</operator><name>readUInt64</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <break>break;</break>
            }</block>
          }</block></switch>
        }</block></while>
      }</block> <catch>catch <parameter_list>(<parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
        <throw>throw <expr><call><name><name>e</name><operator>.</operator><name>setUnfinishedMessage</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</throw>
      }</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
        <throw>throw <expr><operator>new</operator> <call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name><argument_list>(
            <argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>setUnfinishedMessage</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</throw>
      }</block></catch> <finally>finally <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>unknownFields</name></name> <operator>=</operator> <call><name><name>unknownFields</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>makeExtensionsImmutable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></finally></try>
    }</block></constructor>
    <function><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>Descriptors</name><operator>.</operator><name>Descriptor</name></name></type>
        <name>getDescriptor</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>internal_static_signal_Hangup_descriptor</name></name></expr>;</return>
    }</block></function>

    <function><specifier>protected</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name>FieldAccessorTable</name></name></type>
        <name>internalGetFieldAccessorTable</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>internal_static_signal_Hangup_fieldAccessorTable</name>
          <operator>.</operator><name>ensureFieldAccessorsInitialized</name></name><argument_list>(
              <argument><expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Hangup</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Hangup</name><operator>.</operator><name>Builder</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name><name>Parser</name><argument_list type="generic">&lt;<argument><name>Hangup</name></argument>&gt;</argument_list></name></name></type> <name>PARSER</name> <init>=
        <expr><operator>new</operator> <class><super><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name><name>AbstractParser</name><argument_list type="generic">&lt;<argument><name>Hangup</name></argument>&gt;</argument_list></name></name></super><argument_list>()</argument_list> <block>{
      <function><specifier>public</specifier> <type><name>Hangup</name></type> <name>parsePartialFrom</name><parameter_list>(
          <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedInputStream</name></name></type> <name>input</name></decl></parameter>,
          <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
          <throws>throws <argument><expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></expr></argument></throws> <block>{
        <return>return <expr><operator>new</operator> <call><name>Hangup</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</return>
      }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Override</name></name></annotation>
    <specifier>public</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name><name>Parser</name><argument_list type="generic">&lt;<argument><name>Hangup</name></argument>&gt;</argument_list></name></name></type> <name>getParserForType</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>PARSER</name></expr>;</return>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>bitField0_</name></decl>;</decl_stmt>
    <comment type="line">// optional uint64 id = 1;</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>ID_FIELD_NUMBER</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>long</name></type> <name>id_</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional uint64 id = 1;&lt;/code&gt;
     */</comment>
    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasId</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000001</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000001</literal><operator>)</operator></expr>;</return>
    }</block></function>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional uint64 id = 1;&lt;/code&gt;
     */</comment>
    <function><specifier>public</specifier> <type><name>long</name></type> <name>getId</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>id_</name></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>initFields</name><parameter_list>()</parameter_list> <block>{
      <expr_stmt><expr><name>id_</name> <operator>=</operator> <literal type="number">0L</literal></expr>;</expr_stmt>
    }</block></function>
    <decl_stmt><decl><specifier>private</specifier> <type><name>byte</name></type> <name>memoizedIsInitialized</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <function><specifier>public</specifier> <specifier>final</specifier> <type><name>boolean</name></type> <name>isInitialized</name><parameter_list>()</parameter_list> <block>{
      <decl_stmt><decl><type><name>byte</name></type> <name>isInitialized</name> <init>= <expr><name>memoizedIsInitialized</name></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>isInitialized</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>isInitialized</name> <operator>==</operator> <literal type="number">1</literal></expr>;</return></block></then></if>

      <expr_stmt><expr><name>memoizedIsInitialized</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>writeTo</name><parameter_list>(<parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedOutputStream</name></name></type> <name>output</name></decl></parameter>)</parameter_list>
                        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
      <expr_stmt><expr><call><name>getSerializedSize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000001</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000001</literal><operator>)</operator></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>output</name><operator>.</operator><name>writeUInt64</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>id_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      <expr_stmt><expr><call><name>getUnknownFields</name><argument_list>()</argument_list></call><operator>.</operator><call><name>writeTo</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>memoizedSerializedSize</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <function><specifier>public</specifier> <type><name>int</name></type> <name>getSerializedSize</name><parameter_list>()</parameter_list> <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name>memoizedSerializedSize</name></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>size</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>size</name></expr>;</return></block></then></if>

      <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000001</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000001</literal><operator>)</operator></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedOutputStream</name>
          <operator>.</operator><name>computeUInt64Size</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>id_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>getUnknownFields</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSerializedSize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>memoizedSerializedSize</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
      <return>return <expr><name>size</name></expr>;</return>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> <init>= <expr><literal type="number">0L</literal></expr></init></decl>;</decl_stmt>
    <function><annotation>@<name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Override</name></name></annotation>
    <specifier>protected</specifier> <type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Object</name></name></type> <name>writeReplace</name><parameter_list>()</parameter_list>
        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ObjectStreamException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>super</name><operator>.</operator><name>writeReplace</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Hangup</name></name></type> <name>parseFrom</name><parameter_list>(
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name></type> <name>data</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Hangup</name></name></type> <name>parseFrom</name><parameter_list>(
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name></type> <name>data</name></decl></parameter>,
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Hangup</name></name></type> <name>parseFrom</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Hangup</name></name></type> <name>parseFrom</name><parameter_list>(
        <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></parameter>,
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Hangup</name></name></type> <name>parseFrom</name><parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name></type> <name>input</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Hangup</name></name></type> <name>parseFrom</name><parameter_list>(
        <parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name></type> <name>input</name></decl></parameter>,
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Hangup</name></name></type> <name>parseDelimitedFrom</name><parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name></type> <name>input</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseDelimitedFrom</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Hangup</name></name></type> <name>parseDelimitedFrom</name><parameter_list>(
        <parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name></type> <name>input</name></decl></parameter>,
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseDelimitedFrom</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Hangup</name></name></type> <name>parseFrom</name><parameter_list>(
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedInputStream</name></name></type> <name>input</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Hangup</name></name></type> <name>parseFrom</name><parameter_list>(
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedInputStream</name></name></type> <name>input</name></decl></parameter>,
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Builder</name></type> <name>newBuilder</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name><name>Builder</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></function>
    <function><specifier>public</specifier> <type><name>Builder</name></type> <name>newBuilderForType</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>newBuilder</name><argument_list>()</argument_list></call></expr>;</return> }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Builder</name></type> <name>newBuilder</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Hangup</name></name></type> <name>prototype</name></decl></parameter>)</parameter_list> <block>{
      <return>return <expr><call><name>newBuilder</name><argument_list>()</argument_list></call><operator>.</operator><call><name>mergeFrom</name><argument_list>(<argument><expr><name>prototype</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <type><name>Builder</name></type> <name>toBuilder</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>newBuilder</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>

    <function><annotation>@<name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Override</name></name></annotation>
    <specifier>protected</specifier> <type><name>Builder</name></type> <name>newBuilderForType</name><parameter_list>(
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name>BuilderParent</name></name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{
      <decl_stmt><decl><type><name>Builder</name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name>Builder</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr><name>builder</name></expr>;</return>
    }</block></function>
    <comment type="block" format="javadoc">/**
     * Protobuf type {@code signal.Hangup}
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>Builder</name> <super><extends>extends
        <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name><name>Builder</name><argument_list type="generic">&lt;<argument><name>Builder</name></argument>&gt;</argument_list></name></name></extends>
       <implements>implements <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>HangupOrBuilder</name></name></implements></super> <block>{
      <function><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>Descriptors</name><operator>.</operator><name>Descriptor</name></name></type>
          <name>getDescriptor</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>internal_static_signal_Hangup_descriptor</name></name></expr>;</return>
      }</block></function>

      <function><specifier>protected</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name>FieldAccessorTable</name></name></type>
          <name>internalGetFieldAccessorTable</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>internal_static_signal_Hangup_fieldAccessorTable</name>
            <operator>.</operator><name>ensureFieldAccessorsInitialized</name></name><argument_list>(
                <argument><expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Hangup</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Hangup</name><operator>.</operator><name>Builder</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</return>
      }</block></function>

      <comment type="line">// Construct using org.thoughtcrime.securesms.webrtc.WebRtcDataProtos.Hangup.newBuilder()</comment>
      <constructor><specifier>private</specifier> <name>Builder</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>maybeForceBuilderInitialization</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></constructor>

      <constructor><specifier>private</specifier> <name>Builder</name><parameter_list>(
          <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name>BuilderParent</name></name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>maybeForceBuilderInitialization</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></constructor>
      <function><specifier>private</specifier> <type><name>void</name></type> <name>maybeForceBuilderInitialization</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name>alwaysUseFieldBuilders</name></name></expr>)</condition><then> <block>{
        }</block></then></if>
      }</block></function>
      <function><specifier>private</specifier> <specifier>static</specifier> <type><name>Builder</name></type> <name>create</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><operator>new</operator> <call><name>Builder</name><argument_list>()</argument_list></call></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>id_</name> <operator>=</operator> <literal type="number">0L</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>bitField0_</name> <operator>=</operator> <operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x00000001</literal><operator>)</operator></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>clone</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>create</name><argument_list>()</argument_list></call><operator>.</operator><call><name>mergeFrom</name><argument_list>(<argument><expr><call><name>buildPartial</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>Descriptors</name><operator>.</operator><name>Descriptor</name></name></type>
          <name>getDescriptorForType</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>internal_static_signal_Hangup_descriptor</name></name></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Hangup</name></name></type> <name>getDefaultInstanceForType</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Hangup</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Hangup</name></name></type> <name>build</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Hangup</name></name></type> <name>result</name> <init>= <expr><call><name>buildPartial</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><operator>!</operator><call><name><name>result</name><operator>.</operator><name>isInitialized</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
          <throw>throw <expr><call><name>newUninitializedMessageException</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Hangup</name></name></type> <name>buildPartial</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Hangup</name></name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Hangup</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>from_bitField0_</name> <init>= <expr><name>bitField0_</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>to_bitField0_</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>from_bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000001</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000001</literal><operator>)</operator></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>to_bitField0_</name> <operator>|=</operator> <literal type="number">0x00000001</literal></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name><name>result</name><operator>.</operator><name>id_</name></name> <operator>=</operator> <name>id_</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>result</name><operator>.</operator><name>bitField0_</name></name> <operator>=</operator> <name>to_bitField0_</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>onBuilt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>mergeFrom</name><parameter_list>(<parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>Message</name></name></type> <name>other</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>other</name> <operator>instanceof</operator> <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Hangup</name></name></expr>)</condition><then> <block>{
          <return>return <expr><call><name>mergeFrom</name><argument_list>(<argument><expr><operator>(</operator><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Hangup</name></name><operator>)</operator><name>other</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>mergeFrom</name></name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>this</name></expr>;</return>
        }</block></else></if>
      }</block></function>

      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>mergeFrom</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Hangup</name></name></type> <name>other</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>other</name> <operator>==</operator> <call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Hangup</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>this</name></expr>;</return></block></then></if>
        <if>if <condition>(<expr><call><name><name>other</name><operator>.</operator><name>hasId</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name>setId</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>mergeUnknownFields</name></name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>getUnknownFields</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <specifier>final</specifier> <type><name>boolean</name></type> <name>isInitialized</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>mergeFrom</name><parameter_list>(
          <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedInputStream</name></name></type> <name>input</name></decl></parameter>,
          <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
          <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Hangup</name></name></type> <name>parsedMessage</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <try>try <block>{
          <expr_stmt><expr><name>parsedMessage</name> <operator>=</operator> <call><name><name>PARSER</name><operator>.</operator><name>parsePartialFrom</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
          <expr_stmt><expr><name>parsedMessage</name> <operator>=</operator> <operator>(</operator><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Hangup</name></name><operator>)</operator> <call><name><name>e</name><operator>.</operator><name>getUnfinishedMessage</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <throw>throw <expr><name>e</name></expr>;</throw>
        }</block></catch> <finally>finally <block>{
          <if>if <condition>(<expr><name>parsedMessage</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>mergeFrom</name><argument_list>(<argument><expr><name>parsedMessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></then></if>
        }</block></finally></try>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>
      <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>bitField0_</name></decl>;</decl_stmt>

      <comment type="line">// optional uint64 id = 1;</comment>
      <decl_stmt><decl><specifier>private</specifier> <type><name>long</name></type> <name>id_</name></decl> ;</decl_stmt>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional uint64 id = 1;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasId</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000001</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000001</literal><operator>)</operator></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional uint64 id = 1;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>long</name></type> <name>getId</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>id_</name></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional uint64 id = 1;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>setId</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000001</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>id_</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional uint64 id = 1;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>clearId</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>bitField0_</name> <operator>=</operator> <operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x00000001</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>id_</name> <operator>=</operator> <literal type="number">0L</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>

      <comment type="line">// @@protoc_insertion_point(builder_scope:signal.Hangup)</comment>
    }</block></class>

    <static>static <block>{
      <expr_stmt><expr><name>defaultInstance</name> <operator>=</operator> <operator>new</operator> <call><name>Hangup</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>defaultInstance</name><operator>.</operator><name>initFields</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></static>

    <comment type="line">// @@protoc_insertion_point(class_scope:signal.Hangup)</comment>
  }</block></class>

  <interface><specifier>public</specifier> interface <name>VideoStreamingStatusOrBuilder</name>
      <super><extends>extends <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>MessageOrBuilder</name></name></extends></super> <block>{

    <comment type="line">// optional uint64 id = 1;</comment>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional uint64 id = 1;&lt;/code&gt;
     */</comment>
    <function_decl><type><name>boolean</name></type> <name>hasId</name><parameter_list>()</parameter_list>;</function_decl>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional uint64 id = 1;&lt;/code&gt;
     */</comment>
    <function_decl><type><name>long</name></type> <name>getId</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="line">// optional bool enabled = 2;</comment>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional bool enabled = 2;&lt;/code&gt;
     */</comment>
    <function_decl><type><name>boolean</name></type> <name>hasEnabled</name><parameter_list>()</parameter_list>;</function_decl>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional bool enabled = 2;&lt;/code&gt;
     */</comment>
    <function_decl><type><name>boolean</name></type> <name>getEnabled</name><parameter_list>()</parameter_list>;</function_decl>
  }</block></interface>
  <comment type="block" format="javadoc">/**
   * Protobuf type {@code signal.VideoStreamingStatus}
   */</comment>
  <class><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>VideoStreamingStatus</name> <super><extends>extends
      <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name></name></extends>
      <implements>implements <name>VideoStreamingStatusOrBuilder</name></implements></super> <block>{
    <comment type="line">// Use VideoStreamingStatus.newBuilder() to construct.</comment>
    <constructor><specifier>private</specifier> <name>VideoStreamingStatus</name><parameter_list>(<parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name><name>Builder</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>unknownFields</name></name> <operator>=</operator> <call><name><name>builder</name><operator>.</operator><name>getUnknownFields</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    <constructor><specifier>private</specifier> <name>VideoStreamingStatus</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>noInit</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name><name>this</name><operator>.</operator><name>unknownFields</name></name> <operator>=</operator> <call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>UnknownFieldSet</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> }</block></constructor>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>VideoStreamingStatus</name></type> <name>defaultInstance</name></decl>;</decl_stmt>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>VideoStreamingStatus</name></type> <name>getDefaultInstance</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>defaultInstance</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>VideoStreamingStatus</name></type> <name>getDefaultInstanceForType</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>defaultInstance</name></expr>;</return>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>UnknownFieldSet</name></name></type> <name>unknownFields</name></decl>;</decl_stmt>
    <function><annotation>@<name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Override</name></name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>UnknownFieldSet</name></name></type>
        <name>getUnknownFields</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name><name>this</name><operator>.</operator><name>unknownFields</name></name></expr>;</return>
    }</block></function>
    <constructor><specifier>private</specifier> <name>VideoStreamingStatus</name><parameter_list>(
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedInputStream</name></name></type> <name>input</name></decl></parameter>,
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></expr></argument></throws> <block>{
      <expr_stmt><expr><call><name>initFields</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>mutable_bitField0_</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>UnknownFieldSet</name><operator>.</operator><name>Builder</name></name></type> <name>unknownFields</name> <init>=
          <expr><call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>UnknownFieldSet</name><operator>.</operator><name>newBuilder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <try>try <block>{
        <decl_stmt><decl><type><name>boolean</name></type> <name>done</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><operator>!</operator><name>done</name></expr>)</condition> <block>{
          <decl_stmt><decl><type><name>int</name></type> <name>tag</name> <init>= <expr><call><name><name>input</name><operator>.</operator><name>readTag</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <switch>switch <condition>(<expr><name>tag</name></expr>)</condition> <block>{
            <case>case <expr><literal type="number">0</literal></expr>:</case>
              <expr_stmt><expr><name>done</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
              <break>break;</break>
            <default>default:</default> <block>{
              <if>if <condition>(<expr><operator>!</operator><call><name>parseUnknownField</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>unknownFields</name></expr></argument>,
                                     <argument><expr><name>extensionRegistry</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>done</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
              }</block></then></if>
              <break>break;</break>
            }</block>
            <case>case <expr><literal type="number">8</literal></expr>:</case> <block>{
              <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000001</literal></expr>;</expr_stmt>
              <expr_stmt><expr><name>id_</name> <operator>=</operator> <call><name><name>input</name><operator>.</operator><name>readUInt64</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <break>break;</break>
            }</block>
            <case>case <expr><literal type="number">16</literal></expr>:</case> <block>{
              <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000002</literal></expr>;</expr_stmt>
              <expr_stmt><expr><name>enabled_</name> <operator>=</operator> <call><name><name>input</name><operator>.</operator><name>readBool</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <break>break;</break>
            }</block>
          }</block></switch>
        }</block></while>
      }</block> <catch>catch <parameter_list>(<parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
        <throw>throw <expr><call><name><name>e</name><operator>.</operator><name>setUnfinishedMessage</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</throw>
      }</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
        <throw>throw <expr><operator>new</operator> <call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name><argument_list>(
            <argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>setUnfinishedMessage</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</throw>
      }</block></catch> <finally>finally <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>unknownFields</name></name> <operator>=</operator> <call><name><name>unknownFields</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>makeExtensionsImmutable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></finally></try>
    }</block></constructor>
    <function><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>Descriptors</name><operator>.</operator><name>Descriptor</name></name></type>
        <name>getDescriptor</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>internal_static_signal_VideoStreamingStatus_descriptor</name></name></expr>;</return>
    }</block></function>

    <function><specifier>protected</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name>FieldAccessorTable</name></name></type>
        <name>internalGetFieldAccessorTable</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>internal_static_signal_VideoStreamingStatus_fieldAccessorTable</name>
          <operator>.</operator><name>ensureFieldAccessorsInitialized</name></name><argument_list>(
              <argument><expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>VideoStreamingStatus</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>VideoStreamingStatus</name><operator>.</operator><name>Builder</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name><name>Parser</name><argument_list type="generic">&lt;<argument><name>VideoStreamingStatus</name></argument>&gt;</argument_list></name></name></type> <name>PARSER</name> <init>=
        <expr><operator>new</operator> <class><super><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name><name>AbstractParser</name><argument_list type="generic">&lt;<argument><name>VideoStreamingStatus</name></argument>&gt;</argument_list></name></name></super><argument_list>()</argument_list> <block>{
      <function><specifier>public</specifier> <type><name>VideoStreamingStatus</name></type> <name>parsePartialFrom</name><parameter_list>(
          <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedInputStream</name></name></type> <name>input</name></decl></parameter>,
          <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
          <throws>throws <argument><expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></expr></argument></throws> <block>{
        <return>return <expr><operator>new</operator> <call><name>VideoStreamingStatus</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</return>
      }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Override</name></name></annotation>
    <specifier>public</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name><name>Parser</name><argument_list type="generic">&lt;<argument><name>VideoStreamingStatus</name></argument>&gt;</argument_list></name></name></type> <name>getParserForType</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>PARSER</name></expr>;</return>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>bitField0_</name></decl>;</decl_stmt>
    <comment type="line">// optional uint64 id = 1;</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>ID_FIELD_NUMBER</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>long</name></type> <name>id_</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional uint64 id = 1;&lt;/code&gt;
     */</comment>
    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasId</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000001</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000001</literal><operator>)</operator></expr>;</return>
    }</block></function>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional uint64 id = 1;&lt;/code&gt;
     */</comment>
    <function><specifier>public</specifier> <type><name>long</name></type> <name>getId</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>id_</name></expr>;</return>
    }</block></function>

    <comment type="line">// optional bool enabled = 2;</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>ENABLED_FIELD_NUMBER</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>enabled_</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional bool enabled = 2;&lt;/code&gt;
     */</comment>
    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasEnabled</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000002</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000002</literal><operator>)</operator></expr>;</return>
    }</block></function>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional bool enabled = 2;&lt;/code&gt;
     */</comment>
    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>getEnabled</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>enabled_</name></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>initFields</name><parameter_list>()</parameter_list> <block>{
      <expr_stmt><expr><name>id_</name> <operator>=</operator> <literal type="number">0L</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>enabled_</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    }</block></function>
    <decl_stmt><decl><specifier>private</specifier> <type><name>byte</name></type> <name>memoizedIsInitialized</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <function><specifier>public</specifier> <specifier>final</specifier> <type><name>boolean</name></type> <name>isInitialized</name><parameter_list>()</parameter_list> <block>{
      <decl_stmt><decl><type><name>byte</name></type> <name>isInitialized</name> <init>= <expr><name>memoizedIsInitialized</name></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>isInitialized</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>isInitialized</name> <operator>==</operator> <literal type="number">1</literal></expr>;</return></block></then></if>

      <expr_stmt><expr><name>memoizedIsInitialized</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>writeTo</name><parameter_list>(<parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedOutputStream</name></name></type> <name>output</name></decl></parameter>)</parameter_list>
                        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
      <expr_stmt><expr><call><name>getSerializedSize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000001</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000001</literal><operator>)</operator></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>output</name><operator>.</operator><name>writeUInt64</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>id_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000002</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000002</literal><operator>)</operator></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>output</name><operator>.</operator><name>writeBool</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>enabled_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      <expr_stmt><expr><call><name>getUnknownFields</name><argument_list>()</argument_list></call><operator>.</operator><call><name>writeTo</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>memoizedSerializedSize</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <function><specifier>public</specifier> <type><name>int</name></type> <name>getSerializedSize</name><parameter_list>()</parameter_list> <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name>memoizedSerializedSize</name></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>size</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>size</name></expr>;</return></block></then></if>

      <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000001</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000001</literal><operator>)</operator></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedOutputStream</name>
          <operator>.</operator><name>computeUInt64Size</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>id_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000002</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000002</literal><operator>)</operator></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedOutputStream</name>
          <operator>.</operator><name>computeBoolSize</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>enabled_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>getUnknownFields</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSerializedSize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>memoizedSerializedSize</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
      <return>return <expr><name>size</name></expr>;</return>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> <init>= <expr><literal type="number">0L</literal></expr></init></decl>;</decl_stmt>
    <function><annotation>@<name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Override</name></name></annotation>
    <specifier>protected</specifier> <type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Object</name></name></type> <name>writeReplace</name><parameter_list>()</parameter_list>
        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ObjectStreamException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>super</name><operator>.</operator><name>writeReplace</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>VideoStreamingStatus</name></name></type> <name>parseFrom</name><parameter_list>(
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name></type> <name>data</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>VideoStreamingStatus</name></name></type> <name>parseFrom</name><parameter_list>(
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name></type> <name>data</name></decl></parameter>,
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>VideoStreamingStatus</name></name></type> <name>parseFrom</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>VideoStreamingStatus</name></name></type> <name>parseFrom</name><parameter_list>(
        <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></parameter>,
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>VideoStreamingStatus</name></name></type> <name>parseFrom</name><parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name></type> <name>input</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>VideoStreamingStatus</name></name></type> <name>parseFrom</name><parameter_list>(
        <parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name></type> <name>input</name></decl></parameter>,
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>VideoStreamingStatus</name></name></type> <name>parseDelimitedFrom</name><parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name></type> <name>input</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseDelimitedFrom</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>VideoStreamingStatus</name></name></type> <name>parseDelimitedFrom</name><parameter_list>(
        <parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name></type> <name>input</name></decl></parameter>,
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseDelimitedFrom</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>VideoStreamingStatus</name></name></type> <name>parseFrom</name><parameter_list>(
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedInputStream</name></name></type> <name>input</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>VideoStreamingStatus</name></name></type> <name>parseFrom</name><parameter_list>(
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedInputStream</name></name></type> <name>input</name></decl></parameter>,
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Builder</name></type> <name>newBuilder</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name><name>Builder</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></function>
    <function><specifier>public</specifier> <type><name>Builder</name></type> <name>newBuilderForType</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>newBuilder</name><argument_list>()</argument_list></call></expr>;</return> }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Builder</name></type> <name>newBuilder</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>VideoStreamingStatus</name></name></type> <name>prototype</name></decl></parameter>)</parameter_list> <block>{
      <return>return <expr><call><name>newBuilder</name><argument_list>()</argument_list></call><operator>.</operator><call><name>mergeFrom</name><argument_list>(<argument><expr><name>prototype</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <type><name>Builder</name></type> <name>toBuilder</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>newBuilder</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>

    <function><annotation>@<name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Override</name></name></annotation>
    <specifier>protected</specifier> <type><name>Builder</name></type> <name>newBuilderForType</name><parameter_list>(
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name>BuilderParent</name></name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{
      <decl_stmt><decl><type><name>Builder</name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name>Builder</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr><name>builder</name></expr>;</return>
    }</block></function>
    <comment type="block" format="javadoc">/**
     * Protobuf type {@code signal.VideoStreamingStatus}
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>Builder</name> <super><extends>extends
        <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name><name>Builder</name><argument_list type="generic">&lt;<argument><name>Builder</name></argument>&gt;</argument_list></name></name></extends>
       <implements>implements <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>VideoStreamingStatusOrBuilder</name></name></implements></super> <block>{
      <function><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>Descriptors</name><operator>.</operator><name>Descriptor</name></name></type>
          <name>getDescriptor</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>internal_static_signal_VideoStreamingStatus_descriptor</name></name></expr>;</return>
      }</block></function>

      <function><specifier>protected</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name>FieldAccessorTable</name></name></type>
          <name>internalGetFieldAccessorTable</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>internal_static_signal_VideoStreamingStatus_fieldAccessorTable</name>
            <operator>.</operator><name>ensureFieldAccessorsInitialized</name></name><argument_list>(
                <argument><expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>VideoStreamingStatus</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>VideoStreamingStatus</name><operator>.</operator><name>Builder</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</return>
      }</block></function>

      <comment type="line">// Construct using org.thoughtcrime.securesms.webrtc.WebRtcDataProtos.VideoStreamingStatus.newBuilder()</comment>
      <constructor><specifier>private</specifier> <name>Builder</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>maybeForceBuilderInitialization</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></constructor>

      <constructor><specifier>private</specifier> <name>Builder</name><parameter_list>(
          <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name>BuilderParent</name></name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>maybeForceBuilderInitialization</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></constructor>
      <function><specifier>private</specifier> <type><name>void</name></type> <name>maybeForceBuilderInitialization</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name>alwaysUseFieldBuilders</name></name></expr>)</condition><then> <block>{
        }</block></then></if>
      }</block></function>
      <function><specifier>private</specifier> <specifier>static</specifier> <type><name>Builder</name></type> <name>create</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><operator>new</operator> <call><name>Builder</name><argument_list>()</argument_list></call></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>id_</name> <operator>=</operator> <literal type="number">0L</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>bitField0_</name> <operator>=</operator> <operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x00000001</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>enabled_</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>bitField0_</name> <operator>=</operator> <operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x00000002</literal><operator>)</operator></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>clone</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>create</name><argument_list>()</argument_list></call><operator>.</operator><call><name>mergeFrom</name><argument_list>(<argument><expr><call><name>buildPartial</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>Descriptors</name><operator>.</operator><name>Descriptor</name></name></type>
          <name>getDescriptorForType</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>internal_static_signal_VideoStreamingStatus_descriptor</name></name></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>VideoStreamingStatus</name></name></type> <name>getDefaultInstanceForType</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>VideoStreamingStatus</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>VideoStreamingStatus</name></name></type> <name>build</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>VideoStreamingStatus</name></name></type> <name>result</name> <init>= <expr><call><name>buildPartial</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><operator>!</operator><call><name><name>result</name><operator>.</operator><name>isInitialized</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
          <throw>throw <expr><call><name>newUninitializedMessageException</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>VideoStreamingStatus</name></name></type> <name>buildPartial</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>VideoStreamingStatus</name></name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>VideoStreamingStatus</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>from_bitField0_</name> <init>= <expr><name>bitField0_</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>to_bitField0_</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>from_bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000001</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000001</literal><operator>)</operator></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>to_bitField0_</name> <operator>|=</operator> <literal type="number">0x00000001</literal></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name><name>result</name><operator>.</operator><name>id_</name></name> <operator>=</operator> <name>id_</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>from_bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000002</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000002</literal><operator>)</operator></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>to_bitField0_</name> <operator>|=</operator> <literal type="number">0x00000002</literal></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name><name>result</name><operator>.</operator><name>enabled_</name></name> <operator>=</operator> <name>enabled_</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>result</name><operator>.</operator><name>bitField0_</name></name> <operator>=</operator> <name>to_bitField0_</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>onBuilt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>mergeFrom</name><parameter_list>(<parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>Message</name></name></type> <name>other</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>other</name> <operator>instanceof</operator> <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>VideoStreamingStatus</name></name></expr>)</condition><then> <block>{
          <return>return <expr><call><name>mergeFrom</name><argument_list>(<argument><expr><operator>(</operator><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>VideoStreamingStatus</name></name><operator>)</operator><name>other</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>mergeFrom</name></name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>this</name></expr>;</return>
        }</block></else></if>
      }</block></function>

      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>mergeFrom</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>VideoStreamingStatus</name></name></type> <name>other</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>other</name> <operator>==</operator> <call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>VideoStreamingStatus</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>this</name></expr>;</return></block></then></if>
        <if>if <condition>(<expr><call><name><name>other</name><operator>.</operator><name>hasId</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name>setId</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><call><name><name>other</name><operator>.</operator><name>hasEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name>setEnabled</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>getEnabled</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>mergeUnknownFields</name></name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>getUnknownFields</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <specifier>final</specifier> <type><name>boolean</name></type> <name>isInitialized</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>mergeFrom</name><parameter_list>(
          <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedInputStream</name></name></type> <name>input</name></decl></parameter>,
          <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
          <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>VideoStreamingStatus</name></name></type> <name>parsedMessage</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <try>try <block>{
          <expr_stmt><expr><name>parsedMessage</name> <operator>=</operator> <call><name><name>PARSER</name><operator>.</operator><name>parsePartialFrom</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
          <expr_stmt><expr><name>parsedMessage</name> <operator>=</operator> <operator>(</operator><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>VideoStreamingStatus</name></name><operator>)</operator> <call><name><name>e</name><operator>.</operator><name>getUnfinishedMessage</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <throw>throw <expr><name>e</name></expr>;</throw>
        }</block></catch> <finally>finally <block>{
          <if>if <condition>(<expr><name>parsedMessage</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>mergeFrom</name><argument_list>(<argument><expr><name>parsedMessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></then></if>
        }</block></finally></try>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>
      <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>bitField0_</name></decl>;</decl_stmt>

      <comment type="line">// optional uint64 id = 1;</comment>
      <decl_stmt><decl><specifier>private</specifier> <type><name>long</name></type> <name>id_</name></decl> ;</decl_stmt>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional uint64 id = 1;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasId</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000001</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000001</literal><operator>)</operator></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional uint64 id = 1;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>long</name></type> <name>getId</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>id_</name></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional uint64 id = 1;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>setId</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000001</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>id_</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional uint64 id = 1;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>clearId</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>bitField0_</name> <operator>=</operator> <operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x00000001</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>id_</name> <operator>=</operator> <literal type="number">0L</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>

      <comment type="line">// optional bool enabled = 2;</comment>
      <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>enabled_</name></decl> ;</decl_stmt>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional bool enabled = 2;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasEnabled</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000002</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000002</literal><operator>)</operator></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional bool enabled = 2;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>boolean</name></type> <name>getEnabled</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>enabled_</name></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional bool enabled = 2;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>setEnabled</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000002</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>enabled_</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional bool enabled = 2;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>clearEnabled</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>bitField0_</name> <operator>=</operator> <operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x00000002</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>enabled_</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>

      <comment type="line">// @@protoc_insertion_point(builder_scope:signal.VideoStreamingStatus)</comment>
    }</block></class>

    <static>static <block>{
      <expr_stmt><expr><name>defaultInstance</name> <operator>=</operator> <operator>new</operator> <call><name>VideoStreamingStatus</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>defaultInstance</name><operator>.</operator><name>initFields</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></static>

    <comment type="line">// @@protoc_insertion_point(class_scope:signal.VideoStreamingStatus)</comment>
  }</block></class>

  <interface><specifier>public</specifier> interface <name>DataOrBuilder</name>
      <super><extends>extends <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>MessageOrBuilder</name></name></extends></super> <block>{

    <comment type="line">// optional .signal.Connected connected = 1;</comment>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional .signal.Connected connected = 1;&lt;/code&gt;
     */</comment>
    <function_decl><type><name>boolean</name></type> <name>hasConnected</name><parameter_list>()</parameter_list>;</function_decl>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional .signal.Connected connected = 1;&lt;/code&gt;
     */</comment>
    <function_decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Connected</name></name></type> <name>getConnected</name><parameter_list>()</parameter_list>;</function_decl>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional .signal.Connected connected = 1;&lt;/code&gt;
     */</comment>
    <function_decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>ConnectedOrBuilder</name></name></type> <name>getConnectedOrBuilder</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="line">// optional .signal.Hangup hangup = 2;</comment>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional .signal.Hangup hangup = 2;&lt;/code&gt;
     */</comment>
    <function_decl><type><name>boolean</name></type> <name>hasHangup</name><parameter_list>()</parameter_list>;</function_decl>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional .signal.Hangup hangup = 2;&lt;/code&gt;
     */</comment>
    <function_decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Hangup</name></name></type> <name>getHangup</name><parameter_list>()</parameter_list>;</function_decl>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional .signal.Hangup hangup = 2;&lt;/code&gt;
     */</comment>
    <function_decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>HangupOrBuilder</name></name></type> <name>getHangupOrBuilder</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="line">// optional .signal.VideoStreamingStatus videoStreamingStatus = 3;</comment>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional .signal.VideoStreamingStatus videoStreamingStatus = 3;&lt;/code&gt;
     */</comment>
    <function_decl><type><name>boolean</name></type> <name>hasVideoStreamingStatus</name><parameter_list>()</parameter_list>;</function_decl>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional .signal.VideoStreamingStatus videoStreamingStatus = 3;&lt;/code&gt;
     */</comment>
    <function_decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>VideoStreamingStatus</name></name></type> <name>getVideoStreamingStatus</name><parameter_list>()</parameter_list>;</function_decl>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional .signal.VideoStreamingStatus videoStreamingStatus = 3;&lt;/code&gt;
     */</comment>
    <function_decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>VideoStreamingStatusOrBuilder</name></name></type> <name>getVideoStreamingStatusOrBuilder</name><parameter_list>()</parameter_list>;</function_decl>
  }</block></interface>
  <comment type="block" format="javadoc">/**
   * Protobuf type {@code signal.Data}
   */</comment>
  <class><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>Data</name> <super><extends>extends
      <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name></name></extends>
      <implements>implements <name>DataOrBuilder</name></implements></super> <block>{
    <comment type="line">// Use Data.newBuilder() to construct.</comment>
    <constructor><specifier>private</specifier> <name>Data</name><parameter_list>(<parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name><name>Builder</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>unknownFields</name></name> <operator>=</operator> <call><name><name>builder</name><operator>.</operator><name>getUnknownFields</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    <constructor><specifier>private</specifier> <name>Data</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>noInit</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name><name>this</name><operator>.</operator><name>unknownFields</name></name> <operator>=</operator> <call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>UnknownFieldSet</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> }</block></constructor>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Data</name></type> <name>defaultInstance</name></decl>;</decl_stmt>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Data</name></type> <name>getDefaultInstance</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>defaultInstance</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>Data</name></type> <name>getDefaultInstanceForType</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>defaultInstance</name></expr>;</return>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>UnknownFieldSet</name></name></type> <name>unknownFields</name></decl>;</decl_stmt>
    <function><annotation>@<name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Override</name></name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>UnknownFieldSet</name></name></type>
        <name>getUnknownFields</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name><name>this</name><operator>.</operator><name>unknownFields</name></name></expr>;</return>
    }</block></function>
    <constructor><specifier>private</specifier> <name>Data</name><parameter_list>(
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedInputStream</name></name></type> <name>input</name></decl></parameter>,
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></expr></argument></throws> <block>{
      <expr_stmt><expr><call><name>initFields</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>mutable_bitField0_</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>UnknownFieldSet</name><operator>.</operator><name>Builder</name></name></type> <name>unknownFields</name> <init>=
          <expr><call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>UnknownFieldSet</name><operator>.</operator><name>newBuilder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <try>try <block>{
        <decl_stmt><decl><type><name>boolean</name></type> <name>done</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><operator>!</operator><name>done</name></expr>)</condition> <block>{
          <decl_stmt><decl><type><name>int</name></type> <name>tag</name> <init>= <expr><call><name><name>input</name><operator>.</operator><name>readTag</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <switch>switch <condition>(<expr><name>tag</name></expr>)</condition> <block>{
            <case>case <expr><literal type="number">0</literal></expr>:</case>
              <expr_stmt><expr><name>done</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
              <break>break;</break>
            <default>default:</default> <block>{
              <if>if <condition>(<expr><operator>!</operator><call><name>parseUnknownField</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>unknownFields</name></expr></argument>,
                                     <argument><expr><name>extensionRegistry</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>done</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
              }</block></then></if>
              <break>break;</break>
            }</block>
            <case>case <expr><literal type="number">10</literal></expr>:</case> <block>{
              <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Connected</name><operator>.</operator><name>Builder</name></name></type> <name>subBuilder</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
              <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000001</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000001</literal><operator>)</operator></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>subBuilder</name> <operator>=</operator> <call><name><name>connected_</name><operator>.</operator><name>toBuilder</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              }</block></then></if>
              <expr_stmt><expr><name>connected_</name> <operator>=</operator> <call><name><name>input</name><operator>.</operator><name>readMessage</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Connected</name><operator>.</operator><name>PARSER</name></name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <if>if <condition>(<expr><name>subBuilder</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>subBuilder</name><operator>.</operator><name>mergeFrom</name></name><argument_list>(<argument><expr><name>connected_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>connected_</name> <operator>=</operator> <call><name><name>subBuilder</name><operator>.</operator><name>buildPartial</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              }</block></then></if>
              <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000001</literal></expr>;</expr_stmt>
              <break>break;</break>
            }</block>
            <case>case <expr><literal type="number">18</literal></expr>:</case> <block>{
              <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Hangup</name><operator>.</operator><name>Builder</name></name></type> <name>subBuilder</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
              <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000002</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000002</literal><operator>)</operator></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>subBuilder</name> <operator>=</operator> <call><name><name>hangup_</name><operator>.</operator><name>toBuilder</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              }</block></then></if>
              <expr_stmt><expr><name>hangup_</name> <operator>=</operator> <call><name><name>input</name><operator>.</operator><name>readMessage</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Hangup</name><operator>.</operator><name>PARSER</name></name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <if>if <condition>(<expr><name>subBuilder</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>subBuilder</name><operator>.</operator><name>mergeFrom</name></name><argument_list>(<argument><expr><name>hangup_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>hangup_</name> <operator>=</operator> <call><name><name>subBuilder</name><operator>.</operator><name>buildPartial</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              }</block></then></if>
              <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000002</literal></expr>;</expr_stmt>
              <break>break;</break>
            }</block>
            <case>case <expr><literal type="number">26</literal></expr>:</case> <block>{
              <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>VideoStreamingStatus</name><operator>.</operator><name>Builder</name></name></type> <name>subBuilder</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
              <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000004</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000004</literal><operator>)</operator></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>subBuilder</name> <operator>=</operator> <call><name><name>videoStreamingStatus_</name><operator>.</operator><name>toBuilder</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              }</block></then></if>
              <expr_stmt><expr><name>videoStreamingStatus_</name> <operator>=</operator> <call><name><name>input</name><operator>.</operator><name>readMessage</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>VideoStreamingStatus</name><operator>.</operator><name>PARSER</name></name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <if>if <condition>(<expr><name>subBuilder</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>subBuilder</name><operator>.</operator><name>mergeFrom</name></name><argument_list>(<argument><expr><name>videoStreamingStatus_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>videoStreamingStatus_</name> <operator>=</operator> <call><name><name>subBuilder</name><operator>.</operator><name>buildPartial</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              }</block></then></if>
              <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000004</literal></expr>;</expr_stmt>
              <break>break;</break>
            }</block>
          }</block></switch>
        }</block></while>
      }</block> <catch>catch <parameter_list>(<parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
        <throw>throw <expr><call><name><name>e</name><operator>.</operator><name>setUnfinishedMessage</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</throw>
      }</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
        <throw>throw <expr><operator>new</operator> <call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name><argument_list>(
            <argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>setUnfinishedMessage</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</throw>
      }</block></catch> <finally>finally <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>unknownFields</name></name> <operator>=</operator> <call><name><name>unknownFields</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>makeExtensionsImmutable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></finally></try>
    }</block></constructor>
    <function><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>Descriptors</name><operator>.</operator><name>Descriptor</name></name></type>
        <name>getDescriptor</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>internal_static_signal_Data_descriptor</name></name></expr>;</return>
    }</block></function>

    <function><specifier>protected</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name>FieldAccessorTable</name></name></type>
        <name>internalGetFieldAccessorTable</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>internal_static_signal_Data_fieldAccessorTable</name>
          <operator>.</operator><name>ensureFieldAccessorsInitialized</name></name><argument_list>(
              <argument><expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Data</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Data</name><operator>.</operator><name>Builder</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name><name>Parser</name><argument_list type="generic">&lt;<argument><name>Data</name></argument>&gt;</argument_list></name></name></type> <name>PARSER</name> <init>=
        <expr><operator>new</operator> <class><super><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name><name>AbstractParser</name><argument_list type="generic">&lt;<argument><name>Data</name></argument>&gt;</argument_list></name></name></super><argument_list>()</argument_list> <block>{
      <function><specifier>public</specifier> <type><name>Data</name></type> <name>parsePartialFrom</name><parameter_list>(
          <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedInputStream</name></name></type> <name>input</name></decl></parameter>,
          <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
          <throws>throws <argument><expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></expr></argument></throws> <block>{
        <return>return <expr><operator>new</operator> <call><name>Data</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</return>
      }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Override</name></name></annotation>
    <specifier>public</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name><name>Parser</name><argument_list type="generic">&lt;<argument><name>Data</name></argument>&gt;</argument_list></name></name></type> <name>getParserForType</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>PARSER</name></expr>;</return>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>bitField0_</name></decl>;</decl_stmt>
    <comment type="line">// optional .signal.Connected connected = 1;</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>CONNECTED_FIELD_NUMBER</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Connected</name></name></type> <name>connected_</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional .signal.Connected connected = 1;&lt;/code&gt;
     */</comment>
    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasConnected</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000001</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000001</literal><operator>)</operator></expr>;</return>
    }</block></function>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional .signal.Connected connected = 1;&lt;/code&gt;
     */</comment>
    <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Connected</name></name></type> <name>getConnected</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>connected_</name></expr>;</return>
    }</block></function>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional .signal.Connected connected = 1;&lt;/code&gt;
     */</comment>
    <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>ConnectedOrBuilder</name></name></type> <name>getConnectedOrBuilder</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>connected_</name></expr>;</return>
    }</block></function>

    <comment type="line">// optional .signal.Hangup hangup = 2;</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>HANGUP_FIELD_NUMBER</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Hangup</name></name></type> <name>hangup_</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional .signal.Hangup hangup = 2;&lt;/code&gt;
     */</comment>
    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasHangup</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000002</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000002</literal><operator>)</operator></expr>;</return>
    }</block></function>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional .signal.Hangup hangup = 2;&lt;/code&gt;
     */</comment>
    <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Hangup</name></name></type> <name>getHangup</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>hangup_</name></expr>;</return>
    }</block></function>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional .signal.Hangup hangup = 2;&lt;/code&gt;
     */</comment>
    <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>HangupOrBuilder</name></name></type> <name>getHangupOrBuilder</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>hangup_</name></expr>;</return>
    }</block></function>

    <comment type="line">// optional .signal.VideoStreamingStatus videoStreamingStatus = 3;</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>VIDEOSTREAMINGSTATUS_FIELD_NUMBER</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>VideoStreamingStatus</name></name></type> <name>videoStreamingStatus_</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional .signal.VideoStreamingStatus videoStreamingStatus = 3;&lt;/code&gt;
     */</comment>
    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasVideoStreamingStatus</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000004</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000004</literal><operator>)</operator></expr>;</return>
    }</block></function>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional .signal.VideoStreamingStatus videoStreamingStatus = 3;&lt;/code&gt;
     */</comment>
    <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>VideoStreamingStatus</name></name></type> <name>getVideoStreamingStatus</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>videoStreamingStatus_</name></expr>;</return>
    }</block></function>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional .signal.VideoStreamingStatus videoStreamingStatus = 3;&lt;/code&gt;
     */</comment>
    <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>VideoStreamingStatusOrBuilder</name></name></type> <name>getVideoStreamingStatusOrBuilder</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>videoStreamingStatus_</name></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>initFields</name><parameter_list>()</parameter_list> <block>{
      <expr_stmt><expr><name>connected_</name> <operator>=</operator> <call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Connected</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>hangup_</name> <operator>=</operator> <call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Hangup</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>videoStreamingStatus_</name> <operator>=</operator> <call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>VideoStreamingStatus</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <decl_stmt><decl><specifier>private</specifier> <type><name>byte</name></type> <name>memoizedIsInitialized</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <function><specifier>public</specifier> <specifier>final</specifier> <type><name>boolean</name></type> <name>isInitialized</name><parameter_list>()</parameter_list> <block>{
      <decl_stmt><decl><type><name>byte</name></type> <name>isInitialized</name> <init>= <expr><name>memoizedIsInitialized</name></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>isInitialized</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>isInitialized</name> <operator>==</operator> <literal type="number">1</literal></expr>;</return></block></then></if>

      <expr_stmt><expr><name>memoizedIsInitialized</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>writeTo</name><parameter_list>(<parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedOutputStream</name></name></type> <name>output</name></decl></parameter>)</parameter_list>
                        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
      <expr_stmt><expr><call><name>getSerializedSize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000001</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000001</literal><operator>)</operator></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>output</name><operator>.</operator><name>writeMessage</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>connected_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000002</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000002</literal><operator>)</operator></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>output</name><operator>.</operator><name>writeMessage</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>hangup_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000004</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000004</literal><operator>)</operator></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>output</name><operator>.</operator><name>writeMessage</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>videoStreamingStatus_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      <expr_stmt><expr><call><name>getUnknownFields</name><argument_list>()</argument_list></call><operator>.</operator><call><name>writeTo</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>memoizedSerializedSize</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <function><specifier>public</specifier> <type><name>int</name></type> <name>getSerializedSize</name><parameter_list>()</parameter_list> <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name>memoizedSerializedSize</name></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>size</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>size</name></expr>;</return></block></then></if>

      <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000001</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000001</literal><operator>)</operator></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedOutputStream</name>
          <operator>.</operator><name>computeMessageSize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>connected_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000002</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000002</literal><operator>)</operator></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedOutputStream</name>
          <operator>.</operator><name>computeMessageSize</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>hangup_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000004</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000004</literal><operator>)</operator></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedOutputStream</name>
          <operator>.</operator><name>computeMessageSize</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>videoStreamingStatus_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>getUnknownFields</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSerializedSize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>memoizedSerializedSize</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
      <return>return <expr><name>size</name></expr>;</return>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> <init>= <expr><literal type="number">0L</literal></expr></init></decl>;</decl_stmt>
    <function><annotation>@<name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Override</name></name></annotation>
    <specifier>protected</specifier> <type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Object</name></name></type> <name>writeReplace</name><parameter_list>()</parameter_list>
        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ObjectStreamException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>super</name><operator>.</operator><name>writeReplace</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Data</name></name></type> <name>parseFrom</name><parameter_list>(
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name></type> <name>data</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Data</name></name></type> <name>parseFrom</name><parameter_list>(
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name></type> <name>data</name></decl></parameter>,
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Data</name></name></type> <name>parseFrom</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Data</name></name></type> <name>parseFrom</name><parameter_list>(
        <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></parameter>,
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Data</name></name></type> <name>parseFrom</name><parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name></type> <name>input</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Data</name></name></type> <name>parseFrom</name><parameter_list>(
        <parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name></type> <name>input</name></decl></parameter>,
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Data</name></name></type> <name>parseDelimitedFrom</name><parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name></type> <name>input</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseDelimitedFrom</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Data</name></name></type> <name>parseDelimitedFrom</name><parameter_list>(
        <parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name></type> <name>input</name></decl></parameter>,
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseDelimitedFrom</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Data</name></name></type> <name>parseFrom</name><parameter_list>(
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedInputStream</name></name></type> <name>input</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Data</name></name></type> <name>parseFrom</name><parameter_list>(
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedInputStream</name></name></type> <name>input</name></decl></parameter>,
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Builder</name></type> <name>newBuilder</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name><name>Builder</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></function>
    <function><specifier>public</specifier> <type><name>Builder</name></type> <name>newBuilderForType</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>newBuilder</name><argument_list>()</argument_list></call></expr>;</return> }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Builder</name></type> <name>newBuilder</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Data</name></name></type> <name>prototype</name></decl></parameter>)</parameter_list> <block>{
      <return>return <expr><call><name>newBuilder</name><argument_list>()</argument_list></call><operator>.</operator><call><name>mergeFrom</name><argument_list>(<argument><expr><name>prototype</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <type><name>Builder</name></type> <name>toBuilder</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>newBuilder</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>

    <function><annotation>@<name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Override</name></name></annotation>
    <specifier>protected</specifier> <type><name>Builder</name></type> <name>newBuilderForType</name><parameter_list>(
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name>BuilderParent</name></name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{
      <decl_stmt><decl><type><name>Builder</name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name>Builder</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr><name>builder</name></expr>;</return>
    }</block></function>
    <comment type="block" format="javadoc">/**
     * Protobuf type {@code signal.Data}
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>Builder</name> <super><extends>extends
        <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name><name>Builder</name><argument_list type="generic">&lt;<argument><name>Builder</name></argument>&gt;</argument_list></name></name></extends>
       <implements>implements <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>DataOrBuilder</name></name></implements></super> <block>{
      <function><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>Descriptors</name><operator>.</operator><name>Descriptor</name></name></type>
          <name>getDescriptor</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>internal_static_signal_Data_descriptor</name></name></expr>;</return>
      }</block></function>

      <function><specifier>protected</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name>FieldAccessorTable</name></name></type>
          <name>internalGetFieldAccessorTable</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>internal_static_signal_Data_fieldAccessorTable</name>
            <operator>.</operator><name>ensureFieldAccessorsInitialized</name></name><argument_list>(
                <argument><expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Data</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Data</name><operator>.</operator><name>Builder</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</return>
      }</block></function>

      <comment type="line">// Construct using org.thoughtcrime.securesms.webrtc.WebRtcDataProtos.Data.newBuilder()</comment>
      <constructor><specifier>private</specifier> <name>Builder</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>maybeForceBuilderInitialization</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></constructor>

      <constructor><specifier>private</specifier> <name>Builder</name><parameter_list>(
          <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name>BuilderParent</name></name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>maybeForceBuilderInitialization</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></constructor>
      <function><specifier>private</specifier> <type><name>void</name></type> <name>maybeForceBuilderInitialization</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name>alwaysUseFieldBuilders</name></name></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name>getConnectedFieldBuilder</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>getHangupFieldBuilder</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>getVideoStreamingStatusFieldBuilder</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
      }</block></function>
      <function><specifier>private</specifier> <specifier>static</specifier> <type><name>Builder</name></type> <name>create</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><operator>new</operator> <call><name>Builder</name><argument_list>()</argument_list></call></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>connectedBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>connected_</name> <operator>=</operator> <call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Connected</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>connectedBuilder_</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name>bitField0_</name> <operator>=</operator> <operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x00000001</literal><operator>)</operator></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>hangupBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>hangup_</name> <operator>=</operator> <call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Hangup</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>hangupBuilder_</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name>bitField0_</name> <operator>=</operator> <operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x00000002</literal><operator>)</operator></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>videoStreamingStatusBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>videoStreamingStatus_</name> <operator>=</operator> <call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>VideoStreamingStatus</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>videoStreamingStatusBuilder_</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name>bitField0_</name> <operator>=</operator> <operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x00000004</literal><operator>)</operator></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>clone</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>create</name><argument_list>()</argument_list></call><operator>.</operator><call><name>mergeFrom</name><argument_list>(<argument><expr><call><name>buildPartial</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>Descriptors</name><operator>.</operator><name>Descriptor</name></name></type>
          <name>getDescriptorForType</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>internal_static_signal_Data_descriptor</name></name></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Data</name></name></type> <name>getDefaultInstanceForType</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Data</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Data</name></name></type> <name>build</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Data</name></name></type> <name>result</name> <init>= <expr><call><name>buildPartial</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><operator>!</operator><call><name><name>result</name><operator>.</operator><name>isInitialized</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
          <throw>throw <expr><call><name>newUninitializedMessageException</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Data</name></name></type> <name>buildPartial</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Data</name></name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Data</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>from_bitField0_</name> <init>= <expr><name>bitField0_</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>to_bitField0_</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>from_bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000001</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000001</literal><operator>)</operator></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>to_bitField0_</name> <operator>|=</operator> <literal type="number">0x00000001</literal></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>connectedBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><name><name>result</name><operator>.</operator><name>connected_</name></name> <operator>=</operator> <name>connected_</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><name><name>result</name><operator>.</operator><name>connected_</name></name> <operator>=</operator> <call><name><name>connectedBuilder_</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>from_bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000002</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000002</literal><operator>)</operator></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>to_bitField0_</name> <operator>|=</operator> <literal type="number">0x00000002</literal></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>hangupBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><name><name>result</name><operator>.</operator><name>hangup_</name></name> <operator>=</operator> <name>hangup_</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><name><name>result</name><operator>.</operator><name>hangup_</name></name> <operator>=</operator> <call><name><name>hangupBuilder_</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>from_bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000004</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000004</literal><operator>)</operator></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>to_bitField0_</name> <operator>|=</operator> <literal type="number">0x00000004</literal></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>videoStreamingStatusBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><name><name>result</name><operator>.</operator><name>videoStreamingStatus_</name></name> <operator>=</operator> <name>videoStreamingStatus_</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><name><name>result</name><operator>.</operator><name>videoStreamingStatus_</name></name> <operator>=</operator> <call><name><name>videoStreamingStatusBuilder_</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name><name>result</name><operator>.</operator><name>bitField0_</name></name> <operator>=</operator> <name>to_bitField0_</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>onBuilt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>mergeFrom</name><parameter_list>(<parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>Message</name></name></type> <name>other</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>other</name> <operator>instanceof</operator> <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Data</name></name></expr>)</condition><then> <block>{
          <return>return <expr><call><name>mergeFrom</name><argument_list>(<argument><expr><operator>(</operator><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Data</name></name><operator>)</operator><name>other</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>mergeFrom</name></name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>this</name></expr>;</return>
        }</block></else></if>
      }</block></function>

      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>mergeFrom</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Data</name></name></type> <name>other</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>other</name> <operator>==</operator> <call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Data</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>this</name></expr>;</return></block></then></if>
        <if>if <condition>(<expr><call><name><name>other</name><operator>.</operator><name>hasConnected</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name>mergeConnected</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>getConnected</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><call><name><name>other</name><operator>.</operator><name>hasHangup</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name>mergeHangup</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>getHangup</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><call><name><name>other</name><operator>.</operator><name>hasVideoStreamingStatus</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name>mergeVideoStreamingStatus</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>getVideoStreamingStatus</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>mergeUnknownFields</name></name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>getUnknownFields</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <specifier>final</specifier> <type><name>boolean</name></type> <name>isInitialized</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>mergeFrom</name><parameter_list>(
          <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedInputStream</name></name></type> <name>input</name></decl></parameter>,
          <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
          <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Data</name></name></type> <name>parsedMessage</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <try>try <block>{
          <expr_stmt><expr><name>parsedMessage</name> <operator>=</operator> <call><name><name>PARSER</name><operator>.</operator><name>parsePartialFrom</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
          <expr_stmt><expr><name>parsedMessage</name> <operator>=</operator> <operator>(</operator><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Data</name></name><operator>)</operator> <call><name><name>e</name><operator>.</operator><name>getUnfinishedMessage</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <throw>throw <expr><name>e</name></expr>;</throw>
        }</block></catch> <finally>finally <block>{
          <if>if <condition>(<expr><name>parsedMessage</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>mergeFrom</name><argument_list>(<argument><expr><name>parsedMessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></then></if>
        }</block></finally></try>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>
      <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>bitField0_</name></decl>;</decl_stmt>

      <comment type="line">// optional .signal.Connected connected = 1;</comment>
      <decl_stmt><decl><specifier>private</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Connected</name></name></type> <name>connected_</name> <init>= <expr><call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Connected</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><specifier>private</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name><name>SingleFieldBuilder</name><argument_list type="generic">&lt;
          <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Connected</name></name></argument>, <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Connected</name><operator>.</operator><name>Builder</name></name></argument>, <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>ConnectedOrBuilder</name></name></argument>&gt;</argument_list></name></name></type> <name>connectedBuilder_</name></decl>;</decl_stmt>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional .signal.Connected connected = 1;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasConnected</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000001</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000001</literal><operator>)</operator></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional .signal.Connected connected = 1;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Connected</name></name></type> <name>getConnected</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>connectedBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <return>return <expr><name>connected_</name></expr>;</return>
        }</block></then> <else>else <block>{
          <return>return <expr><call><name><name>connectedBuilder_</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></else></if>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional .signal.Connected connected = 1;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>setConnected</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Connected</name></name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>connectedBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <throw>throw <expr><operator>new</operator> <call><name>NullPointerException</name><argument_list>()</argument_list></call></expr>;</throw>
          }</block></then></if>
          <expr_stmt><expr><name>connected_</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>connectedBuilder_</name><operator>.</operator><name>setMessage</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000001</literal></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional .signal.Connected connected = 1;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>setConnected</name><parameter_list>(
          <parameter><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Connected</name><operator>.</operator><name>Builder</name></name></type> <name>builderForValue</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>connectedBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>connected_</name> <operator>=</operator> <call><name><name>builderForValue</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>connectedBuilder_</name><operator>.</operator><name>setMessage</name></name><argument_list>(<argument><expr><call><name><name>builderForValue</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000001</literal></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional .signal.Connected connected = 1;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>mergeConnected</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Connected</name></name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>connectedBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000001</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000001</literal><operator>)</operator> <operator>&amp;&amp;</operator>
              <name>connected_</name> <operator>!=</operator> <call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Connected</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>connected_</name> <operator>=</operator>
              <call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Connected</name><operator>.</operator><name>newBuilder</name></name><argument_list>(<argument><expr><name>connected_</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>mergeFrom</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>buildPartial</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          }</block></then> <else>else <block>{
            <expr_stmt><expr><name>connected_</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
          }</block></else></if>
          <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>connectedBuilder_</name><operator>.</operator><name>mergeFrom</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000001</literal></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional .signal.Connected connected = 1;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>clearConnected</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>connectedBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>connected_</name> <operator>=</operator> <call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Connected</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>connectedBuilder_</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name>bitField0_</name> <operator>=</operator> <operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x00000001</literal><operator>)</operator></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional .signal.Connected connected = 1;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Connected</name><operator>.</operator><name>Builder</name></name></type> <name>getConnectedBuilder</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000001</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>getConnectedFieldBuilder</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBuilder</name><argument_list>()</argument_list></call></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional .signal.Connected connected = 1;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>ConnectedOrBuilder</name></name></type> <name>getConnectedOrBuilder</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>connectedBuilder_</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <return>return <expr><call><name><name>connectedBuilder_</name><operator>.</operator><name>getMessageOrBuilder</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then> <else>else <block>{
          <return>return <expr><name>connected_</name></expr>;</return>
        }</block></else></if>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional .signal.Connected connected = 1;&lt;/code&gt;
       */</comment>
      <function><specifier>private</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name><name>SingleFieldBuilder</name><argument_list type="generic">&lt;
          <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Connected</name></name></argument>, <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Connected</name><operator>.</operator><name>Builder</name></name></argument>, <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>ConnectedOrBuilder</name></name></argument>&gt;</argument_list></name></name></type> 
          <name>getConnectedFieldBuilder</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>connectedBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>connectedBuilder_</name> <operator>=</operator> <operator>new</operator> <call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name><name>SingleFieldBuilder</name><argument_list type="generic">&lt;
              <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Connected</name></name></argument>, <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Connected</name><operator>.</operator><name>Builder</name></name></argument>, <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>ConnectedOrBuilder</name></name></argument>&gt;</argument_list></name></name><argument_list>(
                  <argument><expr><name>connected_</name></expr></argument>,
                  <argument><expr><call><name>getParentForChildren</name><argument_list>()</argument_list></call></expr></argument>,
                  <argument><expr><call><name>isClean</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>connected_</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>connectedBuilder_</name></expr>;</return>
      }</block></function>

      <comment type="line">// optional .signal.Hangup hangup = 2;</comment>
      <decl_stmt><decl><specifier>private</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Hangup</name></name></type> <name>hangup_</name> <init>= <expr><call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Hangup</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><specifier>private</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name><name>SingleFieldBuilder</name><argument_list type="generic">&lt;
          <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Hangup</name></name></argument>, <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Hangup</name><operator>.</operator><name>Builder</name></name></argument>, <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>HangupOrBuilder</name></name></argument>&gt;</argument_list></name></name></type> <name>hangupBuilder_</name></decl>;</decl_stmt>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional .signal.Hangup hangup = 2;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasHangup</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000002</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000002</literal><operator>)</operator></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional .signal.Hangup hangup = 2;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Hangup</name></name></type> <name>getHangup</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>hangupBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <return>return <expr><name>hangup_</name></expr>;</return>
        }</block></then> <else>else <block>{
          <return>return <expr><call><name><name>hangupBuilder_</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></else></if>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional .signal.Hangup hangup = 2;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>setHangup</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Hangup</name></name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>hangupBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <throw>throw <expr><operator>new</operator> <call><name>NullPointerException</name><argument_list>()</argument_list></call></expr>;</throw>
          }</block></then></if>
          <expr_stmt><expr><name>hangup_</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>hangupBuilder_</name><operator>.</operator><name>setMessage</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000002</literal></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional .signal.Hangup hangup = 2;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>setHangup</name><parameter_list>(
          <parameter><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Hangup</name><operator>.</operator><name>Builder</name></name></type> <name>builderForValue</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>hangupBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>hangup_</name> <operator>=</operator> <call><name><name>builderForValue</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>hangupBuilder_</name><operator>.</operator><name>setMessage</name></name><argument_list>(<argument><expr><call><name><name>builderForValue</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000002</literal></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional .signal.Hangup hangup = 2;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>mergeHangup</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Hangup</name></name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>hangupBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000002</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000002</literal><operator>)</operator> <operator>&amp;&amp;</operator>
              <name>hangup_</name> <operator>!=</operator> <call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Hangup</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>hangup_</name> <operator>=</operator>
              <call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Hangup</name><operator>.</operator><name>newBuilder</name></name><argument_list>(<argument><expr><name>hangup_</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>mergeFrom</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>buildPartial</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          }</block></then> <else>else <block>{
            <expr_stmt><expr><name>hangup_</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
          }</block></else></if>
          <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>hangupBuilder_</name><operator>.</operator><name>mergeFrom</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000002</literal></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional .signal.Hangup hangup = 2;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>clearHangup</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>hangupBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>hangup_</name> <operator>=</operator> <call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Hangup</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>hangupBuilder_</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name>bitField0_</name> <operator>=</operator> <operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x00000002</literal><operator>)</operator></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional .signal.Hangup hangup = 2;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Hangup</name><operator>.</operator><name>Builder</name></name></type> <name>getHangupBuilder</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000002</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>getHangupFieldBuilder</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBuilder</name><argument_list>()</argument_list></call></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional .signal.Hangup hangup = 2;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>HangupOrBuilder</name></name></type> <name>getHangupOrBuilder</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>hangupBuilder_</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <return>return <expr><call><name><name>hangupBuilder_</name><operator>.</operator><name>getMessageOrBuilder</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then> <else>else <block>{
          <return>return <expr><name>hangup_</name></expr>;</return>
        }</block></else></if>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional .signal.Hangup hangup = 2;&lt;/code&gt;
       */</comment>
      <function><specifier>private</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name><name>SingleFieldBuilder</name><argument_list type="generic">&lt;
          <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Hangup</name></name></argument>, <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Hangup</name><operator>.</operator><name>Builder</name></name></argument>, <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>HangupOrBuilder</name></name></argument>&gt;</argument_list></name></name></type> 
          <name>getHangupFieldBuilder</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>hangupBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>hangupBuilder_</name> <operator>=</operator> <operator>new</operator> <call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name><name>SingleFieldBuilder</name><argument_list type="generic">&lt;
              <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Hangup</name></name></argument>, <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Hangup</name><operator>.</operator><name>Builder</name></name></argument>, <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>HangupOrBuilder</name></name></argument>&gt;</argument_list></name></name><argument_list>(
                  <argument><expr><name>hangup_</name></expr></argument>,
                  <argument><expr><call><name>getParentForChildren</name><argument_list>()</argument_list></call></expr></argument>,
                  <argument><expr><call><name>isClean</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>hangup_</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>hangupBuilder_</name></expr>;</return>
      }</block></function>

      <comment type="line">// optional .signal.VideoStreamingStatus videoStreamingStatus = 3;</comment>
      <decl_stmt><decl><specifier>private</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>VideoStreamingStatus</name></name></type> <name>videoStreamingStatus_</name> <init>= <expr><call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>VideoStreamingStatus</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><specifier>private</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name><name>SingleFieldBuilder</name><argument_list type="generic">&lt;
          <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>VideoStreamingStatus</name></name></argument>, <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>VideoStreamingStatus</name><operator>.</operator><name>Builder</name></name></argument>, <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>VideoStreamingStatusOrBuilder</name></name></argument>&gt;</argument_list></name></name></type> <name>videoStreamingStatusBuilder_</name></decl>;</decl_stmt>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional .signal.VideoStreamingStatus videoStreamingStatus = 3;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasVideoStreamingStatus</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000004</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000004</literal><operator>)</operator></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional .signal.VideoStreamingStatus videoStreamingStatus = 3;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>VideoStreamingStatus</name></name></type> <name>getVideoStreamingStatus</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>videoStreamingStatusBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <return>return <expr><name>videoStreamingStatus_</name></expr>;</return>
        }</block></then> <else>else <block>{
          <return>return <expr><call><name><name>videoStreamingStatusBuilder_</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></else></if>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional .signal.VideoStreamingStatus videoStreamingStatus = 3;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>setVideoStreamingStatus</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>VideoStreamingStatus</name></name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>videoStreamingStatusBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <throw>throw <expr><operator>new</operator> <call><name>NullPointerException</name><argument_list>()</argument_list></call></expr>;</throw>
          }</block></then></if>
          <expr_stmt><expr><name>videoStreamingStatus_</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>videoStreamingStatusBuilder_</name><operator>.</operator><name>setMessage</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000004</literal></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional .signal.VideoStreamingStatus videoStreamingStatus = 3;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>setVideoStreamingStatus</name><parameter_list>(
          <parameter><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>VideoStreamingStatus</name><operator>.</operator><name>Builder</name></name></type> <name>builderForValue</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>videoStreamingStatusBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>videoStreamingStatus_</name> <operator>=</operator> <call><name><name>builderForValue</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>videoStreamingStatusBuilder_</name><operator>.</operator><name>setMessage</name></name><argument_list>(<argument><expr><call><name><name>builderForValue</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000004</literal></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional .signal.VideoStreamingStatus videoStreamingStatus = 3;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>mergeVideoStreamingStatus</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>VideoStreamingStatus</name></name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>videoStreamingStatusBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000004</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000004</literal><operator>)</operator> <operator>&amp;&amp;</operator>
              <name>videoStreamingStatus_</name> <operator>!=</operator> <call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>VideoStreamingStatus</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>videoStreamingStatus_</name> <operator>=</operator>
              <call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>VideoStreamingStatus</name><operator>.</operator><name>newBuilder</name></name><argument_list>(<argument><expr><name>videoStreamingStatus_</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>mergeFrom</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>buildPartial</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          }</block></then> <else>else <block>{
            <expr_stmt><expr><name>videoStreamingStatus_</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
          }</block></else></if>
          <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>videoStreamingStatusBuilder_</name><operator>.</operator><name>mergeFrom</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000004</literal></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional .signal.VideoStreamingStatus videoStreamingStatus = 3;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>clearVideoStreamingStatus</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>videoStreamingStatusBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>videoStreamingStatus_</name> <operator>=</operator> <call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>VideoStreamingStatus</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>videoStreamingStatusBuilder_</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name>bitField0_</name> <operator>=</operator> <operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x00000004</literal><operator>)</operator></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional .signal.VideoStreamingStatus videoStreamingStatus = 3;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>VideoStreamingStatus</name><operator>.</operator><name>Builder</name></name></type> <name>getVideoStreamingStatusBuilder</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000004</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>getVideoStreamingStatusFieldBuilder</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBuilder</name><argument_list>()</argument_list></call></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional .signal.VideoStreamingStatus videoStreamingStatus = 3;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>VideoStreamingStatusOrBuilder</name></name></type> <name>getVideoStreamingStatusOrBuilder</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>videoStreamingStatusBuilder_</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <return>return <expr><call><name><name>videoStreamingStatusBuilder_</name><operator>.</operator><name>getMessageOrBuilder</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then> <else>else <block>{
          <return>return <expr><name>videoStreamingStatus_</name></expr>;</return>
        }</block></else></if>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional .signal.VideoStreamingStatus videoStreamingStatus = 3;&lt;/code&gt;
       */</comment>
      <function><specifier>private</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name><name>SingleFieldBuilder</name><argument_list type="generic">&lt;
          <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>VideoStreamingStatus</name></name></argument>, <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>VideoStreamingStatus</name><operator>.</operator><name>Builder</name></name></argument>, <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>VideoStreamingStatusOrBuilder</name></name></argument>&gt;</argument_list></name></name></type> 
          <name>getVideoStreamingStatusFieldBuilder</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>videoStreamingStatusBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>videoStreamingStatusBuilder_</name> <operator>=</operator> <operator>new</operator> <call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name><name>SingleFieldBuilder</name><argument_list type="generic">&lt;
              <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>VideoStreamingStatus</name></name></argument>, <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>VideoStreamingStatus</name><operator>.</operator><name>Builder</name></name></argument>, <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>VideoStreamingStatusOrBuilder</name></name></argument>&gt;</argument_list></name></name><argument_list>(
                  <argument><expr><name>videoStreamingStatus_</name></expr></argument>,
                  <argument><expr><call><name>getParentForChildren</name><argument_list>()</argument_list></call></expr></argument>,
                  <argument><expr><call><name>isClean</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>videoStreamingStatus_</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>videoStreamingStatusBuilder_</name></expr>;</return>
      }</block></function>

      <comment type="line">// @@protoc_insertion_point(builder_scope:signal.Data)</comment>
    }</block></class>

    <static>static <block>{
      <expr_stmt><expr><name>defaultInstance</name> <operator>=</operator> <operator>new</operator> <call><name>Data</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>defaultInstance</name><operator>.</operator><name>initFields</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></static>

    <comment type="line">// @@protoc_insertion_point(class_scope:signal.Data)</comment>
  }</block></class>

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>Descriptors</name><operator>.</operator><name>Descriptor</name></name></type>
    <name>internal_static_signal_Connected_descriptor</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier>
    <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name>FieldAccessorTable</name></name></type>
      <name>internal_static_signal_Connected_fieldAccessorTable</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>Descriptors</name><operator>.</operator><name>Descriptor</name></name></type>
    <name>internal_static_signal_Hangup_descriptor</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier>
    <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name>FieldAccessorTable</name></name></type>
      <name>internal_static_signal_Hangup_fieldAccessorTable</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>Descriptors</name><operator>.</operator><name>Descriptor</name></name></type>
    <name>internal_static_signal_VideoStreamingStatus_descriptor</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier>
    <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name>FieldAccessorTable</name></name></type>
      <name>internal_static_signal_VideoStreamingStatus_fieldAccessorTable</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>Descriptors</name><operator>.</operator><name>Descriptor</name></name></type>
    <name>internal_static_signal_Data_descriptor</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier>
    <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name>FieldAccessorTable</name></name></type>
      <name>internal_static_signal_Data_fieldAccessorTable</name></decl>;</decl_stmt>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>Descriptors</name><operator>.</operator><name>FileDescriptor</name></name></type>
      <name>getDescriptor</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>descriptor</name></expr>;</return>
  }</block></function>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>Descriptors</name><operator>.</operator><name>FileDescriptor</name></name></type>
      <name>descriptor</name></decl>;</decl_stmt>
  <static>static <block>{
    <decl_stmt><decl><type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name><index>[]</index></name></type> <name>descriptorData</name> <init>= <expr><block>{
      <expr><literal type="string">"\n\020WebRtcData.proto\022\006signal\"\027\n\tConnected\022"</literal> <operator>+</operator>
      <literal type="string">"\n\n\002id\030\001 \001(\004\"\024\n\006Hangup\022\n\n\002id\030\001 \001(\004\"3\n\024Vid"</literal> <operator>+</operator>
      <literal type="string">"eoStreamingStatus\022\n\n\002id\030\001 \001(\004\022\017\n\007enabled"</literal> <operator>+</operator>
      <literal type="string">"\030\002 \001(\010\"\210\001\n\004Data\022$\n\tconnected\030\001 \001(\0132\021.sig"</literal> <operator>+</operator>
      <literal type="string">"nal.Connected\022\036\n\006hangup\030\002 \001(\0132\016.signal.H"</literal> <operator>+</operator>
      <literal type="string">"angup\022:\n\024videoStreamingStatus\030\003 \001(\0132\034.si"</literal> <operator>+</operator>
      <literal type="string">"gnal.VideoStreamingStatusB5\n!org.thought"</literal> <operator>+</operator>
      <literal type="string">"crime.securesms.webrtcB\020WebRtcDataProtos"</literal></expr>
    }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>Descriptors</name><operator>.</operator><name>FileDescriptor</name><operator>.</operator><name>InternalDescriptorAssigner</name></name></type> <name>assigner</name> <init>=
      <expr><operator>new</operator> <class><super><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>Descriptors</name><operator>.</operator><name>FileDescriptor</name><operator>.</operator><name>InternalDescriptorAssigner</name></name></super><argument_list>()</argument_list> <block>{
        <function><specifier>public</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistry</name></name></type> <name>assignDescriptors</name><parameter_list>(
            <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>Descriptors</name><operator>.</operator><name>FileDescriptor</name></name></type> <name>root</name></decl></parameter>)</parameter_list> <block>{
          <expr_stmt><expr><name>descriptor</name> <operator>=</operator> <name>root</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>internal_static_signal_Connected_descriptor</name> <operator>=</operator>
            <call><name>getDescriptor</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMessageTypes</name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>internal_static_signal_Connected_fieldAccessorTable</name> <operator>=</operator> <operator>new</operator>
            <call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name>FieldAccessorTable</name></name><argument_list>(
              <argument><expr><name>internal_static_signal_Connected_descriptor</name></expr></argument>,
              <argument><expr><operator>new</operator> <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name><index>[]</index></name> <block>{ <expr><literal type="string">"Id"</literal></expr>, }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>internal_static_signal_Hangup_descriptor</name> <operator>=</operator>
            <call><name>getDescriptor</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMessageTypes</name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>internal_static_signal_Hangup_fieldAccessorTable</name> <operator>=</operator> <operator>new</operator>
            <call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name>FieldAccessorTable</name></name><argument_list>(
              <argument><expr><name>internal_static_signal_Hangup_descriptor</name></expr></argument>,
              <argument><expr><operator>new</operator> <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name><index>[]</index></name> <block>{ <expr><literal type="string">"Id"</literal></expr>, }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>internal_static_signal_VideoStreamingStatus_descriptor</name> <operator>=</operator>
            <call><name>getDescriptor</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMessageTypes</name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>internal_static_signal_VideoStreamingStatus_fieldAccessorTable</name> <operator>=</operator> <operator>new</operator>
            <call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name>FieldAccessorTable</name></name><argument_list>(
              <argument><expr><name>internal_static_signal_VideoStreamingStatus_descriptor</name></expr></argument>,
              <argument><expr><operator>new</operator> <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name><index>[]</index></name> <block>{ <expr><literal type="string">"Id"</literal></expr>, <expr><literal type="string">"Enabled"</literal></expr>, }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>internal_static_signal_Data_descriptor</name> <operator>=</operator>
            <call><name>getDescriptor</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMessageTypes</name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>internal_static_signal_Data_fieldAccessorTable</name> <operator>=</operator> <operator>new</operator>
            <call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name>FieldAccessorTable</name></name><argument_list>(
              <argument><expr><name>internal_static_signal_Data_descriptor</name></expr></argument>,
              <argument><expr><operator>new</operator> <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name><index>[]</index></name> <block>{ <expr><literal type="string">"Connected"</literal></expr>, <expr><literal type="string">"Hangup"</literal></expr>, <expr><literal type="string">"VideoStreamingStatus"</literal></expr>, }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><literal type="null">null</literal></expr>;</return>
        }</block></function>
      }</block></class></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>Descriptors</name><operator>.</operator><name>FileDescriptor</name>
      <operator>.</operator><name>internalBuildGeneratedFileFrom</name></name><argument_list>(<argument><expr><name>descriptorData</name></expr></argument>,
        <argument><expr><operator>new</operator> <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>Descriptors</name><operator>.</operator><name>FileDescriptor</name><index>[]</index></name> <block>{
        }</block></expr></argument>, <argument><expr><name>assigner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></static>

  <comment type="line">// @@protoc_insertion_point(outer_class_scope)</comment>
}</block></class>
</unit>
