<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\webrtc\UncaughtExceptionHandlerManager.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>logging</name><operator>.</operator><name>Log</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Allows multiple default uncaught exception handlers to be registered
 *
 * Calls all registered handlers in reverse order of registration.
 * Errors in one handler do not prevent subsequent handlers from being called.
 */</comment>
<class><specifier>public</specifier> class <name>UncaughtExceptionHandlerManager</name> <super><implements>implements <name><name>Thread</name><operator>.</operator><name>UncaughtExceptionHandler</name></name></implements></super> <block>{
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>Thread</name><operator>.</operator><name>UncaughtExceptionHandler</name></name></type> <name>originalHandler</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name><name>Thread</name><operator>.</operator><name>UncaughtExceptionHandler</name></name></argument>&gt;</argument_list></name></type> <name>handlers</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>Thread</name><operator>.</operator><name>UncaughtExceptionHandler</name></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>UncaughtExceptionHandlerManager</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><name>originalHandler</name> <operator>=</operator> <call><name><name>Thread</name><operator>.</operator><name>getDefaultUncaughtExceptionHandler</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>registerHandler</name><argument_list>(<argument><expr><name>originalHandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Thread</name><operator>.</operator><name>setDefaultUncaughtExceptionHandler</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>registerHandler</name><parameter_list>(<parameter><decl><type><name><name>Thread</name><operator>.</operator><name>UncaughtExceptionHandler</name></name></type> <name>handler</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>handlers</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>unregister</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>Thread</name><operator>.</operator><name>setDefaultUncaughtExceptionHandler</name></name><argument_list>(<argument><expr><name>originalHandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>uncaughtException</name><parameter_list>(<parameter><decl><type><name>Thread</name></type> <name>thread</name></decl></parameter>, <parameter><decl><type><name>Throwable</name></type> <name>throwable</name></decl></parameter>)</parameter_list> <block>{
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name><name>handlers</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{
      <try>try <block>{
        <expr_stmt><expr><call><name><name>handlers</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>uncaughtException</name><argument_list>(<argument><expr><name>thread</name></expr></argument>, <argument><expr><name>throwable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block> <catch>catch<parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>t</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><literal type="string">"UncaughtExceptionHandlerManager"</literal></expr></argument>, <argument><expr><literal type="string">"Error in uncaught exception handling"</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></catch></try>
    }</block></for>
  }</block></function>
}</block></class>
</unit>
