<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\net\CallRequestController.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>net</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>AsyncTask</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>WorkerThread</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>Util</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>util</name><operator>.</operator><name>guava</name><operator>.</operator><name>Optional</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>

<import>import <name><name>okhttp3</name><operator>.</operator><name>Call</name></name>;</import>

<class><specifier>public</specifier> class <name>CallRequestController</name> <super><implements>implements <name>RequestController</name></implements></super> <block>{

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Call</name></type> <name>call</name></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><name>InputStream</name></type>  <name>stream</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type>      <name>canceled</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>CallRequestController</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Call</name></type> <name>call</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>call</name></name> <operator>=</operator> <name>call</name></expr>;</expr_stmt>
  }</block></constructor>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>cancel</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>AsyncTask</name><operator>.</operator><name>THREAD_POOL_EXECUTOR</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{
      <synchronized>synchronized <init>(<expr><name><name>CallRequestController</name><operator>.</operator><name>this</name></name></expr>)</init> <block>{
        <if>if <condition>(<expr><name>canceled</name></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then></if>
        
        <expr_stmt><expr><call><name><name>call</name><operator>.</operator><name>cancel</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>stream</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name><name>Util</name><operator>.</operator><name>close</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><name>canceled</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
      }</block></synchronized>
    }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>synchronized</specifier> <type><name>void</name></type> <name>setStream</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>InputStream</name></type> <name>stream</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>canceled</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>Util</name><operator>.</operator><name>close</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>stream</name></name> <operator>=</operator> <name>stream</name></expr>;</expr_stmt>
    }</block></else></if>
    <expr_stmt><expr><call><name>notifyAll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Blocks until the stream is available or until the request is canceled.
   */</comment>
  <function><annotation>@<name>WorkerThread</name></annotation>
  <specifier>public</specifier> <specifier>synchronized</specifier> <type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>InputStream</name></argument>&gt;</argument_list></name></type> <name>getStream</name><parameter_list>()</parameter_list> <block>{
    <while>while<condition>(<expr><name>stream</name> <operator>==</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>canceled</name></expr>)</condition> <block>{
      <expr_stmt><expr><call><name><name>Util</name><operator>.</operator><name>wait</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></while>

    <return>return <expr><call><name><name>Optional</name><operator>.</operator><name>fromNullable</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>
}</block></class>
</unit>
