<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\MediaGalleryAdapter.java"><comment type="block">/*
 * Copyright (C) 2015 Open Whisper Systems
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>codewaves</name><operator>.</operator><name>stickyheadergrid</name><operator>.</operator><name>StickyHeaderGridAdapter</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>components</name><operator>.</operator><name>ThumbnailView</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>MediaDatabase</name><operator>.</operator><name>MediaRecord</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>loaders</name><operator>.</operator><name>BucketedThreadMediaLoader</name><operator>.</operator><name>BucketedThreadMedia</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mms</name><operator>.</operator><name>GlideRequests</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mms</name><operator>.</operator><name>Slide</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>MediaUtil</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Locale</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<class>class <name>MediaGalleryAdapter</name> <super><extends>extends <name>StickyHeaderGridAdapter</name></extends></super> <block>{

  <decl_stmt><decl><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unused"</literal></expr></argument>)</argument_list></annotation>
  <specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>MediaGalleryAdapter</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Context</name></type>             <name>context</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>GlideRequests</name></type>       <name>glideRequests</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Locale</name></type>              <name>locale</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>ItemClickListener</name></type>   <name>itemClickListener</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>MediaRecord</name></argument>&gt;</argument_list></name></type>    <name>selected</name></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier>  <type><name>BucketedThreadMedia</name></type> <name>media</name></decl>;</decl_stmt>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>ViewHolder</name> <super><extends>extends <name><name>StickyHeaderGridAdapter</name><operator>.</operator><name>ItemViewHolder</name></name></extends></super> <block>{
    <decl_stmt><decl><type><name>ThumbnailView</name></type> <name>imageView</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>View</name></type>          <name>selectedIndicator</name></decl>;</decl_stmt>

    <constructor><name>ViewHolder</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>imageView</name>         <operator>=</operator> <call><name><name>v</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>image</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>selectedIndicator</name> <operator>=</operator> <call><name><name>v</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>selected_indicator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
  }</block></class>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>HeaderHolder</name> <super><extends>extends <name><name>StickyHeaderGridAdapter</name><operator>.</operator><name>HeaderViewHolder</name></name></extends></super> <block>{
    <decl_stmt><decl><type><name>TextView</name></type> <name>textView</name></decl>;</decl_stmt>

    <constructor><name>HeaderHolder</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>itemView</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>itemView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>textView</name> <operator>=</operator> <call><name><name>itemView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
  }</block></class>

  <constructor><name>MediaGalleryAdapter</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>,
                      <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>GlideRequests</name></type> <name>glideRequests</name></decl></parameter>,
                      <parameter><decl><type><name>BucketedThreadMedia</name></type> <name>media</name></decl></parameter>,
                      <parameter><decl><type><name>Locale</name></type> <name>locale</name></decl></parameter>,
                      <parameter><decl><type><name>ItemClickListener</name></type> <name>clickListener</name></decl></parameter>)</parameter_list>
  <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>context</name></name>           <operator>=</operator> <name>context</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>glideRequests</name></name>     <operator>=</operator> <name>glideRequests</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>locale</name></name>            <operator>=</operator> <name>locale</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>media</name></name>             <operator>=</operator> <name>media</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>itemClickListener</name></name> <operator>=</operator> <name>clickListener</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>selected</name></name>          <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>setMedia</name><parameter_list>(<parameter><decl><type><name>BucketedThreadMedia</name></type> <name>media</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>media</name></name> <operator>=</operator> <name>media</name></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name><name>StickyHeaderGridAdapter</name><operator>.</operator><name>HeaderViewHolder</name></name></type> <name>onCreateHeaderViewHolder</name><parameter_list>(<parameter><decl><type><name>ViewGroup</name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>headerType</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><operator>new</operator> <call><name>HeaderHolder</name><argument_list>(<argument><expr><call><name><name>LayoutInflater</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>inflate</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>media_overview_gallery_item_header</name></name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>ItemViewHolder</name></type> <name>onCreateItemViewHolder</name><parameter_list>(<parameter><decl><type><name>ViewGroup</name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>itemType</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><operator>new</operator> <call><name>ViewHolder</name><argument_list>(<argument><expr><call><name><name>LayoutInflater</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>inflate</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>media_overview_gallery_item</name></name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onBindHeaderViewHolder</name><parameter_list>(<parameter><decl><type><name><name>StickyHeaderGridAdapter</name><operator>.</operator><name>HeaderViewHolder</name></name></type> <name>viewHolder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>section</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>HeaderHolder</name><operator>)</operator><name>viewHolder</name><operator>)</operator><operator>.</operator><call><name><name>textView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>media</name><operator>.</operator><name>getName</name></name><argument_list>(<argument><expr><name>section</name></expr></argument>, <argument><expr><name>locale</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onBindItemViewHolder</name><parameter_list>(<parameter><decl><type><name>ItemViewHolder</name></type> <name>viewHolder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>section</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>MediaRecord</name></type>   <name>mediaRecord</name>       <init>= <expr><call><name><name>media</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>section</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ThumbnailView</name></type> <name>thumbnailView</name>     <init>= <expr><operator>(</operator><operator>(</operator><name>ViewHolder</name><operator>)</operator><name>viewHolder</name><operator>)</operator><operator>.</operator><name>imageView</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>View</name></type>          <name>selectedIndicator</name> <init>= <expr><operator>(</operator><operator>(</operator><name>ViewHolder</name><operator>)</operator><name>viewHolder</name><operator>)</operator><operator>.</operator><name>selectedIndicator</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Slide</name></type>         <name>slide</name>             <init>= <expr><call><name><name>MediaUtil</name><operator>.</operator><name>getSlideForAttachment</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>mediaRecord</name><operator>.</operator><name>getAttachment</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>slide</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>thumbnailView</name><operator>.</operator><name>setImageResource</name></name><argument_list>(<argument><expr><name>glideRequests</name></expr></argument>, <argument><expr><name>slide</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><call><name><name>thumbnailView</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>view</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>itemClickListener</name><operator>.</operator><name>onMediaClicked</name></name><argument_list>(<argument><expr><name>mediaRecord</name></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>thumbnailView</name><operator>.</operator><name>setOnLongClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>view</name></decl></parameter></parameter_list> -&gt; <block>{
      <expr_stmt><expr><call><name><name>itemClickListener</name><operator>.</operator><name>onMediaLongClicked</name></name><argument_list>(<argument><expr><name>mediaRecord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>selectedIndicator</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><ternary><condition><expr><call><name><name>selected</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>mediaRecord</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr> </then><else>: <expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>int</name></type> <name>getSectionCount</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name><name>media</name><operator>.</operator><name>getSectionCount</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>int</name></type> <name>getSectionItemCount</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>section</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>media</name><operator>.</operator><name>getSectionItemCount</name></name><argument_list>(<argument><expr><name>section</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>toggleSelection</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>MediaRecord</name></type> <name>mediaRecord</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><operator>!</operator><call><name><name>selected</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>mediaRecord</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>selected</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>mediaRecord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><call><name>notifyDataSetChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>int</name></type> <name>getSelectedMediaCount</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name><name>selected</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>NonNull</name></annotation>
  <specifier>public</specifier> <type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>MediaRecord</name></argument>&gt;</argument_list></name></type> <name>getSelectedMedia</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>selected</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>clearSelection</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>selected</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>notifyDataSetChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><type><name>void</name></type> <name>selectAllMedia</name><parameter_list>()</parameter_list> <block>{
    <for>for <control>(<init><decl><type><name>int</name></type> <name>section</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>section</name> <operator>&lt;</operator> <call><name><name>media</name><operator>.</operator><name>getSectionCount</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>section</name><operator>++</operator></expr></incr>)</control> <block>{
      <for>for <control>(<init><decl><type><name>int</name></type> <name>item</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>item</name> <operator>&lt;</operator> <call><name><name>media</name><operator>.</operator><name>getSectionItemCount</name></name><argument_list>(<argument><expr><name>section</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>item</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><call><name><name>selected</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>media</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>section</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></for>
    }</block></for>
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>notifyDataSetChanged</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <interface>interface <name>ItemClickListener</name> <block>{
    <function_decl><type><name>void</name></type> <name>onMediaClicked</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>MediaRecord</name></type> <name>mediaRecord</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>onMediaLongClicked</name><parameter_list>(<parameter><decl><type><name>MediaRecord</name></type> <name>mediaRecord</name></decl></parameter>)</parameter_list>;</function_decl>
  }</block></interface>
}</block></class>
</unit>
