<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\groups\GroupManager.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>groups</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Bitmap</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>attachments</name><operator>.</operator><name>Attachment</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>attachments</name><operator>.</operator><name>UriAttachment</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>Address</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>AttachmentDatabase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>DatabaseFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>GroupDatabase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>ThreadDatabase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mms</name><operator>.</operator><name>OutgoingGroupMediaMessage</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>providers</name><operator>.</operator><name>MemoryBlobProvider</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>recipients</name><operator>.</operator><name>Recipient</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>sms</name><operator>.</operator><name>MessageSender</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>BitmapUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>GroupUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>MediaUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>TextSecurePreferences</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>signalservice</name><operator>.</operator><name>api</name><operator>.</operator><name>util</name><operator>.</operator><name>InvalidNumberException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>signalservice</name><operator>.</operator><name>internal</name><operator>.</operator><name>push</name><operator>.</operator><name>SignalServiceProtos</name><operator>.</operator><name>GroupContext</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<class><specifier>public</specifier> class <name>GroupManager</name> <block>{

  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>GroupActionResult</name></type> <name>createGroup</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation>  <name>Context</name></type>        <name>context</name></decl></parameter>,
                                                       <parameter><decl><type><annotation>@<name>NonNull</name></annotation>  <name><name>Set</name><argument_list type="generic">&lt;<argument><name>Recipient</name></argument>&gt;</argument_list></name></type> <name>members</name></decl></parameter>,
                                                       <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Bitmap</name></type>         <name>avatar</name></decl></parameter>,
                                                       <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>String</name></type>         <name>name</name></decl></parameter>,
                                                                 <parameter><decl><type><name>boolean</name></type>        <name>mms</name></decl></parameter>)</parameter_list>
  <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type>        <name>avatarBytes</name>     <init>= <expr><call><name><name>BitmapUtil</name><operator>.</operator><name>toByteArray</name></name><argument_list>(<argument><expr><name>avatar</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>GroupDatabase</name></type> <name>groupDatabase</name>   <init>= <expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getGroupDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type>        <name>groupId</name>         <init>= <expr><call><name><name>GroupUtil</name><operator>.</operator><name>getEncodedId</name></name><argument_list>(<argument><expr><call><name><name>groupDatabase</name><operator>.</operator><name>allocateGroupId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>mms</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>Recipient</name></type>     <name>groupRecipient</name>  <init>= <expr><call><name><name>Recipient</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>Address</name><operator>.</operator><name>fromSerialized</name></name><argument_list>(<argument><expr><name>groupId</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>Address</name></argument>&gt;</argument_list></name></type>  <name>memberAddresses</name> <init>= <expr><call><name>getMemberAddresses</name><argument_list>(<argument><expr><name>members</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>memberAddresses</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>Address</name><operator>.</operator><name>fromSerialized</name></name><argument_list>(<argument><expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>getLocalNumber</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>groupDatabase</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>groupId</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>memberAddresses</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><operator>!</operator><name>mms</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>groupDatabase</name><operator>.</operator><name>updateAvatar</name></name><argument_list>(<argument><expr><name>groupId</name></expr></argument>, <argument><expr><name>avatarBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getRecipientDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setProfileSharing</name><argument_list>(<argument><expr><name>groupRecipient</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><call><name>sendGroupUpdate</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>groupId</name></expr></argument>, <argument><expr><name>memberAddresses</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>avatarBytes</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then> <else>else <block>{
      <decl_stmt><decl><type><name>long</name></type> <name>threadId</name> <init>= <expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getThreadDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getThreadIdFor</name><argument_list>(<argument><expr><name>groupRecipient</name></expr></argument>, <argument><expr><name><name>ThreadDatabase</name><operator>.</operator><name>DistributionTypes</name><operator>.</operator><name>CONVERSATION</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr><operator>new</operator> <call><name>GroupActionResult</name><argument_list>(<argument><expr><name>groupRecipient</name></expr></argument>, <argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></else></if>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>GroupActionResult</name></type> <name>updateGroup</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation>  <name>Context</name></type>        <name>context</name></decl></parameter>,
                                              <parameter><decl><type><annotation>@<name>NonNull</name></annotation>  <name>String</name></type>         <name>groupId</name></decl></parameter>,
                                              <parameter><decl><type><annotation>@<name>NonNull</name></annotation>  <name><name>Set</name><argument_list type="generic">&lt;<argument><name>Recipient</name></argument>&gt;</argument_list></name></type> <name>members</name></decl></parameter>,
                                              <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Bitmap</name></type>         <name>avatar</name></decl></parameter>,
                                              <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>String</name></type>         <name>name</name></decl></parameter>)</parameter_list>
      <throws>throws <argument><expr><name>InvalidNumberException</name></expr></argument></throws>
  <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>GroupDatabase</name></type> <name>groupDatabase</name>   <init>= <expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getGroupDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>Address</name></argument>&gt;</argument_list></name></type>  <name>memberAddresses</name> <init>= <expr><call><name>getMemberAddresses</name><argument_list>(<argument><expr><name>members</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type>        <name>avatarBytes</name>     <init>= <expr><call><name><name>BitmapUtil</name><operator>.</operator><name>toByteArray</name></name><argument_list>(<argument><expr><name>avatar</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>memberAddresses</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>Address</name><operator>.</operator><name>fromSerialized</name></name><argument_list>(<argument><expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>getLocalNumber</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>groupDatabase</name><operator>.</operator><name>updateMembers</name></name><argument_list>(<argument><expr><name>groupId</name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>memberAddresses</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>groupDatabase</name><operator>.</operator><name>updateTitle</name></name><argument_list>(<argument><expr><name>groupId</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>groupDatabase</name><operator>.</operator><name>updateAvatar</name></name><argument_list>(<argument><expr><name>groupId</name></expr></argument>, <argument><expr><name>avatarBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><operator>!</operator><call><name><name>GroupUtil</name><operator>.</operator><name>isMmsGroup</name></name><argument_list>(<argument><expr><name>groupId</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><call><name>sendGroupUpdate</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>groupId</name></expr></argument>, <argument><expr><name>memberAddresses</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>avatarBytes</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then> <else>else <block>{
      <decl_stmt><decl><type><name>Recipient</name></type> <name>groupRecipient</name> <init>= <expr><call><name><name>Recipient</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>Address</name><operator>.</operator><name>fromSerialized</name></name><argument_list>(<argument><expr><name>groupId</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>long</name></type>      <name>threadId</name>       <init>= <expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getThreadDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getThreadIdFor</name><argument_list>(<argument><expr><name>groupRecipient</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr><operator>new</operator> <call><name>GroupActionResult</name><argument_list>(<argument><expr><name>groupRecipient</name></expr></argument>, <argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></else></if>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name>GroupActionResult</name></type> <name>sendGroupUpdate</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation>  <name>Context</name></type>      <name>context</name></decl></parameter>,
                                                   <parameter><decl><type><annotation>@<name>NonNull</name></annotation>  <name>String</name></type>       <name>groupId</name></decl></parameter>,
                                                   <parameter><decl><type><annotation>@<name>NonNull</name></annotation>  <name><name>Set</name><argument_list type="generic">&lt;<argument><name>Address</name></argument>&gt;</argument_list></name></type> <name>members</name></decl></parameter>,
                                                   <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>String</name></type>       <name>groupName</name></decl></parameter>,
                                                   <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name><name>byte</name><index>[]</index></name></type>       <name>avatar</name></decl></parameter>)</parameter_list>
  <block>{
    <try>try <block>{
      <decl_stmt><decl><type><name>Attachment</name></type> <name>avatarAttachment</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Address</name></type>    <name>groupAddress</name>     <init>= <expr><call><name><name>Address</name><operator>.</operator><name>fromSerialized</name></name><argument_list>(<argument><expr><name>groupId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Recipient</name></type>  <name>groupRecipient</name>   <init>= <expr><call><name><name>Recipient</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>groupAddress</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>numbers</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <for>for <control>(<init><decl><type><name>Address</name></type> <name>member</name> <range>: <expr><name>members</name></expr></range></decl></init>)</control> <block>{
        <expr_stmt><expr><call><name><name>numbers</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>member</name><operator>.</operator><name>serialize</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></for>

      <decl_stmt><decl><type><name><name>GroupContext</name><operator>.</operator><name>Builder</name></name></type> <name>groupContextBuilder</name> <init>= <expr><call><name><name>GroupContext</name><operator>.</operator><name>newBuilder</name></name><argument_list>()</argument_list></call>
                                                             <operator>.</operator><call><name>setId</name><argument_list>(<argument><expr><call><name><name>ByteString</name><operator>.</operator><name>copyFrom</name></name><argument_list>(<argument><expr><call><name><name>GroupUtil</name><operator>.</operator><name>getDecodedId</name></name><argument_list>(<argument><expr><name>groupId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                                                             <operator>.</operator><call><name>setType</name><argument_list>(<argument><expr><name><name>GroupContext</name><operator>.</operator><name>Type</name><operator>.</operator><name>UPDATE</name></name></expr></argument>)</argument_list></call>
                                                             <operator>.</operator><call><name>addAllMembers</name><argument_list>(<argument><expr><name>numbers</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>groupName</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>groupContextBuilder</name><operator>.</operator><name>setName</name></name><argument_list>(<argument><expr><name>groupName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
      <decl_stmt><decl><type><name>GroupContext</name></type> <name>groupContext</name> <init>= <expr><call><name><name>groupContextBuilder</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><name>avatar</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>Uri</name></type> <name>avatarUri</name> <init>= <expr><call><name><name>MemoryBlobProvider</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>createSingleUseUri</name><argument_list>(<argument><expr><name>avatar</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>avatarAttachment</name> <operator>=</operator> <operator>new</operator> <call><name>UriAttachment</name><argument_list>(<argument><expr><name>avatarUri</name></expr></argument>, <argument><expr><name><name>MediaUtil</name><operator>.</operator><name>IMAGE_PNG</name></name></expr></argument>, <argument><expr><name><name>AttachmentDatabase</name><operator>.</operator><name>TRANSFER_PROGRESS_DONE</name></name></expr></argument>, <argument><expr><name><name>avatar</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>

      <decl_stmt><decl><type><name>OutgoingGroupMediaMessage</name></type> <name>outgoingMessage</name> <init>= <expr><operator>new</operator> <call><name>OutgoingGroupMediaMessage</name><argument_list>(<argument><expr><name>groupRecipient</name></expr></argument>, <argument><expr><name>groupContext</name></expr></argument>, <argument><expr><name>avatarAttachment</name></expr></argument>, <argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><call><name><name>Collections</name><operator>.</operator><name>emptyList</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Collections</name><operator>.</operator><name>emptyList</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>long</name></type>                      <name>threadId</name>        <init>= <expr><call><name><name>MessageSender</name><operator>.</operator><name>send</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>outgoingMessage</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <return>return <expr><operator>new</operator> <call><name>GroupActionResult</name><argument_list>(<argument><expr><name>groupRecipient</name></expr></argument>, <argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></catch></try>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Address</name></argument>&gt;</argument_list></name></type> <name>getMemberAddresses</name><parameter_list>(<parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Recipient</name></argument>&gt;</argument_list></name></type> <name>recipients</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>Address</name></argument>&gt;</argument_list></name></type> <name>results</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>Recipient</name></type> <name>recipient</name> <range>: <expr><name>recipients</name></expr></range></decl></init>)</control> <block>{
      <expr_stmt><expr><call><name><name>results</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>recipient</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <return>return <expr><name>results</name></expr>;</return>
  }</block></function>

  <class><specifier>public</specifier> <specifier>static</specifier> class <name>GroupActionResult</name> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><name>Recipient</name></type> <name>groupRecipient</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>long</name></type>      <name>threadId</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>GroupActionResult</name><parameter_list>(<parameter><decl><type><name>Recipient</name></type> <name>groupRecipient</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>threadId</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>groupRecipient</name></name> <operator>=</operator> <name>groupRecipient</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>threadId</name></name>       <operator>=</operator> <name>threadId</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <type><name>Recipient</name></type> <name>getGroupRecipient</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>groupRecipient</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>long</name></type> <name>getThreadId</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>threadId</name></expr>;</return>
    }</block></function>
  }</block></class>
}</block></class>
</unit>
