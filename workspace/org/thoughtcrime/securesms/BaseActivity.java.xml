<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\BaseActivity.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name><operator>.</operator><name>VERSION</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name><operator>.</operator><name>VERSION_CODES</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>app</name><operator>.</operator><name>FragmentActivity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>KeyEvent</name></name>;</import>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>BaseActivity</name> <super><extends>extends <name>FragmentActivity</name></extends></super> <block>{
  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>boolean</name></type> <name>onKeyDown</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>keyCode</name></decl></parameter>, <parameter><decl><type><name>KeyEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><operator>(</operator><name>keyCode</name> <operator>==</operator> <name><name>KeyEvent</name><operator>.</operator><name>KEYCODE_MENU</name></name> <operator>&amp;&amp;</operator> <call><name>isMenuWorkaroundRequired</name><argument_list>()</argument_list></call><operator>)</operator> <operator>||</operator> <call><name><name>super</name><operator>.</operator><name>onKeyDown</name></name><argument_list>(<argument><expr><name>keyCode</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>boolean</name></type> <name>onKeyUp</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>keyCode</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>KeyEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>keyCode</name> <operator>==</operator> <name><name>KeyEvent</name><operator>.</operator><name>KEYCODE_MENU</name></name> <operator>&amp;&amp;</operator> <call><name>isMenuWorkaroundRequired</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>openOptionsMenu</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></then></if>
    <return>return <expr><call><name><name>super</name><operator>.</operator><name>onKeyUp</name></name><argument_list>(<argument><expr><name>keyCode</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isMenuWorkaroundRequired</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name><name>VERSION</name><operator>.</operator><name><name>SDK_INT</name> <argument_list type="generic">&lt; <argument><name><name>VERSION_CODES</name><operator>.</operator><name>KITKAT</name></name>          <operator>&amp;&amp;</operator>
           <name><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name></argument> &gt;</argument_list></name></name> <name><name>VERSION_CODES</name><operator>.</operator><name>GINGERBREAD_MR1</name></name> <operator>&amp;&amp;</operator>
           <operator>(</operator><literal type="string">"LGE"</literal><operator>.</operator><call><name>equalsIgnoreCase</name><argument_list>(<argument><expr><name><name>Build</name><operator>.</operator><name>MANUFACTURER</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <literal type="string">"E6710"</literal><operator>.</operator><call><name>equalsIgnoreCase</name><argument_list>(<argument><expr><name><name>Build</name><operator>.</operator><name>DEVICE</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
  }</block></function>
}</block></class>
</unit>
