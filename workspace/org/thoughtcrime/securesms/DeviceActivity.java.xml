<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\DeviceActivity.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>Manifest</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>annotation</name><operator>.</operator><name>SuppressLint</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>AsyncTask</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Vibrator</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextUtils</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>transition</name><operator>.</operator><name>TransitionInflater</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>logging</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MenuItem</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Button</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Toast</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>crypto</name><operator>.</operator><name>IdentityKeyUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>crypto</name><operator>.</operator><name>ProfileKeyUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>permissions</name><operator>.</operator><name>Permissions</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>push</name><operator>.</operator><name>AccountManagerFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>qr</name><operator>.</operator><name>ScanListener</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>Base64</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>DynamicLanguage</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>DynamicTheme</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>TextSecurePreferences</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>Util</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>task</name><operator>.</operator><name>ProgressDialogAsyncTask</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>IdentityKeyPair</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>InvalidKeyException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>ecc</name><operator>.</operator><name>Curve</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>ecc</name><operator>.</operator><name>ECPublicKey</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>util</name><operator>.</operator><name>guava</name><operator>.</operator><name>Optional</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>signalservice</name><operator>.</operator><name>api</name><operator>.</operator><name>SignalServiceAccountManager</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>signalservice</name><operator>.</operator><name>api</name><operator>.</operator><name>push</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>NotFoundException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>signalservice</name><operator>.</operator><name>internal</name><operator>.</operator><name>push</name><operator>.</operator><name>DeviceLimitExceededException</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>

<class><specifier>public</specifier> class <name>DeviceActivity</name> <super><extends>extends <name>PassphraseRequiredActionBarActivity</name></extends>
    <implements>implements <name><name>Button</name><operator>.</operator><name>OnClickListener</name></name>, <name>ScanListener</name>, <name><name>DeviceLinkFragment</name><operator>.</operator><name>LinkClickedListener</name></name></implements></super>
<block>{

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>DeviceActivity</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>DynamicTheme</name></type>    <name>dynamicTheme</name>    <init>= <expr><operator>new</operator> <call><name>DynamicTheme</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>DynamicLanguage</name></type> <name>dynamicLanguage</name> <init>= <expr><operator>new</operator> <call><name>DynamicLanguage</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><name>DeviceAddFragment</name></type>  <name>deviceAddFragment</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>DeviceListFragment</name></type> <name>deviceListFragment</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>DeviceLinkFragment</name></type> <name>deviceLinkFragment</name></decl>;</decl_stmt>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onPreCreate</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>dynamicTheme</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>dynamicLanguage</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>bundle</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>ready</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>getSupportActionBar</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setDisplayHomeAsUpEnabled</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>getSupportActionBar</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setTitle</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>AndroidManifest__linked_devices</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>deviceAddFragment</name></name>  <operator>=</operator> <operator>new</operator> <call><name>DeviceAddFragment</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>deviceListFragment</name></name> <operator>=</operator> <operator>new</operator> <call><name>DeviceListFragment</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>deviceLinkFragment</name></name> <operator>=</operator> <operator>new</operator> <call><name>DeviceLinkFragment</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>deviceListFragment</name><operator>.</operator><name>setAddDeviceButtonListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>deviceAddFragment</name><operator>.</operator><name>setScanListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><call><name>getIntent</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBooleanExtra</name><argument_list>(<argument><expr><literal type="string">"add"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>initFragment</name><argument_list>(<argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>content</name></name></expr></argument>, <argument><expr><name>deviceAddFragment</name></expr></argument>, <argument><expr><call><name><name>dynamicLanguage</name><operator>.</operator><name>getCurrentLocale</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><call><name>initFragment</name><argument_list>(<argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>content</name></name></expr></argument>, <argument><expr><name>deviceListFragment</name></expr></argument>, <argument><expr><call><name><name>dynamicLanguage</name><operator>.</operator><name>getCurrentLocale</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onResume</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onResume</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>dynamicTheme</name><operator>.</operator><name>onResume</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>dynamicLanguage</name><operator>.</operator><name>onResume</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>boolean</name></type> <name>onOptionsItemSelected</name><parameter_list>(<parameter><decl><type><name>MenuItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{
    <switch>switch <condition>(<expr><call><name><name>item</name><operator>.</operator><name>getItemId</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
      <case>case <expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>home</name></name></expr>:</case> <expr_stmt><expr><call><name>finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></switch>

    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>Permissions</name><operator>.</operator><name>with</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>request</name><argument_list>(<argument><expr><name><name>Manifest</name><operator>.</operator><name>permission</name><operator>.</operator><name>CAMERA</name></name></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>ifNecessary</name><argument_list>()</argument_list></call>
               <operator>.</operator><call><name>withPermanentDenialDialog</name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>DeviceActivity_signal_needs_the_camera_permission_in_order_to_scan_a_qr_code</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>onAllGranted</name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{
                 <expr_stmt><expr><call><name>getSupportFragmentManager</name><argument_list>()</argument_list></call><operator>.</operator><call><name>beginTransaction</name><argument_list>()</argument_list></call>
                                            <operator>.</operator><call><name>replace</name><argument_list>(<argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>content</name></name></expr></argument>, <argument><expr><name>deviceAddFragment</name></expr></argument>)</argument_list></call>
                                            <operator>.</operator><call><name>addToBackStack</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call>
                                            <operator>.</operator><call><name>commitAllowingStateLoss</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
               }</block></lambda></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>onAnyDenied</name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>DeviceActivity_unable_to_scan_a_qr_code_without_the_camera_permission</name></name></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_LONG</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>execute</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onQrDataFound</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>Util</name><operator>.</operator><name>runOnMain</name></name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{
      <expr_stmt><expr><operator>(</operator><operator>(</operator><name>Vibrator</name><operator>)</operator><call><name>getSystemService</name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>VIBRATOR_SERVICE</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>vibrate</name><argument_list>(<argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>Uri</name></type> <name>uri</name> <init>= <expr><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>deviceLinkFragment</name><operator>.</operator><name>setLinkClickedListener</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name><name>DeviceActivity</name><operator>.</operator><name>this</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;=</operator> <name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>LOLLIPOP</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>deviceAddFragment</name><operator>.</operator><name>setSharedElementReturnTransition</name></name><argument_list>(<argument><expr><call><name><name>TransitionInflater</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><name><name>DeviceActivity</name><operator>.</operator><name>this</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>inflateTransition</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>transition</name><operator>.</operator><name>fragment_shared</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>deviceAddFragment</name><operator>.</operator><name>setExitTransition</name></name><argument_list>(<argument><expr><call><name><name>TransitionInflater</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><name><name>DeviceActivity</name><operator>.</operator><name>this</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>inflateTransition</name><argument_list>(<argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>transition</name><operator>.</operator><name>fade</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>deviceLinkFragment</name><operator>.</operator><name>setSharedElementEnterTransition</name></name><argument_list>(<argument><expr><call><name><name>TransitionInflater</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><name><name>DeviceActivity</name><operator>.</operator><name>this</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>inflateTransition</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>transition</name><operator>.</operator><name>fragment_shared</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>deviceLinkFragment</name><operator>.</operator><name>setEnterTransition</name></name><argument_list>(<argument><expr><call><name><name>TransitionInflater</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><name><name>DeviceActivity</name><operator>.</operator><name>this</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>inflateTransition</name><argument_list>(<argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>transition</name><operator>.</operator><name>fade</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>getSupportFragmentManager</name><argument_list>()</argument_list></call><operator>.</operator><call><name>beginTransaction</name><argument_list>()</argument_list></call>
                                   <operator>.</operator><call><name>addToBackStack</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call>
                                   <operator>.</operator><call><name>addSharedElement</name><argument_list>(<argument><expr><call><name><name>deviceAddFragment</name><operator>.</operator><name>getDevicesImage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"devices"</literal></expr></argument>)</argument_list></call>
                                   <operator>.</operator><call><name>replace</name><argument_list>(<argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>content</name></name></expr></argument>, <argument><expr><name>deviceLinkFragment</name></expr></argument>)</argument_list></call>
                                   <operator>.</operator><call><name>commit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name>getSupportFragmentManager</name><argument_list>()</argument_list></call><operator>.</operator><call><name>beginTransaction</name><argument_list>()</argument_list></call>
                                   <operator>.</operator><call><name>setCustomAnimations</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>anim</name><operator>.</operator><name>slide_from_bottom</name></name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>anim</name><operator>.</operator><name>slide_to_bottom</name></name></expr></argument>,
                                                        <argument><expr><name><name>R</name><operator>.</operator><name>anim</name><operator>.</operator><name>slide_from_bottom</name></name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>anim</name><operator>.</operator><name>slide_to_bottom</name></name></expr></argument>)</argument_list></call>
                                   <operator>.</operator><call><name>replace</name><argument_list>(<argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>content</name></name></expr></argument>, <argument><expr><name>deviceLinkFragment</name></expr></argument>)</argument_list></call>
                                   <operator>.</operator><call><name>addToBackStack</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call>
                                   <operator>.</operator><call><name>commit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></else></if>
    }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onRequestPermissionsResult</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>requestCode</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>String</name><index>[]</index></name></type> <name>permissions</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>int</name><index>[]</index></name></type> <name>grantResults</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>Permissions</name><operator>.</operator><name>onRequestPermissionsResult</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>requestCode</name></expr></argument>, <argument><expr><name>permissions</name></expr></argument>, <argument><expr><name>grantResults</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>SuppressLint</name><argument_list>(<argument><expr><literal type="string">"StaticFieldLeak"</literal></expr></argument>)</argument_list></annotation>
  <annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onLink</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Uri</name></type> <name>uri</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><operator>new</operator> <class><super><name><name>ProgressDialogAsyncTask</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>, <argument><name>Void</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></super><argument_list>(<argument><expr><name>this</name></expr></argument>,
                                                     <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>DeviceProvisioningActivity_content_progress_title</name></name></expr></argument>,
                                                     <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>DeviceProvisioningActivity_content_progress_content</name></name></expr></argument>)</argument_list>
    <block>{
      <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>SUCCESS</name>        <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>NO_DEVICE</name>      <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>NETWORK_ERROR</name>  <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>KEY_ERROR</name>      <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>LIMIT_EXCEEDED</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>BAD_CODE</name>       <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>

      <function><annotation>@<name>Override</name></annotation>
      <specifier>protected</specifier> <type><name>Integer</name></type> <name>doInBackground</name><parameter_list>(<parameter><decl><type><name>Void</name><modifier>...</modifier></type> <name>params</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>boolean</name></type> <name>isMultiDevice</name> <init>= <expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>isMultiDevice</name></name><argument_list>(<argument><expr><name><name>DeviceActivity</name><operator>.</operator><name>this</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <try>try <block>{
          <decl_stmt><decl><type><name>Context</name></type>                     <name>context</name>          <init>= <expr><name><name>DeviceActivity</name><operator>.</operator><name>this</name></name></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>SignalServiceAccountManager</name></type> <name>accountManager</name>   <init>= <expr><call><name><name>AccountManagerFactory</name><operator>.</operator><name>createManager</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>String</name></type>                      <name>verificationCode</name> <init>= <expr><call><name><name>accountManager</name><operator>.</operator><name>getNewDeviceVerificationCode</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>String</name></type>                      <name>ephemeralId</name>      <init>= <expr><call><name><name>uri</name><operator>.</operator><name>getQueryParameter</name></name><argument_list>(<argument><expr><literal type="string">"uuid"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>String</name></type>                      <name>publicKeyEncoded</name> <init>= <expr><call><name><name>uri</name><operator>.</operator><name>getQueryParameter</name></name><argument_list>(<argument><expr><literal type="string">"pub_key"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

          <if>if <condition>(<expr><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>ephemeralId</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>publicKeyEncoded</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"UUID or Key is empty!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>BAD_CODE</name></expr>;</return>
          }</block></then></if>

          <decl_stmt><decl><type><name>ECPublicKey</name></type>      <name>publicKey</name>         <init>= <expr><call><name><name>Curve</name><operator>.</operator><name>decodePoint</name></name><argument_list>(<argument><expr><call><name><name>Base64</name><operator>.</operator><name>decode</name></name><argument_list>(<argument><expr><name>publicKeyEncoded</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>IdentityKeyPair</name></type>  <name>identityKeyPair</name>   <init>= <expr><call><name><name>IdentityKeyUtil</name><operator>.</operator><name>getIdentityKeyPair</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name><name>byte</name><index>[]</index></name></argument>&gt;</argument_list></name></type> <name>profileKey</name>        <init>= <expr><call><name><name>Optional</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><call><name><name>ProfileKeyUtil</name><operator>.</operator><name>getProfileKey</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

          <expr_stmt><expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>setMultiDevice</name></name><argument_list>(<argument><expr><name><name>DeviceActivity</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>setIsUnidentifiedDeliveryEnabled</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>accountManager</name><operator>.</operator><name>addDevice</name></name><argument_list>(<argument><expr><name>ephemeralId</name></expr></argument>, <argument><expr><name>publicKey</name></expr></argument>, <argument><expr><name>identityKeyPair</name></expr></argument>, <argument><expr><name>profileKey</name></expr></argument>, <argument><expr><name>verificationCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <return>return <expr><name>SUCCESS</name></expr>;</return>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NotFoundException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
          <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>setMultiDevice</name></name><argument_list>(<argument><expr><name><name>DeviceActivity</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><name>isMultiDevice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>NO_DEVICE</name></expr>;</return>
        }</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>DeviceLimitExceededException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
          <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>setMultiDevice</name></name><argument_list>(<argument><expr><name><name>DeviceActivity</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><name>isMultiDevice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>LIMIT_EXCEEDED</name></expr>;</return>
        }</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
          <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>setMultiDevice</name></name><argument_list>(<argument><expr><name><name>DeviceActivity</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><name>isMultiDevice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>NETWORK_ERROR</name></expr>;</return>
        }</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>InvalidKeyException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
          <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>setMultiDevice</name></name><argument_list>(<argument><expr><name><name>DeviceActivity</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><name>isMultiDevice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>KEY_ERROR</name></expr>;</return>
        }</block></catch></try>
      }</block></function>

      <function><annotation>@<name>Override</name></annotation>
      <specifier>protected</specifier> <type><name>void</name></type> <name>onPostExecute</name><parameter_list>(<parameter><decl><type><name>Integer</name></type> <name>result</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onPostExecute</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Context</name></type> <name>context</name> <init>= <expr><name><name>DeviceActivity</name><operator>.</operator><name>this</name></name></expr></init></decl>;</decl_stmt>

        <switch>switch <condition>(<expr><name>result</name></expr>)</condition> <block>{
          <case>case <expr><name>SUCCESS</name></expr>:</case>
            <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>DeviceProvisioningActivity_content_progress_success</name></name></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_SHORT</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
          <case>case <expr><name>NO_DEVICE</name></expr>:</case>
            <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>DeviceProvisioningActivity_content_progress_no_device</name></name></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_LONG</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
          <case>case <expr><name>NETWORK_ERROR</name></expr>:</case>
            <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>DeviceProvisioningActivity_content_progress_network_error</name></name></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_LONG</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
          <case>case <expr><name>KEY_ERROR</name></expr>:</case>
            <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>DeviceProvisioningActivity_content_progress_key_error</name></name></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_LONG</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
          <case>case <expr><name>LIMIT_EXCEEDED</name></expr>:</case>
            <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>DeviceProvisioningActivity_sorry_you_have_too_many_devices_linked_already</name></name></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_LONG</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
          <case>case <expr><name>BAD_CODE</name></expr>:</case>
            <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>DeviceActivity_sorry_this_is_not_a_valid_device_link_qr_code</name></name></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_LONG</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        }</block></switch>

        <expr_stmt><expr><call><name>getSupportFragmentManager</name><argument_list>()</argument_list></call><operator>.</operator><call><name>popBackStackImmediate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></function>
    }</block></class><operator>.</operator><call><name>executeOnExecutor</name><argument_list>(<argument><expr><name><name>AsyncTask</name><operator>.</operator><name>THREAD_POOL_EXECUTOR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>
}</block></class>
</unit>
