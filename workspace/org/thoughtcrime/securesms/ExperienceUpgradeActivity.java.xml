<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\ExperienceUpgradeActivity.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Notification</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>PendingIntent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>BroadcastReceiver</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>drawable</name><operator>.</operator><name>ColorDrawable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>StringRes</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>app</name><operator>.</operator><name>NotificationCompat</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewPager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>melnykov</name><operator>.</operator><name>fab</name><operator>.</operator><name>FloatingActionButton</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>nineoldandroids</name><operator>.</operator><name>animation</name><operator>.</operator><name>ArgbEvaluator</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>IntroPagerAdapter</name><operator>.</operator><name>IntroPage</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>logging</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>notifications</name><operator>.</operator><name>NotificationChannels</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>ServiceUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>TextSecurePreferences</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>Util</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>ViewUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>util</name><operator>.</operator><name>guava</name><operator>.</operator><name>Optional</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<class><specifier>public</specifier> class <name>ExperienceUpgradeActivity</name> <super><extends>extends <name>BaseActionBarActivity</name></extends> <implements>implements <name><name>TypingIndicatorIntroFragment</name><operator>.</operator><name>Controller</name></name>, <name><name>LinkPreviewsIntroFragment</name><operator>.</operator><name>Controller</name></name></implements></super> <block>{
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name>             <init>= <expr><call><name><name>ExperienceUpgradeActivity</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>DISMISS_ACTION</name>  <init>= <expr><literal type="string">"org.thoughtcrime.securesms.ExperienceUpgradeActivity.DISMISS_ACTION"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type>    <name>NOTIFICATION_ID</name> <init>= <expr><literal type="number">1339</literal></expr></init></decl>;</decl_stmt>

  <enum><specifier>private</specifier> enum <name>ExperienceUpgrade</name> <block>{
    <decl><name>SIGNAL_REBRANDING</name><argument_list>(<argument><expr><literal type="number">157</literal></expr></argument>,
                      <argument><expr><operator>new</operator> <call><name>IntroPage</name><argument_list>(<argument><expr><literal type="number">0xFF2090EA</literal></expr></argument>,
                                    <argument><expr><call><name><name>BasicIntroFragment</name><operator>.</operator><name>newInstance</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>splash_logo</name></name></expr></argument>,
                                                                   <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ExperienceUpgradeActivity_welcome_to_signal_dgaf</name></name></expr></argument>,
                                                                   <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ExperienceUpgradeActivity_textsecure_is_now_called_signal</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                      <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ExperienceUpgradeActivity_welcome_to_signal_excited</name></name></expr></argument>,
                      <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ExperienceUpgradeActivity_textsecure_is_now_signal</name></name></expr></argument>,
                      <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ExperienceUpgradeActivity_textsecure_is_now_signal_long</name></name></expr></argument>,
                      <argument><expr><literal type="null">null</literal></expr></argument>,
                      <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></decl>,
    <decl><name>VIDEO_CALLS</name><argument_list>(<argument><expr><literal type="number">245</literal></expr></argument>,
                      <argument><expr><operator>new</operator> <call><name>IntroPage</name><argument_list>(<argument><expr><literal type="number">0xFF2090EA</literal></expr></argument>,
                                    <argument><expr><call><name><name>BasicIntroFragment</name><operator>.</operator><name>newInstance</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>video_splash</name></name></expr></argument>,
                                                                   <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ExperienceUpgradeActivity_say_hello_to_video_calls</name></name></expr></argument>,
                                                                   <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ExperienceUpgradeActivity_signal_now_supports_secure_video_calls</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                      <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ExperienceUpgradeActivity_say_hello_to_video_calls</name></name></expr></argument>,
                      <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ExperienceUpgradeActivity_signal_now_supports_secure_video_calling</name></name></expr></argument>,
                      <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ExperienceUpgradeActivity_signal_now_supports_secure_video_calling_long</name></name></expr></argument>,
                <argument><expr><literal type="null">null</literal></expr></argument>,
                <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></decl>,
    <decl><name>PROFILES</name><argument_list>(<argument><expr><literal type="number">286</literal></expr></argument>,
                 <argument><expr><operator>new</operator> <call><name>IntroPage</name><argument_list>(<argument><expr><literal type="number">0xFF2090EA</literal></expr></argument>,
                               <argument><expr><call><name><name>BasicIntroFragment</name><operator>.</operator><name>newInstance</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>profile_splash</name></name></expr></argument>,
                                                              <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ExperienceUpgradeActivity_ready_for_your_closeup</name></name></expr></argument>,
                                                              <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ExperienceUpgradeActivity_now_you_can_share_a_profile_photo_and_name_with_friends_on_signal</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
             <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ExperienceUpgradeActivity_signal_profiles_are_here</name></name></expr></argument>,
             <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ExperienceUpgradeActivity_now_you_can_share_a_profile_photo_and_name_with_friends_on_signal</name></name></expr></argument>,
             <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ExperienceUpgradeActivity_now_you_can_share_a_profile_photo_and_name_with_friends_on_signal</name></name></expr></argument>,
             <argument><expr><name><name>CreateProfileActivity</name><operator>.</operator><name>class</name></name></expr></argument>,
             <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></decl>,
    <decl><name>READ_RECEIPTS</name><argument_list>(<argument><expr><literal type="number">299</literal></expr></argument>,
                  <argument><expr><operator>new</operator> <call><name>IntroPage</name><argument_list>(<argument><expr><literal type="number">0xFF2090EA</literal></expr></argument>,
                                <argument><expr><call><name><name>ReadReceiptsIntroFragment</name><operator>.</operator><name>newInstance</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                  <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>experience_upgrade_preference_fragment__read_receipts_are_here</name></name></expr></argument>,
                  <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>experience_upgrade_preference_fragment__optionally_see_and_share_when_messages_have_been_read</name></name></expr></argument>,
                  <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>experience_upgrade_preference_fragment__optionally_see_and_share_when_messages_have_been_read</name></name></expr></argument>,
                  <argument><expr><literal type="null">null</literal></expr></argument>,
                  <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></decl>,
    <decl><name>TYPING_INDICATORS</name><argument_list>(<argument><expr><literal type="number">432</literal></expr></argument>,
                      <argument><expr><operator>new</operator> <call><name>IntroPage</name><argument_list>(<argument><expr><literal type="number">0xFF2090EA</literal></expr></argument>,
                                    <argument><expr><call><name><name>TypingIndicatorIntroFragment</name><operator>.</operator><name>newInstance</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                      <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ExperienceUpgradeActivity_introducing_typing_indicators</name></name></expr></argument>,
                      <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ExperienceUpgradeActivity_now_you_can_optionally_see_and_share_when_messages_are_being_typed</name></name></expr></argument>,
                      <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ExperienceUpgradeActivity_now_you_can_optionally_see_and_share_when_messages_are_being_typed</name></name></expr></argument>,
                      <argument><expr><literal type="null">null</literal></expr></argument>,
                      <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></decl>,
    <decl><name>LINK_PREVIEWS</name><argument_list>(<argument><expr><literal type="number">449</literal></expr></argument>,
                  <argument><expr><operator>new</operator> <call><name>IntroPage</name><argument_list>(<argument><expr><literal type="number">0xFF2090EA</literal></expr></argument>, <argument><expr><call><name><name>LinkPreviewsIntroFragment</name><operator>.</operator><name>newInstance</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                  <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ExperienceUpgradeActivity_introducing_link_previews</name></name></expr></argument>,
                  <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ExperienceUpgradeActivity_optional_link_previews_are_now_supported</name></name></expr></argument>,
                  <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ExperienceUpgradeActivity_optional_link_previews_are_now_supported</name></name></expr></argument>,
        <argument><expr><literal type="null">null</literal></expr></argument>,
        <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></decl>;

    <decl_stmt><decl><specifier>private</specifier>            <type><name>int</name></type>             <name>version</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier>            <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>IntroPage</name></argument>&gt;</argument_list></name></type> <name>pages</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <annotation>@<name>StringRes</name></annotation> <type><name>int</name></type>             <name>notificationTitle</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <annotation>@<name>StringRes</name></annotation> <type><name>int</name></type>             <name>notificationText</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <annotation>@<name>StringRes</name></annotation> <type><name>int</name></type>             <name>notificationBigText</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <annotation>@<name>Nullable</name></annotation>  <type><name>Class</name></type>           <name>nextIntent</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier>            <type><name>boolean</name></type>         <name>handlesNavigation</name></decl>;</decl_stmt>

    <constructor><name>ExperienceUpgrade</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>,
                      <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>IntroPage</name></argument>&gt;</argument_list></name></type> <name>pages</name></decl></parameter>,
                      <parameter><decl><type><annotation>@<name>StringRes</name></annotation> <name>int</name></type> <name>notificationTitle</name></decl></parameter>,
                      <parameter><decl><type><annotation>@<name>StringRes</name></annotation> <name>int</name></type> <name>notificationText</name></decl></parameter>,
                      <parameter><decl><type><annotation>@<name>StringRes</name></annotation> <name>int</name></type> <name>notificationBigText</name></decl></parameter>,
                      <parameter><decl><type><annotation>@<name>Nullable</name></annotation>  <name>Class</name></type> <name>nextIntent</name></decl></parameter>,
                      <parameter><decl><type><name>boolean</name></type> <name>handlesNavigation</name></decl></parameter>)</parameter_list>
    <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>version</name></name>             <operator>=</operator> <name>version</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>pages</name></name>               <operator>=</operator> <name>pages</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>notificationTitle</name></name>   <operator>=</operator> <name>notificationTitle</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>notificationText</name></name>    <operator>=</operator> <name>notificationText</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>notificationBigText</name></name> <operator>=</operator> <name>notificationBigText</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>nextIntent</name></name>          <operator>=</operator> <name>nextIntent</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>handlesNavigation</name></name> <operator>=</operator> <name>handlesNavigation</name></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><name>ExperienceUpgrade</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>,
                      <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>IntroPage</name></type> <name>page</name></decl></parameter>,
                      <parameter><decl><type><annotation>@<name>StringRes</name></annotation> <name>int</name></type> <name>notificationTitle</name></decl></parameter>,
                      <parameter><decl><type><annotation>@<name>StringRes</name></annotation> <name>int</name></type> <name>notificationText</name></decl></parameter>,
                      <parameter><decl><type><annotation>@<name>StringRes</name></annotation> <name>int</name></type> <name>notificationBigText</name></decl></parameter>,
                      <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Class</name></type> <name>nextIntent</name></decl></parameter>,
                      <parameter><decl><type><name>boolean</name></type> <name>handlesNavigation</name></decl></parameter>)</parameter_list>
    <block>{
      <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>version</name></expr></argument>, <argument><expr><call><name><name>Collections</name><operator>.</operator><name>singletonList</name></name><argument_list>(<argument><expr><name>page</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>notificationTitle</name></expr></argument>, <argument><expr><name>notificationText</name></expr></argument>, <argument><expr><name>notificationBigText</name></expr></argument>, <argument><expr><name>nextIntent</name></expr></argument>, <argument><expr><name>handlesNavigation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <type><name>int</name></type> <name>getVersion</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>version</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>IntroPage</name></argument>&gt;</argument_list></name></type> <name>getPages</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>pages</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>IntroPage</name></type> <name>getPage</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{
      <return>return <expr><call><name><name>pages</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>int</name></type> <name>getNotificationTitle</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>notificationTitle</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>int</name></type> <name>getNotificationText</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>notificationText</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>int</name></type> <name>getNotificationBigText</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>notificationBigText</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>handlesNavigation</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>handlesNavigation</name></expr>;</return>
    }</block></function>
  }</block></enum>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>protected</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setStatusBarColor</name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getColor</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>signal_primary_dark</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name><name>Optional</name><argument_list type="generic">&lt;<argument><name>ExperienceUpgrade</name></argument>&gt;</argument_list></name></type> <name>upgrade</name> <init>= <expr><call><name>getExperienceUpgrade</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><operator>!</operator><call><name><name>upgrade</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>onContinue</name><argument_list>(<argument><expr><name>upgrade</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    }</block></then></if>

    <expr_stmt><expr><call><name>setContentView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>experience_upgrade_activity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>ViewPager</name></type>            <name>pager</name> <init>= <expr><call><name><name>ViewUtil</name><operator>.</operator><name>findById</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>pager</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>FloatingActionButton</name></type> <name>fab</name>   <init>= <expr><call><name><name>ViewUtil</name><operator>.</operator><name>findById</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>fab</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>pager</name><operator>.</operator><name>setAdapter</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>IntroPagerAdapter</name><argument_list>(<argument><expr><call><name>getSupportFragmentManager</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>upgrade</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPages</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><call><name><name>upgrade</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>handlesNavigation</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>fab</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><call><name><name>fab</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>fab</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>v</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name>onContinue</name><argument_list>(<argument><expr><name>upgrade</name></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

    <expr_stmt><expr><call><name>getWindow</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setBackgroundDrawable</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ColorDrawable</name><argument_list>(<argument><expr><call><name><name>upgrade</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPage</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>backgroundColor</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ServiceUtil</name><operator>.</operator><name>getNotificationManager</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>cancel</name><argument_list>(<argument><expr><name>NOTIFICATION_ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>onContinue</name><parameter_list>(<parameter><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>ExperienceUpgrade</name></argument>&gt;</argument_list></name></type> <name>seenUpgrade</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>ServiceUtil</name><operator>.</operator><name>getNotificationManager</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>cancel</name><argument_list>(<argument><expr><name>NOTIFICATION_ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>latestVersion</name> <init>= <expr><ternary><condition><expr><call><name><name>seenUpgrade</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name><name>seenUpgrade</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getVersion</name><argument_list>()</argument_list></call></expr>
                                                </then><else>: <expr><call><name><name>Util</name><operator>.</operator><name>getCurrentApkReleaseVersion</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>setLastExperienceVersionCode</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>latestVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name><name>seenUpgrade</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>seenUpgrade</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><name>nextIntent</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>Intent</name></type> <name>intent</name>     <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name><name>seenUpgrade</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><name>nextIntent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Intent</name></type> <name>nextIntent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>ConversationListActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><literal type="string">"next_intent"</literal></expr></argument>, <argument><expr><name>nextIntent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>startActivity</name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><call><name>startActivity</name><argument_list>(<argument><expr><call><name>getIntent</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getParcelableExtra</name><argument_list>(<argument><expr><literal type="string">"next_intent"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

    <expr_stmt><expr><call><name>finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isUpdate</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getExperienceUpgrade</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>isPresent</name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>ExperienceUpgrade</name></argument>&gt;</argument_list></name></type> <name>getExperienceUpgrade</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>currentVersionCode</name> <init>= <expr><call><name><name>Util</name><operator>.</operator><name>getCurrentApkReleaseVersion</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>lastSeenVersion</name>    <init>= <expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>getLastExperienceVersionCode</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"getExperienceUpgrade("</literal> <operator>+</operator> <name>lastSeenVersion</name> <operator>+</operator> <literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>lastSeenVersion</name> <operator>&gt;=</operator> <name>currentVersionCode</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>setLastExperienceVersionCode</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>currentVersionCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><call><name><name>Optional</name><operator>.</operator><name>absent</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>ExperienceUpgrade</name></argument>&gt;</argument_list></name></type> <name>eligibleUpgrade</name> <init>= <expr><call><name><name>Optional</name><operator>.</operator><name>absent</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>ExperienceUpgrade</name></type> <name>upgrade</name> <range>: <expr><call><name><name>ExperienceUpgrade</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
      <if>if <condition>(<expr><name>lastSeenVersion</name> <operator>&lt;</operator> <call><name><name>upgrade</name><operator>.</operator><name>getVersion</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>eligibleUpgrade</name> <operator>=</operator> <call><name><name>Optional</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>upgrade</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></for>

    <return>return <expr><name>eligibleUpgrade</name></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onTypingIndicatorsFinished</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>onContinue</name><argument_list>(<argument><expr><call><name><name>Optional</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name><name>ExperienceUpgrade</name><operator>.</operator><name>TYPING_INDICATORS</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onLinkPreviewsFinished</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>onContinue</name><argument_list>(<argument><expr><call><name><name>Optional</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name><name>ExperienceUpgrade</name><operator>.</operator><name>LINK_PREVIEWS</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <class><specifier>private</specifier> <specifier>final</specifier> class <name>OnPageChangeListener</name> <super><implements>implements <name><name>ViewPager</name><operator>.</operator><name>OnPageChangeListener</name></name></implements></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>ArgbEvaluator</name></type>     <name>evaluator</name> <init>= <expr><operator>new</operator> <call><name>ArgbEvaluator</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>ExperienceUpgrade</name></type> <name>upgrade</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>OnPageChangeListener</name><parameter_list>(<parameter><decl><type><name>ExperienceUpgrade</name></type> <name>upgrade</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>upgrade</name></name> <operator>=</operator> <name>upgrade</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onPageSelected</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onPageScrollStateChanged</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>state</name></decl></parameter>)</parameter_list> <block>{}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onPageScrolled</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>positionOffset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>positionOffsetPixels</name></decl></parameter>)</parameter_list> <block>{
      <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>nextPosition</name> <init>= <expr><operator>(</operator><name>position</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <call><name><name>upgrade</name><operator>.</operator><name>getPages</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>color</name> <init>= <expr><operator>(</operator><name>Integer</name><operator>)</operator><call><name><name>evaluator</name><operator>.</operator><name>evaluate</name></name><argument_list>(<argument><expr><name>positionOffset</name></expr></argument>,
                                                    <argument><expr><call><name><name>upgrade</name><operator>.</operator><name>getPage</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call><operator>.</operator><name>backgroundColor</name></expr></argument>,
                                                    <argument><expr><call><name><name>upgrade</name><operator>.</operator><name>getPage</name></name><argument_list>(<argument><expr><name>nextPosition</name></expr></argument>)</argument_list></call><operator>.</operator><name>backgroundColor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>getWindow</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setBackgroundDrawable</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ColorDrawable</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
  }</block></class>

  <class><specifier>public</specifier> <specifier>static</specifier> class <name>AppUpgradeReceiver</name> <super><extends>extends <name>BroadcastReceiver</name></extends></super> <block>{
    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onReceive</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{
      <if>if <condition>(<expr><call><name><name>Intent</name><operator>.</operator><name>ACTION_MY_PACKAGE_REPLACED</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>intent</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
          <call><name><name>intent</name><operator>.</operator><name>getData</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSchemeSpecificPart</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getPackageName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
      <block>{
        <if>if <condition>(<expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>getLastExperienceVersionCode</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">339</literal> <operator>&amp;&amp;</operator>
            <operator>!</operator><call><name><name>TextSecurePreferences</name><operator>.</operator><name>isPasswordDisabled</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
          <decl_stmt><decl><type><name>Notification</name></type> <name>notification</name> <init>= <expr><operator>new</operator> <call><name><name>NotificationCompat</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>NotificationChannels</name><operator>.</operator><name>OTHER</name></name></expr></argument>)</argument_list></call>
              <operator>.</operator><call><name>setSmallIcon</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>icon_notification</name></name></expr></argument>)</argument_list></call>
              <operator>.</operator><call><name>setColor</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getColor</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>signal_primary</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
              <operator>.</operator><call><name>setContentTitle</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ExperienceUpgradeActivity_unlock_to_complete_update</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
              <operator>.</operator><call><name>setContentText</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ExperienceUpgradeActivity_please_unlock_signal_to_complete_update</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
              <operator>.</operator><call><name>setStyle</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>NotificationCompat</name><operator>.</operator><name>BigTextStyle</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>bigText</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ExperienceUpgradeActivity_please_unlock_signal_to_complete_update</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
              <operator>.</operator><call><name>setAutoCancel</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call>
              <operator>.</operator><call><name>setContentIntent</name><argument_list>(<argument><expr><call><name><name>PendingIntent</name><operator>.</operator><name>getActivity</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
                                                          <argument><expr><call><name><name>context</name><operator>.</operator><name>getPackageManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getLaunchIntentForPackage</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getPackageName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                                          <argument><expr><name><name>PendingIntent</name><operator>.</operator><name>FLAG_UPDATE_CURRENT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
              <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

          <expr_stmt><expr><call><name><name>ServiceUtil</name><operator>.</operator><name>getNotificationManager</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>notify</name><argument_list>(<argument><expr><name>NOTIFICATION_ID</name></expr></argument>, <argument><expr><name>notification</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <decl_stmt><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>ExperienceUpgrade</name></argument>&gt;</argument_list></name></type> <name>experienceUpgrade</name> <init>= <expr><call><name>getExperienceUpgrade</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><operator>!</operator><call><name><name>experienceUpgrade</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
          <return>return;</return>
        }</block></then></if>

        <if>if <condition>(<expr><call><name><name>experienceUpgrade</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getVersion</name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>TextSecurePreferences</name><operator>.</operator><name>getExperienceDismissedVersionCode</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
          <return>return;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name>Intent</name></type> <name>targetIntent</name>  <init>= <expr><call><name><name>context</name><operator>.</operator><name>getPackageManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getLaunchIntentForPackage</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getPackageName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Intent</name></type> <name>dismissIntent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>AppUpgradeReceiver</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>dismissIntent</name><operator>.</operator><name>setAction</name></name><argument_list>(<argument><expr><name>DISMISS_ACTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Notification</name></type> <name>notification</name> <init>= <expr><operator>new</operator> <call><name><name>NotificationCompat</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>NotificationChannels</name><operator>.</operator><name>OTHER</name></name></expr></argument>)</argument_list></call>
                                        <operator>.</operator><call><name>setSmallIcon</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>icon_notification</name></name></expr></argument>)</argument_list></call>
                                        <operator>.</operator><call><name>setColor</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getColor</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>signal_primary</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                                        <operator>.</operator><call><name>setContentTitle</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name><name>experienceUpgrade</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getNotificationTitle</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                                        <operator>.</operator><call><name>setContentText</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name><name>experienceUpgrade</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getNotificationText</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                                        <operator>.</operator><call><name>setStyle</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>NotificationCompat</name><operator>.</operator><name>BigTextStyle</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>bigText</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name><name>experienceUpgrade</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getNotificationBigText</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                                        <operator>.</operator><call><name>setAutoCancel</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call>
                                        <operator>.</operator><call><name>setContentIntent</name><argument_list>(<argument><expr><call><name><name>PendingIntent</name><operator>.</operator><name>getActivity</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
                                                                                    <argument><expr><name>targetIntent</name></expr></argument>,
                                                                                    <argument><expr><name><name>PendingIntent</name><operator>.</operator><name>FLAG_UPDATE_CURRENT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>

                                        <operator>.</operator><call><name>setDeleteIntent</name><argument_list>(<argument><expr><call><name><name>PendingIntent</name><operator>.</operator><name>getBroadcast</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
                                                                                    <argument><expr><name>dismissIntent</name></expr></argument>,
                                                                                    <argument><expr><name><name>PendingIntent</name><operator>.</operator><name>FLAG_UPDATE_CURRENT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                                        <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ServiceUtil</name><operator>.</operator><name>getNotificationManager</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>notify</name><argument_list>(<argument><expr><name>NOTIFICATION_ID</name></expr></argument>, <argument><expr><name>notification</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then> <elseif>else <if>if <condition>(<expr><call><name><name>DISMISS_ACTION</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>intent</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>setExperienceDismissedVersionCode</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>Util</name><operator>.</operator><name>getCurrentApkReleaseVersion</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if></elseif></if>
    }</block></function>
  }</block></class>
}</block></class>
</unit>
