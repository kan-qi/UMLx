<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\providers\PersistentBlobProvider.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>providers</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>annotation</name><operator>.</operator><name>SuppressLint</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>ContentUris</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>UriMatcher</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>logging</name><operator>.</operator><name>Log</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Pair</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>webkit</name><operator>.</operator><name>MimeTypeMap</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>crypto</name><operator>.</operator><name>AttachmentSecret</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>crypto</name><operator>.</operator><name>AttachmentSecretProvider</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>crypto</name><operator>.</operator><name>ClassicDecryptingPartInputStream</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>crypto</name><operator>.</operator><name>ModernDecryptingPartInputStream</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>crypto</name><operator>.</operator><name>ModernEncryptingPartOutputStream</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>FileProviderUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>Util</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>OutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ExecutorService</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Executors</name></name>;</import>

<class><specifier>public</specifier> class <name>PersistentBlobProvider</name> <block>{

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>PersistentBlobProvider</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type>     <name>URI_STRING</name>            <init>= <expr><literal type="string">"content://org.thoughtcrime.securesms/capture-new"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier>  <specifier>static</specifier> <type><specifier>final</specifier> <name>Uri</name></type>        <name>CONTENT_URI</name>           <init>= <expr><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>URI_STRING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier>  <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type>     <name>AUTHORITY</name>             <init>= <expr><literal type="string">"org.thoughtcrime.securesms"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier>  <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type>     <name>EXPECTED_PATH_OLD</name>     <init>= <expr><literal type="string">"capture/*/*/#"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier>  <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type>     <name>EXPECTED_PATH_NEW</name>     <init>= <expr><literal type="string">"capture-new/*/*/*/*/#"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type>        <name>MIMETYPE_PATH_SEGMENT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type>        <name>FILENAME_PATH_SEGMENT</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type>        <name>FILESIZE_PATH_SEGMENT</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type>     <name>BLOB_EXTENSION</name>        <init>= <expr><literal type="string">"blob"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type>        <name>MATCH_OLD</name>             <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type>        <name>MATCH_NEW</name>             <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>UriMatcher</name></type> <name>MATCHER</name>               <init>= <expr><operator>new</operator> <class><super><name>UriMatcher</name></super><argument_list>(<argument><expr><name><name>UriMatcher</name><operator>.</operator><name>NO_MATCH</name></name></expr></argument>)</argument_list> <block>{<block>{
    <constructor_decl><name>addURI</name><parameter_list>(<parameter><decl><type><name>AUTHORITY</name></type></decl></parameter>, <parameter><decl><type><name>EXPECTED_PATH_OLD</name></type></decl></parameter>, <parameter><decl><type><name>MATCH_OLD</name></type></decl></parameter>)</parameter_list>;</constructor_decl>
    <constructor_decl><name>addURI</name><parameter_list>(<parameter><decl><type><name>AUTHORITY</name></type></decl></parameter>, <parameter><decl><type><name>EXPECTED_PATH_NEW</name></type></decl></parameter>, <parameter><decl><type><name>MATCH_NEW</name></type></decl></parameter>)</parameter_list>;</constructor_decl>
  }</block>}</block></class></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>volatile</specifier> <name>PersistentBlobProvider</name></type> <name>instance</name></decl>;</decl_stmt>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>PersistentBlobProvider</name></type> <name>getInstance</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>instance</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <synchronized>synchronized <init>(<expr><name><name>PersistentBlobProvider</name><operator>.</operator><name>class</name></name></expr>)</init> <block>{
        <if>if <condition>(<expr><name>instance</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>instance</name> <operator>=</operator> <operator>new</operator> <call><name>PersistentBlobProvider</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
      }</block></synchronized>
    }</block></then></if>
    <return>return <expr><name>instance</name></expr>;</return>
  }</block></function>

  <decl_stmt><decl><annotation>@<name>SuppressLint</name><argument_list>(<argument><expr><literal type="string">"UseSparseArrays"</literal></expr></argument>)</argument_list></annotation>
  <specifier>private</specifier> <type><specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>, <argument><name><name>byte</name><index>[]</index></name></argument>&gt;</argument_list></name></type> <name>cache</name>    <init>= <expr><call><name><name>Collections</name><operator>.</operator><name>synchronizedMap</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>, <argument><name><name>byte</name><index>[]</index></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>ExecutorService</name></type>   <name>executor</name> <init>= <expr><call><name><name>Executors</name><operator>.</operator><name>newCachedThreadPool</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>AttachmentSecret</name></type>  <name>attachmentSecret</name></decl>;</decl_stmt>

  <constructor><specifier>private</specifier> <name>PersistentBlobProvider</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>attachmentSecret</name></name> <operator>=</operator> <call><name><name>AttachmentSecretProvider</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getOrCreateAttachmentSecret</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <function><specifier>public</specifier> <type><name>Uri</name></type> <name>create</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>,
                    <parameter><decl><type><annotation>@<name>NonNull</name></annotation>  <name><name>byte</name><index>[]</index></name></type> <name>blobBytes</name></decl></parameter>,
                    <parameter><decl><type><annotation>@<name>NonNull</name></annotation>  <name>String</name></type> <name>mimeType</name></decl></parameter>,
                    <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>String</name></type> <name>fileName</name></decl></parameter>)</parameter_list>
  <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>id</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>cache</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>blobBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>create</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attachmentSecret</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>ByteArrayInputStream</name><argument_list>(<argument><expr><name>blobBytes</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>mimeType</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name><name>blobBytes</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>Uri</name></type> <name>create</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>,
                    <parameter><decl><type><annotation>@<name>NonNull</name></annotation>  <name>InputStream</name></type> <name>input</name></decl></parameter>,
                    <parameter><decl><type><annotation>@<name>NonNull</name></annotation>  <name>String</name></type> <name>mimeType</name></decl></parameter>,
                    <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>String</name></type> <name>fileName</name></decl></parameter>,
                    <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Long</name></type>   <name>fileSize</name></decl></parameter>)</parameter_list>
  <block>{
    <return>return <expr><call><name>create</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attachmentSecret</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>mimeType</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>, <argument><expr><name>fileSize</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>Uri</name></type> <name>create</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>,
                     <parameter><decl><type><annotation>@<name>NonNull</name></annotation>  <name>AttachmentSecret</name></type> <name>attachmentSecret</name></decl></parameter>,
                     <parameter><decl><type><annotation>@<name>NonNull</name></annotation>  <name>InputStream</name></type> <name>input</name></decl></parameter>,
                               <parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>,
                     <parameter><decl><type><annotation>@<name>NonNull</name></annotation>  <name>String</name></type> <name>mimeType</name></decl></parameter>,
                     <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>String</name></type> <name>fileName</name></decl></parameter>,
                     <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Long</name></type> <name>fileSize</name></decl></parameter>)</parameter_list>
  <block>{
    <expr_stmt><expr><call><name>persistToDisk</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attachmentSecret</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>Uri</name></type> <name>uniqueUri</name> <init>= <expr><call><name><name>CONTENT_URI</name><operator>.</operator><name>buildUpon</name></name><argument_list>()</argument_list></call>
                                     <operator>.</operator><call><name>appendPath</name><argument_list>(<argument><expr><name>mimeType</name></expr></argument>)</argument_list></call>
                                     <operator>.</operator><call><name>appendPath</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call>
                                     <operator>.</operator><call><name>appendEncodedPath</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>fileSize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                                     <operator>.</operator><call><name>appendEncodedPath</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                                     <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name><name>ContentUris</name><operator>.</operator><name>withAppendedId</name></name><argument_list>(<argument><expr><name>uniqueUri</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>persistToDisk</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>,
                             <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>AttachmentSecret</name></type> <name>attachmentSecret</name></decl></parameter>,
                             <parameter><decl><type><specifier>final</specifier> <name>long</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>InputStream</name></type> <name>input</name></decl></parameter>)</parameter_list>
  <block>{
    <expr_stmt><expr><call><name><name>executor</name><operator>.</operator><name>submit</name></name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{
      <try>try <block>{
        <decl_stmt><decl><type><name><name>Pair</name><argument_list type="generic">&lt;<argument><name><name>byte</name><index>[]</index></name></argument>, <argument><name>OutputStream</name></argument>&gt;</argument_list></name></type> <name>output</name> <init>= <expr><call><name><name>ModernEncryptingPartOutputStream</name><operator>.</operator><name>createFor</name></name><argument_list>(<argument><expr><name>attachmentSecret</name></expr></argument>, <argument><expr><call><name>getFile</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call><operator>.</operator><name>file</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Util</name><operator>.</operator><name>copy</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name><name>output</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></catch></try>

      <expr_stmt><expr><call><name><name>cache</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>Uri</name></type> <name>createForExternal</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>mimeType</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
    <decl_stmt><decl><type><name>File</name></type> <name>target</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name>getExternalDir</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"."</literal> <operator>+</operator> <call><name>getExtensionFromMimeType</name><argument_list>(<argument><expr><name>mimeType</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name><name>FileProviderUtil</name><operator>.</operator><name>getUriFor</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>delete</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Uri</name></type> <name>uri</name></decl></parameter>)</parameter_list> <block>{
    <switch>switch <condition>(<expr><call><name><name>MATCHER</name><operator>.</operator><name>match</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
    <case>case <expr><name>MATCH_OLD</name></expr>:</case>
    <case>case <expr><name>MATCH_NEW</name></expr>:</case>
      <decl_stmt><decl><type><name>long</name></type> <name>id</name> <init>= <expr><call><name><name>ContentUris</name><operator>.</operator><name>parseId</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>cache</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><call><name>getFile</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>ContentUris</name><operator>.</operator><name>parseId</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name><name>file</name><operator>.</operator><name>delete</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></switch>

    <comment type="line">//noinspection SimplifiableIfStatement</comment>
    <if>if <condition>(<expr><call><name>isExternalBlobUri</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><call><name><name>FileProviderUtil</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>InputStream</name></type> <name>getStream</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>cached</name> <init>= <expr><call><name><name>cache</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>cached</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <return>return <expr><operator>new</operator> <call><name>ByteArrayInputStream</name><argument_list>(<argument><expr><name>cached</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name>FileData</name></type> <name>fileData</name> <init>= <expr><call><name>getFile</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name><name>fileData</name><operator>.</operator><name>modern</name></name></expr>)</condition><then> <block type="pseudo"><return>return <expr><call><name><name>ModernDecryptingPartInputStream</name><operator>.</operator><name>createFor</name></name><argument_list>(<argument><expr><name>attachmentSecret</name></expr></argument>, <argument><expr><name><name>fileData</name><operator>.</operator><name>file</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block></then>
    <else>else                 <block type="pseudo"><return>return <expr><call><name><name>ClassicDecryptingPartInputStream</name><operator>.</operator><name>createFor</name></name><argument_list>(<argument><expr><name>attachmentSecret</name></expr></argument>, <argument><expr><name><name>fileData</name><operator>.</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</return></block></else></if>
  }</block></function>

  <function><specifier>private</specifier> <type><name>FileData</name></type> <name>getFile</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>File</name></type> <name>legacy</name>      <init>= <expr><call><name>getLegacyFile</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>File</name></type> <name>cache</name>       <init>= <expr><call><name>getCacheFile</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>File</name></type> <name>modernCache</name> <init>= <expr><call><name>getModernCacheFile</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if      <condition>(<expr><call><name><name>legacy</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><operator>new</operator> <call><name>FileData</name><argument_list>(<argument><expr><name>legacy</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return></block></then>
    <elseif>else <if>if <condition>(<expr><call><name><name>cache</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then>  <block type="pseudo"><return>return <expr><operator>new</operator> <call><name>FileData</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return></block></then></if></elseif>
    <else>else                      <block type="pseudo"><return>return <expr><operator>new</operator> <call><name>FileData</name><argument_list>(<argument><expr><name>modernCache</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return></block></else></if>
  }</block></function>

  <function><specifier>private</specifier> <type><name>File</name></type> <name>getLegacyFile</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getDir</name></name><argument_list>(<argument><expr><literal type="string">"captures"</literal></expr></argument>, <argument><expr><name><name>Context</name><operator>.</operator><name>MODE_PRIVATE</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>id</name> <operator>+</operator> <literal type="string">"."</literal> <operator>+</operator> <name>BLOB_EXTENSION</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>File</name></type> <name>getCacheFile</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getCacheDir</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"capture-"</literal> <operator>+</operator> <name>id</name> <operator>+</operator> <literal type="string">"."</literal> <operator>+</operator> <name>BLOB_EXTENSION</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>File</name></type> <name>getModernCacheFile</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getCacheDir</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"capture-m-"</literal> <operator>+</operator> <name>id</name> <operator>+</operator> <literal type="string">"."</literal> <operator>+</operator> <name>BLOB_EXTENSION</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>String</name></type> <name>getMimeType</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Uri</name></type> <name>persistentBlobUri</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><operator>!</operator><call><name>isAuthority</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>persistentBlobUri</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="null">null</literal></expr>;</return></block></then></if>
    <return>return <expr><ternary><condition><expr><call><name>isExternalBlobUri</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>persistentBlobUri</name></expr></argument>)</argument_list></call></expr>
        ?</condition><then> <expr><call><name>getMimeTypeFromExtension</name><argument_list>(<argument><expr><name>persistentBlobUri</name></expr></argument>)</argument_list></call></expr>
        </then><else>: <expr><call><name><name>persistentBlobUri</name><operator>.</operator><name>getPathSegments</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name>MIMETYPE_PATH_SEGMENT</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>String</name></type> <name>getFileName</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Uri</name></type> <name>persistentBlobUri</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><operator>!</operator><call><name>isAuthority</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>persistentBlobUri</name></expr></argument>)</argument_list></call></expr>)</condition><then>      <block type="pseudo"><return>return <expr><literal type="null">null</literal></expr>;</return></block></then></if>
    <if>if <condition>(<expr><call><name>isExternalBlobUri</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>persistentBlobUri</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="null">null</literal></expr>;</return></block></then></if>
    <if>if <condition>(<expr><call><name><name>MATCHER</name><operator>.</operator><name>match</name></name><argument_list>(<argument><expr><name>persistentBlobUri</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>MATCH_OLD</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="null">null</literal></expr>;</return></block></then></if>

    <return>return <expr><call><name><name>persistentBlobUri</name><operator>.</operator><name>getPathSegments</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name>FILENAME_PATH_SEGMENT</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>Long</name></type> <name>getFileSize</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>Uri</name></type> <name>persistentBlobUri</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><operator>!</operator><call><name>isAuthority</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>persistentBlobUri</name></expr></argument>)</argument_list></call></expr>)</condition><then>      <block type="pseudo"><return>return <expr><literal type="null">null</literal></expr>;</return></block></then></if>
    <if>if <condition>(<expr><call><name>isExternalBlobUri</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>persistentBlobUri</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="null">null</literal></expr>;</return></block></then></if>
    <if>if <condition>(<expr><call><name><name>MATCHER</name><operator>.</operator><name>match</name></name><argument_list>(<argument><expr><name>persistentBlobUri</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>MATCH_OLD</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="null">null</literal></expr>;</return></block></then></if>

    <try>try <block>{
      <return>return <expr><call><name><name>Long</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>persistentBlobUri</name><operator>.</operator><name>getPathSegments</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name>FILESIZE_PATH_SEGMENT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NumberFormatException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="null">null</literal></expr>;</return>
    }</block></catch></try>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>String</name></type> <name>getExtensionFromMimeType</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>mimeType</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>extension</name> <init>= <expr><call><name><name>MimeTypeMap</name><operator>.</operator><name>getSingleton</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getExtensionFromMimeType</name><argument_list>(<argument><expr><name>mimeType</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><ternary><condition><expr><name>extension</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name>extension</name></expr> </then><else>: <expr><name>BLOB_EXTENSION</name></expr></else></ternary></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>String</name></type> <name>getMimeTypeFromExtension</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Uri</name></type> <name>uri</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>mimeType</name> <init>= <expr><call><name><name>MimeTypeMap</name><operator>.</operator><name>getSingleton</name></name><argument_list>()</argument_list></call>
        <operator>.</operator><call><name>getMimeTypeFromExtension</name><argument_list>(<argument><expr><call><name><name>MimeTypeMap</name><operator>.</operator><name>getFileExtensionFromUrl</name></name><argument_list>(<argument><expr><call><name><name>uri</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><ternary><condition><expr><name>mimeType</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name>mimeType</name></expr> </then><else>: <expr><literal type="string">"application/octet-stream"</literal></expr></else></ternary></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>File</name></type> <name>getExternalDir</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>File</name></type> <name>externalDir</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>getExternalCacheDir</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>externalDir</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"no external files directory"</literal></expr></argument>)</argument_list></call></expr>;</throw></block></then></if>
    <return>return <expr><name>externalDir</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isAuthority</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Uri</name></type> <name>uri</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>matchResult</name> <init>= <expr><call><name><name>MATCHER</name><operator>.</operator><name>match</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>matchResult</name> <operator>==</operator> <name>MATCH_NEW</name> <operator>||</operator> <name>matchResult</name> <operator>==</operator> <name>MATCH_OLD</name> <operator>||</operator> <call><name>isExternalBlobUri</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isExternalBlobUri</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Uri</name></type> <name>uri</name></decl></parameter>)</parameter_list> <block>{
    <try>try <block>{
      <return>return <expr><call><name><name>uri</name><operator>.</operator><name>getPath</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>startsWith</name><argument_list>(<argument><expr><call><name>getExternalDir</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>FileProviderUtil</name><operator>.</operator><name>isAuthority</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>ioe</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Failed to determine if it's an external blob URI."</literal></expr></argument>, <argument><expr><name>ioe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    }</block></catch></try>
  }</block></function>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>FileData</name> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>File</name></type>    <name>file</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>boolean</name></type> <name>modern</name></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>FileData</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>file</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>modern</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>file</name></name>   <operator>=</operator> <name>file</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>modern</name></name> <operator>=</operator> <name>modern</name></expr>;</expr_stmt>
    }</block></constructor>
  }</block></class>
}</block></class>
</unit>
