<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\providers\MemoryBlobProvider.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>providers</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>ContentUris</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>NoSuchAlgorithmException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>SecureRandom</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<class><specifier>public</specifier> class <name>MemoryBlobProvider</name> <block>{

  <decl_stmt><decl><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unused"</literal></expr></argument>)</argument_list></annotation>
  <specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>MemoryBlobProvider</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>public</specifier>  <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>AUTHORITY</name>   <init>= <expr><literal type="string">"org.thoughtcrime.securesms"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier>  <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>PATH</name>        <init>= <expr><literal type="string">"memory/*/#"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Uri</name></type>    <name>CONTENT_URI</name> <init>= <expr><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><literal type="string">"content://"</literal> <operator>+</operator> <name>AUTHORITY</name> <operator>+</operator> <literal type="string">"/memory"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>, <argument><name>Entry</name></argument>&gt;</argument_list></name></type> <name>cache</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>MemoryBlobProvider</name></type> <name>instance</name> <init>= <expr><operator>new</operator> <call><name>MemoryBlobProvider</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>MemoryBlobProvider</name></type> <name>getInstance</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>instance</name></expr>;</return>
  }</block></function>

  <constructor><specifier>private</specifier> <name>MemoryBlobProvider</name><parameter_list>()</parameter_list> <block>{}</block></constructor>

  <function><specifier>public</specifier> <specifier>synchronized</specifier> <type><name>Uri</name></type> <name>createSingleUseUri</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>byte</name><index>[]</index></name></type> <name>blob</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>createUriInternal</name><argument_list>(<argument><expr><name>blob</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>synchronized</specifier> <type><name>Uri</name></type> <name>createUri</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>byte</name><index>[]</index></name></type> <name>blob</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>createUriInternal</name><argument_list>(<argument><expr><name>blob</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>synchronized</specifier> <type><name>void</name></type> <name>delete</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Uri</name></type> <name>uri</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>cache</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><call><name><name>ContentUris</name><operator>.</operator><name>parseId</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>synchronized</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>byte</name><index>[]</index></name></type> <name>getBlob</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Uri</name></type> <name>uri</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>long</name></type>  <name>id</name>    <init>= <expr><call><name><name>ContentUris</name><operator>.</operator><name>parseId</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Entry</name></type> <name>entry</name> <init>= <expr><call><name><name>cache</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>ContentUris</name><operator>.</operator><name>parseId</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>entry</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"ID not found: "</literal> <operator>+</operator> <name>id</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></then></if>

    <if>if <condition>(<expr><call><name><name>entry</name><operator>.</operator><name>isSingleUse</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>cache</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <return>return <expr><call><name><name>entry</name><operator>.</operator><name>getBlob</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>synchronized</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>InputStream</name></type> <name>getStream</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
    <decl_stmt><decl><type><name>Entry</name></type> <name>entry</name> <init>= <expr><call><name><name>cache</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>entry</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"ID not found: "</literal> <operator>+</operator> <name>id</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></then></if>

    <if>if <condition>(<expr><call><name><name>entry</name><operator>.</operator><name>isSingleUse</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>cache</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <return>return <expr><operator>new</operator> <call><name>ByteArrayInputStream</name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getBlob</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>Uri</name></type> <name>createUriInternal</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>byte</name><index>[]</index></name></type> <name>blob</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>singleUse</name></decl></parameter>)</parameter_list> <block>{
    <try>try <block>{
      <decl_stmt><decl><type><name>long</name></type> <name>id</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><call><name><name>SecureRandom</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><literal type="string">"SHA1PRNG"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>nextLong</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>cache</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Entry</name><argument_list>(<argument><expr><name>blob</name></expr></argument>, <argument><expr><name>singleUse</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>Uri</name></type> <name>uniqueUri</name> <init>= <expr><call><name><name>Uri</name><operator>.</operator><name>withAppendedPath</name></name><argument_list>(<argument><expr><name>CONTENT_URI</name></expr></argument>, <argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr><call><name><name>ContentUris</name><operator>.</operator><name>withAppendedId</name></name><argument_list>(<argument><expr><name>uniqueUri</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NoSuchAlgorithmException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></catch></try>
  }</block></function>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>Entry</name> <block>{

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type>  <name>blob</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>boolean</name></type> <name>singleUse</name></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>Entry</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>byte</name><index>[]</index></name></type> <name>blob</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>singleUse</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>blob</name></name>      <operator>=</operator> <name>blob</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>singleUse</name></name> <operator>=</operator> <name>singleUse</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>getBlob</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>blob</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isSingleUse</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>singleUse</name></expr>;</return>
    }</block></function>
  }</block></class>
}</block></class>
</unit>
