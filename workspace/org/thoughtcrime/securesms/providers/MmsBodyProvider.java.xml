<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\providers\MmsBodyProvider.java"><comment type="block" format="javadoc">/**
 * Copyright (C) 2015 Open Whisper Systems
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>providers</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>ContentProvider</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>ContentUris</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>ContentValues</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>UriMatcher</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>database</name><operator>.</operator><name>Cursor</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>ParcelFileDescriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>logging</name><operator>.</operator><name>Log</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileNotFoundException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>OutputStream</name></name>;</import>

<class><specifier>public</specifier> class <name>MmsBodyProvider</name> <super><extends>extends <name>ContentProvider</name></extends></super> <block>{
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name>                <init>= <expr><call><name><name>MmsBodyProvider</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>CONTENT_URI_STRING</name> <init>= <expr><literal type="string">"content://org.thoughtcrime.provider.securesms.mms/mms"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier>  <specifier>static</specifier> <type><specifier>final</specifier> <name>Uri</name></type>    <name>CONTENT_URI</name>        <init>= <expr><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>CONTENT_URI_STRING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type>    <name>SINGLE_ROW</name>         <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>UriMatcher</name></type> <name>uriMatcher</name></decl>;</decl_stmt>

  <static>static <block>{
    <expr_stmt><expr><name>uriMatcher</name> <operator>=</operator> <operator>new</operator> <call><name>UriMatcher</name><argument_list>(<argument><expr><name><name>UriMatcher</name><operator>.</operator><name>NO_MATCH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>uriMatcher</name><operator>.</operator><name>addURI</name></name><argument_list>(<argument><expr><literal type="string">"org.thoughtcrime.provider.securesms.mms"</literal></expr></argument>, <argument><expr><literal type="string">"mms/#"</literal></expr></argument>, <argument><expr><name>SINGLE_ROW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></static>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>boolean</name></type> <name>onCreate</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
  }</block></function>


  <function><specifier>private</specifier> <type><name>File</name></type> <name>getFile</name><parameter_list>(<parameter><decl><type><name>Uri</name></type> <name>uri</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>long</name></type> <name>id</name> <init>= <expr><call><name><name>Long</name><operator>.</operator><name>parseLong</name></name><argument_list>(<argument><expr><call><name><name>uri</name><operator>.</operator><name>getPathSegments</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCacheDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>id</name> <operator>+</operator> <literal type="string">".mmsbody"</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>ParcelFileDescriptor</name></type> <name>openFile</name><parameter_list>(<parameter><decl><type><name>Uri</name></type> <name>uri</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>mode</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>FileNotFoundException</name></expr></argument></throws> <block>{
    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"openFile("</literal> <operator>+</operator> <name>uri</name> <operator>+</operator> <literal type="string">", "</literal> <operator>+</operator> <name>mode</name> <operator>+</operator> <literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <switch>switch <condition>(<expr><call><name><name>uriMatcher</name><operator>.</operator><name>match</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
    <case>case <expr><name>SINGLE_ROW</name></expr>:</case>
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Fetching message body for a single row..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>File</name></type> <name>tmpFile</name> <init>= <expr><call><name>getFile</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>fileMode</name></decl>;</decl_stmt>
      <switch>switch <condition>(<expr><name>mode</name></expr>)</condition> <block>{
      <case>case <expr><literal type="string">"w"</literal></expr>:</case> <expr_stmt><expr><name>fileMode</name> <operator>=</operator> <name><name>ParcelFileDescriptor</name><operator>.</operator><name>MODE_TRUNCATE</name></name> <operator>|</operator>
                           <name><name>ParcelFileDescriptor</name><operator>.</operator><name>MODE_CREATE</name></name>   <operator>|</operator>
                           <name><name>ParcelFileDescriptor</name><operator>.</operator><name>MODE_WRITE_ONLY</name></name></expr>;</expr_stmt> <break>break;</break>
      <case>case <expr><literal type="string">"r"</literal></expr>:</case> <expr_stmt><expr><name>fileMode</name> <operator>=</operator> <name><name>ParcelFileDescriptor</name><operator>.</operator><name>MODE_READ_ONLY</name></name></expr>;</expr_stmt>  <break>break;</break>
      <default>default:</default>  <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"requested file mode unsupported"</literal></expr></argument>)</argument_list></call></expr>;</throw>
      }</block></switch>

      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"returning file "</literal> <operator>+</operator> <call><name><name>tmpFile</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><call><name><name>ParcelFileDescriptor</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name>tmpFile</name></expr></argument>, <argument><expr><name>fileMode</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></switch>

    <throw>throw <expr><operator>new</operator> <call><name>FileNotFoundException</name><argument_list>(<argument><expr><literal type="string">"Request for bad message."</literal></expr></argument>)</argument_list></call></expr>;</throw>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>int</name></type> <name>delete</name><parameter_list>(<parameter><decl><type><name>Uri</name></type> <name>uri</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>arg1</name></decl></parameter>, <parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>arg2</name></decl></parameter>)</parameter_list> <block>{
    <switch>switch <condition>(<expr><call><name><name>uriMatcher</name><operator>.</operator><name>match</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
    <case>case <expr><name>SINGLE_ROW</name></expr>:</case>
      <return>return <expr><ternary><condition><expr><call><name>getFile</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>delete</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
    }</block></switch>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>String</name></type> <name>getType</name><parameter_list>(<parameter><decl><type><name>Uri</name></type> <name>arg0</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><literal type="null">null</literal></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>Uri</name></type> <name>insert</name><parameter_list>(<parameter><decl><type><name>Uri</name></type> <name>arg0</name></decl></parameter>, <parameter><decl><type><name>ContentValues</name></type> <name>arg1</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><literal type="null">null</literal></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>Cursor</name></type> <name>query</name><parameter_list>(<parameter><decl><type><name>Uri</name></type> <name>arg0</name></decl></parameter>, <parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>arg1</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>arg2</name></decl></parameter>, <parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>arg3</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>arg4</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><literal type="null">null</literal></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>int</name></type> <name>update</name><parameter_list>(<parameter><decl><type><name>Uri</name></type> <name>arg0</name></decl></parameter>, <parameter><decl><type><name>ContentValues</name></type> <name>arg1</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>arg2</name></decl></parameter>, <parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>arg3</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  }</block></function>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Pointer</name></type> <name>makeTemporaryPointer</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><operator>new</operator> <call><name>Pointer</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>ContentUris</name><operator>.</operator><name>withAppendedId</name></name><argument_list>(<argument><expr><name><name>MmsBodyProvider</name><operator>.</operator><name>CONTENT_URI</name></name></expr></argument>, <argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <class><specifier>public</specifier> <specifier>static</specifier> class <name>Pointer</name> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Uri</name></type>     <name>uri</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>Pointer</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>Uri</name></type> <name>uri</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>context</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>uri</name></name> <operator>=</operator> <name>uri</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <type><name>Uri</name></type> <name>getUri</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>uri</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>OutputStream</name></type> <name>getOutputStream</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>FileNotFoundException</name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>context</name><operator>.</operator><name>getContentResolver</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>openOutputStream</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>InputStream</name></type> <name>getInputStream</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>FileNotFoundException</name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>context</name><operator>.</operator><name>getContentResolver</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>openInputStream</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>context</name><operator>.</operator><name>getContentResolver</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>delete</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
  }</block></class>
}</block></class>
</unit>
