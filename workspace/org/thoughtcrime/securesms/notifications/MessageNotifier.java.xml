<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\notifications\MessageNotifier.java"><comment type="block">/*
 * Copyright (C) 2011 Whisper Systems
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>notifications</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>annotation</name><operator>.</operator><name>SuppressLint</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>AlarmManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Notification</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>NotificationManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>PendingIntent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>BroadcastReceiver</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>database</name><operator>.</operator><name>Cursor</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>media</name><operator>.</operator><name>AudioAttributes</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>media</name><operator>.</operator><name>AudioManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>media</name><operator>.</operator><name>Ringtone</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>media</name><operator>.</operator><name>RingtoneManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>AsyncTask</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>service</name><operator>.</operator><name>notification</name><operator>.</operator><name>StatusBarNotification</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>app</name><operator>.</operator><name>NotificationCompat</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>app</name><operator>.</operator><name>NotificationManagerCompat</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>logging</name><operator>.</operator><name>Log</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>conversation</name><operator>.</operator><name>ConversationActivity</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>contactshare</name><operator>.</operator><name>ContactUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>contactshare</name><operator>.</operator><name>Contact</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>DatabaseFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>MessagingDatabase</name><operator>.</operator><name>MarkedMessageInfo</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>MmsSmsDatabase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>ThreadDatabase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>model</name><operator>.</operator><name>MediaMmsMessageRecord</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>model</name><operator>.</operator><name>MessageRecord</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>model</name><operator>.</operator><name>MmsMessageRecord</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mms</name><operator>.</operator><name>SlideDeck</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>recipients</name><operator>.</operator><name>Recipient</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>service</name><operator>.</operator><name>IncomingMessageObserver</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>service</name><operator>.</operator><name>KeyCachingService</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>ServiceUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>SpanUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>TextSecurePreferences</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>CallNotificationBuilder</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>signalservice</name><operator>.</operator><name>internal</name><operator>.</operator><name>util</name><operator>.</operator><name>Util</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ListIterator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Executor</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Executors</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>atomic</name><operator>.</operator><name>AtomicBoolean</name></name>;</import>

<import>import <name><name>me</name><operator>.</operator><name>leolin</name><operator>.</operator><name>shortcutbadger</name><operator>.</operator><name>ShortcutBadger</name></name>;</import>


<comment type="block" format="javadoc">/**
 * Handles posting system notifications for new messages.
 *
 *
 * @author Moxie Marlinspike
 */</comment>

<class><specifier>public</specifier> class <name>MessageNotifier</name> <block>{

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>MessageNotifier</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier>  <name>String</name></type> <name>EXTRA_REMOTE_REPLY</name> <init>= <expr><literal type="string">"extra_remote_reply"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier>  <name>int</name></type>   <name>SUMMARY_NOTIFICATION_ID</name>   <init>= <expr><literal type="number">1338</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type>    <name>PENDING_MESSAGES_ID</name>       <init>= <expr><literal type="number">1111</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>NOTIFICATION_GROUP</name>        <init>= <expr><literal type="string">"messages"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>long</name></type>   <name>MIN_AUDIBLE_PERIOD_MILLIS</name> <init>= <expr><call><name><name>TimeUnit</name><operator>.</operator><name>SECONDS</name><operator>.</operator><name>toMillis</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>long</name></type>   <name>DESKTOP_ACTIVITY_PERIOD</name>   <init>= <expr><call><name><name>TimeUnit</name><operator>.</operator><name>MINUTES</name><operator>.</operator><name>toMillis</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>volatile</specifier> <specifier>static</specifier>       <name>long</name></type>               <name>visibleThread</name>                <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>volatile</specifier> <specifier>static</specifier>       <name>long</name></type>               <name>lastDesktopActivityTimestamp</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>volatile</specifier> <specifier>static</specifier>       <name>long</name></type>               <name>lastAudibleNotification</name>      <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier>          <specifier>static</specifier> <type><specifier>final</specifier> <name>CancelableExecutor</name></type> <name>executor</name>                     <init>= <expr><operator>new</operator> <call><name>CancelableExecutor</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setVisibleThread</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>threadId</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name>visibleThread</name> <operator>=</operator> <name>threadId</name></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setLastDesktopActivityTimestamp</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>timestamp</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name>lastDesktopActivityTimestamp</name> <operator>=</operator> <name>timestamp</name></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>notifyMessageDeliveryFailed</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>Recipient</name></type> <name>recipient</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>threadId</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>visibleThread</name> <operator>==</operator> <name>threadId</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>sendInThreadNotification</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>recipient</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <decl_stmt><decl><type><name>Intent</name></type> <name>intent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>ConversationActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>ConversationActivity</name><operator>.</operator><name>ADDRESS_EXTRA</name></name></expr></argument>, <argument><expr><call><name><name>recipient</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>ConversationActivity</name><operator>.</operator><name>THREAD_ID_EXTRA</name></name></expr></argument>, <argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>setData</name></name><argument_list>(<argument><expr><operator>(</operator><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><literal type="string">"custom://"</literal> <operator>+</operator> <call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>FailedNotificationBuilder</name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name>FailedNotificationBuilder</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>getNotificationPrivacy</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><operator>(</operator><operator>(</operator><name>NotificationManager</name><operator>)</operator><call><name><name>context</name><operator>.</operator><name>getSystemService</name></name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>NOTIFICATION_SERVICE</name></name></expr></argument>)</argument_list></call><operator>)</operator>
        <operator>.</operator><call><name>notify</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>threadId</name></expr></argument>, <argument><expr><call><name><name>builder</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>notifyMessagesPending</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><operator>!</operator><call><name><name>TextSecurePreferences</name><operator>.</operator><name>isNotificationsEnabled</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <return>return;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name>PendingMessageNotificationBuilder</name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name>PendingMessageNotificationBuilder</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>getNotificationPrivacy</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>ServiceUtil</name><operator>.</operator><name>getNotificationManager</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>notify</name><argument_list>(<argument><expr><name>PENDING_MESSAGES_ID</name></expr></argument>, <argument><expr><call><name><name>builder</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>cancelDelayedNotifications</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>executor</name><operator>.</operator><name>cancel</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>cancelActiveNotifications</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>NotificationManager</name></type> <name>notifications</name> <init>= <expr><call><name><name>ServiceUtil</name><operator>.</operator><name>getNotificationManager</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>notifications</name><operator>.</operator><name>cancel</name></name><argument_list>(<argument><expr><name>SUMMARY_NOTIFICATION_ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;=</operator> <literal type="number">23</literal></expr>)</condition><then> <block>{
      <try>try <block>{
        <decl_stmt><decl><type><name><name>StatusBarNotification</name><index>[]</index></name></type> <name>activeNotifications</name> <init>= <expr><call><name><name>notifications</name><operator>.</operator><name>getActiveNotifications</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>StatusBarNotification</name></type> <name>activeNotification</name> <range>: <expr><name>activeNotifications</name></expr></range></decl></init>)</control> <block>{
          <if>if <condition>(<expr><call><name><name>activeNotification</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>CallNotificationBuilder</name><operator>.</operator><name>WEBRTC_NOTIFICATION</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>notifications</name><operator>.</operator><name>cancel</name></name><argument_list>(<argument><expr><call><name><name>activeNotification</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></then></if>
        }</block></for>
      }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
        <comment type="line">// XXX Appears to be a ROM bug, see #6043</comment>
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>notifications</name><operator>.</operator><name>cancelAll</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></catch></try>
    }</block></then></if>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>cancelOrphanedNotifications</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>NotificationState</name></type> <name>notificationState</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;=</operator> <literal type="number">23</literal></expr>)</condition><then> <block>{
      <try>try <block>{
        <decl_stmt><decl><type><name>NotificationManager</name></type>     <name>notifications</name>       <init>= <expr><call><name><name>ServiceUtil</name><operator>.</operator><name>getNotificationManager</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>StatusBarNotification</name><index>[]</index></name></type> <name>activeNotifications</name> <init>= <expr><call><name><name>notifications</name><operator>.</operator><name>getActiveNotifications</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>StatusBarNotification</name></type> <name>notification</name> <range>: <expr><name>activeNotifications</name></expr></range></decl></init>)</control> <block>{
          <decl_stmt><decl><type><name>boolean</name></type> <name>validNotification</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

          <if>if <condition>(<expr><call><name><name>notification</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>SUMMARY_NOTIFICATION_ID</name> <operator>&amp;&amp;</operator>
              <call><name><name>notification</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>CallNotificationBuilder</name><operator>.</operator><name>WEBRTC_NOTIFICATION</name></name>   <operator>&amp;&amp;</operator>
              <call><name><name>notification</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>KeyCachingService</name><operator>.</operator><name>SERVICE_RUNNING_ID</name></name>          <operator>&amp;&amp;</operator>
              <call><name><name>notification</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>IncomingMessageObserver</name><operator>.</operator><name>FOREGROUND_ID</name></name>         <operator>&amp;&amp;</operator>
              <call><name><name>notification</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>PENDING_MESSAGES_ID</name></expr>)</condition><then>
          <block>{
            <for>for <control>(<init><decl><type><name>NotificationItem</name></type> <name>item</name> <range>: <expr><call><name><name>notificationState</name><operator>.</operator><name>getNotifications</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
              <if>if <condition>(<expr><call><name><name>notification</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call> <operator>==</operator> <operator>(</operator><name>SUMMARY_NOTIFICATION_ID</name> <operator>+</operator> <call><name><name>item</name><operator>.</operator><name>getThreadId</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>validNotification</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                <break>break;</break>
              }</block></then></if>
            }</block></for>

            <if>if <condition>(<expr><operator>!</operator><name>validNotification</name></expr>)</condition><then> <block>{
              <expr_stmt><expr><call><name><name>notifications</name><operator>.</operator><name>cancel</name></name><argument_list>(<argument><expr><call><name><name>notification</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
          }</block></then></if>
        }</block></for>
      }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
        <comment type="line">// XXX Android ROM Bug, see #6043</comment>
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></catch></try>
    }</block></then></if>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>updateNotification</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><operator>!</operator><call><name><name>TextSecurePreferences</name><operator>.</operator><name>isNotificationsEnabled</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <return>return;</return>
    }</block></then></if>

    <expr_stmt><expr><call><name>updateNotification</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>updateNotification</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>threadId</name></decl></parameter>)</parameter_list>
  <block>{
    <if>if <condition>(<expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>lastDesktopActivityTimestamp</name> <operator>&lt;</operator> <name>DESKTOP_ACTIVITY_PERIOD</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Scheduling delayed notification..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>executor</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>DelayedNotification</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><call><name>updateNotification</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>threadId</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>updateNotification</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation>  <name>Context</name></type> <name>context</name></decl></parameter>,
                                        <parameter><decl><type><name>long</name></type>      <name>threadId</name></decl></parameter>,
                                        <parameter><decl><type><name>boolean</name></type>   <name>signal</name></decl></parameter>)</parameter_list>
  <block>{
    <decl_stmt><decl><type><name>boolean</name></type>    <name>isVisible</name>  <init>= <expr><name>visibleThread</name> <operator>==</operator> <name>threadId</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>ThreadDatabase</name></type> <name>threads</name>    <init>= <expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getThreadDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Recipient</name></type>      <name>recipients</name> <init>= <expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getThreadDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call>
                                               <operator>.</operator><call><name>getRecipientForThreadId</name><argument_list>(<argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>isVisible</name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>MarkedMessageInfo</name></argument>&gt;</argument_list></name></type> <name>messageIds</name> <init>= <expr><call><name><name>threads</name><operator>.</operator><name>setRead</name></name><argument_list>(<argument><expr><name>threadId</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>MarkReadReceiver</name><operator>.</operator><name>process</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>messageIds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><operator>!</operator><call><name><name>TextSecurePreferences</name><operator>.</operator><name>isNotificationsEnabled</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <operator>(</operator><name>recipients</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>recipients</name><operator>.</operator><name>isMuted</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition><then>
    <block>{
      <return>return;</return>
    }</block></then></if>

    <if>if <condition>(<expr><name>isVisible</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>sendInThreadNotification</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>threads</name><operator>.</operator><name>getRecipientForThreadId</name></name><argument_list>(<argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><call><name>updateNotification</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>signal</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>updateNotification</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>,
                                         <parameter><decl><type><name>boolean</name></type> <name>signal</name></decl></parameter>,
                                         <parameter><decl><type><name>int</name></type>     <name>reminderCount</name></decl></parameter>)</parameter_list>
  <block>{
    <decl_stmt><decl><type><name>Cursor</name></type> <name>telcoCursor</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Cursor</name></type> <name>pushCursor</name>  <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <try>try <block>{
      <expr_stmt><expr><name>telcoCursor</name> <operator>=</operator> <call><name><name>DatabaseFactory</name><operator>.</operator><name>getMmsSmsDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getUnread</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pushCursor</name>  <operator>=</operator> <call><name><name>DatabaseFactory</name><operator>.</operator><name>getPushDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getPending</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><operator>(</operator><name>telcoCursor</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>telcoCursor</name><operator>.</operator><name>isAfterLast</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
          <operator>(</operator><name>pushCursor</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>pushCursor</name><operator>.</operator><name>isAfterLast</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition><then>
      <block>{
        <expr_stmt><expr><call><name>cancelActiveNotifications</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>updateBadge</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>clearReminder</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
      }</block></then></if>

      <decl_stmt><decl><type><name>NotificationState</name></type> <name>notificationState</name> <init>= <expr><call><name>constructNotificationState</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>telcoCursor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><name>signal</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>lastAudibleNotification</name><operator>)</operator> <operator>&lt;</operator> <name>MIN_AUDIBLE_PERIOD_MILLIS</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>signal</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
      }</block></then> <elseif>else <if>if <condition>(<expr><name>signal</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>lastAudibleNotification</name> <operator>=</operator> <call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></then></if></elseif></if>

      <if>if <condition>(<expr><call><name><name>notificationState</name><operator>.</operator><name>hasMultipleThreads</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;=</operator> <literal type="number">23</literal></expr>)</condition><then> <block>{
          <for>for <control>(<init><decl><type><name>long</name></type> <name>threadId</name> <range>: <expr><call><name><name>notificationState</name><operator>.</operator><name>getThreads</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
            <expr_stmt><expr><call><name>sendSingleThreadNotification</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>NotificationState</name><argument_list>(<argument><expr><call><name><name>notificationState</name><operator>.</operator><name>getNotificationsForThread</name></name><argument_list>(<argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></for>
        }</block></then></if>

        <expr_stmt><expr><call><name>sendMultipleThreadNotification</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>notificationState</name></expr></argument>, <argument><expr><name>signal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name>sendSingleThreadNotification</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>notificationState</name></expr></argument>, <argument><expr><name>signal</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></else></if>

      <expr_stmt><expr><call><name>cancelOrphanedNotifications</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>notificationState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>updateBadge</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>notificationState</name><operator>.</operator><name>getMessageCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><name>signal</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>scheduleReminder</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>reminderCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block> <finally>finally <block>{
      <if>if <condition>(<expr><name>telcoCursor</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>telcoCursor</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
      <if>if <condition>(<expr><name>pushCursor</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>  <block type="pseudo"><expr_stmt><expr><call><name><name>pushCursor</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></finally></try>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>sendSingleThreadNotification</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation>  <name>Context</name></type> <name>context</name></decl></parameter>,
                                                   <parameter><decl><type><annotation>@<name>NonNull</name></annotation>  <name>NotificationState</name></type> <name>notificationState</name></decl></parameter>,
                                                   <parameter><decl><type><name>boolean</name></type> <name>signal</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>bundled</name></decl></parameter>)</parameter_list>
  <block>{
    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"sendSingleThreadNotification()  signal: "</literal> <operator>+</operator> <name>signal</name> <operator>+</operator> <literal type="string">"  bundled: "</literal> <operator>+</operator> <name>bundled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><call><name><name>notificationState</name><operator>.</operator><name>getNotifications</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <if>if <condition>(<expr><operator>!</operator><name>bundled</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>cancelActiveNotifications</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Empty notification state. Skipping."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name>SingleRecipientNotificationBuilder</name></type> <name>builder</name>        <init>= <expr><operator>new</operator> <call><name>SingleRecipientNotificationBuilder</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>getNotificationPrivacy</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>NotificationItem</name></argument>&gt;</argument_list></name></type>             <name>notifications</name>  <init>= <expr><call><name><name>notificationState</name><operator>.</operator><name>getNotifications</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Recipient</name></type>                          <name>recipient</name>      <init>= <expr><call><name><name>notifications</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getRecipient</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                                <name>notificationId</name> <init>= <expr><call>(<name>int</name>) <argument_list>(<argument><expr><name>SUMMARY_NOTIFICATION_ID</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>bundled</name></expr> ?</condition><then> <expr><call><name><name>notifications</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getThreadId</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setThread</name></name><argument_list>(<argument><expr><call><name><name>notifications</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getRecipient</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setMessageCount</name></name><argument_list>(<argument><expr><call><name><name>notificationState</name><operator>.</operator><name>getMessageCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setPrimaryMessageBody</name></name><argument_list>(<argument><expr><name>recipient</name></expr></argument>, <argument><expr><call><name><name>notifications</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getIndividualRecipient</name><argument_list>()</argument_list></call></expr></argument>,
                                  <argument><expr><call><name><name>notifications</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getText</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>notifications</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getSlideDeck</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setContentIntent</name></name><argument_list>(<argument><expr><call><name><name>notifications</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getPendingIntent</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setDeleteIntent</name></name><argument_list>(<argument><expr><call><name><name>notificationState</name><operator>.</operator><name>getDeleteIntent</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setOnlyAlertOnce</name></name><argument_list>(<argument><expr><operator>!</operator><name>signal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setGroupAlertBehavior</name></name><argument_list>(<argument><expr><name><name>NotificationCompat</name><operator>.</operator><name>GROUP_ALERT_SUMMARY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>long</name></type> <name>timestamp</name> <init>= <expr><call><name><name>notifications</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getTimestamp</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>timestamp</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setWhen</name></name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addActions</name></name><argument_list>(<argument><expr><call><name><name>notificationState</name><operator>.</operator><name>getMarkAsReadIntent</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>notificationId</name></expr></argument>)</argument_list></call></expr></argument>,
                       <argument><expr><call><name><name>notificationState</name><operator>.</operator><name>getQuickReplyIntent</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>notifications</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getRecipient</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                       <argument><expr><call><name><name>notificationState</name><operator>.</operator><name>getRemoteReplyIntent</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>notifications</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getRecipient</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addAndroidAutoAction</name></name><argument_list>(<argument><expr><call><name><name>notificationState</name><operator>.</operator><name>getAndroidAutoReplyIntent</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>notifications</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getRecipient</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                 <argument><expr><call><name><name>notificationState</name><operator>.</operator><name>getAndroidAutoHeardIntent</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>notificationId</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>notifications</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getTimestamp</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>ListIterator</name><argument_list type="generic">&lt;<argument><name>NotificationItem</name></argument>&gt;</argument_list></name></type> <name>iterator</name> <init>= <expr><call><name><name>notifications</name><operator>.</operator><name>listIterator</name></name><argument_list>(<argument><expr><call><name><name>notifications</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <while>while<condition>(<expr><call><name><name>iterator</name><operator>.</operator><name>hasPrevious</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
      <decl_stmt><decl><type><name>NotificationItem</name></type> <name>item</name> <init>= <expr><call><name><name>iterator</name><operator>.</operator><name>previous</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addMessageBody</name></name><argument_list>(<argument><expr><call><name><name>item</name><operator>.</operator><name>getRecipient</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>item</name><operator>.</operator><name>getIndividualRecipient</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>item</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></while>

    <if>if <condition>(<expr><name>signal</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setAlarms</name></name><argument_list>(<argument><expr><call><name><name>notificationState</name><operator>.</operator><name>getRingtone</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>notificationState</name><operator>.</operator><name>getVibrate</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setTicker</name></name><argument_list>(<argument><expr><call><name><name>notifications</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getIndividualRecipient</name><argument_list>()</argument_list></call></expr></argument>,
                        <argument><expr><call><name><name>notifications</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getText</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>bundled</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setGroup</name></name><argument_list>(<argument><expr><name>NOTIFICATION_GROUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setGroupAlertBehavior</name></name><argument_list>(<argument><expr><name><name>NotificationCompat</name><operator>.</operator><name>GROUP_ALERT_SUMMARY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <decl_stmt><decl><type><name>Notification</name></type> <name>notification</name> <init>= <expr><call><name><name>builder</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>NotificationManagerCompat</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>notify</name><argument_list>(<argument><expr><name>notificationId</name></expr></argument>, <argument><expr><name>notification</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Posted notification. "</literal> <operator>+</operator> <call><name><name>notification</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>sendMultipleThreadNotification</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation>  <name>Context</name></type> <name>context</name></decl></parameter>,
                                                     <parameter><decl><type><annotation>@<name>NonNull</name></annotation>  <name>NotificationState</name></type> <name>notificationState</name></decl></parameter>,
                                                     <parameter><decl><type><name>boolean</name></type> <name>signal</name></decl></parameter>)</parameter_list>
  <block>{
    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"sendMultiThreadNotification()  signal: "</literal> <operator>+</operator> <name>signal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>MultipleRecipientNotificationBuilder</name></type> <name>builder</name>       <init>= <expr><operator>new</operator> <call><name>MultipleRecipientNotificationBuilder</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>getNotificationPrivacy</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>NotificationItem</name></argument>&gt;</argument_list></name></type>               <name>notifications</name> <init>= <expr><call><name><name>notificationState</name><operator>.</operator><name>getNotifications</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setMessageCount</name></name><argument_list>(<argument><expr><call><name><name>notificationState</name><operator>.</operator><name>getMessageCount</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>notificationState</name><operator>.</operator><name>getThreadCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setMostRecentSender</name></name><argument_list>(<argument><expr><call><name><name>notifications</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getIndividualRecipient</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setGroup</name></name><argument_list>(<argument><expr><name>NOTIFICATION_GROUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setDeleteIntent</name></name><argument_list>(<argument><expr><call><name><name>notificationState</name><operator>.</operator><name>getDeleteIntent</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setOnlyAlertOnce</name></name><argument_list>(<argument><expr><operator>!</operator><name>signal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setGroupAlertBehavior</name></name><argument_list>(<argument><expr><name><name>NotificationCompat</name><operator>.</operator><name>GROUP_ALERT_SUMMARY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>long</name></type> <name>timestamp</name> <init>= <expr><call><name><name>notifications</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getTimestamp</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>timestamp</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setWhen</name></name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addActions</name></name><argument_list>(<argument><expr><call><name><name>notificationState</name><operator>.</operator><name>getMarkAsReadIntent</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>SUMMARY_NOTIFICATION_ID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>ListIterator</name><argument_list type="generic">&lt;<argument><name>NotificationItem</name></argument>&gt;</argument_list></name></type> <name>iterator</name> <init>= <expr><call><name><name>notifications</name><operator>.</operator><name>listIterator</name></name><argument_list>(<argument><expr><call><name><name>notifications</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <while>while<condition>(<expr><call><name><name>iterator</name><operator>.</operator><name>hasPrevious</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
      <decl_stmt><decl><type><name>NotificationItem</name></type> <name>item</name> <init>= <expr><call><name><name>iterator</name><operator>.</operator><name>previous</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addMessageBody</name></name><argument_list>(<argument><expr><call><name><name>item</name><operator>.</operator><name>getIndividualRecipient</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>item</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></while>

    <if>if <condition>(<expr><name>signal</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setAlarms</name></name><argument_list>(<argument><expr><call><name><name>notificationState</name><operator>.</operator><name>getRingtone</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>notificationState</name><operator>.</operator><name>getVibrate</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setTicker</name></name><argument_list>(<argument><expr><call><name><name>notifications</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getIndividualRecipient</name><argument_list>()</argument_list></call></expr></argument>,
                        <argument><expr><call><name><name>notifications</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getText</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <decl_stmt><decl><type><name>Notification</name></type> <name>notification</name> <init>= <expr><call><name><name>builder</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>NotificationManagerCompat</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>notify</name><argument_list>(<argument><expr><name>SUMMARY_NOTIFICATION_ID</name></expr></argument>, <argument><expr><call><name><name>builder</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Posted notification. "</literal> <operator>+</operator> <call><name><name>notification</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>sendInThreadNotification</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>Recipient</name></type> <name>recipient</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><operator>!</operator><call><name><name>TextSecurePreferences</name><operator>.</operator><name>isInThreadNotifications</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name><name>ServiceUtil</name><operator>.</operator><name>getAudioManager</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getRingerMode</name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>AudioManager</name><operator>.</operator><name>RINGER_MODE_NORMAL</name></name></expr>)</condition><then>
    <block>{
      <return>return;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name>Uri</name></type> <name>uri</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>recipient</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>uri</name> <operator>=</operator> <ternary><condition><expr><call><name><name>NotificationChannels</name><operator>.</operator><name>supported</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name><name>NotificationChannels</name><operator>.</operator><name>getMessageRingtone</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>recipient</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name><name>recipient</name><operator>.</operator><name>getMessageRingtone</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>uri</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>uri</name> <operator>=</operator> <ternary><condition><expr><call><name><name>NotificationChannels</name><operator>.</operator><name>supported</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name><name>NotificationChannels</name><operator>.</operator><name>getMessageRingtone</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>getNotificationRingtone</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><call><name><name>uri</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"ringtone uri is empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name>Ringtone</name></type> <name>ringtone</name> <init>= <expr><call><name><name>RingtoneManager</name><operator>.</operator><name>getRingtone</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>ringtone</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"ringtone is null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    }</block></then></if>

    <if>if <condition>(<expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;=</operator> <literal type="number">21</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>ringtone</name><operator>.</operator><name>setAudioAttributes</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>AudioAttributes</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setContentType</name><argument_list>(<argument><expr><name><name>AudioAttributes</name><operator>.</operator><name>CONTENT_TYPE_UNKNOWN</name></name></expr></argument>)</argument_list></call>
                                                               <operator>.</operator><call><name>setUsage</name><argument_list>(<argument><expr><name><name>AudioAttributes</name><operator>.</operator><name>USAGE_NOTIFICATION_COMMUNICATION_INSTANT</name></name></expr></argument>)</argument_list></call>
                                                               <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><call><name><name>ringtone</name><operator>.</operator><name>setStreamType</name></name><argument_list>(<argument><expr><name><name>AudioManager</name><operator>.</operator><name>STREAM_NOTIFICATION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

    <expr_stmt><expr><call><name><name>ringtone</name><operator>.</operator><name>play</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name>NotificationState</name></type> <name>constructNotificationState</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation>  <name>Context</name></type> <name>context</name></decl></parameter>,
                                                              <parameter><decl><type><annotation>@<name>NonNull</name></annotation>  <name>Cursor</name></type> <name>cursor</name></decl></parameter>)</parameter_list>
  <block>{
    <decl_stmt><decl><type><name>NotificationState</name></type>     <name>notificationState</name> <init>= <expr><operator>new</operator> <call><name>NotificationState</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>MmsSmsDatabase</name><operator>.</operator><name>Reader</name></name></type> <name>reader</name>            <init>= <expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getMmsSmsDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>readerFor</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>MessageRecord</name></type> <name>record</name></decl>;</decl_stmt>

    <while>while <condition>(<expr><operator>(</operator><name>record</name> <operator>=</operator> <call><name><name>reader</name><operator>.</operator><name>getNext</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{
      <decl_stmt><decl><type><name>long</name></type>         <name>id</name>                    <init>= <expr><call><name><name>record</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>boolean</name></type>      <name>mms</name>                   <init>= <expr><call><name><name>record</name><operator>.</operator><name>isMms</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>record</name><operator>.</operator><name>isMmsNotification</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Recipient</name></type>    <name>recipient</name>             <init>= <expr><call><name><name>record</name><operator>.</operator><name>getIndividualRecipient</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Recipient</name></type>    <name>conversationRecipient</name> <init>= <expr><call><name><name>record</name><operator>.</operator><name>getRecipient</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>long</name></type>         <name>threadId</name>              <init>= <expr><call><name><name>record</name><operator>.</operator><name>getThreadId</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>CharSequence</name></type> <name>body</name>                  <init>= <expr><call><name><name>record</name><operator>.</operator><name>getDisplayBody</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Recipient</name></type>    <name>threadRecipients</name>      <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SlideDeck</name></type>    <name>slideDeck</name>             <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>long</name></type>         <name>timestamp</name>             <init>= <expr><call><name><name>record</name><operator>.</operator><name>getTimestamp</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>


      <if>if <condition>(<expr><name>threadId</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>threadRecipients</name> <operator>=</operator> <call><name><name>DatabaseFactory</name><operator>.</operator><name>getThreadDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getRecipientForThreadId</name><argument_list>(<argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>

      <if>if <condition>(<expr><call><name><name>KeyCachingService</name><operator>.</operator><name>isLocked</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>body</name> <operator>=</operator> <call><name><name>SpanUtil</name><operator>.</operator><name>italic</name></name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>MessageNotifier_locked_message</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then> <elseif>else <if>if <condition>(<expr><call><name><name>record</name><operator>.</operator><name>isMms</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><operator>(</operator><name>MmsMessageRecord</name><operator>)</operator> <name>record</name><operator>)</operator><operator>.</operator><call><name>getSharedContacts</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>Contact</name></type> <name>contact</name> <init>= <expr><operator>(</operator><operator>(</operator><name>MmsMessageRecord</name><operator>)</operator> <name>record</name><operator>)</operator><operator>.</operator><call><name>getSharedContacts</name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>body</name> <operator>=</operator> <call><name><name>ContactUtil</name><operator>.</operator><name>getStringSummary</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>contact</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name><name>record</name><operator>.</operator><name>isMms</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>body</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><operator>(</operator><name>MmsMessageRecord</name><operator>)</operator> <name>record</name><operator>)</operator><operator>.</operator><call><name>getSlideDeck</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSlides</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>body</name> <operator>=</operator> <call><name><name>SpanUtil</name><operator>.</operator><name>italic</name></name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>MessageNotifier_media_message</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>slideDeck</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>MediaMmsMessageRecord</name><operator>)</operator><name>record</name><operator>)</operator><operator>.</operator><call><name>getSlideDeck</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name><name>record</name><operator>.</operator><name>isMms</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>record</name><operator>.</operator><name>isMmsNotification</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><operator>(</operator><name>MmsMessageRecord</name><operator>)</operator> <name>record</name><operator>)</operator><operator>.</operator><call><name>getSlideDeck</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSlides</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>message</name>      <init>= <expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>MessageNotifier_media_message_with_text</name></name></expr></argument>, <argument><expr><name>body</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type>    <name>italicLength</name> <init>= <expr><call><name><name>message</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>body</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>body</name> <operator>=</operator> <call><name><name>SpanUtil</name><operator>.</operator><name>italic</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>italicLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>slideDeck</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>MediaMmsMessageRecord</name><operator>)</operator><name>record</name><operator>)</operator><operator>.</operator><call><name>getSlideDeck</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></then></if></elseif></if>

      <if>if <condition>(<expr><name>threadRecipients</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <operator>!</operator><call><name><name>threadRecipients</name><operator>.</operator><name>isMuted</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>notificationState</name><operator>.</operator><name>addNotification</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>NotificationItem</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>mms</name></expr></argument>, <argument><expr><name>recipient</name></expr></argument>, <argument><expr><name>conversationRecipient</name></expr></argument>, <argument><expr><name>threadRecipients</name></expr></argument>, <argument><expr><name>threadId</name></expr></argument>, <argument><expr><name>body</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>slideDeck</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></while>

    <expr_stmt><expr><call><name><name>reader</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>notificationState</name></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>updateBadge</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{
    <try>try <block>{
      <if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>ShortcutBadger</name><operator>.</operator><name>removeCount</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
      <else>else            <block type="pseudo"><expr_stmt><expr><call><name><name>ShortcutBadger</name><operator>.</operator><name>applyCount</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>t</name></decl></parameter>)</parameter_list> <block>{
      <comment type="line">// NOTE :: I don't totally trust this thing, so I'm catching</comment>
      <comment type="line">// everything.</comment>
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><literal type="string">"MessageNotifier"</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></catch></try>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>scheduleReminder</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>count</name> <operator>&gt;=</operator> <call><name><name>TextSecurePreferences</name><operator>.</operator><name>getRepeatAlertsCount</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <return>return;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name>AlarmManager</name></type> <name>alarmManager</name> <init>= <expr><operator>(</operator><name>AlarmManager</name><operator>)</operator> <call><name><name>context</name><operator>.</operator><name>getSystemService</name></name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>ALARM_SERVICE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Intent</name></type>       <name>alarmIntent</name>  <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>ReminderReceiver</name><operator>.</operator><name>REMINDER_ACTION</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>alarmIntent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><literal type="string">"reminder_count"</literal></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>PendingIntent</name></type> <name>pendingIntent</name> <init>= <expr><call><name><name>PendingIntent</name><operator>.</operator><name>getBroadcast</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>alarmIntent</name></expr></argument>, <argument><expr><name><name>PendingIntent</name><operator>.</operator><name>FLAG_CANCEL_CURRENT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type>          <name>timeout</name>       <init>= <expr><call><name><name>TimeUnit</name><operator>.</operator><name>MINUTES</name><operator>.</operator><name>toMillis</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>alarmManager</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>AlarmManager</name><operator>.</operator><name>RTC_WAKEUP</name></name></expr></argument>, <argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>timeout</name></expr></argument>, <argument><expr><name>pendingIntent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>clearReminder</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>Intent</name></type>        <name>alarmIntent</name>   <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>ReminderReceiver</name><operator>.</operator><name>REMINDER_ACTION</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PendingIntent</name></type> <name>pendingIntent</name> <init>= <expr><call><name><name>PendingIntent</name><operator>.</operator><name>getBroadcast</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>alarmIntent</name></expr></argument>, <argument><expr><name><name>PendingIntent</name><operator>.</operator><name>FLAG_CANCEL_CURRENT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AlarmManager</name></type>  <name>alarmManager</name>  <init>= <expr><operator>(</operator><name>AlarmManager</name><operator>)</operator> <call><name><name>context</name><operator>.</operator><name>getSystemService</name></name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>ALARM_SERVICE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>alarmManager</name><operator>.</operator><name>cancel</name></name><argument_list>(<argument><expr><name>pendingIntent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <class><specifier>public</specifier> <specifier>static</specifier> class <name>ReminderReceiver</name> <super><extends>extends <name>BroadcastReceiver</name></extends></super> <block>{

    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>REMINDER_ACTION</name> <init>= <expr><literal type="string">"org.thoughtcrime.securesms.MessageNotifier.REMINDER_ACTION"</literal></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name>SuppressLint</name><argument_list>(<argument><expr><literal type="string">"StaticFieldLeak"</literal></expr></argument>)</argument_list></annotation>
    <annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onReceive</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><operator>new</operator> <class><super><name><name>AsyncTask</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>, <argument><name>Void</name></argument>, <argument><name>Void</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <specifier>protected</specifier> <type><name>Void</name></type> <name>doInBackground</name><parameter_list>(<parameter><decl><type><name>Void</name><modifier>...</modifier></type> <name>params</name></decl></parameter>)</parameter_list> <block>{
          <decl_stmt><decl><type><name>int</name></type> <name>reminderCount</name> <init>= <expr><call><name><name>intent</name><operator>.</operator><name>getIntExtra</name></name><argument_list>(<argument><expr><literal type="string">"reminder_count"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>MessageNotifier</name><operator>.</operator><name>updateNotification</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>reminderCount</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <return>return <expr><literal type="null">null</literal></expr>;</return>
        }</block></function>
      }</block></class><operator>.</operator><call><name>executeOnExecutor</name><argument_list>(<argument><expr><name><name>AsyncTask</name><operator>.</operator><name>THREAD_POOL_EXECUTOR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
  }</block></class>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>DelayedNotification</name> <super><implements>implements <name>Runnable</name></implements></super> <block>{

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>long</name></type> <name>DELAY</name> <init>= <expr><call><name><name>TimeUnit</name><operator>.</operator><name>SECONDS</name><operator>.</operator><name>toMillis</name></name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>AtomicBoolean</name></type> <name>canceled</name> <init>= <expr><operator>new</operator> <call><name>AtomicBoolean</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>long</name></type>    <name>threadId</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>long</name></type>    <name>delayUntil</name></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>DelayedNotification</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>threadId</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>context</name></name>    <operator>=</operator> <name>context</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>threadId</name></name>   <operator>=</operator> <name>threadId</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>delayUntil</name></name> <operator>=</operator> <call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>DELAY</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
      <decl_stmt><decl><type><name>long</name></type> <name>delayMillis</name> <init>= <expr><name>delayUntil</name> <operator>-</operator> <call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Waiting to notify: "</literal> <operator>+</operator> <name>delayMillis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><name>delayMillis</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>Util</name><operator>.</operator><name>sleep</name></name><argument_list>(<argument><expr><name>delayMillis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>

      <if>if <condition>(<expr><operator>!</operator><call><name><name>canceled</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Not canceled, notifying..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>MessageNotifier</name><operator>.</operator><name>updateNotification</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>threadId</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>MessageNotifier</name><operator>.</operator><name>cancelDelayedNotifications</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Canceled, not notifying..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></else></if>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>cancel</name><parameter_list>()</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>canceled</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
  }</block></class>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>CancelableExecutor</name> <block>{

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Executor</name></type>                 <name>executor</name> <init>= <expr><call><name><name>Executors</name><operator>.</operator><name>newSingleThreadExecutor</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>DelayedNotification</name></argument>&gt;</argument_list></name></type> <name>tasks</name>    <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>DelayedNotification</name></type> <name>runnable</name></decl></parameter>)</parameter_list> <block>{
      <synchronized>synchronized <init>(<expr><name>tasks</name></expr>)</init> <block>{
        <expr_stmt><expr><call><name><name>tasks</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>runnable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></synchronized>

      <decl_stmt><decl><type><name>Runnable</name></type> <name>wrapper</name> <init>= <expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
          <expr_stmt><expr><call><name><name>runnable</name><operator>.</operator><name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

          <synchronized>synchronized <init>(<expr><name>tasks</name></expr>)</init> <block>{
            <expr_stmt><expr><call><name><name>tasks</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>runnable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></synchronized>
        }</block></function>
      }</block></class></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name><name>executor</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>wrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>cancel</name><parameter_list>()</parameter_list> <block>{
      <synchronized>synchronized <init>(<expr><name>tasks</name></expr>)</init> <block>{
        <for>for <control>(<init><decl><type><name>DelayedNotification</name></type> <name>task</name> <range>: <expr><name>tasks</name></expr></range></decl></init>)</control> <block>{
          <expr_stmt><expr><call><name><name>task</name><operator>.</operator><name>cancel</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></for>
      }</block></synchronized>
    }</block></function>
  }</block></class>
}</block></class>
</unit>
