<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\notifications\AbstractNotificationBuilder.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>notifications</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Notification</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Color</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>app</name><operator>.</operator><name>NotificationCompat</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>SpannableStringBuilder</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextUtils</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>RecipientDatabase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>preferences</name><operator>.</operator><name>widgets</name><operator>.</operator><name>NotificationPrivacyPreference</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>recipients</name><operator>.</operator><name>Recipient</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>TextSecurePreferences</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>Util</name></name>;</import>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>AbstractNotificationBuilder</name> <super><extends>extends <name><name>NotificationCompat</name><operator>.</operator><name>Builder</name></name></extends></super> <block>{

  <decl_stmt><decl><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unused"</literal></expr></argument>)</argument_list></annotation>
  <specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>AbstractNotificationBuilder</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>protected</specifier> <type><name>Context</name></type>                       <name>context</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>protected</specifier> <type><name>NotificationPrivacyPreference</name></type> <name>privacy</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>AbstractNotificationBuilder</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>NotificationPrivacyPreference</name></type> <name>privacy</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>context</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>privacy</name></name> <operator>=</operator> <name>privacy</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>setChannelId</name><argument_list>(<argument><expr><call><name><name>NotificationChannels</name><operator>.</operator><name>getMessagesChannel</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setLed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <function><specifier>protected</specifier> <type><name>CharSequence</name></type> <name>getStyledMessage</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Recipient</name></type> <name>recipient</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>CharSequence</name></type> <name>message</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>SpannableStringBuilder</name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name>SpannableStringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>Util</name><operator>.</operator><name>getBoldedString</name></name><argument_list>(<argument><expr><call><name><name>recipient</name><operator>.</operator><name>toShortString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">": "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>message</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><name>message</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>builder</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>setAlarms</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Uri</name></type> <name>ringtone</name></decl></parameter>, <parameter><decl><type><name><name>RecipientDatabase</name><operator>.</operator><name>VibrateState</name></name></type> <name>vibrate</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>Uri</name></type>     <name>defaultRingtone</name> <init>= <expr><ternary><condition><expr><call><name><name>NotificationChannels</name><operator>.</operator><name>supported</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name><name>NotificationChannels</name><operator>.</operator><name>getMessageRingtone</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>getNotificationRingtone</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>boolean</name></type> <name>defaultVibrate</name>  <init>= <expr><ternary><condition><expr><call><name><name>NotificationChannels</name><operator>.</operator><name>supported</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name><name>NotificationChannels</name><operator>.</operator><name>getMessageVibrate</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>  </then><else>: <expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>isNotificationVibrateEnabled</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <if>if      <condition>(<expr><name>ringtone</name> <operator>==</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><call><name><name>defaultRingtone</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>setSound</name><argument_list>(<argument><expr><name>defaultRingtone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
    <elseif>else <if>if <condition>(<expr><name>ringtone</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>ringtone</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr>)</condition><then>                 <block type="pseudo"><expr_stmt><expr><call><name>setSound</name><argument_list>(<argument><expr><name>ringtone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif></if>

    <if>if <condition>(<expr><name>vibrate</name> <operator>==</operator> <name><name>RecipientDatabase</name><operator>.</operator><name>VibrateState</name><operator>.</operator><name>ENABLED</name></name> <operator>||</operator>
        <operator>(</operator><name>vibrate</name> <operator>==</operator> <name><name>RecipientDatabase</name><operator>.</operator><name>VibrateState</name><operator>.</operator><name>DEFAULT</name></name> <operator>&amp;&amp;</operator> <name>defaultVibrate</name><operator>)</operator></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>setDefaults</name><argument_list>(<argument><expr><name><name>Notification</name><operator>.</operator><name>DEFAULT_VIBRATE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>setLed</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>String</name></type> <name>ledColor</name>              <init>= <expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>getNotificationLedColor</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>ledBlinkPattern</name>       <init>= <expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>getNotificationLedPattern</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>ledBlinkPatternCustom</name> <init>= <expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>getNotificationLedPatternCustom</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><operator>!</operator><call><name><name>ledColor</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>blinkPatternArray</name> <init>= <expr><call><name>parseBlinkPattern</name><argument_list>(<argument><expr><name>ledBlinkPattern</name></expr></argument>, <argument><expr><name>ledBlinkPatternCustom</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>setLights</name><argument_list>(<argument><expr><call><name><name>Color</name><operator>.</operator><name>parseColor</name></name><argument_list>(<argument><expr><name>ledColor</name></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name><name>blinkPatternArray</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name><name>blinkPatternArray</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>setTicker</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Recipient</name></type> <name>recipient</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>CharSequence</name></type> <name>message</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><call><name><name>privacy</name><operator>.</operator><name>isDisplayMessage</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>setTicker</name><argument_list>(<argument><expr><call><name>getStyledMessage</name><argument_list>(<argument><expr><name>recipient</name></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <elseif>else <if>if <condition>(<expr><call><name><name>privacy</name><operator>.</operator><name>isDisplayContact</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>setTicker</name><argument_list>(<argument><expr><call><name>getStyledMessage</name><argument_list>(<argument><expr><name>recipient</name></expr></argument>, <argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>AbstractNotificationBuilder_new_message</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if></elseif> <else>else <block>{
      <expr_stmt><expr><call><name>setTicker</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>AbstractNotificationBuilder_new_message</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
  }</block></function>

  <function><specifier>private</specifier> <type><name><name>String</name><index>[]</index></name></type> <name>parseBlinkPattern</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>blinkPattern</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>blinkPatternCustom</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><call><name><name>blinkPattern</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"custom"</literal></expr></argument>)</argument_list></call></expr>)</condition><then>
      <block type="pseudo"><expr_stmt><expr><name>blinkPattern</name> <operator>=</operator> <name>blinkPatternCustom</name></expr>;</expr_stmt></block></then></if>

    <return>return <expr><call><name><name>blinkPattern</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>
}</block></class>
</unit>
