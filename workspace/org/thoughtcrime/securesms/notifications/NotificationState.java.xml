<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\notifications\NotificationState.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>notifications</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>PendingIntent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>conversation</name><operator>.</operator><name>ConversationActivity</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>conversation</name><operator>.</operator><name>ConversationPopupActivity</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>RecipientDatabase</name><operator>.</operator><name>VibrateState</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>logging</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>recipients</name><operator>.</operator><name>Recipient</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedHashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<class><specifier>public</specifier> class <name>NotificationState</name> <block>{

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>NotificationState</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>LinkedList</name><argument_list type="generic">&lt;<argument><name>NotificationItem</name></argument>&gt;</argument_list></name></type> <name>notifications</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>LinkedHashSet</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></type>          <name>threads</name>       <init>= <expr><operator>new</operator> <call><name><name>LinkedHashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>notificationCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>NotificationState</name><parameter_list>()</parameter_list> <block>{}</block></constructor>

  <constructor><specifier>public</specifier> <name>NotificationState</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>NotificationItem</name></argument>&gt;</argument_list></name></type> <name>items</name></decl></parameter>)</parameter_list> <block>{
    <for>for <control>(<init><decl><type><name>NotificationItem</name></type> <name>item</name> <range>: <expr><name>items</name></expr></range></decl></init>)</control> <block>{
      <expr_stmt><expr><call><name>addNotification</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
  }</block></constructor>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>addNotification</name><parameter_list>(<parameter><decl><type><name>NotificationItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>notifications</name><operator>.</operator><name>addFirst</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><call><name><name>threads</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><call><name><name>item</name><operator>.</operator><name>getThreadId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>threads</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><call><name><name>item</name><operator>.</operator><name>getThreadId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><call><name><name>threads</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>item</name><operator>.</operator><name>getThreadId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>notificationCount</name><operator>++</operator></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>Uri</name></type> <name>getRingtone</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><operator>!</operator><call><name><name>notifications</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>Recipient</name></type> <name>recipient</name> <init>= <expr><call><name><name>notifications</name><operator>.</operator><name>getFirst</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getRecipient</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><name>recipient</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <return>return <expr><ternary><condition><expr><call><name><name>NotificationChannels</name><operator>.</operator><name>supported</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name><name>NotificationChannels</name><operator>.</operator><name>getMessageRingtone</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>recipient</name></expr></argument>)</argument_list></call></expr>
                                                </then><else>: <expr><call><name><name>recipient</name><operator>.</operator><name>resolve</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMessageRingtone</name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>
      }</block></then></if>
    }</block></then></if>

    <return>return <expr><literal type="null">null</literal></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>VibrateState</name></type> <name>getVibrate</name><parameter_list>()</parameter_list> <block>{
    <if>if <condition>(<expr><operator>!</operator><call><name><name>notifications</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>Recipient</name></type> <name>recipient</name> <init>= <expr><call><name><name>notifications</name><operator>.</operator><name>getFirst</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getRecipient</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><name>recipient</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <return>return <expr><call><name><name>recipient</name><operator>.</operator><name>resolve</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMessageVibrate</name><argument_list>()</argument_list></call></expr>;</return>
      }</block></then></if>
    }</block></then></if>

    <return>return <expr><name><name>VibrateState</name><operator>.</operator><name>DEFAULT</name></name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasMultipleThreads</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name><name>threads</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name><name>LinkedHashSet</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>getThreads</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>threads</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>int</name></type> <name>getThreadCount</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name><name>threads</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>int</name></type> <name>getMessageCount</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>notificationCount</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>NotificationItem</name></argument>&gt;</argument_list></name></type> <name>getNotifications</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>notifications</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>NotificationItem</name></argument>&gt;</argument_list></name></type> <name>getNotificationsForThread</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>threadId</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>LinkedList</name><argument_list type="generic">&lt;<argument><name>NotificationItem</name></argument>&gt;</argument_list></name></type> <name>list</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>NotificationItem</name></type> <name>item</name> <range>: <expr><name>notifications</name></expr></range></decl></init>)</control> <block>{
      <if>if <condition>(<expr><call><name><name>item</name><operator>.</operator><name>getThreadId</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>threadId</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>addFirst</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></for>

    <return>return <expr><name>list</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>PendingIntent</name></type> <name>getMarkAsReadIntent</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>notificationId</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>long</name><index>[]</index></name></type> <name>threadArray</name> <init>= <expr><operator>new</operator> <name><name>long</name><index>[<expr><call><name><name>threads</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>    <name>index</name>       <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>long</name></type> <name>thread</name> <range>: <expr><name>threads</name></expr></range></decl></init>)</control> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Added thread: "</literal> <operator>+</operator> <name>thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>threadArray</name><index>[<expr><name>index</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>thread</name></expr>;</expr_stmt>
    }</block></for>

    <decl_stmt><decl><type><name>Intent</name></type> <name>intent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>MarkReadReceiver</name><operator>.</operator><name>CLEAR_ACTION</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>setClass</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>MarkReadReceiver</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>setData</name></name><argument_list>(<argument><expr><operator>(</operator><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><literal type="string">"custom://"</literal><operator>+</operator><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>MarkReadReceiver</name><operator>.</operator><name>THREAD_IDS_EXTRA</name></name></expr></argument>, <argument><expr><name>threadArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>MarkReadReceiver</name><operator>.</operator><name>NOTIFICATION_ID_EXTRA</name></name></expr></argument>, <argument><expr><name>notificationId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><call><name><name>PendingIntent</name><operator>.</operator><name>getBroadcast</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>intent</name></expr></argument>, <argument><expr><name><name>PendingIntent</name><operator>.</operator><name>FLAG_UPDATE_CURRENT</name></name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>PendingIntent</name></type> <name>getRemoteReplyIntent</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>Recipient</name></type> <name>recipient</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><call><name><name>threads</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><literal type="string">"We only support replies to single thread notifications!"</literal></expr></argument>)</argument_list></call></expr>;</throw></block></then></if>

    <decl_stmt><decl><type><name>Intent</name></type> <name>intent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>RemoteReplyReceiver</name><operator>.</operator><name>REPLY_ACTION</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>setClass</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>RemoteReplyReceiver</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>setData</name></name><argument_list>(<argument><expr><operator>(</operator><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><literal type="string">"custom://"</literal><operator>+</operator><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>RemoteReplyReceiver</name><operator>.</operator><name>ADDRESS_EXTRA</name></name></expr></argument>, <argument><expr><call><name><name>recipient</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>setPackage</name></name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getPackageName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><call><name><name>PendingIntent</name><operator>.</operator><name>getBroadcast</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>intent</name></expr></argument>, <argument><expr><name><name>PendingIntent</name><operator>.</operator><name>FLAG_UPDATE_CURRENT</name></name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>PendingIntent</name></type> <name>getAndroidAutoReplyIntent</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>Recipient</name></type> <name>recipient</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><call><name><name>threads</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><literal type="string">"We only support replies to single thread notifications!"</literal></expr></argument>)</argument_list></call></expr>;</throw></block></then></if>

    <decl_stmt><decl><type><name>Intent</name></type> <name>intent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>AndroidAutoReplyReceiver</name><operator>.</operator><name>REPLY_ACTION</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>addFlags</name></name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>FLAG_INCLUDE_STOPPED_PACKAGES</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>setClass</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>AndroidAutoReplyReceiver</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>setData</name></name><argument_list>(<argument><expr><operator>(</operator><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><literal type="string">"custom://"</literal><operator>+</operator><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>AndroidAutoReplyReceiver</name><operator>.</operator><name>ADDRESS_EXTRA</name></name></expr></argument>, <argument><expr><call><name><name>recipient</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>AndroidAutoReplyReceiver</name><operator>.</operator><name>THREAD_ID_EXTRA</name></name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><call><name><name>threads</name><operator>.</operator><name>toArray</name></name><argument_list>()</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>setPackage</name></name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getPackageName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><call><name><name>PendingIntent</name><operator>.</operator><name>getBroadcast</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>intent</name></expr></argument>, <argument><expr><name><name>PendingIntent</name><operator>.</operator><name>FLAG_UPDATE_CURRENT</name></name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>PendingIntent</name></type> <name>getAndroidAutoHeardIntent</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>notificationId</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>long</name><index>[]</index></name></type> <name>threadArray</name> <init>= <expr><operator>new</operator> <name><name>long</name><index>[<expr><call><name><name>threads</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>    <name>index</name>       <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>long</name></type> <name>thread</name> <range>: <expr><name>threads</name></expr></range></decl></init>)</control> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"getAndroidAutoHeardIntent Added thread: "</literal> <operator>+</operator> <name>thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>threadArray</name><index>[<expr><name>index</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>thread</name></expr>;</expr_stmt>
    }</block></for>

    <decl_stmt><decl><type><name>Intent</name></type> <name>intent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>AndroidAutoHeardReceiver</name><operator>.</operator><name>HEARD_ACTION</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>addFlags</name></name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>FLAG_INCLUDE_STOPPED_PACKAGES</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>setClass</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>AndroidAutoHeardReceiver</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>setData</name></name><argument_list>(<argument><expr><operator>(</operator><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><literal type="string">"custom://"</literal><operator>+</operator><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>AndroidAutoHeardReceiver</name><operator>.</operator><name>THREAD_IDS_EXTRA</name></name></expr></argument>, <argument><expr><name>threadArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>AndroidAutoHeardReceiver</name><operator>.</operator><name>NOTIFICATION_ID_EXTRA</name></name></expr></argument>, <argument><expr><name>notificationId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>setPackage</name></name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getPackageName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><call><name><name>PendingIntent</name><operator>.</operator><name>getBroadcast</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>intent</name></expr></argument>, <argument><expr><name><name>PendingIntent</name><operator>.</operator><name>FLAG_UPDATE_CURRENT</name></name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>PendingIntent</name></type> <name>getQuickReplyIntent</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>Recipient</name></type> <name>recipient</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><call><name><name>threads</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><literal type="string">"We only support replies to single thread notifications! "</literal> <operator>+</operator> <call><name><name>threads</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block></then></if>

    <decl_stmt><decl><type><name>Intent</name></type>     <name>intent</name>           <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>ConversationPopupActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>ConversationActivity</name><operator>.</operator><name>ADDRESS_EXTRA</name></name></expr></argument>, <argument><expr><call><name><name>recipient</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>ConversationActivity</name><operator>.</operator><name>THREAD_ID_EXTRA</name></name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><call><name><name>threads</name><operator>.</operator><name>toArray</name></name><argument_list>()</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>setData</name></name><argument_list>(<argument><expr><operator>(</operator><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><literal type="string">"custom://"</literal><operator>+</operator><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><call><name><name>PendingIntent</name><operator>.</operator><name>getActivity</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>intent</name></expr></argument>, <argument><expr><name><name>PendingIntent</name><operator>.</operator><name>FLAG_UPDATE_CURRENT</name></name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>PendingIntent</name></type> <name>getDeleteIntent</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type>       <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>long</name><index>[]</index></name></type>    <name>ids</name>   <init>= <expr><operator>new</operator> <name><name>long</name><index>[<expr><call><name><name>notifications</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>boolean</name><index>[]</index></name></type> <name>mms</name>   <init>= <expr><operator>new</operator> <name><name>boolean</name><index>[<expr><name><name>ids</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>NotificationItem</name></type> <name>notificationItem</name> <range>: <expr><name>notifications</name></expr></range></decl></init>)</control> <block>{
      <expr_stmt><expr><name><name>ids</name><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator> <call><name><name>notificationItem</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>mms</name><index>[<expr><name>index</name><operator>++</operator></expr>]</index></name>   <operator>=</operator> <call><name><name>notificationItem</name><operator>.</operator><name>isMms</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <decl_stmt><decl><type><name>Intent</name></type> <name>intent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>DeleteNotificationReceiver</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>setAction</name></name><argument_list>(<argument><expr><name><name>DeleteNotificationReceiver</name><operator>.</operator><name>DELETE_NOTIFICATION_ACTION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>DeleteNotificationReceiver</name><operator>.</operator><name>EXTRA_IDS</name></name></expr></argument>, <argument><expr><name>ids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>DeleteNotificationReceiver</name><operator>.</operator><name>EXTRA_MMS</name></name></expr></argument>, <argument><expr><name>mms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>setData</name></name><argument_list>(<argument><expr><operator>(</operator><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><literal type="string">"custom://"</literal><operator>+</operator><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><call><name><name>PendingIntent</name><operator>.</operator><name>getBroadcast</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>intent</name></expr></argument>, <argument><expr><name><name>PendingIntent</name><operator>.</operator><name>FLAG_UPDATE_CURRENT</name></name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>


}</block></class>
</unit>
