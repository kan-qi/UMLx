<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\contactshare\ContactNameEditViewModel.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>contactshare</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>arch</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>LiveData</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>arch</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>MutableLiveData</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>arch</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>ViewModel</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextUtils</name></name>;</import>

<import>import static <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>contactshare</name><operator>.</operator><name>Contact</name><operator>.</operator><name>*</name></name>;</import>

<class><specifier>public</specifier> class <name>ContactNameEditViewModel</name> <super><extends>extends <name>ViewModel</name></extends></super> <block>{

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>MutableLiveData</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>displayName</name></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>givenName</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>familyName</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>middleName</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>prefix</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>suffix</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>ContactNameEditViewModel</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>displayName</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>MutableLiveData</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <function><type><name>void</name></type> <name>setName</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Name</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name>givenName</name>  <operator>=</operator> <call><name><name>name</name><operator>.</operator><name>getGivenName</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>familyName</name> <operator>=</operator> <call><name><name>name</name><operator>.</operator><name>getFamilyName</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>middleName</name> <operator>=</operator> <call><name><name>name</name><operator>.</operator><name>getMiddleName</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>prefix</name>     <operator>=</operator> <call><name><name>name</name><operator>.</operator><name>getPrefix</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>suffix</name>     <operator>=</operator> <call><name><name>name</name><operator>.</operator><name>getSuffix</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>displayName</name><operator>.</operator><name>postValue</name></name><argument_list>(<argument><expr><call><name>buildDisplayName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><type><name>Name</name></type> <name>getName</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><operator>new</operator> <call><name>Name</name><argument_list>(<argument><expr><call><name><name>displayName</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>givenName</name></expr></argument>, <argument><expr><name>familyName</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>suffix</name></expr></argument>, <argument><expr><name>middleName</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><type><name><name>LiveData</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getDisplayName</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>displayName</name></expr>;</return>
  }</block></function>

  <function><type><name>void</name></type> <name>updateGivenName</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>givenName</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>givenName</name></name> <operator>=</operator> <name>givenName</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>displayName</name><operator>.</operator><name>postValue</name></name><argument_list>(<argument><expr><call><name>buildDisplayName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><type><name>void</name></type> <name>updateFamilyName</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>familyName</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>familyName</name></name> <operator>=</operator> <name>familyName</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>displayName</name><operator>.</operator><name>postValue</name></name><argument_list>(<argument><expr><call><name>buildDisplayName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><type><name>void</name></type> <name>updatePrefix</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>prefix</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>prefix</name></name> <operator>=</operator> <name>prefix</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>displayName</name><operator>.</operator><name>postValue</name></name><argument_list>(<argument><expr><call><name>buildDisplayName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><type><name>void</name></type> <name>updateSuffix</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>suffix</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>suffix</name></name> <operator>=</operator> <name>suffix</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>displayName</name><operator>.</operator><name>postValue</name></name><argument_list>(<argument><expr><call><name>buildDisplayName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><type><name>void</name></type> <name>updateMiddleName</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>middleName</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>middleName</name></name> <operator>=</operator> <name>middleName</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>displayName</name><operator>.</operator><name>postValue</name></name><argument_list>(<argument><expr><call><name>buildDisplayName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>String</name></type> <name>buildDisplayName</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>boolean</name></type> <name>isCJKV</name> <init>= <expr><call><name>isCJKV</name><argument_list>(<argument><expr><name>givenName</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isCJKV</name><argument_list>(<argument><expr><name>middleName</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isCJKV</name><argument_list>(<argument><expr><name>familyName</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isCJKV</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isCJKV</name><argument_list>(<argument><expr><name>suffix</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>isCJKV</name></expr>)</condition><then> <block>{
      <return>return <expr><call><name>joinString</name><argument_list>(<argument><expr><name>familyName</name></expr></argument>, <argument><expr><name>givenName</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>suffix</name></expr></argument>, <argument><expr><name>middleName</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>
    <return>return <expr><call><name>joinString</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>givenName</name></expr></argument>, <argument><expr><name>middleName</name></expr></argument>, <argument><expr><name>familyName</name></expr></argument>, <argument><expr><name>suffix</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>String</name></type> <name>joinString</name><parameter_list>(<parameter><decl><type><name>String</name><modifier>...</modifier></type> <name>values</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>StringBuilder</name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>String</name></type> <name>value</name> <range>: <expr><name>values</name></expr></range></decl></init>)</control> <block>{
      <if>if <condition>(<expr><operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></for>

    <return>return <expr><call><name><name>builder</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>boolean</name></type> <name>isCJKV</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>String</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
    <if>if  <condition>(<expr><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></then></if>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>offset</name> <operator>&lt;</operator> <call><name><name>value</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr/>)</control> <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>codepoint</name> <init>= <expr><call><name><name>Character</name><operator>.</operator><name>codePointAt</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><operator>!</operator><call><name>isCodepointCJKV</name><argument_list>(<argument><expr><name>codepoint</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
      }</block></then></if>

      <expr_stmt><expr><name>offset</name> <operator>+=</operator> <call><name><name>Character</name><operator>.</operator><name>charCount</name></name><argument_list>(<argument><expr><name>codepoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>boolean</name></type> <name>isCodepointCJKV</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>codepoint</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>codepoint</name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><literal type="char">' '</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>
    
    <decl_stmt><decl><type><name><name>Character</name><operator>.</operator><name>UnicodeBlock</name></name></type> <name>block</name> <init>= <expr><call><name><name>Character</name><operator>.</operator><name>UnicodeBlock</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>codepoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>boolean</name></type> <name>isCJKV</name> <init>= <expr><call><name><name>Character</name><operator>.</operator><name>UnicodeBlock</name><operator>.</operator><name>CJK_UNIFIED_IDEOGRAPHS</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call>                  <operator>||</operator>
                     <call><name><name>Character</name><operator>.</operator><name>UnicodeBlock</name><operator>.</operator><name>CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call>      <operator>||</operator>
                     <call><name><name>Character</name><operator>.</operator><name>UnicodeBlock</name><operator>.</operator><name>CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call>      <operator>||</operator>
                     <call><name><name>Character</name><operator>.</operator><name>UnicodeBlock</name><operator>.</operator><name>CJK_COMPATIBILITY</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call>                       <operator>||</operator>
                     <call><name><name>Character</name><operator>.</operator><name>UnicodeBlock</name><operator>.</operator><name>CJK_COMPATIBILITY_FORMS</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call>                 <operator>||</operator>
                     <call><name><name>Character</name><operator>.</operator><name>UnicodeBlock</name><operator>.</operator><name>CJK_COMPATIBILITY_IDEOGRAPHS</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call>            <operator>||</operator>
                     <call><name><name>Character</name><operator>.</operator><name>UnicodeBlock</name><operator>.</operator><name>CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call> <operator>||</operator>
                     <call><name><name>Character</name><operator>.</operator><name>UnicodeBlock</name><operator>.</operator><name>CJK_RADICALS_SUPPLEMENT</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call>                 <operator>||</operator>
                     <call><name><name>Character</name><operator>.</operator><name>UnicodeBlock</name><operator>.</operator><name>CJK_SYMBOLS_AND_PUNCTUATION</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call>             <operator>||</operator>
                     <call><name><name>Character</name><operator>.</operator><name>UnicodeBlock</name><operator>.</operator><name>ENCLOSED_CJK_LETTERS_AND_MONTHS</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call>         <operator>||</operator>
                     <call><name><name>Character</name><operator>.</operator><name>UnicodeBlock</name><operator>.</operator><name>KANGXI_RADICALS</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call>                         <operator>||</operator>
                     <call><name><name>Character</name><operator>.</operator><name>UnicodeBlock</name><operator>.</operator><name>IDEOGRAPHIC_DESCRIPTION_CHARACTERS</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call>      <operator>||</operator>
                     <call><name><name>Character</name><operator>.</operator><name>UnicodeBlock</name><operator>.</operator><name>HIRAGANA</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call>                                <operator>||</operator>
                     <call><name><name>Character</name><operator>.</operator><name>UnicodeBlock</name><operator>.</operator><name>KATAKANA</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call>                                <operator>||</operator>
                     <call><name><name>Character</name><operator>.</operator><name>UnicodeBlock</name><operator>.</operator><name>KATAKANA_PHONETIC_EXTENSIONS</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call>            <operator>||</operator>
                     <call><name><name>Character</name><operator>.</operator><name>UnicodeBlock</name><operator>.</operator><name>HANGUL_JAMO</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call>                             <operator>||</operator>
                     <call><name><name>Character</name><operator>.</operator><name>UnicodeBlock</name><operator>.</operator><name>HANGUL_COMPATIBILITY_JAMO</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call>               <operator>||</operator>
                     <call><name><name>Character</name><operator>.</operator><name>UnicodeBlock</name><operator>.</operator><name>HANGUL_SYLLABLES</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;=</operator> <literal type="number">19</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>isCJKV</name> <operator>|=</operator> <call><name><name>Character</name><operator>.</operator><name>isIdeographic</name></name><argument_list>(<argument><expr><name>codepoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <return>return <expr><name>isCJKV</name></expr>;</return>
  }</block></function>
}</block></class>
</unit>
