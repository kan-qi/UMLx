<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\contactshare\ContactModelMapper.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>contactshare</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>attachments</name><operator>.</operator><name>Attachment</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>attachments</name><operator>.</operator><name>AttachmentId</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>attachments</name><operator>.</operator><name>PointerAttachment</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>util</name><operator>.</operator><name>guava</name><operator>.</operator><name>Optional</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>signalservice</name><operator>.</operator><name>api</name><operator>.</operator><name>messages</name><operator>.</operator><name>shared</name><operator>.</operator><name>SharedContact</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import static <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>contactshare</name><operator>.</operator><name>Contact</name><operator>.</operator><name>*</name></name>;</import>

<class><specifier>public</specifier> class <name>ContactModelMapper</name> <block>{

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>SharedContact</name><operator>.</operator><name>Builder</name></name></type> <name>localToRemoteBuilder</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Contact</name></type> <name>contact</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>SharedContact</name><operator>.</operator><name>Phone</name></name></argument>&gt;</argument_list></name></type>         <name>phoneNumbers</name>    <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>contact</name><operator>.</operator><name>getPhoneNumbers</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>SharedContact</name><operator>.</operator><name>Email</name></name></argument>&gt;</argument_list></name></type>         <name>emails</name>          <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>contact</name><operator>.</operator><name>getEmails</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>SharedContact</name><operator>.</operator><name>PostalAddress</name></name></argument>&gt;</argument_list></name></type> <name>postalAddresses</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>contact</name><operator>.</operator><name>getPostalAddresses</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>Phone</name></type> <name>phone</name> <range>: <expr><call><name><name>contact</name><operator>.</operator><name>getPhoneNumbers</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
      <expr_stmt><expr><call><name><name>phoneNumbers</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>SharedContact</name><operator>.</operator><name>Phone</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setValue</name><argument_list>(<argument><expr><call><name><name>phone</name><operator>.</operator><name>getNumber</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                                                        <operator>.</operator><call><name>setType</name><argument_list>(<argument><expr><call><name>localToRemoteType</name><argument_list>(<argument><expr><call><name><name>phone</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                                                        <operator>.</operator><call><name>setLabel</name><argument_list>(<argument><expr><call><name><name>phone</name><operator>.</operator><name>getLabel</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                                                        <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <for>for <control>(<init><decl><type><name>Email</name></type> <name>email</name> <range>: <expr><call><name><name>contact</name><operator>.</operator><name>getEmails</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
      <expr_stmt><expr><call><name><name>emails</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>SharedContact</name><operator>.</operator><name>Email</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setValue</name><argument_list>(<argument><expr><call><name><name>email</name><operator>.</operator><name>getEmail</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                                                  <operator>.</operator><call><name>setType</name><argument_list>(<argument><expr><call><name>localToRemoteType</name><argument_list>(<argument><expr><call><name><name>email</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                                                  <operator>.</operator><call><name>setLabel</name><argument_list>(<argument><expr><call><name><name>email</name><operator>.</operator><name>getLabel</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                                                  <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <for>for <control>(<init><decl><type><name>PostalAddress</name></type> <name>postalAddress</name> <range>: <expr><call><name><name>contact</name><operator>.</operator><name>getPostalAddresses</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
      <expr_stmt><expr><call><name><name>postalAddresses</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>SharedContact</name><operator>.</operator><name>PostalAddress</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setType</name><argument_list>(<argument><expr><call><name>localToRemoteType</name><argument_list>(<argument><expr><call><name><name>postalAddress</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                                                                   <operator>.</operator><call><name>setLabel</name><argument_list>(<argument><expr><call><name><name>postalAddress</name><operator>.</operator><name>getLabel</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                                                                   <operator>.</operator><call><name>setStreet</name><argument_list>(<argument><expr><call><name><name>postalAddress</name><operator>.</operator><name>getStreet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                                                                   <operator>.</operator><call><name>setPobox</name><argument_list>(<argument><expr><call><name><name>postalAddress</name><operator>.</operator><name>getPoBox</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                                                                   <operator>.</operator><call><name>setNeighborhood</name><argument_list>(<argument><expr><call><name><name>postalAddress</name><operator>.</operator><name>getNeighborhood</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                                                                   <operator>.</operator><call><name>setCity</name><argument_list>(<argument><expr><call><name><name>postalAddress</name><operator>.</operator><name>getCity</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                                                                   <operator>.</operator><call><name>setRegion</name><argument_list>(<argument><expr><call><name><name>postalAddress</name><operator>.</operator><name>getRegion</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                                                                   <operator>.</operator><call><name>setPostcode</name><argument_list>(<argument><expr><call><name><name>postalAddress</name><operator>.</operator><name>getPostalCode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                                                                   <operator>.</operator><call><name>setCountry</name><argument_list>(<argument><expr><call><name><name>postalAddress</name><operator>.</operator><name>getCountry</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                                                                   <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <decl_stmt><decl><type><name><name>SharedContact</name><operator>.</operator><name>Name</name></name></type> <name>name</name> <init>= <expr><operator>new</operator> <call><name><name>SharedContact</name><operator>.</operator><name>Name</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setDisplay</name><argument_list>(<argument><expr><call><name><name>contact</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDisplayName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                                                              <operator>.</operator><call><name>setGiven</name><argument_list>(<argument><expr><call><name><name>contact</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getGivenName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                                                              <operator>.</operator><call><name>setFamily</name><argument_list>(<argument><expr><call><name><name>contact</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getFamilyName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                                                              <operator>.</operator><call><name>setPrefix</name><argument_list>(<argument><expr><call><name><name>contact</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPrefix</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                                                              <operator>.</operator><call><name>setSuffix</name><argument_list>(<argument><expr><call><name><name>contact</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSuffix</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                                                              <operator>.</operator><call><name>setMiddle</name><argument_list>(<argument><expr><call><name><name>contact</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMiddleName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                                                              <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <return>return <expr><operator>new</operator> <call><name><name>SharedContact</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setName</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call>
                                      <operator>.</operator><call><name>withOrganization</name><argument_list>(<argument><expr><call><name><name>contact</name><operator>.</operator><name>getOrganization</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                                      <operator>.</operator><call><name>withPhones</name><argument_list>(<argument><expr><name>phoneNumbers</name></expr></argument>)</argument_list></call>
                                      <operator>.</operator><call><name>withEmails</name><argument_list>(<argument><expr><name>emails</name></expr></argument>)</argument_list></call>
                                      <operator>.</operator><call><name>withAddresses</name><argument_list>(<argument><expr><name>postalAddresses</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Contact</name></type> <name>remoteToLocal</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>SharedContact</name></type> <name>sharedContact</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>Name</name></type> <name>name</name> <init>= <expr><operator>new</operator> <call><name>Name</name><argument_list>(<argument><expr><call><name><name>sharedContact</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDisplay</name><argument_list>()</argument_list></call><operator>.</operator><call><name>orNull</name><argument_list>()</argument_list></call></expr></argument>,
        <argument><expr><call><name><name>sharedContact</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getGiven</name><argument_list>()</argument_list></call><operator>.</operator><call><name>orNull</name><argument_list>()</argument_list></call></expr></argument>,
        <argument><expr><call><name><name>sharedContact</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getFamily</name><argument_list>()</argument_list></call><operator>.</operator><call><name>orNull</name><argument_list>()</argument_list></call></expr></argument>,
        <argument><expr><call><name><name>sharedContact</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPrefix</name><argument_list>()</argument_list></call><operator>.</operator><call><name>orNull</name><argument_list>()</argument_list></call></expr></argument>,
        <argument><expr><call><name><name>sharedContact</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSuffix</name><argument_list>()</argument_list></call><operator>.</operator><call><name>orNull</name><argument_list>()</argument_list></call></expr></argument>,
        <argument><expr><call><name><name>sharedContact</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMiddle</name><argument_list>()</argument_list></call><operator>.</operator><call><name>orNull</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Phone</name></argument>&gt;</argument_list></name></type> <name>phoneNumbers</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name><name>sharedContact</name><operator>.</operator><name>getPhone</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isPresent</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <for>for <control>(<init><decl><type><name><name>SharedContact</name><operator>.</operator><name>Phone</name></name></type> <name>phone</name> <range>: <expr><call><name><name>sharedContact</name><operator>.</operator><name>getPhone</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
        <expr_stmt><expr><call><name><name>phoneNumbers</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Phone</name><argument_list>(<argument><expr><call><name><name>phone</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>,
                                   <argument><expr><call><name>remoteToLocalType</name><argument_list>(<argument><expr><call><name><name>phone</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                   <argument><expr><call><name><name>phone</name><operator>.</operator><name>getLabel</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>orNull</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></for>
    }</block></then></if>

    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Email</name></argument>&gt;</argument_list></name></type> <name>emails</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name><name>sharedContact</name><operator>.</operator><name>getEmail</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isPresent</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <for>for <control>(<init><decl><type><name><name>SharedContact</name><operator>.</operator><name>Email</name></name></type> <name>email</name> <range>: <expr><call><name><name>sharedContact</name><operator>.</operator><name>getEmail</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
        <expr_stmt><expr><call><name><name>emails</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Email</name><argument_list>(<argument><expr><call><name><name>email</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>,
                             <argument><expr><call><name>remoteToLocalType</name><argument_list>(<argument><expr><call><name><name>email</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                             <argument><expr><call><name><name>email</name><operator>.</operator><name>getLabel</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>orNull</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></for>
    }</block></then></if>

    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>PostalAddress</name></argument>&gt;</argument_list></name></type> <name>postalAddresses</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name><name>sharedContact</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isPresent</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <for>for <control>(<init><decl><type><name><name>SharedContact</name><operator>.</operator><name>PostalAddress</name></name></type> <name>postalAddress</name> <range>: <expr><call><name><name>sharedContact</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
        <expr_stmt><expr><call><name><name>postalAddresses</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PostalAddress</name><argument_list>(<argument><expr><call><name>remoteToLocalType</name><argument_list>(<argument><expr><call><name><name>postalAddress</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                              <argument><expr><call><name><name>postalAddress</name><operator>.</operator><name>getLabel</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>orNull</name><argument_list>()</argument_list></call></expr></argument>,
                                              <argument><expr><call><name><name>postalAddress</name><operator>.</operator><name>getStreet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>orNull</name><argument_list>()</argument_list></call></expr></argument>,
                                              <argument><expr><call><name><name>postalAddress</name><operator>.</operator><name>getPobox</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>orNull</name><argument_list>()</argument_list></call></expr></argument>,
                                              <argument><expr><call><name><name>postalAddress</name><operator>.</operator><name>getNeighborhood</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>orNull</name><argument_list>()</argument_list></call></expr></argument>,
                                              <argument><expr><call><name><name>postalAddress</name><operator>.</operator><name>getCity</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>orNull</name><argument_list>()</argument_list></call></expr></argument>,
                                              <argument><expr><call><name><name>postalAddress</name><operator>.</operator><name>getRegion</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>orNull</name><argument_list>()</argument_list></call></expr></argument>,
                                              <argument><expr><call><name><name>postalAddress</name><operator>.</operator><name>getPostcode</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>orNull</name><argument_list>()</argument_list></call></expr></argument>,
                                              <argument><expr><call><name><name>postalAddress</name><operator>.</operator><name>getCountry</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>orNull</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></for>
    }</block></then></if>

    <decl_stmt><decl><type><name>Avatar</name></type> <name>avatar</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name><name>sharedContact</name><operator>.</operator><name>getAvatar</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isPresent</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>Attachment</name></type> <name>attachment</name> <init>= <expr><call><name><name>PointerAttachment</name><operator>.</operator><name>forPointer</name></name><argument_list>(<argument><expr><call><name><name>Optional</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><call><name><name>sharedContact</name><operator>.</operator><name>getAvatar</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAttachment</name><argument_list>()</argument_list></call><operator>.</operator><call><name>asPointer</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>boolean</name></type>    <name>isProfile</name>  <init>= <expr><call><name><name>sharedContact</name><operator>.</operator><name>getAvatar</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isProfile</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><name>avatar</name> <operator>=</operator> <operator>new</operator> <call><name>Avatar</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>attachment</name></expr></argument>, <argument><expr><name>isProfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <return>return <expr><operator>new</operator> <call><name>Contact</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>sharedContact</name><operator>.</operator><name>getOrganization</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>orNull</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>phoneNumbers</name></expr></argument>, <argument><expr><name>emails</name></expr></argument>, <argument><expr><name>postalAddresses</name></expr></argument>, <argument><expr><name>avatar</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name><name>Phone</name><operator>.</operator><name>Type</name></name></type> <name>remoteToLocalType</name><parameter_list>(<parameter><decl><type><name><name>SharedContact</name><operator>.</operator><name>Phone</name><operator>.</operator><name>Type</name></name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{
    <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{
      <case>case <expr><name>HOME</name></expr>:</case>   <return>return <expr><name><name>Phone</name><operator>.</operator><name>Type</name><operator>.</operator><name>HOME</name></name></expr>;</return>
      <case>case <expr><name>MOBILE</name></expr>:</case> <return>return <expr><name><name>Phone</name><operator>.</operator><name>Type</name><operator>.</operator><name>MOBILE</name></name></expr>;</return>
      <case>case <expr><name>WORK</name></expr>:</case>   <return>return <expr><name><name>Phone</name><operator>.</operator><name>Type</name><operator>.</operator><name>WORK</name></name></expr>;</return>
      <default>default:</default>     <return>return <expr><name><name>Phone</name><operator>.</operator><name>Type</name><operator>.</operator><name>CUSTOM</name></name></expr>;</return>
    }</block></switch>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name><name>Email</name><operator>.</operator><name>Type</name></name></type> <name>remoteToLocalType</name><parameter_list>(<parameter><decl><type><name><name>SharedContact</name><operator>.</operator><name>Email</name><operator>.</operator><name>Type</name></name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{
    <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{
      <case>case <expr><name>HOME</name></expr>:</case>   <return>return <expr><name><name>Email</name><operator>.</operator><name>Type</name><operator>.</operator><name>HOME</name></name></expr>;</return>
      <case>case <expr><name>MOBILE</name></expr>:</case> <return>return <expr><name><name>Email</name><operator>.</operator><name>Type</name><operator>.</operator><name>MOBILE</name></name></expr>;</return>
      <case>case <expr><name>WORK</name></expr>:</case>   <return>return <expr><name><name>Email</name><operator>.</operator><name>Type</name><operator>.</operator><name>WORK</name></name></expr>;</return>
      <default>default:</default>     <return>return <expr><name><name>Email</name><operator>.</operator><name>Type</name><operator>.</operator><name>CUSTOM</name></name></expr>;</return>
    }</block></switch>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name><name>PostalAddress</name><operator>.</operator><name>Type</name></name></type> <name>remoteToLocalType</name><parameter_list>(<parameter><decl><type><name><name>SharedContact</name><operator>.</operator><name>PostalAddress</name><operator>.</operator><name>Type</name></name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{
    <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{
      <case>case <expr><name>HOME</name></expr>:</case>   <return>return <expr><name><name>PostalAddress</name><operator>.</operator><name>Type</name><operator>.</operator><name>HOME</name></name></expr>;</return>
      <case>case <expr><name>WORK</name></expr>:</case>   <return>return <expr><name><name>PostalAddress</name><operator>.</operator><name>Type</name><operator>.</operator><name>WORK</name></name></expr>;</return>
      <default>default:</default>     <return>return <expr><name><name>PostalAddress</name><operator>.</operator><name>Type</name><operator>.</operator><name>CUSTOM</name></name></expr>;</return>
    }</block></switch>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name><name>SharedContact</name><operator>.</operator><name>Phone</name><operator>.</operator><name>Type</name></name></type> <name>localToRemoteType</name><parameter_list>(<parameter><decl><type><name><name>Phone</name><operator>.</operator><name>Type</name></name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{
    <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{
      <case>case <expr><name>HOME</name></expr>:</case>   <return>return <expr><name><name>SharedContact</name><operator>.</operator><name>Phone</name><operator>.</operator><name>Type</name><operator>.</operator><name>HOME</name></name></expr>;</return>
      <case>case <expr><name>MOBILE</name></expr>:</case> <return>return <expr><name><name>SharedContact</name><operator>.</operator><name>Phone</name><operator>.</operator><name>Type</name><operator>.</operator><name>MOBILE</name></name></expr>;</return>
      <case>case <expr><name>WORK</name></expr>:</case>   <return>return <expr><name><name>SharedContact</name><operator>.</operator><name>Phone</name><operator>.</operator><name>Type</name><operator>.</operator><name>WORK</name></name></expr>;</return>
      <default>default:</default>     <return>return <expr><name><name>SharedContact</name><operator>.</operator><name>Phone</name><operator>.</operator><name>Type</name><operator>.</operator><name>CUSTOM</name></name></expr>;</return>
    }</block></switch>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name><name>SharedContact</name><operator>.</operator><name>Email</name><operator>.</operator><name>Type</name></name></type> <name>localToRemoteType</name><parameter_list>(<parameter><decl><type><name><name>Email</name><operator>.</operator><name>Type</name></name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{
    <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{
      <case>case <expr><name>HOME</name></expr>:</case>   <return>return <expr><name><name>SharedContact</name><operator>.</operator><name>Email</name><operator>.</operator><name>Type</name><operator>.</operator><name>HOME</name></name></expr>;</return>
      <case>case <expr><name>MOBILE</name></expr>:</case> <return>return <expr><name><name>SharedContact</name><operator>.</operator><name>Email</name><operator>.</operator><name>Type</name><operator>.</operator><name>MOBILE</name></name></expr>;</return>
      <case>case <expr><name>WORK</name></expr>:</case>   <return>return <expr><name><name>SharedContact</name><operator>.</operator><name>Email</name><operator>.</operator><name>Type</name><operator>.</operator><name>WORK</name></name></expr>;</return>
      <default>default:</default>     <return>return <expr><name><name>SharedContact</name><operator>.</operator><name>Email</name><operator>.</operator><name>Type</name><operator>.</operator><name>CUSTOM</name></name></expr>;</return>
    }</block></switch>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name><name>SharedContact</name><operator>.</operator><name>PostalAddress</name><operator>.</operator><name>Type</name></name></type> <name>localToRemoteType</name><parameter_list>(<parameter><decl><type><name><name>PostalAddress</name><operator>.</operator><name>Type</name></name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{
    <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{
      <case>case <expr><name>HOME</name></expr>:</case> <return>return <expr><name><name>SharedContact</name><operator>.</operator><name>PostalAddress</name><operator>.</operator><name>Type</name><operator>.</operator><name>HOME</name></name></expr>;</return>
      <case>case <expr><name>WORK</name></expr>:</case> <return>return <expr><name><name>SharedContact</name><operator>.</operator><name>PostalAddress</name><operator>.</operator><name>Type</name><operator>.</operator><name>WORK</name></name></expr>;</return>
      <default>default:</default>   <return>return <expr><name><name>SharedContact</name><operator>.</operator><name>PostalAddress</name><operator>.</operator><name>Type</name><operator>.</operator><name>CUSTOM</name></name></expr>;</return>
    }</block></switch>
  }</block></function>
}</block></class>
</unit>
