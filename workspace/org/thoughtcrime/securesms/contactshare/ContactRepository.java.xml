<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\contactshare\ContactRepository.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>contactshare</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>database</name><operator>.</operator><name>Cursor</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>provider</name><operator>.</operator><name>ContactsContract</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>WorkerThread</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextUtils</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>contacts</name><operator>.</operator><name>ContactsDatabase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>contacts</name><operator>.</operator><name>avatars</name><operator>.</operator><name>ContactPhoto</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>contactshare</name><operator>.</operator><name>Contact</name><operator>.</operator><name>Email</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>contactshare</name><operator>.</operator><name>Contact</name><operator>.</operator><name>Name</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>contactshare</name><operator>.</operator><name>Contact</name><operator>.</operator><name>Phone</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>contactshare</name><operator>.</operator><name>Contact</name><operator>.</operator><name>PostalAddress</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>Address</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>logging</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mms</name><operator>.</operator><name>PartAuthority</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>providers</name><operator>.</operator><name>PersistentBlobProvider</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>recipients</name><operator>.</operator><name>Recipient</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Executor</name></name>;</import>

<import>import <name><name>ezvcard</name><operator>.</operator><name>Ezvcard</name></name>;</import>
<import>import <name><name>ezvcard</name><operator>.</operator><name>VCard</name></name>;</import>

<import>import static <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>contactshare</name><operator>.</operator><name>Contact</name><operator>.</operator><name>*</name></name>;</import>

<class><specifier>public</specifier> class <name>ContactRepository</name> <block>{

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>ContactRepository</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Context</name></type>          <name>context</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Executor</name></type>         <name>executor</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>ContactsDatabase</name></type> <name>contactsDatabase</name></decl>;</decl_stmt>

  <constructor><name>ContactRepository</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type>          <name>context</name></decl></parameter>,
                    <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Executor</name></type>         <name>executor</name></decl></parameter>,
                    <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>ContactsDatabase</name></type> <name>contactsDatabase</name></decl></parameter>)</parameter_list>
  <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>context</name></name>          <operator>=</operator> <call><name><name>context</name><operator>.</operator><name>getApplicationContext</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>executor</name></name>         <operator>=</operator> <name>executor</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>contactsDatabase</name></name> <operator>=</operator> <name>contactsDatabase</name></expr>;</expr_stmt>
  }</block></constructor>

  <function><type><name>void</name></type> <name>getContacts</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Uri</name></argument>&gt;</argument_list></name></type> <name>contactUris</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>ValueCallback</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Contact</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>callback</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>executor</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{
      <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Contact</name></argument>&gt;</argument_list></name></type> <name>contacts</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>contactUris</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>Uri</name></type> <name>contactUri</name> <range>: <expr><name>contactUris</name></expr></range></decl></init>)</control> <block>{
        <decl_stmt><decl><type><name>Contact</name></type> <name>contact</name></decl>;</decl_stmt>

        <if>if <condition>(<expr><call><name><name>ContactsContract</name><operator>.</operator><name>AUTHORITY</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>contactUri</name><operator>.</operator><name>getAuthority</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>contact</name> <operator>=</operator> <call><name>getContactFromSystemContacts</name><argument_list>(<argument><expr><call><name><name>ContactUtil</name><operator>.</operator><name>getContactIdFromUri</name></name><argument_list>(<argument><expr><name>contactUri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><name>contact</name> <operator>=</operator> <call><name>getContactFromVcard</name><argument_list>(<argument><expr><name>contactUri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <if>if <condition>(<expr><name>contact</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name><name>contacts</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>contact</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
      }</block></for>
      <expr_stmt><expr><call><name><name>callback</name><operator>.</operator><name>onComplete</name></name><argument_list>(<argument><expr><name>contacts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>WorkerThread</name></annotation>
  <specifier>private</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>Contact</name></type> <name>getContactFromSystemContacts</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>contactId</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>Name</name></type> <name>name</name> <init>= <expr><call><name>getName</name><argument_list>(<argument><expr><name>contactId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>name</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Couldn't find a name associated with the provided contact ID."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="null">null</literal></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Phone</name></argument>&gt;</argument_list></name></type> <name>phoneNumbers</name> <init>= <expr><call><name>getPhoneNumbers</name><argument_list>(<argument><expr><name>contactId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AvatarInfo</name></type>  <name>avatarInfo</name>   <init>= <expr><call><name>getAvatarInfo</name><argument_list>(<argument><expr><name>contactId</name></expr></argument>, <argument><expr><name>phoneNumbers</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Avatar</name></type>      <name>avatar</name>       <init>= <expr><ternary><condition><expr><name>avatarInfo</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><operator>new</operator> <call><name>Avatar</name><argument_list>(<argument><expr><name><name>avatarInfo</name><operator>.</operator><name>uri</name></name></expr></argument>, <argument><expr><name><name>avatarInfo</name><operator>.</operator><name>isProfile</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <return>return <expr><operator>new</operator> <call><name>Contact</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>phoneNumbers</name></expr></argument>, <argument><expr><call><name>getEmails</name><argument_list>(<argument><expr><name>contactId</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>getPostalAddresses</name><argument_list>(<argument><expr><name>contactId</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>avatar</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>WorkerThread</name></annotation>
  <specifier>private</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>Contact</name></type> <name>getContactFromVcard</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Uri</name></type> <name>uri</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>Contact</name></type> <name>contact</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <try>try <init>(<decl><type><name>InputStream</name></type> <name>stream</name> <init>= <expr><call><name><name>PartAuthority</name><operator>.</operator><name>getAttachmentStream</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></init></decl>)</init> <block>{
      <decl_stmt><decl><type><name>VCard</name></type> <name>vcard</name> <init>= <expr><call><name><name>Ezvcard</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>first</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name><name>ezvcard</name><operator>.</operator><name>property</name><operator>.</operator><name>StructuredName</name></name></type>  <name>vName</name>            <init>= <expr><call><name><name>vcard</name><operator>.</operator><name>getStructuredName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>ezvcard</name><operator>.</operator><name>property</name><operator>.</operator><name>Telephone</name></name></argument>&gt;</argument_list></name></type> <name>vPhones</name>          <init>= <expr><call><name><name>vcard</name><operator>.</operator><name>getTelephoneNumbers</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>ezvcard</name><operator>.</operator><name>property</name><operator>.</operator><name>Email</name></name></argument>&gt;</argument_list></name></type>     <name>vEmails</name>          <init>= <expr><call><name><name>vcard</name><operator>.</operator><name>getEmails</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>ezvcard</name><operator>.</operator><name>property</name><operator>.</operator><name>Address</name></name></argument>&gt;</argument_list></name></type>   <name>vPostalAddresses</name> <init>= <expr><call><name><name>vcard</name><operator>.</operator><name>getAddresses</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>String</name></type> <name>organization</name> <init>= <expr><ternary><condition><expr><call><name><name>vcard</name><operator>.</operator><name>getOrganization</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>vcard</name><operator>.</operator><name>getOrganization</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getValues</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name><name>vcard</name><operator>.</operator><name>getOrganization</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getValues</name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>String</name></type> <name>displayName</name>  <init>= <expr><ternary><condition><expr><call><name><name>vcard</name><operator>.</operator><name>getFormattedName</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>vcard</name><operator>.</operator><name>getFormattedName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getValue</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><name>displayName</name> <operator>==</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>vName</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>displayName</name> <operator>=</operator> <call><name><name>vName</name><operator>.</operator><name>getGiven</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>

      <if>if <condition>(<expr><name>displayName</name> <operator>==</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>vcard</name><operator>.</operator><name>getOrganization</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>displayName</name> <operator>=</operator> <name>organization</name></expr>;</expr_stmt>
      }</block></then></if>

      <if>if <condition>(<expr><name>displayName</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"No valid name."</literal></expr></argument>)</argument_list></call></expr>;</throw>
      }</block></then></if>

      <decl_stmt><decl><type><name>Name</name></type> <name>name</name> <init>= <expr><operator>new</operator> <call><name>Name</name><argument_list>(<argument><expr><name>displayName</name></expr></argument>,
                           <argument><expr><ternary><condition><expr><name>vName</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>vName</name><operator>.</operator><name>getGiven</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></argument>,
                           <argument><expr><ternary><condition><expr><name>vName</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>vName</name><operator>.</operator><name>getFamily</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></argument>,
                           <argument><expr><ternary><condition><expr><name>vName</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>vName</name><operator>.</operator><name>getPrefixes</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name><name>vName</name><operator>.</operator><name>getPrefixes</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></argument>,
                           <argument><expr><ternary><condition><expr><name>vName</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>vName</name><operator>.</operator><name>getSuffixes</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name><name>vName</name><operator>.</operator><name>getSuffixes</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></argument>,
                           <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


      <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Phone</name></argument>&gt;</argument_list></name></type> <name>phoneNumbers</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>vPhones</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name><name>ezvcard</name><operator>.</operator><name>property</name><operator>.</operator><name>Telephone</name></name></type> <name>vEmail</name> <range>: <expr><name>vPhones</name></expr></range></decl></init>)</control> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>label</name> <init>= <expr><ternary><condition><expr><operator>!</operator><call><name><name>vEmail</name><operator>.</operator><name>getTypes</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name>getCleanedVcardType</name><argument_list>(<argument><expr><call><name><name>vEmail</name><operator>.</operator><name>getTypes</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>phoneNumbers</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Phone</name><argument_list>(<argument><expr><call><name><name>vEmail</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>phoneTypeFromVcardType</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>label</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></for>

      <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Email</name></argument>&gt;</argument_list></name></type> <name>emails</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>vEmails</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name><name>ezvcard</name><operator>.</operator><name>property</name><operator>.</operator><name>Email</name></name></type> <name>vEmail</name> <range>: <expr><name>vEmails</name></expr></range></decl></init>)</control> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>label</name> <init>= <expr><ternary><condition><expr><operator>!</operator><call><name><name>vEmail</name><operator>.</operator><name>getTypes</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name>getCleanedVcardType</name><argument_list>(<argument><expr><call><name><name>vEmail</name><operator>.</operator><name>getTypes</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>emails</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Email</name><argument_list>(<argument><expr><call><name><name>vEmail</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>emailTypeFromVcardType</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>label</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></for>

      <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>PostalAddress</name></argument>&gt;</argument_list></name></type> <name>postalAddresses</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>vPostalAddresses</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name><name>ezvcard</name><operator>.</operator><name>property</name><operator>.</operator><name>Address</name></name></type> <name>vPostalAddress</name> <range>: <expr><name>vPostalAddresses</name></expr></range></decl></init>)</control> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>label</name> <init>= <expr><ternary><condition><expr><operator>!</operator><call><name><name>vPostalAddress</name><operator>.</operator><name>getTypes</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name>getCleanedVcardType</name><argument_list>(<argument><expr><call><name><name>vPostalAddress</name><operator>.</operator><name>getTypes</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>postalAddresses</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PostalAddress</name><argument_list>(<argument><expr><call><name>postalAddressTypeFromVcardType</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr></argument>,
                                              <argument><expr><name>label</name></expr></argument>,
                                              <argument><expr><call><name><name>vPostalAddress</name><operator>.</operator><name>getStreetAddress</name></name><argument_list>()</argument_list></call></expr></argument>,
                                              <argument><expr><call><name><name>vPostalAddress</name><operator>.</operator><name>getPoBox</name></name><argument_list>()</argument_list></call></expr></argument>,
                                              <argument><expr><literal type="null">null</literal></expr></argument>,
                                              <argument><expr><call><name><name>vPostalAddress</name><operator>.</operator><name>getLocality</name></name><argument_list>()</argument_list></call></expr></argument>,
                                              <argument><expr><call><name><name>vPostalAddress</name><operator>.</operator><name>getRegion</name></name><argument_list>()</argument_list></call></expr></argument>,
                                              <argument><expr><call><name><name>vPostalAddress</name><operator>.</operator><name>getPostalCode</name></name><argument_list>()</argument_list></call></expr></argument>,
                                              <argument><expr><call><name><name>vPostalAddress</name><operator>.</operator><name>getCountry</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></for>

      <expr_stmt><expr><name>contact</name> <operator>=</operator> <operator>new</operator> <call><name>Contact</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>organization</name></expr></argument>, <argument><expr><name>phoneNumbers</name></expr></argument>, <argument><expr><name>emails</name></expr></argument>, <argument><expr><name>postalAddresses</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></try> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Failed to parse the vcard."</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></catch>

    <if>if <condition>(<expr><call><name><name>PersistentBlobProvider</name><operator>.</operator><name>AUTHORITY</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>uri</name><operator>.</operator><name>getAuthority</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>PersistentBlobProvider</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>delete</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <return>return <expr><name>contact</name></expr>;</return>
  }</block></function>

  <function><annotation>@<name>WorkerThread</name></annotation>
  <specifier>private</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>Name</name></type> <name>getName</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>contactId</name></decl></parameter>)</parameter_list> <block>{
    <try>try <init>(<decl><type><name>Cursor</name></type> <name>cursor</name> <init>= <expr><call><name><name>contactsDatabase</name><operator>.</operator><name>getNameDetails</name></name><argument_list>(<argument><expr><name>contactId</name></expr></argument>)</argument_list></call></expr></init></decl>)</init> <block>{
      <if>if <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>cursor</name><operator>.</operator><name>moveToFirst</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>cursorDisplayName</name> <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>StructuredName</name><operator>.</operator><name>DISPLAY_NAME</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>cursorGivenName</name>   <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>StructuredName</name><operator>.</operator><name>GIVEN_NAME</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>cursorFamilyName</name>  <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>StructuredName</name><operator>.</operator><name>FAMILY_NAME</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>cursorPrefix</name>      <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>StructuredName</name><operator>.</operator><name>PREFIX</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>cursorSuffix</name>      <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>StructuredName</name><operator>.</operator><name>SUFFIX</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>cursorMiddleName</name>  <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>StructuredName</name><operator>.</operator><name>MIDDLE_NAME</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Name</name></type> <name>name</name> <init>= <expr><operator>new</operator> <call><name>Name</name><argument_list>(<argument><expr><name>cursorDisplayName</name></expr></argument>, <argument><expr><name>cursorGivenName</name></expr></argument>, <argument><expr><name>cursorFamilyName</name></expr></argument>, <argument><expr><name>cursorPrefix</name></expr></argument>, <argument><expr><name>cursorSuffix</name></expr></argument>, <argument><expr><name>cursorMiddleName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><operator>!</operator><call><name><name>name</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
          <return>return <expr><name>name</name></expr>;</return>
        }</block></then></if>
      }</block></then></if>
    }</block></try>

    <decl_stmt><decl><type><name>String</name></type> <name>org</name> <init>= <expr><call><name><name>contactsDatabase</name><operator>.</operator><name>getOrganizationName</name></name><argument_list>(<argument><expr><name>contactId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>org</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><operator>new</operator> <call><name>Name</name><argument_list>(<argument><expr><name>org</name></expr></argument>, <argument><expr><name>org</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <return>return <expr><literal type="null">null</literal></expr>;</return>
  }</block></function>

  <function><annotation>@<name>WorkerThread</name></annotation>
  <specifier>private</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Phone</name></argument>&gt;</argument_list></name></type> <name>getPhoneNumbers</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>contactId</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Phone</name></argument>&gt;</argument_list></name></type> <name>numberMap</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <try>try <init>(<decl><type><name>Cursor</name></type> <name>cursor</name> <init>= <expr><call><name><name>contactsDatabase</name><operator>.</operator><name>getPhoneDetails</name></name><argument_list>(<argument><expr><name>contactId</name></expr></argument>)</argument_list></call></expr></init></decl>)</init> <block>{
      <while>while <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>cursor</name><operator>.</operator><name>moveToNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>cursorNumber</name> <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>Phone</name><operator>.</operator><name>NUMBER</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type>    <name>cursorType</name>   <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>Phone</name><operator>.</operator><name>TYPE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>cursorLabel</name>  <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>Phone</name><operator>.</operator><name>LABEL</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>number</name>    <init>= <expr><call><name><name>ContactUtil</name><operator>.</operator><name>getNormalizedPhoneNumber</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>cursorNumber</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Phone</name></type>  <name>existing</name>  <init>= <expr><call><name><name>numberMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>number</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Phone</name></type>  <name>candidate</name> <init>= <expr><operator>new</operator> <call><name>Phone</name><argument_list>(<argument><expr><name>number</name></expr></argument>, <argument><expr><call><name>phoneTypeFromContactType</name><argument_list>(<argument><expr><name>cursorType</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cursorLabel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>existing</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <operator>(</operator><call><name><name>existing</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Phone</name><operator>.</operator><name>Type</name><operator>.</operator><name>CUSTOM</name></name> <operator>&amp;&amp;</operator> <call><name><name>existing</name><operator>.</operator><name>getLabel</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name><name>numberMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>number</name></expr></argument>, <argument><expr><name>candidate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
      }</block></while>
    }</block></try>

    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Phone</name></argument>&gt;</argument_list></name></type> <name>numbers</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>numberMap</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>numbers</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name><name>numberMap</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>numbers</name></expr>;</return>
  }</block></function>

  <function><annotation>@<name>WorkerThread</name></annotation>
  <specifier>private</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Email</name></argument>&gt;</argument_list></name></type> <name>getEmails</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>contactId</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Email</name></argument>&gt;</argument_list></name></type> <name>emails</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <try>try <init>(<decl><type><name>Cursor</name></type> <name>cursor</name> <init>= <expr><call><name><name>contactsDatabase</name><operator>.</operator><name>getEmailDetails</name></name><argument_list>(<argument><expr><name>contactId</name></expr></argument>)</argument_list></call></expr></init></decl>)</init> <block>{
      <while>while <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>cursor</name><operator>.</operator><name>moveToNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>cursorEmail</name> <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>Email</name><operator>.</operator><name>ADDRESS</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type>    <name>cursorType</name>  <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>Email</name><operator>.</operator><name>TYPE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>cursorLabel</name> <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>Email</name><operator>.</operator><name>LABEL</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>emails</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Email</name><argument_list>(<argument><expr><name>cursorEmail</name></expr></argument>, <argument><expr><call><name>emailTypeFromContactType</name><argument_list>(<argument><expr><name>cursorType</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cursorLabel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></while>
    }</block></try>

    <return>return <expr><name>emails</name></expr>;</return>
  }</block></function>

  <function><annotation>@<name>WorkerThread</name></annotation>
  <specifier>private</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>PostalAddress</name></argument>&gt;</argument_list></name></type> <name>getPostalAddresses</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>contactId</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>PostalAddress</name></argument>&gt;</argument_list></name></type> <name>postalAddresses</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <try>try <init>(<decl><type><name>Cursor</name></type> <name>cursor</name> <init>= <expr><call><name><name>contactsDatabase</name><operator>.</operator><name>getPostalAddressDetails</name></name><argument_list>(<argument><expr><name>contactId</name></expr></argument>)</argument_list></call></expr></init></decl>)</init> <block>{
      <while>while <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>cursor</name><operator>.</operator><name>moveToNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>int</name></type>    <name>cursorType</name>         <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>StructuredPostal</name><operator>.</operator><name>TYPE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>cursorLabel</name>        <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>StructuredPostal</name><operator>.</operator><name>LABEL</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>cursorStreet</name>       <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>StructuredPostal</name><operator>.</operator><name>STREET</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>cursorPoBox</name>        <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>StructuredPostal</name><operator>.</operator><name>POBOX</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>cursorNeighborhood</name> <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>StructuredPostal</name><operator>.</operator><name>NEIGHBORHOOD</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>cursorCity</name>         <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>StructuredPostal</name><operator>.</operator><name>CITY</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>cursorRegion</name>       <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>StructuredPostal</name><operator>.</operator><name>REGION</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>cursorPostal</name>       <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>StructuredPostal</name><operator>.</operator><name>POSTCODE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>cursorCountry</name>      <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>StructuredPostal</name><operator>.</operator><name>COUNTRY</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>postalAddresses</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PostalAddress</name><argument_list>(<argument><expr><call><name>postalAddressTypeFromContactType</name><argument_list>(<argument><expr><name>cursorType</name></expr></argument>)</argument_list></call></expr></argument>,
                                              <argument><expr><name>cursorLabel</name></expr></argument>,
                                              <argument><expr><name>cursorStreet</name></expr></argument>,
                                              <argument><expr><name>cursorPoBox</name></expr></argument>,
                                              <argument><expr><name>cursorNeighborhood</name></expr></argument>,
                                              <argument><expr><name>cursorCity</name></expr></argument>,
                                              <argument><expr><name>cursorRegion</name></expr></argument>,
                                              <argument><expr><name>cursorPostal</name></expr></argument>,
                                              <argument><expr><name>cursorCountry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></while>
    }</block></try>

    <return>return <expr><name>postalAddresses</name></expr>;</return>
  }</block></function>

  <function><annotation>@<name>WorkerThread</name></annotation>
  <specifier>private</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>AvatarInfo</name></type> <name>getAvatarInfo</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>contactId</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Phone</name></argument>&gt;</argument_list></name></type> <name>phoneNumbers</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>AvatarInfo</name></type> <name>systemAvatar</name> <init>= <expr><call><name>getSystemAvatarInfo</name><argument_list>(<argument><expr><name>contactId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>systemAvatar</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <return>return <expr><name>systemAvatar</name></expr>;</return>
    }</block></then></if>

    <for>for <control>(<init><decl><type><name>Phone</name></type> <name>phoneNumber</name> <range>: <expr><name>phoneNumbers</name></expr></range></decl></init>)</control> <block>{
      <decl_stmt><decl><type><name>AvatarInfo</name></type> <name>recipientAvatar</name> <init>= <expr><call><name>getRecipientAvatarInfo</name><argument_list>(<argument><expr><call><name><name>Address</name><operator>.</operator><name>fromExternal</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>phoneNumber</name><operator>.</operator><name>getNumber</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>recipientAvatar</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <return>return <expr><name>recipientAvatar</name></expr>;</return>
      }</block></then></if>
    }</block></for>
    <return>return <expr><literal type="null">null</literal></expr>;</return>
  }</block></function>

  <function><annotation>@<name>WorkerThread</name></annotation>
  <specifier>private</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>AvatarInfo</name></type> <name>getSystemAvatarInfo</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>contactId</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>Uri</name></type> <name>uri</name> <init>= <expr><call><name><name>contactsDatabase</name><operator>.</operator><name>getAvatarUri</name></name><argument_list>(<argument><expr><name>contactId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>uri</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <return>return <expr><operator>new</operator> <call><name>AvatarInfo</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <return>return <expr><literal type="null">null</literal></expr>;</return>
  }</block></function>

  <function><annotation>@<name>WorkerThread</name></annotation>
  <specifier>private</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>AvatarInfo</name></type> <name>getRecipientAvatarInfo</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Address</name></type> <name>address</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>Recipient</name></type>    <name>recipient</name>    <init>= <expr><call><name><name>Recipient</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ContactPhoto</name></type> <name>contactPhoto</name> <init>= <expr><call><name><name>recipient</name><operator>.</operator><name>getContactPhoto</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>contactPhoto</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>Uri</name></type> <name>avatarUri</name> <init>= <expr><call><name><name>contactPhoto</name><operator>.</operator><name>getUri</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>avatarUri</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <return>return <expr><operator>new</operator> <call><name>AvatarInfo</name><argument_list>(<argument><expr><name>avatarUri</name></expr></argument>, <argument><expr><call><name><name>contactPhoto</name><operator>.</operator><name>isProfilePhoto</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
      }</block></then></if>
    }</block></then></if>

    <return>return <expr><literal type="null">null</literal></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name><name>Phone</name><operator>.</operator><name>Type</name></name></type> <name>phoneTypeFromContactType</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{
    <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{
      <case>case <expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>Phone</name><operator>.</operator><name>TYPE_HOME</name></name></expr>:</case>
        <return>return <expr><name><name>Phone</name><operator>.</operator><name>Type</name><operator>.</operator><name>HOME</name></name></expr>;</return>
      <case>case <expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>Phone</name><operator>.</operator><name>TYPE_MOBILE</name></name></expr>:</case>
        <return>return <expr><name><name>Phone</name><operator>.</operator><name>Type</name><operator>.</operator><name>MOBILE</name></name></expr>;</return>
      <case>case <expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>Phone</name><operator>.</operator><name>TYPE_WORK</name></name></expr>:</case>
        <return>return <expr><name><name>Phone</name><operator>.</operator><name>Type</name><operator>.</operator><name>WORK</name></name></expr>;</return>
    }</block></switch>
    <return>return <expr><name><name>Phone</name><operator>.</operator><name>Type</name><operator>.</operator><name>CUSTOM</name></name></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name><name>Phone</name><operator>.</operator><name>Type</name></name></type> <name>phoneTypeFromVcardType</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>String</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{
    <if>if      <condition>(<expr><literal type="string">"home"</literal><operator>.</operator><call><name>equalsIgnoreCase</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><name><name>Phone</name><operator>.</operator><name>Type</name><operator>.</operator><name>HOME</name></name></expr>;</return></block></then>
    <elseif>else <if>if <condition>(<expr><literal type="string">"cell"</literal><operator>.</operator><call><name>equalsIgnoreCase</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><name><name>Phone</name><operator>.</operator><name>Type</name><operator>.</operator><name>MOBILE</name></name></expr>;</return></block></then></if></elseif>
    <elseif>else <if>if <condition>(<expr><literal type="string">"work"</literal><operator>.</operator><call><name>equalsIgnoreCase</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><name><name>Phone</name><operator>.</operator><name>Type</name><operator>.</operator><name>WORK</name></name></expr>;</return></block></then></if></elseif>
    <else>else                                    <block type="pseudo"><return>return <expr><name><name>Phone</name><operator>.</operator><name>Type</name><operator>.</operator><name>CUSTOM</name></name></expr>;</return></block></else></if>
  }</block></function>

  <function><specifier>private</specifier> <type><name><name>Email</name><operator>.</operator><name>Type</name></name></type> <name>emailTypeFromContactType</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{
    <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{
      <case>case <expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>Email</name><operator>.</operator><name>TYPE_HOME</name></name></expr>:</case>
        <return>return <expr><name><name>Email</name><operator>.</operator><name>Type</name><operator>.</operator><name>HOME</name></name></expr>;</return>
      <case>case <expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>Email</name><operator>.</operator><name>TYPE_MOBILE</name></name></expr>:</case>
        <return>return <expr><name><name>Email</name><operator>.</operator><name>Type</name><operator>.</operator><name>MOBILE</name></name></expr>;</return>
      <case>case <expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>Email</name><operator>.</operator><name>TYPE_WORK</name></name></expr>:</case>
        <return>return <expr><name><name>Email</name><operator>.</operator><name>Type</name><operator>.</operator><name>WORK</name></name></expr>;</return>
    }</block></switch>
    <return>return <expr><name><name>Email</name><operator>.</operator><name>Type</name><operator>.</operator><name>CUSTOM</name></name></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name><name>Email</name><operator>.</operator><name>Type</name></name></type> <name>emailTypeFromVcardType</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>String</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{
    <if>if      <condition>(<expr><literal type="string">"home"</literal><operator>.</operator><call><name>equalsIgnoreCase</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><name><name>Email</name><operator>.</operator><name>Type</name><operator>.</operator><name>HOME</name></name></expr>;</return></block></then>
    <elseif>else <if>if <condition>(<expr><literal type="string">"cell"</literal><operator>.</operator><call><name>equalsIgnoreCase</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><name><name>Email</name><operator>.</operator><name>Type</name><operator>.</operator><name>MOBILE</name></name></expr>;</return></block></then></if></elseif>
    <elseif>else <if>if <condition>(<expr><literal type="string">"work"</literal><operator>.</operator><call><name>equalsIgnoreCase</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><name><name>Email</name><operator>.</operator><name>Type</name><operator>.</operator><name>WORK</name></name></expr>;</return></block></then></if></elseif>
    <else>else                                    <block type="pseudo"><return>return <expr><name><name>Email</name><operator>.</operator><name>Type</name><operator>.</operator><name>CUSTOM</name></name></expr>;</return></block></else></if>
  }</block></function>

  <function><specifier>private</specifier> <type><name><name>PostalAddress</name><operator>.</operator><name>Type</name></name></type> <name>postalAddressTypeFromContactType</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{
    <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{
      <case>case <expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>StructuredPostal</name><operator>.</operator><name>TYPE_HOME</name></name></expr>:</case>
        <return>return <expr><name><name>PostalAddress</name><operator>.</operator><name>Type</name><operator>.</operator><name>HOME</name></name></expr>;</return>
      <case>case <expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>StructuredPostal</name><operator>.</operator><name>TYPE_WORK</name></name></expr>:</case>
        <return>return <expr><name><name>PostalAddress</name><operator>.</operator><name>Type</name><operator>.</operator><name>WORK</name></name></expr>;</return>
    }</block></switch>
    <return>return <expr><name><name>PostalAddress</name><operator>.</operator><name>Type</name><operator>.</operator><name>CUSTOM</name></name></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name><name>PostalAddress</name><operator>.</operator><name>Type</name></name></type> <name>postalAddressTypeFromVcardType</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>String</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{
    <if>if      <condition>(<expr><literal type="string">"home"</literal><operator>.</operator><call><name>equalsIgnoreCase</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><name><name>PostalAddress</name><operator>.</operator><name>Type</name><operator>.</operator><name>HOME</name></name></expr>;</return></block></then>
    <elseif>else <if>if <condition>(<expr><literal type="string">"work"</literal><operator>.</operator><call><name>equalsIgnoreCase</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><name><name>PostalAddress</name><operator>.</operator><name>Type</name><operator>.</operator><name>WORK</name></name></expr>;</return></block></then></if></elseif>
    <else>else                                    <block type="pseudo"><return>return <expr><name><name>PostalAddress</name><operator>.</operator><name>Type</name><operator>.</operator><name>CUSTOM</name></name></expr>;</return></block></else></if>
  }</block></function>

  <function><specifier>private</specifier> <type><name>String</name></type> <name>getCleanedVcardType</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>String</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="string">""</literal></expr>;</return></block></then></if>

    <if>if <condition>(<expr><call><name><name>type</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">"x-"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>type</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
      <return>return <expr><call><name><name>type</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <return>return <expr><name>type</name></expr>;</return>
  }</block></function>

  <interface>interface <name><name>ValueCallback</name><parameter_list>&lt;<parameter><name>T</name></parameter>&gt;</parameter_list></name> <block>{
    <function_decl><type><name>void</name></type> <name>onComplete</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>T</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>
  }</block></interface>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>AvatarInfo</name> <block>{

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Uri</name></type>     <name>uri</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>boolean</name></type> <name>isProfile</name></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>AvatarInfo</name><parameter_list>(<parameter><decl><type><name>Uri</name></type> <name>uri</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isProfile</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>uri</name></name> <operator>=</operator> <name>uri</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>isProfile</name></name> <operator>=</operator> <name>isProfile</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <type><name>Uri</name></type> <name>getUri</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>uri</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isProfile</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>isProfile</name></expr>;</return>
    }</block></function>
  }</block></class>
}</block></class>
</unit>
