<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\contactshare\ContactUtil.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>contactshare</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>ContentValues</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>provider</name><operator>.</operator><name>ContactsContract</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>MainThread</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>WorkerThread</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>app</name><operator>.</operator><name>AlertDialog</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextUtils</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>annimon</name><operator>.</operator><name>stream</name><operator>.</operator><name>Stream</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>i18n</name><operator>.</operator><name>phonenumbers</name><operator>.</operator><name>NumberParseException</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>i18n</name><operator>.</operator><name>phonenumbers</name><operator>.</operator><name>PhoneNumberUtil</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>i18n</name><operator>.</operator><name>phonenumbers</name><operator>.</operator><name>Phonenumber</name><operator>.</operator><name>PhoneNumber</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>components</name><operator>.</operator><name>emoji</name><operator>.</operator><name>EmojiStrings</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>contactshare</name><operator>.</operator><name>Contact</name><operator>.</operator><name>Email</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>contactshare</name><operator>.</operator><name>Contact</name><operator>.</operator><name>Phone</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>contactshare</name><operator>.</operator><name>Contact</name><operator>.</operator><name>PostalAddress</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>Address</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>logging</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mms</name><operator>.</operator><name>PartAuthority</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>recipients</name><operator>.</operator><name>Recipient</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>SpanUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>Util</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Locale</name></name>;</import>

<class><specifier>public</specifier> <specifier>final</specifier> class <name>ContactUtil</name> <block>{

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>ContactUtil</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>long</name></type> <name>getContactIdFromUri</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Uri</name></type> <name>uri</name></decl></parameter>)</parameter_list> <block>{
    <try>try <block>{
      <return>return <expr><call><name><name>Long</name><operator>.</operator><name>parseLong</name></name><argument_list>(<argument><expr><call><name><name>uri</name><operator>.</operator><name>getLastPathSegment</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NumberFormatException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    }</block></catch></try>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>CharSequence</name></type> <name>getStringSummary</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Contact</name></type> <name>contact</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>String</name></type>  <name>contactName</name> <init>= <expr><call><name><name>ContactUtil</name><operator>.</operator><name>getDisplayName</name></name><argument_list>(<argument><expr><name>contact</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>contactName</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>MessageNotifier_contact_message</name></name></expr></argument>, <argument><expr><name><name>EmojiStrings</name><operator>.</operator><name>BUST_IN_SILHOUETTE</name></name></expr></argument>, <argument><expr><name>contactName</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <return>return <expr><call><name><name>SpanUtil</name><operator>.</operator><name>italic</name></name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>MessageNotifier_unknown_contact_message</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>String</name></type> <name>getDisplayName</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Contact</name></type> <name>contact</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>contact</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <return>return <expr><literal type="string">""</literal></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><call><name><name>contact</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDisplayName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><call><name><name>contact</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDisplayName</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><call><name><name>contact</name><operator>.</operator><name>getOrganization</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><call><name><name>contact</name><operator>.</operator><name>getOrganization</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></then></if>

    <return>return <expr><literal type="string">""</literal></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>String</name></type> <name>getDisplayNumber</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Contact</name></type> <name>contact</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Locale</name></type> <name>locale</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>Phone</name></type> <name>displayNumber</name> <init>= <expr><call><name>getPrimaryNumber</name><argument_list>(<argument><expr><name>contact</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>displayNumber</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <return>return <expr><call><name><name>ContactUtil</name><operator>.</operator><name>getPrettyPhoneNumber</name></name><argument_list>(<argument><expr><name>displayNumber</name></expr></argument>, <argument><expr><name>locale</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then> <elseif>else <if>if <condition>(<expr><call><name><name>contact</name><operator>.</operator><name>getEmails</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
      <return>return <expr><call><name><name>contact</name><operator>.</operator><name>getEmails</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getEmail</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></then></if></elseif> <else>else <block>{
      <return>return <expr><literal type="string">""</literal></expr>;</return>
    }</block></else></if>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>Phone</name></type> <name>getPrimaryNumber</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Contact</name></type> <name>contact</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><call><name><name>contact</name><operator>.</operator><name>getPhoneNumbers</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
      <return>return <expr><literal type="null">null</literal></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Phone</name></argument>&gt;</argument_list></name></type> <name>mobileNumbers</name> <init>= <expr><call><name><name>Stream</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><call><name><name>contact</name><operator>.</operator><name>getPhoneNumbers</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>number</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>number</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Phone</name><operator>.</operator><name>Type</name><operator>.</operator><name>MOBILE</name></name></expr></block></lambda></expr></argument>)</argument_list></call><operator>.</operator><call><name>toList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name><name>mobileNumbers</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
      <return>return <expr><call><name><name>mobileNumbers</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <return>return <expr><call><name><name>contact</name><operator>.</operator><name>getPhoneNumbers</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>String</name></type> <name>getPrettyPhoneNumber</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Phone</name></type> <name>phoneNumber</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Locale</name></type> <name>fallbackLocale</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getPrettyPhoneNumber</name><argument_list>(<argument><expr><call><name><name>phoneNumber</name><operator>.</operator><name>getNumber</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>fallbackLocale</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>String</name></type> <name>getPrettyPhoneNumber</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>phoneNumber</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Locale</name></type> <name>fallbackLocale</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>PhoneNumberUtil</name></type> <name>util</name> <init>= <expr><call><name><name>PhoneNumberUtil</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <try>try <block>{
      <decl_stmt><decl><type><name>PhoneNumber</name></type> <name>parsed</name> <init>= <expr><call><name><name>util</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>phoneNumber</name></expr></argument>, <argument><expr><call><name><name>fallbackLocale</name><operator>.</operator><name>getISO3Country</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr><call><name><name>util</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>parsed</name></expr></argument>, <argument><expr><name><name>PhoneNumberUtil</name><operator>.</operator><name>PhoneNumberFormat</name><operator>.</operator><name>INTERNATIONAL</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NumberParseException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <return>return <expr><name>phoneNumber</name></expr>;</return>
    }</block></catch></try>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>String</name></type> <name>getNormalizedPhoneNumber</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>number</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>Address</name></type> <name>address</name> <init>= <expr><call><name><name>Address</name><operator>.</operator><name>fromExternal</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>number</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name><name>address</name><operator>.</operator><name>serialize</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>MainThread</name></annotation>
  <specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>selectRecipientThroughDialog</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Recipient</name></argument>&gt;</argument_list></name></type> <name>choices</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Locale</name></type> <name>locale</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>RecipientSelectedCallback</name></type> <name>callback</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><call><name><name>choices</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name><name>CharSequence</name><index>[]</index></name></type> <name>values</name> <init>= <expr><operator>new</operator> <name><name>CharSequence</name><index>[<expr><call><name><name>choices</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>

      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>values</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>getPrettyPhoneNumber</name><argument_list>(<argument><expr><call><name><name>choices</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getAddress</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toPhoneString</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>locale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></for>

      <expr_stmt><expr><operator>new</operator> <call><name><name>AlertDialog</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call>
                     <operator>.</operator><call><name>setItems</name><argument_list>(<argument><expr><name>values</name></expr></argument>, <argument><expr><operator>(</operator><lambda><parameter_list>(<parameter><decl><name>dialog</name></decl></parameter>, <parameter><decl><name>which</name></decl></parameter>)</parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>callback</name><operator>.</operator><name>onSelected</name></name><argument_list>(<argument><expr><call><name><name>choices</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>which</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block></lambda><operator>)</operator></expr></argument>)</argument_list></call>
                     <operator>.</operator><call><name>create</name><argument_list>()</argument_list></call>
                     <operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><call><name><name>callback</name><operator>.</operator><name>onSelected</name></name><argument_list>(<argument><expr><call><name><name>choices</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Recipient</name></argument>&gt;</argument_list></name></type> <name>getRecipients</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Contact</name></type> <name>contact</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>Stream</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><call><name><name>contact</name><operator>.</operator><name>getPhoneNumbers</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>map</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>phone</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>Recipient</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>Address</name><operator>.</operator><name>fromExternal</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>phone</name><operator>.</operator><name>getNumber</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call><operator>.</operator><call><name>toList</name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>WorkerThread</name></annotation>
  <specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>Intent</name></type> <name>buildAddToContactsIntent</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Contact</name></type> <name>contact</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>Intent</name></type> <name>intent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>ACTION_INSERT_OR_EDIT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>setType</name></name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>Contacts</name><operator>.</operator><name>CONTENT_ITEM_TYPE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><call><name><name>contact</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDisplayName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>Intents</name><operator>.</operator><name>Insert</name><operator>.</operator><name>NAME</name></name></expr></argument>, <argument><expr><call><name><name>contact</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDisplayName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><call><name><name>contact</name><operator>.</operator><name>getOrganization</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>Intents</name><operator>.</operator><name>Insert</name><operator>.</operator><name>COMPANY</name></name></expr></argument>, <argument><expr><call><name><name>contact</name><operator>.</operator><name>getOrganization</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><call><name><name>contact</name><operator>.</operator><name>getPhoneNumbers</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>Intents</name><operator>.</operator><name>Insert</name><operator>.</operator><name>PHONE</name></name></expr></argument>, <argument><expr><call><name><name>contact</name><operator>.</operator><name>getPhoneNumbers</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getNumber</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>Intents</name><operator>.</operator><name>Insert</name><operator>.</operator><name>PHONE_TYPE</name></name></expr></argument>, <argument><expr><call><name>getSystemType</name><argument_list>(<argument><expr><call><name><name>contact</name><operator>.</operator><name>getPhoneNumbers</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><call><name><name>contact</name><operator>.</operator><name>getPhoneNumbers</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>Intents</name><operator>.</operator><name>Insert</name><operator>.</operator><name>SECONDARY_PHONE</name></name></expr></argument>, <argument><expr><call><name><name>contact</name><operator>.</operator><name>getPhoneNumbers</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getNumber</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>Intents</name><operator>.</operator><name>Insert</name><operator>.</operator><name>SECONDARY_PHONE_TYPE</name></name></expr></argument>, <argument><expr><call><name>getSystemType</name><argument_list>(<argument><expr><call><name><name>contact</name><operator>.</operator><name>getPhoneNumbers</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><call><name><name>contact</name><operator>.</operator><name>getPhoneNumbers</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>Intents</name><operator>.</operator><name>Insert</name><operator>.</operator><name>TERTIARY_PHONE</name></name></expr></argument>, <argument><expr><call><name><name>contact</name><operator>.</operator><name>getPhoneNumbers</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getNumber</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>Intents</name><operator>.</operator><name>Insert</name><operator>.</operator><name>TERTIARY_PHONE_TYPE</name></name></expr></argument>, <argument><expr><call><name>getSystemType</name><argument_list>(<argument><expr><call><name><name>contact</name><operator>.</operator><name>getPhoneNumbers</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><call><name><name>contact</name><operator>.</operator><name>getEmails</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>Intents</name><operator>.</operator><name>Insert</name><operator>.</operator><name>EMAIL</name></name></expr></argument>, <argument><expr><call><name><name>contact</name><operator>.</operator><name>getEmails</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getEmail</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>Intents</name><operator>.</operator><name>Insert</name><operator>.</operator><name>EMAIL_TYPE</name></name></expr></argument>, <argument><expr><call><name>getSystemType</name><argument_list>(<argument><expr><call><name><name>contact</name><operator>.</operator><name>getEmails</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><call><name><name>contact</name><operator>.</operator><name>getEmails</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>Intents</name><operator>.</operator><name>Insert</name><operator>.</operator><name>SECONDARY_EMAIL</name></name></expr></argument>, <argument><expr><call><name><name>contact</name><operator>.</operator><name>getEmails</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getEmail</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>Intents</name><operator>.</operator><name>Insert</name><operator>.</operator><name>SECONDARY_EMAIL_TYPE</name></name></expr></argument>, <argument><expr><call><name>getSystemType</name><argument_list>(<argument><expr><call><name><name>contact</name><operator>.</operator><name>getEmails</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><call><name><name>contact</name><operator>.</operator><name>getEmails</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>Intents</name><operator>.</operator><name>Insert</name><operator>.</operator><name>TERTIARY_EMAIL</name></name></expr></argument>, <argument><expr><call><name><name>contact</name><operator>.</operator><name>getEmails</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getEmail</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>Intents</name><operator>.</operator><name>Insert</name><operator>.</operator><name>TERTIARY_EMAIL_TYPE</name></name></expr></argument>, <argument><expr><call><name>getSystemType</name><argument_list>(<argument><expr><call><name><name>contact</name><operator>.</operator><name>getEmails</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><call><name><name>contact</name><operator>.</operator><name>getPostalAddresses</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>Intents</name><operator>.</operator><name>Insert</name><operator>.</operator><name>POSTAL</name></name></expr></argument>, <argument><expr><call><name><name>contact</name><operator>.</operator><name>getPostalAddresses</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>Intents</name><operator>.</operator><name>Insert</name><operator>.</operator><name>POSTAL_TYPE</name></name></expr></argument>, <argument><expr><call><name>getSystemType</name><argument_list>(<argument><expr><call><name><name>contact</name><operator>.</operator><name>getPostalAddresses</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><call><name><name>contact</name><operator>.</operator><name>getAvatarAttachment</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>contact</name><operator>.</operator><name>getAvatarAttachment</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDataUri</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <try>try <block>{
        <decl_stmt><decl><type><name>ContentValues</name></type> <name>values</name> <init>= <expr><operator>new</operator> <call><name>ContentValues</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>Data</name><operator>.</operator><name>MIMETYPE</name></name></expr></argument>, <argument><expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>Photo</name><operator>.</operator><name>CONTENT_ITEM_TYPE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>Photo</name><operator>.</operator><name>PHOTO</name></name></expr></argument>, <argument><expr><call><name><name>Util</name><operator>.</operator><name>readFully</name></name><argument_list>(<argument><expr><call><name><name>PartAuthority</name><operator>.</operator><name>getAttachmentStream</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>contact</name><operator>.</operator><name>getAvatarAttachment</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDataUri</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ContentValues</name></argument>&gt;</argument_list></name></type> <name>valuesArray</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>valuesArray</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putParcelableArrayListExtra</name></name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>Intents</name><operator>.</operator><name>Insert</name><operator>.</operator><name>DATA</name></name></expr></argument>, <argument><expr><name>valuesArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Failed to read avatar into a byte array."</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></catch></try>
    }</block></then></if>
    <return>return <expr><name>intent</name></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>getSystemType</name><parameter_list>(<parameter><decl><type><name><name>Phone</name><operator>.</operator><name>Type</name></name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{
    <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{
      <case>case <expr><name>HOME</name></expr>:</case>   <return>return <expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>Phone</name><operator>.</operator><name>TYPE_HOME</name></name></expr>;</return>
      <case>case <expr><name>MOBILE</name></expr>:</case> <return>return <expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>Phone</name><operator>.</operator><name>TYPE_MOBILE</name></name></expr>;</return>
      <case>case <expr><name>WORK</name></expr>:</case>   <return>return <expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>Phone</name><operator>.</operator><name>TYPE_WORK</name></name></expr>;</return>
      <default>default:</default>     <return>return <expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>Phone</name><operator>.</operator><name>TYPE_CUSTOM</name></name></expr>;</return>
    }</block></switch>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>getSystemType</name><parameter_list>(<parameter><decl><type><name><name>Email</name><operator>.</operator><name>Type</name></name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{
    <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{
      <case>case <expr><name>HOME</name></expr>:</case>   <return>return <expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>Email</name><operator>.</operator><name>TYPE_HOME</name></name></expr>;</return>
      <case>case <expr><name>MOBILE</name></expr>:</case> <return>return <expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>Email</name><operator>.</operator><name>TYPE_MOBILE</name></name></expr>;</return>
      <case>case <expr><name>WORK</name></expr>:</case>   <return>return <expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>Email</name><operator>.</operator><name>TYPE_WORK</name></name></expr>;</return>
      <default>default:</default>     <return>return <expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>Email</name><operator>.</operator><name>TYPE_CUSTOM</name></name></expr>;</return>
    }</block></switch>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>getSystemType</name><parameter_list>(<parameter><decl><type><name><name>PostalAddress</name><operator>.</operator><name>Type</name></name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{
    <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{
      <case>case <expr><name>HOME</name></expr>:</case> <return>return <expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>StructuredPostal</name><operator>.</operator><name>TYPE_HOME</name></name></expr>;</return>
      <case>case <expr><name>WORK</name></expr>:</case> <return>return <expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>StructuredPostal</name><operator>.</operator><name>TYPE_WORK</name></name></expr>;</return>
      <default>default:</default>   <return>return <expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>StructuredPostal</name><operator>.</operator><name>TYPE_CUSTOM</name></name></expr>;</return>
    }</block></switch>
  }</block></function>

  <interface><specifier>public</specifier> interface <name>RecipientSelectedCallback</name> <block>{
    <function_decl><type><name>void</name></type> <name>onSelected</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Recipient</name></type> <name>recipient</name></decl></parameter>)</parameter_list>;</function_decl>
  }</block></interface>
}</block></class>
</unit>
