<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\crypto\AsymmetricMasterCipher.java"><comment type="block" format="javadoc">/** 
 * Copyright (C) 2011 Whisper Systems
 * Copyright (C) 2013 Open Whisper Systems
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>crypto</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>Base64</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>Util</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>InvalidKeyException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>InvalidMessageException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>ecc</name><operator>.</operator><name>Curve</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>ecc</name><operator>.</operator><name>ECKeyPair</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>ecc</name><operator>.</operator><name>ECPrivateKey</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>ecc</name><operator>.</operator><name>ECPublicKey</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>Conversions</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>NoSuchAlgorithmException</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>Mac</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>spec</name><operator>.</operator><name>SecretKeySpec</name></name>;</import>

<comment type="block" format="javadoc">/**
 * This class is used to asymmetricly encrypt local data.  This is used in the case
 * where TextSecure receives an SMS, but the user's local encryption passphrase is
 * not cached (either because of a timeout, or because it hasn't yet been entered).
 * 
 * In this case, we have access to the public key of a local keypair.  We encrypt
 * the message with this, and put it into the DB.  When the user enters their passphrase,
 * we can get access to the private key of the local keypair, decrypt the message, and
 * replace it into the DB with symmetric encryption.
 * 
 * The encryption protocol is as follows:
 * 
 * 1) Generate an ephemeral keypair.
 * 2) Do ECDH with the public key of the local durable keypair.
 * 3) Do KMF with the ECDH result to obtain a master secret.
 * 4) Encrypt the message with that master secret.
 * 
 * @author Moxie Marlinspike
 *
 */</comment>
<class><specifier>public</specifier> class <name>AsymmetricMasterCipher</name> <block>{

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>AsymmetricMasterSecret</name></type> <name>asymmetricMasterSecret</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>AsymmetricMasterCipher</name><parameter_list>(<parameter><decl><type><name>AsymmetricMasterSecret</name></type> <name>asymmetricMasterSecret</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>asymmetricMasterSecret</name></name> <operator>=</operator> <name>asymmetricMasterSecret</name></expr>;</expr_stmt>
  }</block></constructor>

  <function><specifier>public</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>encryptBytes</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>body</name></decl></parameter>)</parameter_list> <block>{
    <try>try <block>{
      <decl_stmt><decl><type><name>ECPublicKey</name></type>  <name>theirPublic</name>        <init>= <expr><call><name><name>asymmetricMasterSecret</name><operator>.</operator><name>getDjbPublicKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>ECKeyPair</name></type>    <name>ourKeyPair</name>         <init>= <expr><call><name><name>Curve</name><operator>.</operator><name>generateKeyPair</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type>       <name>secret</name>             <init>= <expr><call><name><name>Curve</name><operator>.</operator><name>calculateAgreement</name></name><argument_list>(<argument><expr><name>theirPublic</name></expr></argument>, <argument><expr><call><name><name>ourKeyPair</name><operator>.</operator><name>getPrivateKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>MasterCipher</name></type> <name>masterCipher</name>       <init>= <expr><call><name>getMasterCipherForSecret</name><argument_list>(<argument><expr><name>secret</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type>       <name>encryptedBodyBytes</name> <init>= <expr><call><name><name>masterCipher</name><operator>.</operator><name>encryptBytes</name></name><argument_list>(<argument><expr><name>body</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>PublicKey</name></type>    <name>ourPublicKey</name>       <init>= <expr><operator>new</operator> <call><name>PublicKey</name><argument_list>(<argument><expr><literal type="number">31337</literal></expr></argument>, <argument><expr><call><name><name>ourKeyPair</name><operator>.</operator><name>getPublicKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type>       <name>publicKeyBytes</name>     <init>= <expr><call><name><name>ourPublicKey</name><operator>.</operator><name>serialize</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <return>return <expr><call><name><name>Util</name><operator>.</operator><name>combine</name></name><argument_list>(<argument><expr><name>publicKeyBytes</name></expr></argument>, <argument><expr><name>encryptedBodyBytes</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InvalidKeyException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></catch></try>
  }</block></function>

  <function><specifier>public</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>decryptBytes</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>combined</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>InvalidMessageException</name></expr></argument></throws> <block>{
    <try>try <block>{
      <decl_stmt><decl><type><name><name>byte</name><index>[]</index><index>[]</index></name></type>  <name>parts</name>          <init>= <expr><call><name><name>Util</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><name>combined</name></expr></argument>, <argument><expr><name><name>PublicKey</name><operator>.</operator><name>KEY_SIZE</name></name></expr></argument>, <argument><expr><name><name>combined</name><operator>.</operator><name>length</name></name> <operator>-</operator> <name><name>PublicKey</name><operator>.</operator><name>KEY_SIZE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>PublicKey</name></type> <name>theirPublicKey</name> <init>= <expr><operator>new</operator> <call><name>PublicKey</name><argument_list>(<argument><expr><name><name>parts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>ECPrivateKey</name></type> <name>ourPrivateKey</name> <init>= <expr><call><name><name>asymmetricMasterSecret</name><operator>.</operator><name>getPrivateKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type>       <name>secret</name>        <init>= <expr><call><name><name>Curve</name><operator>.</operator><name>calculateAgreement</name></name><argument_list>(<argument><expr><call><name><name>theirPublicKey</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ourPrivateKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>MasterCipher</name></type> <name>masterCipher</name>  <init>= <expr><call><name>getMasterCipherForSecret</name><argument_list>(<argument><expr><name>secret</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <return>return <expr><call><name><name>masterCipher</name><operator>.</operator><name>decryptBytes</name></name><argument_list>(<argument><expr><name><name>parts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InvalidKeyException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>InvalidMessageException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></catch></try>
  }</block></function>

  <function><specifier>public</specifier> <type><name>String</name></type> <name>decryptBody</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>body</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>InvalidMessageException</name></expr></argument></throws> <block>{
    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>combined</name> <init>= <expr><call><name><name>Base64</name><operator>.</operator><name>decode</name></name><argument_list>(<argument><expr><name>body</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><operator>new</operator> <call><name>String</name><argument_list>(<argument><expr><call><name>decryptBytes</name><argument_list>(<argument><expr><name>combined</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>String</name></type> <name>encryptBody</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>body</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>Base64</name><operator>.</operator><name>encodeBytes</name></name><argument_list>(<argument><expr><call><name>encryptBytes</name><argument_list>(<argument><expr><call><name><name>body</name><operator>.</operator><name>getBytes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>MasterCipher</name></type> <name>getMasterCipherForSecret</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>secretBytes</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>SecretKeySpec</name></type> <name>cipherKey</name>   <init>= <expr><call><name>deriveCipherKey</name><argument_list>(<argument><expr><name>secretBytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SecretKeySpec</name></type> <name>macKey</name>      <init>= <expr><call><name>deriveMacKey</name><argument_list>(<argument><expr><name>secretBytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MasterSecret</name></type> <name>masterSecret</name> <init>= <expr><operator>new</operator> <call><name>MasterSecret</name><argument_list>(<argument><expr><name>cipherKey</name></expr></argument>, <argument><expr><name>macKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <return>return <expr><operator>new</operator> <call><name>MasterCipher</name><argument_list>(<argument><expr><name>masterSecret</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>SecretKeySpec</name></type> <name>deriveMacKey</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>secretBytes</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>digestedBytes</name> <init>= <expr><call><name>getDigestedBytes</name><argument_list>(<argument><expr><name>secretBytes</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>macKeyBytes</name>   <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name>digestedBytes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>macKeyBytes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>macKeyBytes</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>new</operator> <call><name>SecretKeySpec</name><argument_list>(<argument><expr><name>macKeyBytes</name></expr></argument>, <argument><expr><literal type="string">"HmacSHA1"</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>SecretKeySpec</name></type> <name>deriveCipherKey</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>secretBytes</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>digestedBytes</name>  <init>= <expr><call><name>getDigestedBytes</name><argument_list>(<argument><expr><name>secretBytes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>cipherKeyBytes</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name>digestedBytes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cipherKeyBytes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>cipherKeyBytes</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>new</operator> <call><name>SecretKeySpec</name><argument_list>(<argument><expr><name>cipherKeyBytes</name></expr></argument>, <argument><expr><literal type="string">"AES"</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>getDigestedBytes</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>secretBytes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iteration</name></decl></parameter>)</parameter_list> <block>{
    <try>try <block>{
      <decl_stmt><decl><type><name>Mac</name></type> <name>mac</name> <init>= <expr><call><name><name>Mac</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><literal type="string">"HmacSHA256"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>mac</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SecretKeySpec</name><argument_list>(<argument><expr><name>secretBytes</name></expr></argument>, <argument><expr><literal type="string">"HmacSHA256"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><call><name><name>mac</name><operator>.</operator><name>doFinal</name></name><argument_list>(<argument><expr><call><name><name>Conversions</name><operator>.</operator><name>intToByteArray</name></name><argument_list>(<argument><expr><name>iteration</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NoSuchAlgorithmException</name></type> | <type><name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>InvalidKeyException</name></name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></catch></try>
  }</block></function>
}</block></class>
</unit>
