<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\crypto\AttachmentSecretProvider.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>crypto</name></name>;</package>


<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>TextSecurePreferences</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>SecureRandom</name></name>;</import>

<comment type="block" format="javadoc">/**
 * A provider that is responsible for creating or retrieving the AttachmentSecret model.
 *
 * On modern Android, the serialized secrets are themselves encrypted using a key that lives
 * in the system KeyStore, for whatever that is worth.
 */</comment>
<class><specifier>public</specifier> class <name>AttachmentSecretProvider</name> <block>{

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><name>AttachmentSecretProvider</name></type> <name>provider</name></decl>;</decl_stmt>

  <function><specifier>public</specifier> <specifier>static</specifier> <specifier>synchronized</specifier> <type><name>AttachmentSecretProvider</name></type> <name>getInstance</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>provider</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>provider</name> <operator>=</operator> <operator>new</operator> <call><name>AttachmentSecretProvider</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getApplicationContext</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    <return>return <expr><name>provider</name></expr>;</return>
  }</block></function>

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><name>AttachmentSecret</name></type> <name>attachmentSecret</name></decl>;</decl_stmt>

  <constructor><specifier>private</specifier> <name>AttachmentSecretProvider</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>context</name></name> <operator>=</operator> <call><name><name>context</name><operator>.</operator><name>getApplicationContext</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <function><specifier>public</specifier> <specifier>synchronized</specifier> <type><name>AttachmentSecret</name></type> <name>getOrCreateAttachmentSecret</name><parameter_list>()</parameter_list> <block>{
    <if>if <condition>(<expr><name>attachmentSecret</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>attachmentSecret</name></expr>;</return></block></then></if>

    <decl_stmt><decl><type><name>String</name></type> <name>unencryptedSecret</name> <init>= <expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>getAttachmentUnencryptedSecret</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>encryptedSecret</name>   <init>= <expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>getAttachmentEncryptedSecret</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if      <condition>(<expr><name>unencryptedSecret</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>attachmentSecret</name> <operator>=</operator> <call><name>getUnencryptedAttachmentSecret</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>unencryptedSecret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
    <elseif>else <if>if <condition>(<expr><name>encryptedSecret</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>   <block type="pseudo"><expr_stmt><expr><name>attachmentSecret</name> <operator>=</operator> <call><name>getEncryptedAttachmentSecret</name><argument_list>(<argument><expr><name>encryptedSecret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
    <else>else                                <block type="pseudo"><expr_stmt><expr><name>attachmentSecret</name> <operator>=</operator> <call><name>createAndStoreAttachmentSecret</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>

    <return>return <expr><name>attachmentSecret</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>synchronized</specifier> <type><name>AttachmentSecret</name></type> <name>setClassicKey</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>byte</name><index>[]</index></name></type> <name>classicCipherKey</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>byte</name><index>[]</index></name></type> <name>classicMacKey</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>AttachmentSecret</name></type> <name>currentSecret</name>    <init>= <expr><call><name>getOrCreateAttachmentSecret</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>currentSecret</name><operator>.</operator><name>setClassicCipherKey</name></name><argument_list>(<argument><expr><name>classicCipherKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>currentSecret</name><operator>.</operator><name>setClassicMacKey</name></name><argument_list>(<argument><expr><name>classicMacKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>storeAttachmentSecret</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attachmentSecret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>attachmentSecret</name></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>AttachmentSecret</name></type> <name>getUnencryptedAttachmentSecret</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>unencryptedSecret</name></decl></parameter>)</parameter_list>
  <block>{
    <decl_stmt><decl><type><name>AttachmentSecret</name></type> <name>attachmentSecret</name> <init>= <expr><call><name><name>AttachmentSecret</name><operator>.</operator><name>fromString</name></name><argument_list>(<argument><expr><name>unencryptedSecret</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&lt;</operator> <name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>M</name></name></expr>)</condition><then> <block>{
      <return>return <expr><name>attachmentSecret</name></expr>;</return>
    }</block></then> <else>else <block>{
      <decl_stmt><decl><type><name><name>KeyStoreHelper</name><operator>.</operator><name>SealedData</name></name></type> <name>encryptedSecret</name> <init>= <expr><call><name><name>KeyStoreHelper</name><operator>.</operator><name>seal</name></name><argument_list>(<argument><expr><call><name><name>attachmentSecret</name><operator>.</operator><name>serialize</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBytes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>setAttachmentEncryptedSecret</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>encryptedSecret</name><operator>.</operator><name>serialize</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>setAttachmentUnencryptedSecret</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <return>return <expr><name>attachmentSecret</name></expr>;</return>
    }</block></else></if>
  }</block></function>

  <function><specifier>private</specifier> <type><name>AttachmentSecret</name></type> <name>getEncryptedAttachmentSecret</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>serializedEncryptedSecret</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&lt;</operator> <name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>M</name></name></expr>)</condition><then> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><literal type="string">"OS downgrade not supported. KeyStore sealed data exists on platform &lt; M!"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></then> <else>else <block>{
      <decl_stmt><decl><type><name><name>KeyStoreHelper</name><operator>.</operator><name>SealedData</name></name></type> <name>encryptedSecret</name> <init>= <expr><call><name><name>KeyStoreHelper</name><operator>.</operator><name>SealedData</name><operator>.</operator><name>fromString</name></name><argument_list>(<argument><expr><name>serializedEncryptedSecret</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr><call><name><name>AttachmentSecret</name><operator>.</operator><name>fromString</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>String</name><argument_list>(<argument><expr><call><name><name>KeyStoreHelper</name><operator>.</operator><name>unseal</name></name><argument_list>(<argument><expr><name>encryptedSecret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></else></if>
  }</block></function>

  <function><specifier>private</specifier> <type><name>AttachmentSecret</name></type> <name>createAndStoreAttachmentSecret</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>SecureRandom</name></type> <name>random</name> <init>= <expr><operator>new</operator> <call><name>SecureRandom</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type>       <name>secret</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>random</name><operator>.</operator><name>nextBytes</name></name><argument_list>(<argument><expr><name>secret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>AttachmentSecret</name></type> <name>attachmentSecret</name> <init>= <expr><operator>new</operator> <call><name>AttachmentSecret</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>secret</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>storeAttachmentSecret</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attachmentSecret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>attachmentSecret</name></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>storeAttachmentSecret</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>AttachmentSecret</name></type> <name>attachmentSecret</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;=</operator> <name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>M</name></name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name><name>KeyStoreHelper</name><operator>.</operator><name>SealedData</name></name></type> <name>encryptedSecret</name> <init>= <expr><call><name><name>KeyStoreHelper</name><operator>.</operator><name>seal</name></name><argument_list>(<argument><expr><call><name><name>attachmentSecret</name><operator>.</operator><name>serialize</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBytes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>setAttachmentEncryptedSecret</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>encryptedSecret</name><operator>.</operator><name>serialize</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>setAttachmentUnencryptedSecret</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>attachmentSecret</name><operator>.</operator><name>serialize</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
  }</block></function>

}</block></class>
</unit>
