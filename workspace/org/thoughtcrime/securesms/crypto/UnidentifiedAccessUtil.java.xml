<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\crypto\UnidentifiedAccessUtil.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>crypto</name></name>;</package>


<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>WorkerThread</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>signal</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>metadata</name><operator>.</operator><name>certificate</name><operator>.</operator><name>CertificateValidator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>signal</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>metadata</name><operator>.</operator><name>certificate</name><operator>.</operator><name>InvalidCertificateException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>BuildConfig</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>logging</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>recipients</name><operator>.</operator><name>Recipient</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>Base64</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>TextSecurePreferences</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>Util</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>InvalidKeyException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>ecc</name><operator>.</operator><name>Curve</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>ecc</name><operator>.</operator><name>ECPublicKey</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>util</name><operator>.</operator><name>guava</name><operator>.</operator><name>Optional</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>signalservice</name><operator>.</operator><name>api</name><operator>.</operator><name>crypto</name><operator>.</operator><name>UnidentifiedAccess</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>signalservice</name><operator>.</operator><name>api</name><operator>.</operator><name>crypto</name><operator>.</operator><name>UnidentifiedAccessPair</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>

<class><specifier>public</specifier> class <name>UnidentifiedAccessUtil</name> <block>{

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>UnidentifiedAccessUtil</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>CertificateValidator</name></type> <name>getCertificateValidator</name><parameter_list>()</parameter_list> <block>{
    <try>try <block>{
      <decl_stmt><decl><type><name>ECPublicKey</name></type> <name>unidentifiedSenderTrustRoot</name> <init>= <expr><call><name><name>Curve</name><operator>.</operator><name>decodePoint</name></name><argument_list>(<argument><expr><call><name><name>Base64</name><operator>.</operator><name>decode</name></name><argument_list>(<argument><expr><name><name>BuildConfig</name><operator>.</operator><name>UNIDENTIFIED_SENDER_TRUST_ROOT</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr><operator>new</operator> <call><name>CertificateValidator</name><argument_list>(<argument><expr><name>unidentifiedSenderTrustRoot</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InvalidKeyException</name></type> | <type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></catch></try>
  }</block></function>

  <function><annotation>@<name>WorkerThread</name></annotation>
  <specifier>public</specifier> <specifier>static</specifier> <type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>UnidentifiedAccessPair</name></argument>&gt;</argument_list></name></type> <name>getAccessFor</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>,
                                                              <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Recipient</name></type> <name>recipient</name></decl></parameter>)</parameter_list>
  <block>{
    <if>if <condition>(<expr><operator>!</operator><call><name><name>TextSecurePreferences</name><operator>.</operator><name>isUnidentifiedDeliveryEnabled</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Unidentified delivery is disabled. [other]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><call><name><name>Optional</name><operator>.</operator><name>absent</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></then></if>

    <try>try <block>{
      <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>theirUnidentifiedAccessKey</name>       <init>= <expr><call><name>getTargetUnidentifiedAccessKey</name><argument_list>(<argument><expr><name>recipient</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>ourUnidentifiedAccessKey</name>         <init>= <expr><call><name>getSelfUnidentifiedAccessKey</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>ourUnidentifiedAccessCertificate</name> <init>= <expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>getUnidentifiedAccessCertificate</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>isUniversalUnidentifiedAccess</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>ourUnidentifiedAccessKey</name> <operator>=</operator> <call><name><name>Util</name><operator>.</operator><name>getSecretBytes</name></name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>

      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Their access key present? "</literal> <operator>+</operator> <operator>(</operator><name>theirUnidentifiedAccessKey</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator> <operator>+</operator>
                 <literal type="string">" | Our access key present? "</literal> <operator>+</operator> <operator>(</operator><name>ourUnidentifiedAccessKey</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator> <operator>+</operator>
                 <literal type="string">" | Our certificate present? "</literal> <operator>+</operator> <operator>(</operator><name>ourUnidentifiedAccessCertificate</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><name>theirUnidentifiedAccessKey</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator>
          <name>ourUnidentifiedAccessKey</name> <operator>!=</operator> <literal type="null">null</literal>   <operator>&amp;&amp;</operator>
          <name>ourUnidentifiedAccessCertificate</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
      <block>{
        <return>return <expr><call><name><name>Optional</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>UnidentifiedAccessPair</name><argument_list>(<argument><expr><operator>new</operator> <call><name>UnidentifiedAccess</name><argument_list>(<argument><expr><name>theirUnidentifiedAccessKey</name></expr></argument>,
                                                                             <argument><expr><name>ourUnidentifiedAccessCertificate</name></expr></argument>)</argument_list></call></expr></argument>,
                                                      <argument><expr><operator>new</operator> <call><name>UnidentifiedAccess</name><argument_list>(<argument><expr><name>ourUnidentifiedAccessKey</name></expr></argument>,
                                                                             <argument><expr><name>ourUnidentifiedAccessCertificate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
      }</block></then></if>

      <return>return <expr><call><name><name>Optional</name><operator>.</operator><name>absent</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InvalidCertificateException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><call><name><name>Optional</name><operator>.</operator><name>absent</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></catch></try>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>UnidentifiedAccessPair</name></argument>&gt;</argument_list></name></type> <name>getAccessForSync</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><operator>!</operator><call><name><name>TextSecurePreferences</name><operator>.</operator><name>isUnidentifiedDeliveryEnabled</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Unidentified delivery is disabled. [self]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><call><name><name>Optional</name><operator>.</operator><name>absent</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></then></if>

    <try>try <block>{
      <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>ourUnidentifiedAccessKey</name>         <init>= <expr><call><name>getSelfUnidentifiedAccessKey</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>ourUnidentifiedAccessCertificate</name> <init>= <expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>getUnidentifiedAccessCertificate</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>isUniversalUnidentifiedAccess</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>ourUnidentifiedAccessKey</name> <operator>=</operator> <call><name><name>Util</name><operator>.</operator><name>getSecretBytes</name></name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>

      <if>if <condition>(<expr><name>ourUnidentifiedAccessKey</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>ourUnidentifiedAccessCertificate</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <return>return <expr><call><name><name>Optional</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>UnidentifiedAccessPair</name><argument_list>(<argument><expr><operator>new</operator> <call><name>UnidentifiedAccess</name><argument_list>(<argument><expr><name>ourUnidentifiedAccessKey</name></expr></argument>,
                                                                             <argument><expr><name>ourUnidentifiedAccessCertificate</name></expr></argument>)</argument_list></call></expr></argument>,
                                                      <argument><expr><operator>new</operator> <call><name>UnidentifiedAccess</name><argument_list>(<argument><expr><name>ourUnidentifiedAccessKey</name></expr></argument>,
                                                                             <argument><expr><name>ourUnidentifiedAccessCertificate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
      }</block></then></if>

      <return>return <expr><call><name><name>Optional</name><operator>.</operator><name>absent</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InvalidCertificateException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><call><name><name>Optional</name><operator>.</operator><name>absent</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></catch></try>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>byte</name><index>[]</index></name></type> <name>getSelfUnidentifiedAccessKey</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>UnidentifiedAccess</name><operator>.</operator><name>deriveAccessKeyFrom</name></name><argument_list>(<argument><expr><call><name><name>ProfileKeyUtil</name><operator>.</operator><name>getProfileKey</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <annotation>@<name>Nullable</name></annotation> <type><name><name>byte</name><index>[]</index></name></type> <name>getTargetUnidentifiedAccessKey</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Recipient</name></type> <name>recipient</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>theirProfileKey</name> <init>= <expr><call><name><name>recipient</name><operator>.</operator><name>resolve</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getProfileKey</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <switch>switch <condition>(<expr><call><name><name>recipient</name><operator>.</operator><name>resolve</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getUnidentifiedAccessMode</name><argument_list>()</argument_list></call></expr>)</condition> <block>{
      <case>case <expr><name>UNKNOWN</name></expr>:</case>
        <if>if <condition>(<expr><name>theirProfileKey</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><call><name><name>Util</name><operator>.</operator><name>getSecretBytes</name></name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</return></block></then>
        <else>else                         <block type="pseudo"><return>return <expr><call><name><name>UnidentifiedAccess</name><operator>.</operator><name>deriveAccessKeyFrom</name></name><argument_list>(<argument><expr><name>theirProfileKey</name></expr></argument>)</argument_list></call></expr>;</return></block></else></if>
      <case>case <expr><name>DISABLED</name></expr>:</case>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
      <case>case <expr><name>ENABLED</name></expr>:</case>
        <if>if <condition>(<expr><name>theirProfileKey</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="null">null</literal></expr>;</return></block></then>
        <else>else                         <block type="pseudo"><return>return <expr><call><name><name>UnidentifiedAccess</name><operator>.</operator><name>deriveAccessKeyFrom</name></name><argument_list>(<argument><expr><name>theirProfileKey</name></expr></argument>)</argument_list></call></expr>;</return></block></else></if>
      <case>case <expr><name>UNRESTRICTED</name></expr>:</case>
        <return>return <expr><call><name><name>Util</name><operator>.</operator><name>getSecretBytes</name></name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</return>
      <default>default:</default>
        <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><literal type="string">"Unknown mode: "</literal> <operator>+</operator> <call><name><name>recipient</name><operator>.</operator><name>getUnidentifiedAccessMode</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMode</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></switch>
  }</block></function>
}</block></class>
</unit>
