<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\crypto\IdentityKeyUtil.java"><comment type="block">/*
 * Copyright (C) 2011 Whisper Systems
 * Copyright (C) 2013 Open Whisper Systems
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>crypto</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>SharedPreferences</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>SharedPreferences</name><operator>.</operator><name>Editor</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>Base64</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>IdentityKey</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>IdentityKeyPair</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>InvalidKeyException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>ecc</name><operator>.</operator><name>Curve</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>ecc</name><operator>.</operator><name>ECKeyPair</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>ecc</name><operator>.</operator><name>ECPrivateKey</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Utility class for working with identity keys.
 * 
 * @author Moxie Marlinspike
 */</comment>

<class><specifier>public</specifier> class <name>IdentityKeyUtil</name> <block>{

  <decl_stmt><decl><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unused"</literal></expr></argument>)</argument_list></annotation>
  <specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>IdentityKeyUtil</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>IDENTITY_PUBLIC_KEY_CIPHERTEXT_LEGACY_PREF</name>  <init>= <expr><literal type="string">"pref_identity_public_curve25519"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>IDENTITY_PRIVATE_KEY_CIPHERTEXT_LEGACY_PREF</name> <init>= <expr><literal type="string">"pref_identity_private_curve25519"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>IDENTITY_PUBLIC_KEY_PREF</name>                    <init>= <expr><literal type="string">"pref_identity_public_v3"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>IDENTITY_PRIVATE_KEY_PREF</name>                   <init>= <expr><literal type="string">"pref_identity_private_v3"</literal></expr></init></decl>;</decl_stmt>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>hasIdentityKey</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>SharedPreferences</name></type> <name>preferences</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>getSharedPreferences</name></name><argument_list>(<argument><expr><name><name>MasterSecretUtil</name><operator>.</operator><name>PREFERENCES_NAME</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <return>return
        <expr><call><name><name>preferences</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>IDENTITY_PUBLIC_KEY_PREF</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
        <call><name><name>preferences</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>IDENTITY_PRIVATE_KEY_PREF</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>IdentityKey</name></type> <name>getIdentityKey</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><operator>!</operator><call><name>hasIdentityKey</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><literal type="string">"There isn't one!"</literal></expr></argument>)</argument_list></call></expr>;</throw></block></then></if>

    <try>try <block>{
      <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>publicKeyBytes</name> <init>= <expr><call><name><name>Base64</name><operator>.</operator><name>decode</name></name><argument_list>(<argument><expr><call><name>retrieve</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>IDENTITY_PUBLIC_KEY_PREF</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr><operator>new</operator> <call><name>IdentityKey</name><argument_list>(<argument><expr><name>publicKeyBytes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> | <type><name>InvalidKeyException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></catch></try>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>IdentityKeyPair</name></type> <name>getIdentityKeyPair</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><operator>!</operator><call><name>hasIdentityKey</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><literal type="string">"There isn't one!"</literal></expr></argument>)</argument_list></call></expr>;</throw></block></then></if>

    <try>try <block>{
      <decl_stmt><decl><type><name>IdentityKey</name></type>  <name>publicKey</name>  <init>= <expr><call><name>getIdentityKey</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>ECPrivateKey</name></type> <name>privateKey</name> <init>= <expr><call><name><name>Curve</name><operator>.</operator><name>decodePrivatePoint</name></name><argument_list>(<argument><expr><call><name><name>Base64</name><operator>.</operator><name>decode</name></name><argument_list>(<argument><expr><call><name>retrieve</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>IDENTITY_PRIVATE_KEY_PREF</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <return>return <expr><operator>new</operator> <call><name>IdentityKeyPair</name><argument_list>(<argument><expr><name>publicKey</name></expr></argument>, <argument><expr><name>privateKey</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></catch></try>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>generateIdentityKeys</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>ECKeyPair</name></type>    <name>djbKeyPair</name>     <init>= <expr><call><name><name>Curve</name><operator>.</operator><name>generateKeyPair</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>IdentityKey</name></type>  <name>djbIdentityKey</name> <init>= <expr><operator>new</operator> <call><name>IdentityKey</name><argument_list>(<argument><expr><call><name><name>djbKeyPair</name><operator>.</operator><name>getPublicKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ECPrivateKey</name></type> <name>djbPrivateKey</name>  <init>= <expr><call><name><name>djbKeyPair</name><operator>.</operator><name>getPrivateKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>save</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>IDENTITY_PUBLIC_KEY_PREF</name></expr></argument>, <argument><expr><call><name><name>Base64</name><operator>.</operator><name>encodeBytes</name></name><argument_list>(<argument><expr><call><name><name>djbIdentityKey</name><operator>.</operator><name>serialize</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>save</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>IDENTITY_PRIVATE_KEY_PREF</name></expr></argument>, <argument><expr><call><name><name>Base64</name><operator>.</operator><name>encodeBytes</name></name><argument_list>(<argument><expr><call><name><name>djbPrivateKey</name><operator>.</operator><name>serialize</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>migrateIdentityKeys</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>,
                                         <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>MasterSecret</name></type> <name>masterSecret</name></decl></parameter>)</parameter_list>
  <block>{
    <if>if <condition>(<expr><operator>!</operator><call><name>hasIdentityKey</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <if>if <condition>(<expr><call><name>hasLegacyIdentityKeys</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>IdentityKeyPair</name></type> <name>legacyPair</name> <init>= <expr><call><name>getLegacyIdentityKeyPair</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>masterSecret</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>save</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>IDENTITY_PUBLIC_KEY_PREF</name></expr></argument>, <argument><expr><call><name><name>Base64</name><operator>.</operator><name>encodeBytes</name></name><argument_list>(<argument><expr><call><name><name>legacyPair</name><operator>.</operator><name>getPublicKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>serialize</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>save</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>IDENTITY_PRIVATE_KEY_PREF</name></expr></argument>, <argument><expr><call><name><name>Base64</name><operator>.</operator><name>encodeBytes</name></name><argument_list>(<argument><expr><call><name><name>legacyPair</name><operator>.</operator><name>getPrivateKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>serialize</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>delete</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>IDENTITY_PUBLIC_KEY_CIPHERTEXT_LEGACY_PREF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>delete</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>IDENTITY_PRIVATE_KEY_CIPHERTEXT_LEGACY_PREF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name>generateIdentityKeys</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></else></if>
    }</block></then></if>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>BackupProtos</name><operator>.</operator><name>SharedPreference</name></name></argument>&gt;</argument_list></name></type> <name>getBackupRecord</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>SharedPreferences</name></type> <name>preferences</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>getSharedPreferences</name></name><argument_list>(<argument><expr><name><name>MasterSecretUtil</name><operator>.</operator><name>PREFERENCES_NAME</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <return>return <expr><operator>new</operator> <class><super><name><name>LinkedList</name><argument_list type="generic">&lt;<argument><name><name>BackupProtos</name><operator>.</operator><name>SharedPreference</name></name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{<block>{
      <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><call><name><name>BackupProtos</name><operator>.</operator><name>SharedPreference</name><operator>.</operator><name>newBuilder</name></name><argument_list>()</argument_list></call>
                                       <operator>.</operator><call><name>setFile</name><argument_list>(<argument><expr><name><name>MasterSecretUtil</name><operator>.</operator><name>PREFERENCES_NAME</name></name></expr></argument>)</argument_list></call>
                                       <operator>.</operator><call><name>setKey</name><argument_list>(<argument><expr><name>IDENTITY_PUBLIC_KEY_PREF</name></expr></argument>)</argument_list></call>
                                       <operator>.</operator><call><name>setValue</name><argument_list>(<argument><expr><call><name><name>preferences</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>IDENTITY_PUBLIC_KEY_PREF</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                                       <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><call><name><name>BackupProtos</name><operator>.</operator><name>SharedPreference</name><operator>.</operator><name>newBuilder</name></name><argument_list>()</argument_list></call>
                                       <operator>.</operator><call><name>setFile</name><argument_list>(<argument><expr><name><name>MasterSecretUtil</name><operator>.</operator><name>PREFERENCES_NAME</name></name></expr></argument>)</argument_list></call>
                                       <operator>.</operator><call><name>setKey</name><argument_list>(<argument><expr><name>IDENTITY_PRIVATE_KEY_PREF</name></expr></argument>)</argument_list></call>
                                       <operator>.</operator><call><name>setValue</name><argument_list>(<argument><expr><call><name><name>preferences</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>IDENTITY_PRIVATE_KEY_PREF</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                                       <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>}</block></class></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>hasLegacyIdentityKeys</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return
        <expr><call><name>retrieve</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>IDENTITY_PUBLIC_KEY_CIPHERTEXT_LEGACY_PREF</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator>
        <call><name>retrieve</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>IDENTITY_PRIVATE_KEY_CIPHERTEXT_LEGACY_PREF</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name>IdentityKeyPair</name></type> <name>getLegacyIdentityKeyPair</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>,
                                                          <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>MasterSecret</name></type> <name>masterSecret</name></decl></parameter>)</parameter_list>
  <block>{
    <try>try <block>{
      <decl_stmt><decl><type><name>MasterCipher</name></type> <name>masterCipher</name>   <init>= <expr><operator>new</operator> <call><name>MasterCipher</name><argument_list>(<argument><expr><name>masterSecret</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type>       <name>publicKeyBytes</name> <init>= <expr><call><name><name>Base64</name><operator>.</operator><name>decode</name></name><argument_list>(<argument><expr><call><name>retrieve</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>IDENTITY_PUBLIC_KEY_CIPHERTEXT_LEGACY_PREF</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>IdentityKey</name></type>  <name>identityKey</name>    <init>= <expr><operator>new</operator> <call><name>IdentityKey</name><argument_list>(<argument><expr><name>publicKeyBytes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>ECPrivateKey</name></type> <name>privateKey</name>     <init>= <expr><call><name><name>masterCipher</name><operator>.</operator><name>decryptKey</name></name><argument_list>(<argument><expr><call><name><name>Base64</name><operator>.</operator><name>decode</name></name><argument_list>(<argument><expr><call><name>retrieve</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>IDENTITY_PRIVATE_KEY_CIPHERTEXT_LEGACY_PREF</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <return>return <expr><operator>new</operator> <call><name>IdentityKeyPair</name><argument_list>(<argument><expr><name>identityKey</name></expr></argument>, <argument><expr><name>privateKey</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> | <type><name>InvalidKeyException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></catch></try>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>retrieve</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>SharedPreferences</name></type> <name>preferences</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>getSharedPreferences</name></name><argument_list>(<argument><expr><name><name>MasterSecretUtil</name><operator>.</operator><name>PREFERENCES_NAME</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name><name>preferences</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>save</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>SharedPreferences</name></type> <name>preferences</name>   <init>= <expr><call><name><name>context</name><operator>.</operator><name>getSharedPreferences</name></name><argument_list>(<argument><expr><name><name>MasterSecretUtil</name><operator>.</operator><name>PREFERENCES_NAME</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Editor</name></type> <name>preferencesEditor</name>        <init>= <expr><call><name><name>preferences</name><operator>.</operator><name>edit</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>preferencesEditor</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><operator>!</operator><call><name><name>preferencesEditor</name><operator>.</operator><name>commit</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><literal type="string">"failed to save identity key/value to shared preferences"</literal></expr></argument>)</argument_list></call></expr>;</throw></block></then></if>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>delete</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>context</name><operator>.</operator><name>getSharedPreferences</name></name><argument_list>(<argument><expr><name><name>MasterSecretUtil</name><operator>.</operator><name>PREFERENCES_NAME</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>edit</name><argument_list>()</argument_list></call><operator>.</operator><call><name>remove</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>commit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

}</block></class>
</unit>
