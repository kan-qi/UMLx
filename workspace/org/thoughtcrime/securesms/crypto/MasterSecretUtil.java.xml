<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\crypto\MasterSecretUtil.java"><comment type="block" format="javadoc">/**
 * Copyright (C) 2011 Whisper Systems
 * Copyright (C) 2013 Open Whisper Systems
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>crypto</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>SharedPreferences</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>logging</name><operator>.</operator><name>Log</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>Base64</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>Util</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>InvalidKeyException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>ecc</name><operator>.</operator><name>Curve</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>ecc</name><operator>.</operator><name>ECKeyPair</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>ecc</name><operator>.</operator><name>ECPrivateKey</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>ecc</name><operator>.</operator><name>ECPublicKey</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>GeneralSecurityException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>NoSuchAlgorithmException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>SecureRandom</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>spec</name><operator>.</operator><name>InvalidKeySpecException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>Cipher</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>KeyGenerator</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>Mac</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>SecretKey</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>SecretKeyFactory</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>spec</name><operator>.</operator><name>PBEKeySpec</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>spec</name><operator>.</operator><name>PBEParameterSpec</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>spec</name><operator>.</operator><name>SecretKeySpec</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Helper class for generating and securely storing a MasterSecret.
 *
 * @author Moxie Marlinspike
 */</comment>

<class><specifier>public</specifier> class <name>MasterSecretUtil</name> <block>{

  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>UNENCRYPTED_PASSPHRASE</name>  <init>= <expr><literal type="string">"unencrypted"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>PREFERENCES_NAME</name>        <init>= <expr><literal type="string">"SecureSMS-Preferences"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>ASYMMETRIC_LOCAL_PUBLIC_DJB</name>   <init>= <expr><literal type="string">"asymmetric_master_secret_curve25519_public"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>ASYMMETRIC_LOCAL_PRIVATE_DJB</name>  <init>= <expr><literal type="string">"asymmetric_master_secret_curve25519_private"</literal></expr></init></decl>;</decl_stmt>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>MasterSecret</name></type> <name>changeMasterSecretPassphrase</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>,
                                                          <parameter><decl><type><name>MasterSecret</name></type> <name>masterSecret</name></decl></parameter>,
                                                          <parameter><decl><type><name>String</name></type> <name>newPassphrase</name></decl></parameter>)</parameter_list>
  <block>{
    <try>try <block>{
      <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>combinedSecrets</name> <init>= <expr><call><name><name>Util</name><operator>.</operator><name>combine</name></name><argument_list>(<argument><expr><call><name><name>masterSecret</name><operator>.</operator><name>getEncryptionKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getEncoded</name><argument_list>()</argument_list></call></expr></argument>,
                                            <argument><expr><call><name><name>masterSecret</name><operator>.</operator><name>getMacKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getEncoded</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>encryptionSalt</name>               <init>= <expr><call><name>generateSalt</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type>    <name>iterations</name>                   <init>= <expr><call><name>generateIterationCount</name><argument_list>(<argument><expr><name>newPassphrase</name></expr></argument>, <argument><expr><name>encryptionSalt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>encryptedMasterSecret</name>        <init>= <expr><call><name>encryptWithPassphrase</name><argument_list>(<argument><expr><name>encryptionSalt</name></expr></argument>, <argument><expr><name>iterations</name></expr></argument>, <argument><expr><name>combinedSecrets</name></expr></argument>, <argument><expr><name>newPassphrase</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>macSalt</name>                      <init>= <expr><call><name>generateSalt</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>encryptedAndMacdMasterSecret</name> <init>= <expr><call><name>macWithPassphrase</name><argument_list>(<argument><expr><name>macSalt</name></expr></argument>, <argument><expr><name>iterations</name></expr></argument>, <argument><expr><name>encryptedMasterSecret</name></expr></argument>, <argument><expr><name>newPassphrase</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>save</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"encryption_salt"</literal></expr></argument>, <argument><expr><name>encryptionSalt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>save</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"mac_salt"</literal></expr></argument>, <argument><expr><name>macSalt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>save</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"passphrase_iterations"</literal></expr></argument>, <argument><expr><name>iterations</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>save</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"master_secret"</literal></expr></argument>, <argument><expr><name>encryptedAndMacdMasterSecret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>save</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"passphrase_initialized"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <return>return <expr><name>masterSecret</name></expr>;</return>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>GeneralSecurityException</name></type> <name>gse</name></decl></parameter>)</parameter_list> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><name>gse</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></catch></try>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>MasterSecret</name></type> <name>changeMasterSecretPassphrase</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>,
                                                          <parameter><decl><type><name>String</name></type> <name>originalPassphrase</name></decl></parameter>,
                                                          <parameter><decl><type><name>String</name></type> <name>newPassphrase</name></decl></parameter>)</parameter_list>
      <throws>throws <argument><expr><name>InvalidPassphraseException</name></expr></argument></throws>
  <block>{
    <decl_stmt><decl><type><name>MasterSecret</name></type> <name>masterSecret</name> <init>= <expr><call><name>getMasterSecret</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>originalPassphrase</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>changeMasterSecretPassphrase</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>masterSecret</name></expr></argument>, <argument><expr><name>newPassphrase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>masterSecret</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>MasterSecret</name></type> <name>getMasterSecret</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>passphrase</name></decl></parameter>)</parameter_list>
      <throws>throws <argument><expr><name>InvalidPassphraseException</name></expr></argument></throws>
  <block>{
    <try>try <block>{
      <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>encryptedAndMacdMasterSecret</name> <init>= <expr><call><name>retrieve</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"master_secret"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>macSalt</name>                      <init>= <expr><call><name>retrieve</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"mac_salt"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type>    <name>iterations</name>                   <init>= <expr><call><name>retrieve</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"passphrase_iterations"</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>encryptedMasterSecret</name>        <init>= <expr><call><name>verifyMac</name><argument_list>(<argument><expr><name>macSalt</name></expr></argument>, <argument><expr><name>iterations</name></expr></argument>, <argument><expr><name>encryptedAndMacdMasterSecret</name></expr></argument>, <argument><expr><name>passphrase</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>encryptionSalt</name>               <init>= <expr><call><name>retrieve</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"encryption_salt"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>combinedSecrets</name>              <init>= <expr><call><name>decryptWithPassphrase</name><argument_list>(<argument><expr><name>encryptionSalt</name></expr></argument>, <argument><expr><name>iterations</name></expr></argument>, <argument><expr><name>encryptedMasterSecret</name></expr></argument>, <argument><expr><name>passphrase</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>encryptionSecret</name>             <init>= <expr><call><name><name>Util</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><name>combinedSecrets</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>macSecret</name>                    <init>= <expr><call><name><name>Util</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><name>combinedSecrets</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call><index>[<expr><literal type="number">1</literal></expr>]</index></expr></init></decl>;</decl_stmt>

      <return>return <expr><operator>new</operator> <call><name>MasterSecret</name><argument_list>(<argument><expr><operator>new</operator> <call><name>SecretKeySpec</name><argument_list>(<argument><expr><name>encryptionSecret</name></expr></argument>, <argument><expr><literal type="string">"AES"</literal></expr></argument>)</argument_list></call></expr></argument>,
                              <argument><expr><operator>new</operator> <call><name>SecretKeySpec</name><argument_list>(<argument><expr><name>macSecret</name></expr></argument>, <argument><expr><literal type="string">"HmacSHA1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>GeneralSecurityException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><literal type="string">"keyutil"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="null">null</literal></expr>;</return> <comment type="line">//XXX</comment>
    }</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><literal type="string">"keyutil"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="null">null</literal></expr>;</return> <comment type="line">//XXX</comment>
    }</block></catch></try>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>AsymmetricMasterSecret</name></type> <name>getAsymmetricMasterSecret</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation>  <name>Context</name></type> <name>context</name></decl></parameter>,
                                                                 <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>MasterSecret</name></type> <name>masterSecret</name></decl></parameter>)</parameter_list>
  <block>{
    <try>try <block>{
      <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>djbPublicBytes</name>   <init>= <expr><call><name>retrieve</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>ASYMMETRIC_LOCAL_PUBLIC_DJB</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>djbPrivateBytes</name>  <init>= <expr><call><name>retrieve</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>ASYMMETRIC_LOCAL_PRIVATE_DJB</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>ECPublicKey</name></type>  <name>djbPublicKey</name>  <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>ECPrivateKey</name></type> <name>djbPrivateKey</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><name>djbPublicBytes</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>djbPublicKey</name> <operator>=</operator> <call><name><name>Curve</name><operator>.</operator><name>decodePoint</name></name><argument_list>(<argument><expr><name>djbPublicBytes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>

      <if>if <condition>(<expr><name>masterSecret</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>MasterCipher</name></type> <name>masterCipher</name> <init>= <expr><operator>new</operator> <call><name>MasterCipher</name><argument_list>(<argument><expr><name>masterSecret</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>djbPrivateBytes</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>djbPrivateKey</name> <operator>=</operator> <call><name><name>masterCipher</name><operator>.</operator><name>decryptKey</name></name><argument_list>(<argument><expr><name>djbPrivateBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
      }</block></then></if>

      <return>return <expr><operator>new</operator> <call><name>AsymmetricMasterSecret</name><argument_list>(<argument><expr><name>djbPublicKey</name></expr></argument>, <argument><expr><name>djbPrivateKey</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InvalidKeyException</name></type> | <type><name>IOException</name></type> <name>ike</name></decl></parameter>)</parameter_list> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><name>ike</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></catch></try>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>AsymmetricMasterSecret</name></type> <name>generateAsymmetricMasterSecret</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>,
                                                                      <parameter><decl><type><name>MasterSecret</name></type> <name>masterSecret</name></decl></parameter>)</parameter_list>
  <block>{
    <decl_stmt><decl><type><name>MasterCipher</name></type> <name>masterCipher</name> <init>= <expr><operator>new</operator> <call><name>MasterCipher</name><argument_list>(<argument><expr><name>masterSecret</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ECKeyPair</name></type>    <name>keyPair</name>      <init>= <expr><call><name><name>Curve</name><operator>.</operator><name>generateKeyPair</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>save</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>ASYMMETRIC_LOCAL_PUBLIC_DJB</name></expr></argument>, <argument><expr><call><name><name>keyPair</name><operator>.</operator><name>getPublicKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>serialize</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>save</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>ASYMMETRIC_LOCAL_PRIVATE_DJB</name></expr></argument>, <argument><expr><call><name><name>masterCipher</name><operator>.</operator><name>encryptKey</name></name><argument_list>(<argument><expr><call><name><name>keyPair</name><operator>.</operator><name>getPrivateKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><operator>new</operator> <call><name>AsymmetricMasterSecret</name><argument_list>(<argument><expr><call><name><name>keyPair</name><operator>.</operator><name>getPublicKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>keyPair</name><operator>.</operator><name>getPrivateKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>MasterSecret</name></type> <name>generateMasterSecret</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>passphrase</name></decl></parameter>)</parameter_list> <block>{
    <try>try <block>{
      <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>encryptionSecret</name>             <init>= <expr><call><name>generateEncryptionSecret</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>macSecret</name>                    <init>= <expr><call><name>generateMacSecret</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>masterSecret</name>                 <init>= <expr><call><name><name>Util</name><operator>.</operator><name>combine</name></name><argument_list>(<argument><expr><name>encryptionSecret</name></expr></argument>, <argument><expr><name>macSecret</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>encryptionSalt</name>               <init>= <expr><call><name>generateSalt</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type>    <name>iterations</name>                   <init>= <expr><call><name>generateIterationCount</name><argument_list>(<argument><expr><name>passphrase</name></expr></argument>, <argument><expr><name>encryptionSalt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>encryptedMasterSecret</name>        <init>= <expr><call><name>encryptWithPassphrase</name><argument_list>(<argument><expr><name>encryptionSalt</name></expr></argument>, <argument><expr><name>iterations</name></expr></argument>, <argument><expr><name>masterSecret</name></expr></argument>, <argument><expr><name>passphrase</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>macSalt</name>                      <init>= <expr><call><name>generateSalt</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>encryptedAndMacdMasterSecret</name> <init>= <expr><call><name>macWithPassphrase</name><argument_list>(<argument><expr><name>macSalt</name></expr></argument>, <argument><expr><name>iterations</name></expr></argument>, <argument><expr><name>encryptedMasterSecret</name></expr></argument>, <argument><expr><name>passphrase</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>save</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"encryption_salt"</literal></expr></argument>, <argument><expr><name>encryptionSalt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>save</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"mac_salt"</literal></expr></argument>, <argument><expr><name>macSalt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>save</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"passphrase_iterations"</literal></expr></argument>, <argument><expr><name>iterations</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>save</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"master_secret"</literal></expr></argument>, <argument><expr><name>encryptedAndMacdMasterSecret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>save</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"passphrase_initialized"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <return>return <expr><operator>new</operator> <call><name>MasterSecret</name><argument_list>(<argument><expr><operator>new</operator> <call><name>SecretKeySpec</name><argument_list>(<argument><expr><name>encryptionSecret</name></expr></argument>, <argument><expr><literal type="string">"AES"</literal></expr></argument>)</argument_list></call></expr></argument>,
                              <argument><expr><operator>new</operator> <call><name>SecretKeySpec</name><argument_list>(<argument><expr><name>macSecret</name></expr></argument>, <argument><expr><literal type="string">"HmacSHA1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>GeneralSecurityException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><literal type="string">"keyutil"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="null">null</literal></expr>;</return>
    }</block></catch></try>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>hasAsymmericMasterSecret</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>SharedPreferences</name></type> <name>settings</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>getSharedPreferences</name></name><argument_list>(<argument><expr><name>PREFERENCES_NAME</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name><name>settings</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>ASYMMETRIC_LOCAL_PUBLIC_DJB</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isPassphraseInitialized</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>SharedPreferences</name></type> <name>preferences</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>getSharedPreferences</name></name><argument_list>(<argument><expr><name>PREFERENCES_NAME</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name><name>preferences</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"passphrase_initialized"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>save</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><operator>!</operator><call><name><name>context</name><operator>.</operator><name>getSharedPreferences</name></name><argument_list>(<argument><expr><name>PREFERENCES_NAME</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>edit</name><argument_list>()</argument_list></call>
                <operator>.</operator><call><name>putInt</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>commit</name><argument_list>()</argument_list></call></expr>)</condition><then>
    <block>{
      <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><literal type="string">"failed to save a shared pref in MasterSecretUtil"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></then></if>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>save</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><operator>!</operator><call><name><name>context</name><operator>.</operator><name>getSharedPreferences</name></name><argument_list>(<argument><expr><name>PREFERENCES_NAME</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>edit</name><argument_list>()</argument_list></call>
                <operator>.</operator><call><name>putString</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><call><name><name>Base64</name><operator>.</operator><name>encodeBytes</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>commit</name><argument_list>()</argument_list></call></expr>)</condition><then>
    <block>{
      <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><literal type="string">"failed to save a shared pref in MasterSecretUtil"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></then></if>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>save</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><operator>!</operator><call><name><name>context</name><operator>.</operator><name>getSharedPreferences</name></name><argument_list>(<argument><expr><name>PREFERENCES_NAME</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>edit</name><argument_list>()</argument_list></call>
                <operator>.</operator><call><name>putBoolean</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>commit</name><argument_list>()</argument_list></call></expr>)</condition><then>
    <block>{
      <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><literal type="string">"failed to save a shared pref in MasterSecretUtil"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></then></if>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>retrieve</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
    <decl_stmt><decl><type><name>SharedPreferences</name></type> <name>settings</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>getSharedPreferences</name></name><argument_list>(<argument><expr><name>PREFERENCES_NAME</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>encodedValue</name>        <init>= <expr><call><name><name>settings</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>encodedValue</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="null">null</literal></expr>;</return></block></then>
    <else>else                                 <block type="pseudo"><return>return <expr><call><name><name>Base64</name><operator>.</operator><name>decode</name></name><argument_list>(<argument><expr><name>encodedValue</name></expr></argument>)</argument_list></call></expr>;</return></block></else></if>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>retrieve</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>defaultValue</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
    <decl_stmt><decl><type><name>SharedPreferences</name></type> <name>settings</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>getSharedPreferences</name></name><argument_list>(<argument><expr><name>PREFERENCES_NAME</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name><name>settings</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>defaultValue</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>generateEncryptionSecret</name><parameter_list>()</parameter_list> <block>{
    <try>try <block>{
      <decl_stmt><decl><type><name>KeyGenerator</name></type> <name>generator</name> <init>= <expr><call><name><name>KeyGenerator</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><literal type="string">"AES"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>generator</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>SecretKey</name></type> <name>key</name> <init>= <expr><call><name><name>generator</name><operator>.</operator><name>generateKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr><call><name><name>key</name><operator>.</operator><name>getEncoded</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NoSuchAlgorithmException</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><literal type="string">"keyutil"</literal></expr></argument>, <argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="null">null</literal></expr>;</return>
    }</block></catch></try>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>generateMacSecret</name><parameter_list>()</parameter_list> <block>{
    <try>try <block>{
      <decl_stmt><decl><type><name>KeyGenerator</name></type> <name>generator</name> <init>= <expr><call><name><name>KeyGenerator</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><literal type="string">"HmacSHA1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr><call><name><name>generator</name><operator>.</operator><name>generateKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getEncoded</name><argument_list>()</argument_list></call></expr>;</return>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NoSuchAlgorithmException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><literal type="string">"keyutil"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="null">null</literal></expr>;</return>
    }</block></catch></try>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>generateSalt</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>NoSuchAlgorithmException</name></expr></argument></throws> <block>{
    <decl_stmt><decl><type><name>SecureRandom</name></type> <name>random</name> <init>= <expr><call><name><name>SecureRandom</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><literal type="string">"SHA1PRNG"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>salt</name>         <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>random</name><operator>.</operator><name>nextBytes</name></name><argument_list>(<argument><expr><name>salt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>salt</name></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>generateIterationCount</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>passphrase</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>salt</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>TARGET_ITERATION_TIME</name>     <init>= <expr><literal type="number">50</literal></expr></init></decl>;</decl_stmt>   <comment type="line">//ms</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>MINIMUM_ITERATION_COUNT</name>   <init>= <expr><literal type="number">100</literal></expr></init></decl>;</decl_stmt>   <comment type="line">//default for low-end devices</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>BENCHMARK_ITERATION_COUNT</name> <init>= <expr><literal type="number">10000</literal></expr></init></decl>;</decl_stmt> <comment type="line">//baseline starting iteration count</comment>

    <try>try <block>{
      <decl_stmt><decl><type><name>PBEKeySpec</name></type>       <name>keyspec</name> <init>= <expr><operator>new</operator> <call><name>PBEKeySpec</name><argument_list>(<argument><expr><call><name><name>passphrase</name><operator>.</operator><name>toCharArray</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>salt</name></expr></argument>, <argument><expr><name>BENCHMARK_ITERATION_COUNT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SecretKeyFactory</name></type> <name>skf</name>     <init>= <expr><call><name><name>SecretKeyFactory</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><literal type="string">"PBEWITHSHA1AND128BITAES-CBC-BC"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>long</name></type> <name>startTime</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>skf</name><operator>.</operator><name>generateSecret</name></name><argument_list>(<argument><expr><name>keyspec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>long</name></type> <name>finishTime</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>int</name></type> <name>scaledIterationTarget</name> <init>= <expr><call>(<name>int</name>) <argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name>BENCHMARK_ITERATION_COUNT</name> <operator>/</operator> <call>(<name>double</name>)<argument_list>(<argument><expr><name>finishTime</name> <operator>-</operator> <name>startTime</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <name>TARGET_ITERATION_TIME</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><name>scaledIterationTarget</name> <operator>&lt;</operator> <name>MINIMUM_ITERATION_COUNT</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>MINIMUM_ITERATION_COUNT</name></expr>;</return></block></then>
      <else>else                                                 <block type="pseudo"><return>return <expr><name>scaledIterationTarget</name></expr>;</return></block></else></if>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NoSuchAlgorithmException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><literal type="string">"MasterSecretUtil"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>MINIMUM_ITERATION_COUNT</name></expr>;</return>
    }</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>InvalidKeySpecException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><literal type="string">"MasterSecretUtil"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>MINIMUM_ITERATION_COUNT</name></expr>;</return>
    }</block></catch></try>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name>SecretKey</name></type> <name>getKeyFromPassphrase</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>passphrase</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>salt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iterations</name></decl></parameter>)</parameter_list>
      <throws>throws <argument><expr><name>GeneralSecurityException</name></expr></argument></throws>
  <block>{
    <decl_stmt><decl><type><name>PBEKeySpec</name></type> <name>keyspec</name>    <init>= <expr><operator>new</operator> <call><name>PBEKeySpec</name><argument_list>(<argument><expr><call><name><name>passphrase</name><operator>.</operator><name>toCharArray</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>salt</name></expr></argument>, <argument><expr><name>iterations</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SecretKeyFactory</name></type> <name>skf</name>  <init>= <expr><call><name><name>SecretKeyFactory</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><literal type="string">"PBEWITHSHA1AND128BITAES-CBC-BC"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name><name>skf</name><operator>.</operator><name>generateSecret</name></name><argument_list>(<argument><expr><name>keyspec</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name>Cipher</name></type> <name>getCipherFromPassphrase</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>passphrase</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>salt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iterations</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>opMode</name></decl></parameter>)</parameter_list>
      <throws>throws <argument><expr><name>GeneralSecurityException</name></expr></argument></throws>
  <block>{
    <decl_stmt><decl><type><name>SecretKey</name></type> <name>key</name>    <init>= <expr><call><name>getKeyFromPassphrase</name><argument_list>(<argument><expr><name>passphrase</name></expr></argument>, <argument><expr><name>salt</name></expr></argument>, <argument><expr><name>iterations</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Cipher</name></type>    <name>cipher</name> <init>= <expr><call><name><name>Cipher</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><call><name><name>key</name><operator>.</operator><name>getAlgorithm</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>cipher</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name>opMode</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>PBEParameterSpec</name><argument_list>(<argument><expr><name>salt</name></expr></argument>, <argument><expr><name>iterations</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>cipher</name></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>encryptWithPassphrase</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>encryptionSalt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iterations</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>passphrase</name></decl></parameter>)</parameter_list>
      <throws>throws <argument><expr><name>GeneralSecurityException</name></expr></argument></throws>
  <block>{
    <decl_stmt><decl><type><name>Cipher</name></type> <name>cipher</name> <init>= <expr><call><name>getCipherFromPassphrase</name><argument_list>(<argument><expr><name>passphrase</name></expr></argument>, <argument><expr><name>encryptionSalt</name></expr></argument>, <argument><expr><name>iterations</name></expr></argument>, <argument><expr><name><name>Cipher</name><operator>.</operator><name>ENCRYPT_MODE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name><name>cipher</name><operator>.</operator><name>doFinal</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>decryptWithPassphrase</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>encryptionSalt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iterations</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>passphrase</name></decl></parameter>)</parameter_list>
      <throws>throws <argument><expr><name>GeneralSecurityException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument></throws>
  <block>{
    <decl_stmt><decl><type><name>Cipher</name></type> <name>cipher</name> <init>= <expr><call><name>getCipherFromPassphrase</name><argument_list>(<argument><expr><name>passphrase</name></expr></argument>, <argument><expr><name>encryptionSalt</name></expr></argument>, <argument><expr><name>iterations</name></expr></argument>, <argument><expr><name><name>Cipher</name><operator>.</operator><name>DECRYPT_MODE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name><name>cipher</name><operator>.</operator><name>doFinal</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name>Mac</name></type> <name>getMacForPassphrase</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>passphrase</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>salt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iterations</name></decl></parameter>)</parameter_list>
      <throws>throws <argument><expr><name>GeneralSecurityException</name></expr></argument></throws>
  <block>{
    <decl_stmt><decl><type><name>SecretKey</name></type>     <name>key</name>     <init>= <expr><call><name>getKeyFromPassphrase</name><argument_list>(<argument><expr><name>passphrase</name></expr></argument>, <argument><expr><name>salt</name></expr></argument>, <argument><expr><name>iterations</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type>        <name>pbkdf2</name>  <init>= <expr><call><name><name>key</name><operator>.</operator><name>getEncoded</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SecretKeySpec</name></type> <name>hmacKey</name> <init>= <expr><operator>new</operator> <call><name>SecretKeySpec</name><argument_list>(<argument><expr><name>pbkdf2</name></expr></argument>, <argument><expr><literal type="string">"HmacSHA1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Mac</name></type>           <name>hmac</name>    <init>= <expr><call><name><name>Mac</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><literal type="string">"HmacSHA1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>hmac</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name>hmacKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>hmac</name></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>verifyMac</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>macSalt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iterations</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>encryptedAndMacdData</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>passphrase</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>InvalidPassphraseException</name></expr></argument>, <argument><expr><name>GeneralSecurityException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument></throws> <block>{
    <decl_stmt><decl><type><name>Mac</name></type> <name>hmac</name>        <init>= <expr><call><name>getMacForPassphrase</name><argument_list>(<argument><expr><name>passphrase</name></expr></argument>, <argument><expr><name>macSalt</name></expr></argument>, <argument><expr><name>iterations</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>encryptedData</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name><name>encryptedAndMacdData</name><operator>.</operator><name>length</name></name> <operator>-</operator> <call><name><name>hmac</name><operator>.</operator><name>getMacLength</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name>encryptedAndMacdData</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>encryptedData</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>encryptedData</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>givenMac</name>      <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><call><name><name>hmac</name><operator>.</operator><name>getMacLength</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name>encryptedAndMacdData</name></expr></argument>, <argument><expr><name><name>encryptedAndMacdData</name><operator>.</operator><name>length</name></name><operator>-</operator><call><name><name>hmac</name><operator>.</operator><name>getMacLength</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>givenMac</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>givenMac</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>localMac</name>      <init>= <expr><call><name><name>hmac</name><operator>.</operator><name>doFinal</name></name><argument_list>(<argument><expr><name>encryptedData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name><name>Arrays</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>givenMac</name></expr></argument>, <argument><expr><name>localMac</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>encryptedData</name></expr>;</return></block></then>
    <else>else                                   <block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name>InvalidPassphraseException</name><argument_list>(<argument><expr><literal type="string">"MAC Error"</literal></expr></argument>)</argument_list></call></expr>;</throw></block></else></if>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>macWithPassphrase</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>macSalt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iterations</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>passphrase</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>GeneralSecurityException</name></expr></argument></throws> <block>{
    <decl_stmt><decl><type><name>Mac</name></type> <name>hmac</name>       <init>= <expr><call><name>getMacForPassphrase</name><argument_list>(<argument><expr><name>passphrase</name></expr></argument>, <argument><expr><name>macSalt</name></expr></argument>, <argument><expr><name>iterations</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>mac</name>     <init>= <expr><call><name><name>hmac</name><operator>.</operator><name>doFinal</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>result</name>  <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name><name>data</name><operator>.</operator><name>length</name></name> <operator>+</operator> <name><name>mac</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name>mac</name></expr></argument>,  <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><name><name>mac</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>result</name></expr>;</return>
  }</block></function>
}</block></class>
</unit>
