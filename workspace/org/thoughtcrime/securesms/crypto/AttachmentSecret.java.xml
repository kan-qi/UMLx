<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\crypto\AttachmentSecret.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>crypto</name></name>;</package>


<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Base64</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>fasterxml</name><operator>.</operator><name>jackson</name><operator>.</operator><name>annotation</name><operator>.</operator><name>JsonIgnore</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>fasterxml</name><operator>.</operator><name>jackson</name><operator>.</operator><name>annotation</name><operator>.</operator><name>JsonProperty</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>fasterxml</name><operator>.</operator><name>jackson</name><operator>.</operator><name>core</name><operator>.</operator><name>JsonGenerator</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>fasterxml</name><operator>.</operator><name>jackson</name><operator>.</operator><name>core</name><operator>.</operator><name>JsonParser</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>fasterxml</name><operator>.</operator><name>jackson</name><operator>.</operator><name>databind</name><operator>.</operator><name>DeserializationContext</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>fasterxml</name><operator>.</operator><name>jackson</name><operator>.</operator><name>databind</name><operator>.</operator><name>JsonDeserializer</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>fasterxml</name><operator>.</operator><name>jackson</name><operator>.</operator><name>databind</name><operator>.</operator><name>JsonSerializer</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>fasterxml</name><operator>.</operator><name>jackson</name><operator>.</operator><name>databind</name><operator>.</operator><name>SerializerProvider</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>fasterxml</name><operator>.</operator><name>jackson</name><operator>.</operator><name>databind</name><operator>.</operator><name>annotation</name><operator>.</operator><name>JsonDeserialize</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>fasterxml</name><operator>.</operator><name>jackson</name><operator>.</operator><name>databind</name><operator>.</operator><name>annotation</name><operator>.</operator><name>JsonSerialize</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>JsonUtils</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Encapsulates the key material used to encrypt attachments on disk.
 *
 * There are two logical pieces of material, a deprecated set of keys used to encrypt
 * legacy attachments, and a key that is used to encrypt attachments going forward.
 */</comment>
<class><specifier>public</specifier> class <name>AttachmentSecret</name> <block>{

  <decl_stmt><decl><annotation>@<name>JsonProperty</name></annotation>
  <annotation>@<name>JsonSerialize</name><argument_list>(<argument><expr><name>using</name> <operator>=</operator> <name><name>ByteArraySerializer</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></annotation>
  <annotation>@<name>JsonDeserialize</name><argument_list>(<argument><expr><name>using</name> <operator>=</operator> <name><name>ByteArrayDeserializer</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></annotation>
  <specifier>private</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>classicCipherKey</name></decl>;</decl_stmt>

  <decl_stmt><decl><annotation>@<name>JsonProperty</name></annotation>
  <annotation>@<name>JsonSerialize</name><argument_list>(<argument><expr><name>using</name> <operator>=</operator> <name><name>ByteArraySerializer</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></annotation>
  <annotation>@<name>JsonDeserialize</name><argument_list>(<argument><expr><name>using</name> <operator>=</operator> <name><name>ByteArrayDeserializer</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></annotation>
  <specifier>private</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>classicMacKey</name></decl>;</decl_stmt>

  <decl_stmt><decl><annotation>@<name>JsonProperty</name></annotation>
  <annotation>@<name>JsonSerialize</name><argument_list>(<argument><expr><name>using</name> <operator>=</operator> <name><name>ByteArraySerializer</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></annotation>
  <annotation>@<name>JsonDeserialize</name><argument_list>(<argument><expr><name>using</name> <operator>=</operator> <name><name>ByteArrayDeserializer</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></annotation>
  <specifier>private</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>modernKey</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>AttachmentSecret</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>classicCipherKey</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>classicMacKey</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>modernKey</name></decl></parameter>)</parameter_list>
  <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>classicCipherKey</name></name> <operator>=</operator> <name>classicCipherKey</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>classicMacKey</name></name>    <operator>=</operator> <name>classicMacKey</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>modernKey</name></name>        <operator>=</operator> <name>modernKey</name></expr>;</expr_stmt>
  }</block></constructor>

  <constructor><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unused"</literal></expr></argument>)</argument_list></annotation>
  <specifier>public</specifier> <name>AttachmentSecret</name><parameter_list>()</parameter_list> <block>{

  }</block></constructor>

  <function><annotation>@<name>JsonIgnore</name></annotation>
  <type><name><name>byte</name><index>[]</index></name></type> <name>getClassicCipherKey</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>classicCipherKey</name></expr>;</return>
  }</block></function>

  <function><annotation>@<name>JsonIgnore</name></annotation>
  <type><name><name>byte</name><index>[]</index></name></type> <name>getClassicMacKey</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>classicMacKey</name></expr>;</return>
  }</block></function>

  <function><annotation>@<name>JsonIgnore</name></annotation>
  <specifier>public</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>getModernKey</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>modernKey</name></expr>;</return>
  }</block></function>

  <function><annotation>@<name>JsonIgnore</name></annotation>
  <type><name>void</name></type> <name>setClassicCipherKey</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>classicCipherKey</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>classicCipherKey</name></name> <operator>=</operator> <name>classicCipherKey</name></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>JsonIgnore</name></annotation>
  <type><name>void</name></type> <name>setClassicMacKey</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>classicMacKey</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>classicMacKey</name></name> <operator>=</operator> <name>classicMacKey</name></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>String</name></type> <name>serialize</name><parameter_list>()</parameter_list> <block>{
    <try>try <block>{
      <return>return <expr><call><name><name>JsonUtils</name><operator>.</operator><name>toJson</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></catch></try>
  }</block></function>

  <function><specifier>static</specifier> <type><name>AttachmentSecret</name></type> <name>fromString</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
    <try>try <block>{
      <return>return <expr><call><name><name>JsonUtils</name><operator>.</operator><name>fromJson</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>AttachmentSecret</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></catch></try>
  }</block></function>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>ByteArraySerializer</name> <super><extends>extends <name><name>JsonSerializer</name><argument_list type="generic">&lt;<argument><name><name>byte</name><index>[]</index></name></argument>&gt;</argument_list></name></extends></super> <block>{
    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>serialize</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>JsonGenerator</name></type> <name>gen</name></decl></parameter>, <parameter><decl><type><name>SerializerProvider</name></type> <name>serializers</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
      <expr_stmt><expr><call><name><name>gen</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>Base64</name><operator>.</operator><name>encodeToString</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>Base64</name><operator>.</operator><name>NO_WRAP</name></name> <operator>|</operator> <name><name>Base64</name><operator>.</operator><name>NO_PADDING</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
  }</block></class>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>ByteArrayDeserializer</name> <super><extends>extends <name><name>JsonDeserializer</name><argument_list type="generic">&lt;<argument><name><name>byte</name><index>[]</index></name></argument>&gt;</argument_list></name></extends></super> <block>{

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>deserialize</name><parameter_list>(<parameter><decl><type><name>JsonParser</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>DeserializationContext</name></type> <name>ctxt</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>Base64</name><operator>.</operator><name>decode</name></name><argument_list>(<argument><expr><call><name><name>p</name><operator>.</operator><name>getValueAsString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Base64</name><operator>.</operator><name>NO_WRAP</name></name> <operator>|</operator> <name><name>Base64</name><operator>.</operator><name>NO_PADDING</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
  }</block></class>



}</block></class>
</unit>
