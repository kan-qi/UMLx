<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\crypto\PRNGFixes.java"><comment type="block">/*
 * This software is provided 'as-is', without any express or implied
 * warranty.  In no event will Google be held liable for any damages
 * arising from the use of this software.
 *
 * Permission is granted to anyone to use this software for any purpose,
 * including commercial applications, and to alter it and redistribute it
 * freely, as long as the origin is not misrepresented.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>crypto</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Process</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>logging</name><operator>.</operator><name>Log</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>DataInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>DataOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>OutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>UnsupportedEncodingException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>NoSuchAlgorithmException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>Provider</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>SecureRandom</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>SecureRandomSpi</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>Security</name></name>;</import>

<comment type="block" format="javadoc">/**
 * This class is taken directly from the Android blog post announcing this bug:
 * http://android-developers.blogspot.com/2013/08/some-securerandom-thoughts.html
 *
 * Since I still don't know exactly what the source of this bug was, I'm using
 * this class verbatim under the assumption that the Android team knows what
 * they're doing.  Although, at this point, that is perhaps a foolish assumption.
 */</comment>

<comment type="block" format="javadoc">/**
 * Fixes for the output of the default PRNG having low entropy.
 *
 * The fixes need to be applied via {@link #apply()} before any use of Java
 * Cryptography Architecture primitives. A good place to invoke them is in the
 * application's {@code onCreate}.
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>PRNGFixes</name> <block>{

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>PRNGFixes</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>VERSION_CODE_JELLY_BEAN</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>VERSION_CODE_JELLY_BEAN_MR2</name> <init>= <expr><literal type="number">18</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>BUILD_FINGERPRINT_AND_DEVICE_SERIAL</name> <init>=
      <expr><call><name>getBuildFingerprintAndDeviceSerial</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="block" format="javadoc">/** Hidden constructor to prevent instantiation. */</comment>
  <constructor><specifier>private</specifier> <name>PRNGFixes</name><parameter_list>()</parameter_list> <block>{}</block></constructor>

  <comment type="block" format="javadoc">/**
   * Applies all fixes.
   *
   * @throws SecurityException if a fix is needed but could not be applied.
   */</comment>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>apply</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>applyOpenSSLFix</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>installLinuxPRNGSecureRandom</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Applies the fix for OpenSSL PRNG having low entropy. Does nothing if the
   * fix is not needed.
   *
   * @throws SecurityException if the fix is needed but could not be applied.
   */</comment>
  <function><specifier>private</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>applyOpenSSLFix</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>SecurityException</name></expr></argument></throws> <block>{
    <if>if <condition>(<expr><operator>(</operator><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&lt;</operator> <name>VERSION_CODE_JELLY_BEAN</name><operator>)</operator>
        <operator>||</operator> <operator>(</operator><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;</operator> <name>VERSION_CODE_JELLY_BEAN_MR2</name><operator>)</operator></expr>)</condition><then> <block>{
      <comment type="line">// No need to apply the fix</comment>
      <return>return;</return>
    }</block></then></if>

    <try>try <block>{
      <comment type="line">// Mix in the device- and invocation-specific seed.</comment>
      <expr_stmt><expr><call><name><name>Class</name><operator>.</operator><name>forName</name></name><argument_list>(<argument><expr><literal type="string">"org.apache.harmony.xnet.provider.jsse.NativeCrypto"</literal></expr></argument>)</argument_list></call>
           <operator>.</operator><call><name>getMethod</name><argument_list>(<argument><expr><literal type="string">"RAND_seed"</literal></expr></argument>, <argument><expr><name><name>byte</name><index>[]</index></name><operator>.</operator>class</expr></argument>)</argument_list></call>
           <operator>.</operator><call><name>invoke</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><call><name>generateSeed</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// Mix output of Linux PRNG into OpenSSL's PRNG</comment>
      <decl_stmt><decl><type><name>int</name></type> <name>bytesRead</name> <init>= <expr><operator>(</operator><name>Integer</name><operator>)</operator> <call><name><name>Class</name><operator>.</operator><name>forName</name></name><argument_list>(
          <argument><expr><literal type="string">"org.apache.harmony.xnet.provider.jsse.NativeCrypto"</literal></expr></argument>)</argument_list></call>
                                     <operator>.</operator><call><name>getMethod</name><argument_list>(<argument><expr><literal type="string">"RAND_load_file"</literal></expr></argument>, <argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>long</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call>
                                     <operator>.</operator><call><name>invoke</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="string">"/dev/urandom"</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>bytesRead</name> <operator>!=</operator> <literal type="number">1024</literal></expr>)</condition><then> <block>{
        <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(
            <argument><expr><literal type="string">"Unexpected number of bytes read from Linux PRNG: "</literal>
                <operator>+</operator> <name>bytesRead</name></expr></argument>)</argument_list></call></expr>;</throw>
      }</block></then></if>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>SecurityException</name><argument_list>(<argument><expr><literal type="string">"Failed to seed OpenSSL PRNG"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></catch></try>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Installs a Linux PRNG-backed {@code SecureRandom} implementation as the
   * default. Does nothing if the implementation is already the default or if
   * there is not need to install the implementation.
   *
   * @throws SecurityException if the fix is needed but could not be applied.
   */</comment>
  <function><specifier>private</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>installLinuxPRNGSecureRandom</name><parameter_list>()</parameter_list>
      <throws>throws <argument><expr><name>SecurityException</name></expr></argument></throws> <block>{
    <if>if <condition>(<expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;</operator> <name>VERSION_CODE_JELLY_BEAN_MR2</name></expr>)</condition><then> <block>{
      <comment type="line">// No need to apply the fix</comment>
      <return>return;</return>
    }</block></then></if>

    <comment type="line">// Install a Linux PRNG-based SecureRandom implementation as the</comment>
    <comment type="line">// default, if not yet installed.</comment>
    <decl_stmt><decl><type><name><name>Provider</name><index>[]</index></name></type> <name>secureRandomProviders</name> <init>=
        <expr><call><name><name>Security</name><operator>.</operator><name>getProviders</name></name><argument_list>(<argument><expr><literal type="string">"SecureRandom.SHA1PRNG"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><operator>(</operator><name>secureRandomProviders</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator>
        <operator>||</operator> <operator>(</operator><name><name>secureRandomProviders</name><operator>.</operator><name>length</name></name> <operator>&lt;</operator> <literal type="number">1</literal><operator>)</operator>
        <operator>||</operator> <operator>(</operator><operator>!</operator><call><name><name>LinuxPRNGSecureRandomProvider</name><operator>.</operator><name><name>class</name><operator>.</operator><name>equals</name></name></name><argument_list>(
        <argument><expr><name><name>secureRandomProviders</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>getClass</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>Security</name><operator>.</operator><name>insertProviderAt</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>LinuxPRNGSecureRandomProvider</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <comment type="line">// Assert that new SecureRandom() and</comment>
    <comment type="line">// SecureRandom.getInstance("SHA1PRNG") return a SecureRandom backed</comment>
    <comment type="line">// by the Linux PRNG-based SecureRandom implementation.</comment>
    <decl_stmt><decl><type><name>SecureRandom</name></type> <name>rng1</name> <init>= <expr><operator>new</operator> <call><name>SecureRandom</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><operator>!</operator><call><name><name>LinuxPRNGSecureRandomProvider</name><operator>.</operator><name><name>class</name><operator>.</operator><name>equals</name></name></name><argument_list>(
        <argument><expr><call><name><name>rng1</name><operator>.</operator><name>getProvider</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getClass</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>SecurityException</name><argument_list>(
          <argument><expr><literal type="string">"new SecureRandom() backed by wrong Provider: "</literal>
              <operator>+</operator> <call><name><name>rng1</name><operator>.</operator><name>getProvider</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getClass</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></then></if>

    <decl_stmt><decl><type><name>SecureRandom</name></type> <name>rng2</name></decl>;</decl_stmt>
    <try>try <block>{
      <expr_stmt><expr><name>rng2</name> <operator>=</operator> <call><name><name>SecureRandom</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><literal type="string">"SHA1PRNG"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NoSuchAlgorithmException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>SecurityException</name><argument_list>(<argument><expr><literal type="string">"SHA1PRNG not available"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></catch></try>
    <if>if <condition>(<expr><operator>!</operator><call><name><name>LinuxPRNGSecureRandomProvider</name><operator>.</operator><name><name>class</name><operator>.</operator><name>equals</name></name></name><argument_list>(
        <argument><expr><call><name><name>rng2</name><operator>.</operator><name>getProvider</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getClass</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>SecurityException</name><argument_list>(
          <argument><expr><literal type="string">"SecureRandom.getInstance(\"SHA1PRNG\") backed by wrong"</literal>
              <operator>+</operator> <literal type="string">" Provider: "</literal> <operator>+</operator> <call><name><name>rng2</name><operator>.</operator><name>getProvider</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getClass</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></then></if>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * {@code Provider} of {@code SecureRandom} engines which pass through
   * all requests to the Linux PRNG.
   */</comment>
  <class><specifier>private</specifier> <specifier>static</specifier> class <name>LinuxPRNGSecureRandomProvider</name> <super><extends>extends <name>Provider</name></extends></super> <block>{

    <constructor><specifier>public</specifier> <name>LinuxPRNGSecureRandomProvider</name><parameter_list>()</parameter_list> <block>{
      <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><literal type="string">"LinuxPRNG"</literal></expr></argument>,
            <argument><expr><literal type="number">1.0</literal></expr></argument>,
            <argument><expr><literal type="string">"A Linux-specific random number provider that uses"</literal>
                <operator>+</operator> <literal type="string">" /dev/urandom"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="line">// Although /dev/urandom is not a SHA-1 PRNG, some apps</comment>
      <comment type="line">// explicitly request a SHA1PRNG SecureRandom and we thus need to</comment>
      <comment type="line">// prevent them from getting the default implementation whose output</comment>
      <comment type="line">// may have low entropy.</comment>
      <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"SecureRandom.SHA1PRNG"</literal></expr></argument>, <argument><expr><call><name><name>LinuxPRNGSecureRandom</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"SecureRandom.SHA1PRNG ImplementedIn"</literal></expr></argument>, <argument><expr><literal type="string">"Software"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
  }</block></class>

  <comment type="block" format="javadoc">/**
   * {@link SecureRandomSpi} which passes all requests to the Linux PRNG
   * ({@code /dev/urandom}).
   */</comment>
  <class><specifier>public</specifier> <specifier>static</specifier> class <name>LinuxPRNGSecureRandom</name> <super><extends>extends <name>SecureRandomSpi</name></extends></super> <block>{

        <comment type="block">/*
         * IMPLEMENTATION NOTE: Requests to generate bytes and to mix in a seed
         * are passed through to the Linux PRNG (/dev/urandom). Instances of
         * this class seed themselves by mixing in the current time, PID, UID,
         * build fingerprint, and hardware serial number (where available) into
         * Linux PRNG.
         *
         * Concurrency: Read requests to the underlying Linux PRNG are
         * serialized (on sLock) to ensure that multiple threads do not get
         * duplicated PRNG output.
         */</comment>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>File</name></type> <name>URANDOM_FILE</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><literal type="string">"/dev/urandom"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Object</name></type> <name>sLock</name> <init>= <expr><operator>new</operator> <call><name>Object</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Input stream for reading from Linux PRNG or {@code null} if not yet
     * opened.
     *
     * @GuardedBy("sLock")
     */</comment>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><name>DataInputStream</name></type> <name>sUrandomIn</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Output stream for writing to Linux PRNG or {@code null} if not yet
     * opened.
     *
     * @GuardedBy("sLock")
     */</comment>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><name>OutputStream</name></type> <name>sUrandomOut</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Whether this engine instance has been seeded. This is needed because
     * each instance needs to seed itself if the client does not explicitly
     * seed it.
     */</comment>
    <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>mSeeded</name></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>engineSetSeed</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes</name></decl></parameter>)</parameter_list> <block>{
      <try>try <block>{
        <decl_stmt><decl><type><name>OutputStream</name></type> <name>out</name></decl>;</decl_stmt>
        <synchronized>synchronized <init>(<expr><name>sLock</name></expr>)</init> <block>{
          <expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>getUrandomOutputStream</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></synchronized>
        <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
        <comment type="line">// On a small fraction of devices /dev/urandom is not writable.</comment>
        <comment type="line">// Log and ignore.</comment>
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Failed to mix seed into "</literal> <operator>+</operator> <name>URANDOM_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></catch> <finally>finally <block>{
        <expr_stmt><expr><name>mSeeded</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
      }</block></finally></try>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>engineNextBytes</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes</name></decl></parameter>)</parameter_list> <block>{
      <if>if <condition>(<expr><operator>!</operator><name>mSeeded</name></expr>)</condition><then> <block>{
        <comment type="line">// Mix in the device- and invocation-specific seed.</comment>
        <expr_stmt><expr><call><name>engineSetSeed</name><argument_list>(<argument><expr><call><name>generateSeed</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>

      <try>try <block>{
        <decl_stmt><decl><type><name>DataInputStream</name></type> <name>in</name></decl>;</decl_stmt>
        <synchronized>synchronized <init>(<expr><name>sLock</name></expr>)</init> <block>{
          <expr_stmt><expr><name>in</name> <operator>=</operator> <call><name>getUrandomInputStream</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></synchronized>
        <synchronized>synchronized <init>(<expr><name>in</name></expr>)</init> <block>{
          <expr_stmt><expr><call><name><name>in</name><operator>.</operator><name>readFully</name></name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></synchronized>
      }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
        <throw>throw <expr><operator>new</operator> <call><name>SecurityException</name><argument_list>(
            <argument><expr><literal type="string">"Failed to read from "</literal> <operator>+</operator> <name>URANDOM_FILE</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
      }</block></catch></try>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>engineGenerateSeed</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{
      <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>seed</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name>size</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>engineNextBytes</name><argument_list>(<argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>seed</name></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <type><name>DataInputStream</name></type> <name>getUrandomInputStream</name><parameter_list>()</parameter_list> <block>{
      <synchronized>synchronized <init>(<expr><name>sLock</name></expr>)</init> <block>{
        <if>if <condition>(<expr><name>sUrandomIn</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <comment type="line">// NOTE: Consider inserting a BufferedInputStream between</comment>
          <comment type="line">// DataInputStream and FileInputStream if you need higher</comment>
          <comment type="line">// PRNG output performance and can live with future PRNG</comment>
          <comment type="line">// output being pulled into this process prematurely.</comment>
          <try>try <block>{
            <expr_stmt><expr><name>sUrandomIn</name> <operator>=</operator> <operator>new</operator> <call><name>DataInputStream</name><argument_list>(
                <argument><expr><operator>new</operator> <call><name>FileInputStream</name><argument_list>(<argument><expr><name>URANDOM_FILE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <throw>throw <expr><operator>new</operator> <call><name>SecurityException</name><argument_list>(<argument><expr><literal type="string">"Failed to open "</literal>
                                            <operator>+</operator> <name>URANDOM_FILE</name> <operator>+</operator> <literal type="string">" for reading"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
          }</block></catch></try>
        }</block></then></if>
        <return>return <expr><name>sUrandomIn</name></expr>;</return>
      }</block></synchronized>
    }</block></function>

    <function><specifier>private</specifier> <type><name>OutputStream</name></type> <name>getUrandomOutputStream</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
      <synchronized>synchronized <init>(<expr><name>sLock</name></expr>)</init> <block>{
        <if>if <condition>(<expr><name>sUrandomOut</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>sUrandomOut</name> <operator>=</operator> <operator>new</operator> <call><name>FileOutputStream</name><argument_list>(<argument><expr><name>URANDOM_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>sUrandomOut</name></expr>;</return>
      }</block></synchronized>
    }</block></function>
  }</block></class>

  <comment type="block" format="javadoc">/**
   * Generates a device- and invocation-specific seed to be mixed into the
   * Linux PRNG.
   */</comment>
  <function><specifier>private</specifier> <specifier>static</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>generateSeed</name><parameter_list>()</parameter_list> <block>{
    <try>try <block>{
      <decl_stmt><decl><type><name>ByteArrayOutputStream</name></type> <name>seedBuffer</name> <init>= <expr><operator>new</operator> <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>DataOutputStream</name></type> <name>seedBufferOut</name> <init>=
          <expr><operator>new</operator> <call><name>DataOutputStream</name><argument_list>(<argument><expr><name>seedBuffer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>seedBufferOut</name><operator>.</operator><name>writeLong</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>seedBufferOut</name><operator>.</operator><name>writeLong</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>seedBufferOut</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><call><name><name>Process</name><operator>.</operator><name>myPid</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>seedBufferOut</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><call><name><name>Process</name><operator>.</operator><name>myUid</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>seedBufferOut</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>BUILD_FINGERPRINT_AND_DEVICE_SERIAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>seedBufferOut</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><call><name><name>seedBuffer</name><operator>.</operator><name>toByteArray</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>SecurityException</name><argument_list>(<argument><expr><literal type="string">"Failed to generate seed"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></catch></try>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Gets the hardware serial number of this device.
   *
   * @return serial number or {@code null} if not available.
   */</comment>
  <function><specifier>private</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>getDeviceSerialNumber</name><parameter_list>()</parameter_list> <block>{
    <comment type="line">// We're using the Reflection API because Build.SERIAL is only available</comment>
    <comment type="line">// since API Level 9 (Gingerbread, Android 2.3).</comment>
    <try>try <block>{
      <return>return <expr><operator>(</operator><name>String</name><operator>)</operator> <call><name><name>Build</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getField</name></name></name><argument_list>(<argument><expr><literal type="string">"SERIAL"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>ignored</name></decl></parameter>)</parameter_list> <block>{
      <return>return <expr><literal type="null">null</literal></expr>;</return>
    }</block></catch></try>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>getBuildFingerprintAndDeviceSerial</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>StringBuilder</name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>fingerprint</name> <init>= <expr><name><name>Build</name><operator>.</operator><name>FINGERPRINT</name></name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>fingerprint</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>fingerprint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <decl_stmt><decl><type><name>String</name></type> <name>serial</name> <init>= <expr><call><name>getDeviceSerialNumber</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>serial</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>serial</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <try>try <block>{
      <return>return <expr><call><name><name>result</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBytes</name><argument_list>(<argument><expr><literal type="string">"UTF-8"</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>UnsupportedEncodingException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"UTF-8 encoding not supported"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></catch></try>
  }</block></function>
}</block></class></unit>
