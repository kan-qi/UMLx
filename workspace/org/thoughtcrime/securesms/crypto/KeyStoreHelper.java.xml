<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\crypto\KeyStoreHelper.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>crypto</name></name>;</package>


<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>security</name><operator>.</operator><name>keystore</name><operator>.</operator><name>KeyGenParameterSpec</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>security</name><operator>.</operator><name>keystore</name><operator>.</operator><name>KeyProperties</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>RequiresApi</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Base64</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>fasterxml</name><operator>.</operator><name>jackson</name><operator>.</operator><name>annotation</name><operator>.</operator><name>JsonProperty</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>fasterxml</name><operator>.</operator><name>jackson</name><operator>.</operator><name>core</name><operator>.</operator><name>JsonGenerator</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>fasterxml</name><operator>.</operator><name>jackson</name><operator>.</operator><name>core</name><operator>.</operator><name>JsonParser</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>fasterxml</name><operator>.</operator><name>jackson</name><operator>.</operator><name>databind</name><operator>.</operator><name>DeserializationContext</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>fasterxml</name><operator>.</operator><name>jackson</name><operator>.</operator><name>databind</name><operator>.</operator><name>JsonDeserializer</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>fasterxml</name><operator>.</operator><name>jackson</name><operator>.</operator><name>databind</name><operator>.</operator><name>JsonSerializer</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>fasterxml</name><operator>.</operator><name>jackson</name><operator>.</operator><name>databind</name><operator>.</operator><name>SerializerProvider</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>fasterxml</name><operator>.</operator><name>jackson</name><operator>.</operator><name>databind</name><operator>.</operator><name>annotation</name><operator>.</operator><name>JsonDeserialize</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>fasterxml</name><operator>.</operator><name>jackson</name><operator>.</operator><name>databind</name><operator>.</operator><name>annotation</name><operator>.</operator><name>JsonSerialize</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>JsonUtils</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>InvalidAlgorithmParameterException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>InvalidKeyException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>KeyStore</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>KeyStoreException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>NoSuchAlgorithmException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>NoSuchProviderException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>UnrecoverableEntryException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>cert</name><operator>.</operator><name>CertificateException</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>BadPaddingException</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>Cipher</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>IllegalBlockSizeException</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>KeyGenerator</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>NoSuchPaddingException</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>SecretKey</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>spec</name><operator>.</operator><name>GCMParameterSpec</name></name>;</import>

<class><specifier>public</specifier> class <name>KeyStoreHelper</name> <block>{

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>ANDROID_KEY_STORE</name> <init>= <expr><literal type="string">"AndroidKeyStore"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_ALIAS</name>         <init>= <expr><literal type="string">"SignalSecret"</literal></expr></init></decl>;</decl_stmt>

  <function><annotation>@<name>RequiresApi</name><argument_list>(<argument><expr><name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>M</name></name></expr></argument>)</argument_list></annotation>
  <specifier>public</specifier> <specifier>static</specifier> <type><name>SealedData</name></type> <name>seal</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>byte</name><index>[]</index></name></type> <name>input</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>SecretKey</name></type> <name>secretKey</name> <init>= <expr><call><name>getOrCreateKeyStoreEntry</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <try>try <block>{
      <decl_stmt><decl><type><name>Cipher</name></type> <name>cipher</name> <init>= <expr><call><name><name>Cipher</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><literal type="string">"AES/GCM/NoPadding"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>cipher</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name><name>Cipher</name><operator>.</operator><name>ENCRYPT_MODE</name></name></expr></argument>, <argument><expr><name>secretKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>iv</name>   <init>= <expr><call><name><name>cipher</name><operator>.</operator><name>getIV</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name> <init>= <expr><call><name><name>cipher</name><operator>.</operator><name>doFinal</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <return>return <expr><operator>new</operator> <call><name>SealedData</name><argument_list>(<argument><expr><name>iv</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NoSuchAlgorithmException</name></type> | <type><name>NoSuchPaddingException</name></type> | <type><name>InvalidKeyException</name></type> | <type><name>IllegalBlockSizeException</name></type> | <type><name>BadPaddingException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></catch></try>
  }</block></function>

  <function><annotation>@<name>RequiresApi</name><argument_list>(<argument><expr><name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>M</name></name></expr></argument>)</argument_list></annotation>
  <specifier>public</specifier> <specifier>static</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>unseal</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>SealedData</name></type> <name>sealedData</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>SecretKey</name></type> <name>secretKey</name> <init>= <expr><call><name>getKeyStoreEntry</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <try>try <block>{
      <decl_stmt><decl><type><name>Cipher</name></type> <name>cipher</name> <init>= <expr><call><name><name>Cipher</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><literal type="string">"AES/GCM/NoPadding"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>cipher</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name><name>Cipher</name><operator>.</operator><name>DECRYPT_MODE</name></name></expr></argument>, <argument><expr><name>secretKey</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>GCMParameterSpec</name><argument_list>(<argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><name><name>sealedData</name><operator>.</operator><name>iv</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <return>return <expr><call><name><name>cipher</name><operator>.</operator><name>doFinal</name></name><argument_list>(<argument><expr><name><name>sealedData</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NoSuchAlgorithmException</name></type> | <type><name>NoSuchPaddingException</name></type> | <type><name>InvalidKeyException</name></type> | <type><name>InvalidAlgorithmParameterException</name></type> | <type><name>IllegalBlockSizeException</name></type> | <type><name>BadPaddingException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></catch></try>
  }</block></function>

  <function><annotation>@<name>RequiresApi</name><argument_list>(<argument><expr><name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>M</name></name></expr></argument>)</argument_list></annotation>
  <specifier>private</specifier> <specifier>static</specifier> <type><name>SecretKey</name></type> <name>getOrCreateKeyStoreEntry</name><parameter_list>()</parameter_list> <block>{
    <if>if <condition>(<expr><call><name>hasKeyStoreEntry</name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><call><name>getKeyStoreEntry</name><argument_list>()</argument_list></call></expr>;</return></block></then>
    <else>else                    <block type="pseudo"><return>return <expr><call><name>createKeyStoreEntry</name><argument_list>()</argument_list></call></expr>;</return></block></else></if>
  }</block></function>

  <function><annotation>@<name>RequiresApi</name><argument_list>(<argument><expr><name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>M</name></name></expr></argument>)</argument_list></annotation>
  <specifier>private</specifier> <specifier>static</specifier> <type><name>SecretKey</name></type> <name>createKeyStoreEntry</name><parameter_list>()</parameter_list> <block>{
    <try>try <block>{
      <decl_stmt><decl><type><name>KeyGenerator</name></type> <name>keyGenerator</name> <init>= <expr><call><name><name>KeyGenerator</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name><name>KeyProperties</name><operator>.</operator><name>KEY_ALGORITHM_AES</name></name></expr></argument>, <argument><expr><name>ANDROID_KEY_STORE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>KeyGenParameterSpec</name></type> <name>keyGenParameterSpec</name> <init>= <expr><operator>new</operator> <call><name><name>KeyGenParameterSpec</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><name>KEY_ALIAS</name></expr></argument>, <argument><expr><name><name>KeyProperties</name><operator>.</operator><name>PURPOSE_ENCRYPT</name></name> <operator>|</operator> <name><name>KeyProperties</name><operator>.</operator><name>PURPOSE_DECRYPT</name></name></expr></argument>)</argument_list></call>
          <operator>.</operator><call><name>setBlockModes</name><argument_list>(<argument><expr><name><name>KeyProperties</name><operator>.</operator><name>BLOCK_MODE_GCM</name></name></expr></argument>)</argument_list></call>
          <operator>.</operator><call><name>setEncryptionPaddings</name><argument_list>(<argument><expr><name><name>KeyProperties</name><operator>.</operator><name>ENCRYPTION_PADDING_NONE</name></name></expr></argument>)</argument_list></call>
          <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name><name>keyGenerator</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name>keyGenParameterSpec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <return>return <expr><call><name><name>keyGenerator</name><operator>.</operator><name>generateKey</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NoSuchAlgorithmException</name></type> | <type><name>NoSuchProviderException</name></type> | <type><name>InvalidAlgorithmParameterException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></catch></try>
  }</block></function>

  <function><annotation>@<name>RequiresApi</name><argument_list>(<argument><expr><name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>M</name></name></expr></argument>)</argument_list></annotation>
  <specifier>private</specifier> <specifier>static</specifier> <type><name>SecretKey</name></type> <name>getKeyStoreEntry</name><parameter_list>()</parameter_list> <block>{
    <try>try <block>{
      <decl_stmt><decl><type><name>KeyStore</name></type> <name>keyStore</name> <init>= <expr><call><name><name>KeyStore</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>ANDROID_KEY_STORE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>keyStore</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <return>return <expr><operator>(</operator><operator>(</operator><name><name>KeyStore</name><operator>.</operator><name>SecretKeyEntry</name></name><operator>)</operator> <call><name><name>keyStore</name><operator>.</operator><name>getEntry</name></name><argument_list>(<argument><expr><name>KEY_ALIAS</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>getSecretKey</name><argument_list>()</argument_list></call></expr>;</return>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>KeyStoreException</name></type> | <type><name>IOException</name></type> | <type><name>NoSuchAlgorithmException</name></type> | <type><name>CertificateException</name></type> | <type><name>UnrecoverableEntryException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></catch></try>
  }</block></function>

  <function><annotation>@<name>RequiresApi</name><argument_list>(<argument><expr><name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>M</name></name></expr></argument>)</argument_list></annotation>
  <specifier>private</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>hasKeyStoreEntry</name><parameter_list>()</parameter_list> <block>{
    <try>try <block>{
      <decl_stmt><decl><type><name>KeyStore</name></type> <name>ks</name> <init>= <expr><call><name><name>KeyStore</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>ANDROID_KEY_STORE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>ks</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <return>return <expr><call><name><name>ks</name><operator>.</operator><name>containsAlias</name></name><argument_list>(<argument><expr><name>KEY_ALIAS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>ks</name><operator>.</operator><name>entryInstanceOf</name></name><argument_list>(<argument><expr><name>KEY_ALIAS</name></expr></argument>, <argument><expr><name><name>KeyStore</name><operator>.</operator><name>SecretKeyEntry</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>KeyStoreException</name></type> | <type><name>IOException</name></type> | <type><name>NoSuchAlgorithmException</name></type> | <type><name>CertificateException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></catch></try>
  }</block></function>

  <class><specifier>public</specifier> <specifier>static</specifier> class <name>SealedData</name> <block>{

    <decl_stmt><decl><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unused"</literal></expr></argument>)</argument_list></annotation>
    <specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>SealedData</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><annotation>@<name>JsonProperty</name></annotation>
    <annotation>@<name>JsonSerialize</name><argument_list>(<argument><expr><name>using</name> <operator>=</operator> <name><name>ByteArraySerializer</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></annotation>
    <annotation>@<name>JsonDeserialize</name><argument_list>(<argument><expr><name>using</name> <operator>=</operator> <name><name>ByteArrayDeserializer</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></annotation>
    <specifier>private</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>iv</name></decl>;</decl_stmt>

    <decl_stmt><decl><annotation>@<name>JsonProperty</name></annotation>
    <annotation>@<name>JsonSerialize</name><argument_list>(<argument><expr><name>using</name> <operator>=</operator> <name><name>ByteArraySerializer</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></annotation>
    <annotation>@<name>JsonDeserialize</name><argument_list>(<argument><expr><name>using</name> <operator>=</operator> <name><name>ByteArrayDeserializer</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></annotation>
    <specifier>private</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>data</name></decl>;</decl_stmt>

    <constructor><name>SealedData</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>byte</name><index>[]</index></name></type> <name>iv</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>iv</name></name>   <operator>=</operator> <name>iv</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unused"</literal></expr></argument>)</argument_list></annotation>
    <specifier>public</specifier> <name>SealedData</name><parameter_list>()</parameter_list> <block>{}</block></constructor>

    <function><specifier>public</specifier> <type><name>String</name></type> <name>serialize</name><parameter_list>()</parameter_list> <block>{
      <try>try <block>{
        <return>return <expr><call><name><name>JsonUtils</name><operator>.</operator><name>toJson</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
      }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
        <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
      }</block></catch></try>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>SealedData</name></type> <name>fromString</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
      <try>try <block>{
        <return>return <expr><call><name><name>JsonUtils</name><operator>.</operator><name>fromJson</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>SealedData</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</return>
      }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
        <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
      }</block></catch></try>
    }</block></function>

    <class><specifier>private</specifier> <specifier>static</specifier> class <name>ByteArraySerializer</name> <super><extends>extends <name><name>JsonSerializer</name><argument_list type="generic">&lt;<argument><name><name>byte</name><index>[]</index></name></argument>&gt;</argument_list></name></extends></super> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <specifier>public</specifier> <type><name>void</name></type> <name>serialize</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>JsonGenerator</name></type> <name>gen</name></decl></parameter>, <parameter><decl><type><name>SerializerProvider</name></type> <name>serializers</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>gen</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>Base64</name><operator>.</operator><name>encodeToString</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>Base64</name><operator>.</operator><name>NO_WRAP</name></name> <operator>|</operator> <name><name>Base64</name><operator>.</operator><name>NO_PADDING</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></function>
    }</block></class>

    <class><specifier>private</specifier> <specifier>static</specifier> class <name>ByteArrayDeserializer</name> <super><extends>extends <name><name>JsonDeserializer</name><argument_list type="generic">&lt;<argument><name><name>byte</name><index>[]</index></name></argument>&gt;</argument_list></name></extends></super> <block>{

      <function><annotation>@<name>Override</name></annotation>
      <specifier>public</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>deserialize</name><parameter_list>(<parameter><decl><type><name>JsonParser</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>DeserializationContext</name></type> <name>ctxt</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name><name>Base64</name><operator>.</operator><name>decode</name></name><argument_list>(<argument><expr><call><name><name>p</name><operator>.</operator><name>getValueAsString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Base64</name><operator>.</operator><name>NO_WRAP</name></name> <operator>|</operator> <name><name>Base64</name><operator>.</operator><name>NO_PADDING</name></name></expr></argument>)</argument_list></call></expr>;</return>
      }</block></function>
    }</block></class>

  }</block></class>

}</block></class>
</unit>
