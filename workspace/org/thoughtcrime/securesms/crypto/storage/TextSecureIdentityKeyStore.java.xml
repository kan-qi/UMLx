<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\crypto\storage\TextSecureIdentityKeyStore.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>crypto</name><operator>.</operator><name>storage</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>logging</name><operator>.</operator><name>Log</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>crypto</name><operator>.</operator><name>IdentityKeyUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>crypto</name><operator>.</operator><name>SessionUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>Address</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>DatabaseFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>IdentityDatabase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>IdentityDatabase</name><operator>.</operator><name>IdentityRecord</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>IdentityDatabase</name><operator>.</operator><name>VerifiedStatus</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>recipients</name><operator>.</operator><name>Recipient</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>IdentityUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>TextSecurePreferences</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>IdentityKey</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>IdentityKeyPair</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>SignalProtocolAddress</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>state</name><operator>.</operator><name>IdentityKeyStore</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>util</name><operator>.</operator><name>guava</name><operator>.</operator><name>Optional</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>

<class><specifier>public</specifier> class <name>TextSecureIdentityKeyStore</name> <super><implements>implements <name>IdentityKeyStore</name></implements></super> <block>{

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>TIMESTAMP_THRESHOLD_SECONDS</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>TextSecureIdentityKeyStore</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Object</name></type> <name>LOCK</name> <init>= <expr><operator>new</operator> <call><name>Object</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>TextSecureIdentityKeyStore</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>context</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>
  }</block></constructor>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>IdentityKeyPair</name></type> <name>getIdentityKeyPair</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name><name>IdentityKeyUtil</name><operator>.</operator><name>getIdentityKeyPair</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>int</name></type> <name>getLocalRegistrationId</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>getLocalRegistrationId</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>saveIdentity</name><parameter_list>(<parameter><decl><type><name>SignalProtocolAddress</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><name>IdentityKey</name></type> <name>identityKey</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>nonBlockingApproval</name></decl></parameter>)</parameter_list> <block>{
    <synchronized>synchronized <init>(<expr><name>LOCK</name></expr>)</init> <block>{
      <decl_stmt><decl><type><name>IdentityDatabase</name></type>         <name>identityDatabase</name> <init>= <expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getIdentityDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Address</name></type>                  <name>signalAddress</name>    <init>= <expr><call><name><name>Address</name><operator>.</operator><name>fromExternal</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>address</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>IdentityRecord</name></argument>&gt;</argument_list></name></type> <name>identityRecord</name>   <init>= <expr><call><name><name>identityDatabase</name><operator>.</operator><name>getIdentity</name></name><argument_list>(<argument><expr><name>signalAddress</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><operator>!</operator><call><name><name>identityRecord</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Saving new identity..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>identityDatabase</name><operator>.</operator><name>saveIdentity</name></name><argument_list>(<argument><expr><name>signalAddress</name></expr></argument>, <argument><expr><name>identityKey</name></expr></argument>, <argument><expr><name><name>VerifiedStatus</name><operator>.</operator><name>DEFAULT</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>nonBlockingApproval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
      }</block></then></if>

      <if>if <condition>(<expr><operator>!</operator><call><name><name>identityRecord</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getIdentityKey</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>identityKey</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Replacing existing identity..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>VerifiedStatus</name></type> <name>verifiedStatus</name></decl>;</decl_stmt>

        <if>if <condition>(<expr><call><name><name>identityRecord</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getVerifiedStatus</name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>VerifiedStatus</name><operator>.</operator><name>VERIFIED</name></name> <operator>||</operator>
            <call><name><name>identityRecord</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getVerifiedStatus</name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>VerifiedStatus</name><operator>.</operator><name>UNVERIFIED</name></name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name>verifiedStatus</name> <operator>=</operator> <name><name>VerifiedStatus</name><operator>.</operator><name>UNVERIFIED</name></name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><name>verifiedStatus</name> <operator>=</operator> <name><name>VerifiedStatus</name><operator>.</operator><name>DEFAULT</name></name></expr>;</expr_stmt>
        }</block></else></if>

        <expr_stmt><expr><call><name><name>identityDatabase</name><operator>.</operator><name>saveIdentity</name></name><argument_list>(<argument><expr><name>signalAddress</name></expr></argument>, <argument><expr><name>identityKey</name></expr></argument>, <argument><expr><name>verifiedStatus</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>nonBlockingApproval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>IdentityUtil</name><operator>.</operator><name>markIdentityUpdate</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>Recipient</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>signalAddress</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SessionUtil</name><operator>.</operator><name>archiveSiblingSessions</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
      }</block></then></if>

      <if>if <condition>(<expr><call><name>isNonBlockingApprovalRequired</name><argument_list>(<argument><expr><call><name><name>identityRecord</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Setting approval status..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>identityDatabase</name><operator>.</operator><name>setApproval</name></name><argument_list>(<argument><expr><name>signalAddress</name></expr></argument>, <argument><expr><name>nonBlockingApproval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
      }</block></then></if>

      <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    }</block></synchronized>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>boolean</name></type> <name>saveIdentity</name><parameter_list>(<parameter><decl><type><name>SignalProtocolAddress</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><name>IdentityKey</name></type> <name>identityKey</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>saveIdentity</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>identityKey</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>boolean</name></type> <name>isTrustedIdentity</name><parameter_list>(<parameter><decl><type><name>SignalProtocolAddress</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><name>IdentityKey</name></type> <name>identityKey</name></decl></parameter>, <parameter><decl><type><name>Direction</name></type> <name>direction</name></decl></parameter>)</parameter_list> <block>{
    <synchronized>synchronized <init>(<expr><name>LOCK</name></expr>)</init> <block>{
      <decl_stmt><decl><type><name>IdentityDatabase</name></type> <name>identityDatabase</name> <init>= <expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getIdentityDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>String</name></type>           <name>ourNumber</name>        <init>= <expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>getLocalNumber</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Address</name></type>          <name>theirAddress</name>     <init>= <expr><call><name><name>Address</name><operator>.</operator><name>fromExternal</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>address</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><call><name><name>ourNumber</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>address</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>Address</name><operator>.</operator><name>fromSerialized</name></name><argument_list>(<argument><expr><name>ourNumber</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>theirAddress</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><call><name><name>identityKey</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>IdentityKeyUtil</name><operator>.</operator><name>getIdentityKey</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
      }</block></then></if>

      <switch>switch <condition>(<expr><name>direction</name></expr>)</condition> <block>{
        <case>case <expr><name>SENDING</name></expr>:</case>   <return>return <expr><call><name>isTrustedForSending</name><argument_list>(<argument><expr><name>identityKey</name></expr></argument>, <argument><expr><call><name><name>identityDatabase</name><operator>.</operator><name>getIdentity</name></name><argument_list>(<argument><expr><name>theirAddress</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name>RECEIVING</name></expr>:</case> <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        <default>default:</default>        <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><literal type="string">"Unknown direction: "</literal> <operator>+</operator> <name>direction</name></expr></argument>)</argument_list></call></expr>;</throw>
      }</block></switch>
    }</block></synchronized>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>IdentityKey</name></type> <name>getIdentity</name><parameter_list>(<parameter><decl><type><name>SignalProtocolAddress</name></type> <name>address</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>IdentityRecord</name></argument>&gt;</argument_list></name></type> <name>record</name> <init>= <expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getIdentityDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getIdentity</name><argument_list>(<argument><expr><call><name><name>Address</name><operator>.</operator><name>fromSerialized</name></name><argument_list>(<argument><expr><call><name><name>address</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name><name>record</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><call><name><name>record</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getIdentityKey</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></then> <else>else <block>{
      <return>return <expr><literal type="null">null</literal></expr>;</return>
    }</block></else></if>
  }</block></function>

  <function><specifier>private</specifier> <type><name>boolean</name></type> <name>isTrustedForSending</name><parameter_list>(<parameter><decl><type><name>IdentityKey</name></type> <name>identityKey</name></decl></parameter>, <parameter><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>IdentityRecord</name></argument>&gt;</argument_list></name></type> <name>identityRecord</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><operator>!</operator><call><name><name>identityRecord</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Nothing here, returning true..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><operator>!</operator><call><name><name>identityKey</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>identityRecord</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getIdentityKey</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Identity keys don't match..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><call><name><name>identityRecord</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getVerifiedStatus</name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>VerifiedStatus</name><operator>.</operator><name>UNVERIFIED</name></name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Needs unverified approval!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><call><name>isNonBlockingApprovalRequired</name><argument_list>(<argument><expr><call><name><name>identityRecord</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Needs non-blocking approval!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    }</block></then></if>

    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>boolean</name></type> <name>isNonBlockingApprovalRequired</name><parameter_list>(<parameter><decl><type><name>IdentityRecord</name></type> <name>identityRecord</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><operator>!</operator><call><name><name>identityRecord</name><operator>.</operator><name>isFirstUse</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
           <call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>identityRecord</name><operator>.</operator><name>getTimestamp</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>TimeUnit</name><operator>.</operator><name>SECONDS</name><operator>.</operator><name>toMillis</name></name><argument_list>(<argument><expr><name>TIMESTAMP_THRESHOLD_SECONDS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
           <operator>!</operator><call><name><name>identityRecord</name><operator>.</operator><name>isApprovedNonBlocking</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>
}</block></class>
</unit>
