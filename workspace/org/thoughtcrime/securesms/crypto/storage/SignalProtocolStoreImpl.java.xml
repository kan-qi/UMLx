<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\crypto\storage\SignalProtocolStoreImpl.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>crypto</name><operator>.</operator><name>storage</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>IdentityKey</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>IdentityKeyPair</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>InvalidKeyIdException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>SignalProtocolAddress</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>state</name><operator>.</operator><name>IdentityKeyStore</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>state</name><operator>.</operator><name>PreKeyRecord</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>state</name><operator>.</operator><name>PreKeyStore</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>state</name><operator>.</operator><name>SessionRecord</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>state</name><operator>.</operator><name>SessionStore</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>state</name><operator>.</operator><name>SignalProtocolStore</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>state</name><operator>.</operator><name>SignedPreKeyRecord</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>state</name><operator>.</operator><name>SignedPreKeyStore</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<class><specifier>public</specifier> class <name>SignalProtocolStoreImpl</name> <super><implements>implements <name>SignalProtocolStore</name></implements></super> <block>{

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>PreKeyStore</name></type>       <name>preKeyStore</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>SignedPreKeyStore</name></type> <name>signedPreKeyStore</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>IdentityKeyStore</name></type>  <name>identityKeyStore</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>SessionStore</name></type>      <name>sessionStore</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>SignalProtocolStoreImpl</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>preKeyStore</name></name>       <operator>=</operator> <operator>new</operator> <call><name>TextSecurePreKeyStore</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>signedPreKeyStore</name></name> <operator>=</operator> <operator>new</operator> <call><name>TextSecurePreKeyStore</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>identityKeyStore</name></name>  <operator>=</operator> <operator>new</operator> <call><name>TextSecureIdentityKeyStore</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>sessionStore</name></name>      <operator>=</operator> <operator>new</operator> <call><name>TextSecureSessionStore</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>IdentityKeyPair</name></type> <name>getIdentityKeyPair</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name><name>identityKeyStore</name><operator>.</operator><name>getIdentityKeyPair</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>int</name></type> <name>getLocalRegistrationId</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name><name>identityKeyStore</name><operator>.</operator><name>getLocalRegistrationId</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>boolean</name></type> <name>saveIdentity</name><parameter_list>(<parameter><decl><type><name>SignalProtocolAddress</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><name>IdentityKey</name></type> <name>identityKey</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>identityKeyStore</name><operator>.</operator><name>saveIdentity</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>identityKey</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>boolean</name></type> <name>isTrustedIdentity</name><parameter_list>(<parameter><decl><type><name>SignalProtocolAddress</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><name>IdentityKey</name></type> <name>identityKey</name></decl></parameter>, <parameter><decl><type><name>Direction</name></type> <name>direction</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>identityKeyStore</name><operator>.</operator><name>isTrustedIdentity</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>identityKey</name></expr></argument>, <argument><expr><name>direction</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>IdentityKey</name></type> <name>getIdentity</name><parameter_list>(<parameter><decl><type><name>SignalProtocolAddress</name></type> <name>address</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>identityKeyStore</name><operator>.</operator><name>getIdentity</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>PreKeyRecord</name></type> <name>loadPreKey</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>preKeyId</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>InvalidKeyIdException</name></expr></argument></throws> <block>{
    <return>return <expr><call><name><name>preKeyStore</name><operator>.</operator><name>loadPreKey</name></name><argument_list>(<argument><expr><name>preKeyId</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>storePreKey</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>preKeyId</name></decl></parameter>, <parameter><decl><type><name>PreKeyRecord</name></type> <name>record</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>preKeyStore</name><operator>.</operator><name>storePreKey</name></name><argument_list>(<argument><expr><name>preKeyId</name></expr></argument>, <argument><expr><name>record</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>boolean</name></type> <name>containsPreKey</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>preKeyId</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>preKeyStore</name><operator>.</operator><name>containsPreKey</name></name><argument_list>(<argument><expr><name>preKeyId</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>removePreKey</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>preKeyId</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>preKeyStore</name><operator>.</operator><name>removePreKey</name></name><argument_list>(<argument><expr><name>preKeyId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>SessionRecord</name></type> <name>loadSession</name><parameter_list>(<parameter><decl><type><name>SignalProtocolAddress</name></type> <name>axolotlAddress</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>sessionStore</name><operator>.</operator><name>loadSession</name></name><argument_list>(<argument><expr><name>axolotlAddress</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>getSubDeviceSessions</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>number</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>sessionStore</name><operator>.</operator><name>getSubDeviceSessions</name></name><argument_list>(<argument><expr><name>number</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>storeSession</name><parameter_list>(<parameter><decl><type><name>SignalProtocolAddress</name></type> <name>axolotlAddress</name></decl></parameter>, <parameter><decl><type><name>SessionRecord</name></type> <name>record</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>sessionStore</name><operator>.</operator><name>storeSession</name></name><argument_list>(<argument><expr><name>axolotlAddress</name></expr></argument>, <argument><expr><name>record</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>boolean</name></type> <name>containsSession</name><parameter_list>(<parameter><decl><type><name>SignalProtocolAddress</name></type> <name>axolotlAddress</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>sessionStore</name><operator>.</operator><name>containsSession</name></name><argument_list>(<argument><expr><name>axolotlAddress</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>deleteSession</name><parameter_list>(<parameter><decl><type><name>SignalProtocolAddress</name></type> <name>axolotlAddress</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>sessionStore</name><operator>.</operator><name>deleteSession</name></name><argument_list>(<argument><expr><name>axolotlAddress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>deleteAllSessions</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>number</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>sessionStore</name><operator>.</operator><name>deleteAllSessions</name></name><argument_list>(<argument><expr><name>number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>SignedPreKeyRecord</name></type> <name>loadSignedPreKey</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>signedPreKeyId</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>InvalidKeyIdException</name></expr></argument></throws> <block>{
    <return>return <expr><call><name><name>signedPreKeyStore</name><operator>.</operator><name>loadSignedPreKey</name></name><argument_list>(<argument><expr><name>signedPreKeyId</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>SignedPreKeyRecord</name></argument>&gt;</argument_list></name></type> <name>loadSignedPreKeys</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name><name>signedPreKeyStore</name><operator>.</operator><name>loadSignedPreKeys</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>storeSignedPreKey</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>signedPreKeyId</name></decl></parameter>, <parameter><decl><type><name>SignedPreKeyRecord</name></type> <name>record</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>signedPreKeyStore</name><operator>.</operator><name>storeSignedPreKey</name></name><argument_list>(<argument><expr><name>signedPreKeyId</name></expr></argument>, <argument><expr><name>record</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>boolean</name></type> <name>containsSignedPreKey</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>signedPreKeyId</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>signedPreKeyStore</name><operator>.</operator><name>containsSignedPreKey</name></name><argument_list>(<argument><expr><name>signedPreKeyId</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>removeSignedPreKey</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>signedPreKeyId</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>signedPreKeyStore</name><operator>.</operator><name>removeSignedPreKey</name></name><argument_list>(<argument><expr><name>signedPreKeyId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>
}</block></class>
</unit>
