<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\crypto\storage\TextSecurePreKeyStore.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>crypto</name><operator>.</operator><name>storage</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>DatabaseFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>InvalidKeyIdException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>state</name><operator>.</operator><name>PreKeyRecord</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>state</name><operator>.</operator><name>PreKeyStore</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>state</name><operator>.</operator><name>SignedPreKeyRecord</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>state</name><operator>.</operator><name>SignedPreKeyStore</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<class><specifier>public</specifier> class <name>TextSecurePreKeyStore</name> <super><implements>implements <name>PreKeyStore</name>, <name>SignedPreKeyStore</name></implements></super> <block>{

  <decl_stmt><decl><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unused"</literal></expr></argument>)</argument_list></annotation>
  <specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>TextSecurePreKeyStore</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Object</name></type> <name>FILE_LOCK</name> <init>= <expr><operator>new</operator> <call><name>Object</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><annotation>@<name>NonNull</name></annotation>
  <specifier>private</specifier> <type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>TextSecurePreKeyStore</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>context</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>
  }</block></constructor>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>PreKeyRecord</name></type> <name>loadPreKey</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>preKeyId</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>InvalidKeyIdException</name></expr></argument></throws> <block>{
    <synchronized>synchronized <init>(<expr><name>FILE_LOCK</name></expr>)</init> <block>{
      <decl_stmt><decl><type><name>PreKeyRecord</name></type> <name>preKeyRecord</name> <init>= <expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getPreKeyDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getPreKey</name><argument_list>(<argument><expr><name>preKeyId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><name>preKeyRecord</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name>InvalidKeyIdException</name><argument_list>(<argument><expr><literal type="string">"No such key: "</literal> <operator>+</operator> <name>preKeyId</name></expr></argument>)</argument_list></call></expr>;</throw></block></then>
      <else>else                      <block type="pseudo"><return>return <expr><name>preKeyRecord</name></expr>;</return></block></else></if>
    }</block></synchronized>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>SignedPreKeyRecord</name></type> <name>loadSignedPreKey</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>signedPreKeyId</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>InvalidKeyIdException</name></expr></argument></throws> <block>{
    <synchronized>synchronized <init>(<expr><name>FILE_LOCK</name></expr>)</init> <block>{
      <decl_stmt><decl><type><name>SignedPreKeyRecord</name></type> <name>signedPreKeyRecord</name> <init>= <expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getSignedPreKeyDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getSignedPreKey</name><argument_list>(<argument><expr><name>signedPreKeyId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><name>signedPreKeyRecord</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name>InvalidKeyIdException</name><argument_list>(<argument><expr><literal type="string">"No such signed prekey: "</literal> <operator>+</operator> <name>signedPreKeyId</name></expr></argument>)</argument_list></call></expr>;</throw></block></then>
      <else>else                            <block type="pseudo"><return>return <expr><name>signedPreKeyRecord</name></expr>;</return></block></else></if>
    }</block></synchronized>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>SignedPreKeyRecord</name></argument>&gt;</argument_list></name></type> <name>loadSignedPreKeys</name><parameter_list>()</parameter_list> <block>{
    <synchronized>synchronized <init>(<expr><name>FILE_LOCK</name></expr>)</init> <block>{
      <return>return <expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getSignedPreKeyDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getAllSignedPreKeys</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></synchronized>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>storePreKey</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>preKeyId</name></decl></parameter>, <parameter><decl><type><name>PreKeyRecord</name></type> <name>record</name></decl></parameter>)</parameter_list> <block>{
    <synchronized>synchronized <init>(<expr><name>FILE_LOCK</name></expr>)</init> <block>{
      <expr_stmt><expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getPreKeyDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>insertPreKey</name><argument_list>(<argument><expr><name>preKeyId</name></expr></argument>, <argument><expr><name>record</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></synchronized>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>storeSignedPreKey</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>signedPreKeyId</name></decl></parameter>, <parameter><decl><type><name>SignedPreKeyRecord</name></type> <name>record</name></decl></parameter>)</parameter_list> <block>{
    <synchronized>synchronized <init>(<expr><name>FILE_LOCK</name></expr>)</init> <block>{
      <expr_stmt><expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getSignedPreKeyDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>insertSignedPreKey</name><argument_list>(<argument><expr><name>signedPreKeyId</name></expr></argument>, <argument><expr><name>record</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></synchronized>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>boolean</name></type> <name>containsPreKey</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>preKeyId</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getPreKeyDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getPreKey</name><argument_list>(<argument><expr><name>preKeyId</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>boolean</name></type> <name>containsSignedPreKey</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>signedPreKeyId</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getSignedPreKeyDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getSignedPreKey</name><argument_list>(<argument><expr><name>signedPreKeyId</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>removePreKey</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>preKeyId</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getPreKeyDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>removePreKey</name><argument_list>(<argument><expr><name>preKeyId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>removeSignedPreKey</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>signedPreKeyId</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getSignedPreKeyDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>removeSignedPreKey</name><argument_list>(<argument><expr><name>signedPreKeyId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>
  
}</block></class>
</unit>
