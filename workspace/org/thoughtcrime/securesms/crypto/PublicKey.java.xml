<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\crypto\PublicKey.java"><comment type="block" format="javadoc">/** 
 * Copyright (C) 2011 Whisper Systems
 * Copyright (C) 2013 Open Whisper Systems
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>crypto</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>logging</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>Hex</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>Util</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>InvalidKeyException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>ecc</name><operator>.</operator><name>Curve</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>ecc</name><operator>.</operator><name>ECPublicKey</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>Conversions</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>MessageDigest</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>NoSuchAlgorithmException</name></name>;</import>

<class><specifier>public</specifier> class <name>PublicKey</name> <block>{

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>PublicKey</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>KEY_SIZE</name> <init>= <expr><literal type="number">3</literal> <operator>+</operator> <name><name>ECPublicKey</name><operator>.</operator><name>KEY_SIZE</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>ECPublicKey</name></type> <name>publicKey</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>id</name></decl>;</decl_stmt>
	
  <constructor><specifier>public</specifier> <name>PublicKey</name><parameter_list>(<parameter><decl><type><name>PublicKey</name></type> <name>publicKey</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>id</name></name>        <operator>=</operator> <name><name>publicKey</name><operator>.</operator><name>id</name></name></expr>;</expr_stmt>
		
    <comment type="line">// FIXME :: This not strictly an accurate copy constructor.</comment>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>publicKey</name></name> <operator>=</operator> <name><name>publicKey</name><operator>.</operator><name>publicKey</name></name></expr>;</expr_stmt>
  }</block></constructor>
	
  <constructor><specifier>public</specifier> <name>PublicKey</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>ECPublicKey</name></type> <name>publicKey</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>publicKey</name></name> <operator>=</operator> <name>publicKey</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>id</name></name>        <operator>=</operator> <name>id</name></expr>;</expr_stmt>
  }</block></constructor>

  <constructor><specifier>public</specifier> <name>PublicKey</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>InvalidKeyException</name></expr></argument></throws> <block>{
    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"PublicKey Length: "</literal> <operator>+</operator> <operator>(</operator><name><name>bytes</name><operator>.</operator><name>length</name></name> <operator>-</operator> <name>offset</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><operator>(</operator><name><name>bytes</name><operator>.</operator><name>length</name></name> <operator>-</operator> <name>offset</name><operator>)</operator> <operator>&lt;</operator> <name>KEY_SIZE</name></expr>)</condition><then>
      <block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name>InvalidKeyException</name><argument_list>(<argument><expr><literal type="string">"Provided bytes are too short."</literal></expr></argument>)</argument_list></call></expr>;</throw></block></then></if>

    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>id</name></name>        <operator>=</operator> <call><name><name>Conversions</name><operator>.</operator><name>byteArrayToMedium</name></name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>publicKey</name></name> <operator>=</operator> <call><name><name>Curve</name><operator>.</operator><name>decodePoint</name></name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>offset</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <constructor><specifier>public</specifier> <name>PublicKey</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>InvalidKeyException</name></expr></argument></throws> <block>{
    <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <function><specifier>public</specifier> <type><name>int</name></type> <name>getType</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name><name>publicKey</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>
	
  <function><specifier>public</specifier> <type><name>void</name></type> <name>setId</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>int</name></type> <name>getId</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>id</name></expr>;</return>
  }</block></function>
	
  <function><specifier>public</specifier> <type><name>ECPublicKey</name></type> <name>getKey</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>publicKey</name></expr>;</return>
  }</block></function>
	
  <function><specifier>public</specifier> <type><name>String</name></type> <name>getFingerprint</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name><name>Hex</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name>getFingerprintBytes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>
	
  <function><specifier>public</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>getFingerprintBytes</name><parameter_list>()</parameter_list> <block>{
    <try>try <block>{
      <decl_stmt><decl><type><name>MessageDigest</name></type> <name>md</name> <init>= <expr><call><name><name>MessageDigest</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><literal type="string">"SHA-1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr><call><name><name>md</name><operator>.</operator><name>digest</name></name><argument_list>(<argument><expr><call><name>serialize</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NoSuchAlgorithmException</name></type> <name>nsae</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><literal type="string">"LocalKeyPair"</literal></expr></argument>, <argument><expr><name>nsae</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"SHA-1 isn't supported!"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></catch></try>
  }</block></function>
	
  <function><specifier>public</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>serialize</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>keyIdBytes</name>      <init>= <expr><call><name><name>Conversions</name><operator>.</operator><name>mediumToByteArray</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>serializedPoint</name> <init>= <expr><call><name><name>publicKey</name><operator>.</operator><name>serialize</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Serializing public key point: "</literal> <operator>+</operator> <call><name><name>Hex</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>serializedPoint</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><call><name><name>Util</name><operator>.</operator><name>combine</name></name><argument_list>(<argument><expr><name>keyIdBytes</name></expr></argument>, <argument><expr><name>serializedPoint</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>
}</block></class>
</unit>
