<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\sms\TelephonyServiceState.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>sms</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Looper</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>telephony</name><operator>.</operator><name>PhoneStateListener</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>telephony</name><operator>.</operator><name>ServiceState</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>telephony</name><operator>.</operator><name>TelephonyManager</name></name>;</import>

<class><specifier>public</specifier> class <name>TelephonyServiceState</name> <block>{

  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isConnected</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>ListenThread</name></type> <name>listenThread</name> <init>= <expr><operator>new</operator> <call><name>ListenThread</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>listenThread</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><call><name><name>listenThread</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>ListenThread</name> <super><extends>extends <name>Thread</name></extends></super> <block>{

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>complete</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>result</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>ListenThread</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>context</name></name> <operator>=</operator> <call><name><name>context</name><operator>.</operator><name>getApplicationContext</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
      <decl_stmt><decl><type><name>Looper</name></type>         <name>looper</name>   <init>= <expr><call><name>initializeLooper</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>ListenCallback</name></type> <name>callback</name> <init>= <expr><operator>new</operator> <call><name>ListenCallback</name><argument_list>(<argument><expr><name>looper</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>TelephonyManager</name></type> <name>telephonyManager</name> <init>= <expr><operator>(</operator><name>TelephonyManager</name><operator>)</operator><call><name><name>context</name><operator>.</operator><name>getSystemService</name></name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>TELEPHONY_SERVICE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>telephonyManager</name><operator>.</operator><name>listen</name></name><argument_list>(<argument><expr><name>callback</name></expr></argument>, <argument><expr><name><name>PhoneStateListener</name><operator>.</operator><name>LISTEN_SERVICE_STATE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>Looper</name><operator>.</operator><name>loop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>telephonyManager</name><operator>.</operator><name>listen</name></name><argument_list>(<argument><expr><name>callback</name></expr></argument>, <argument><expr><name><name>PhoneStateListener</name><operator>.</operator><name>LISTEN_NONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>set</name><argument_list>(<argument><expr><call><name><name>callback</name><operator>.</operator><name>isConnected</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>Looper</name></type> <name>initializeLooper</name><parameter_list>()</parameter_list> <block>{
      <decl_stmt><decl><type><name>Looper</name></type> <name>looper</name> <init>= <expr><call><name><name>Looper</name><operator>.</operator><name>myLooper</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><name>looper</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>Looper</name><operator>.</operator><name>prepare</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>

      <return>return <expr><call><name><name>Looper</name><operator>.</operator><name>myLooper</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <specifier>synchronized</specifier> <type><name>boolean</name></type> <name>get</name><parameter_list>()</parameter_list> <block>{
      <while>while <condition>(<expr><operator>!</operator><name>complete</name></expr>)</condition> <block>{
        <try>try <block>{
          <expr_stmt><expr><call><name>wait</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
          <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
      }</block></while>

      <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <specifier>synchronized</specifier> <type><name>void</name></type> <name>set</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>result</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>result</name></name>   <operator>=</operator> <name>result</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>complete</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>notifyAll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
  }</block></class>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>ListenCallback</name> <super><extends>extends <name>PhoneStateListener</name></extends></super> <block>{

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier>    <name>Looper</name></type>  <name>looper</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>volatile</specifier> <name>boolean</name></type> <name>connected</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>ListenCallback</name><parameter_list>(<parameter><decl><type><name>Looper</name></type> <name>looper</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>looper</name></name> <operator>=</operator> <name>looper</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onServiceStateChanged</name><parameter_list>(<parameter><decl><type><name>ServiceState</name></type> <name>serviceState</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>connected</name></name> <operator>=</operator> <operator>(</operator><call><name><name>serviceState</name><operator>.</operator><name>getState</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>ServiceState</name><operator>.</operator><name>STATE_IN_SERVICE</name></name><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>looper</name><operator>.</operator><name>quit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isConnected</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>connected</name></expr>;</return>
    }</block></function>
  }</block></class>
}</block></class>
</unit>
