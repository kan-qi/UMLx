<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\linkpreview\LinkPreviewViewModel.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>linkpreview</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>arch</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>LiveData</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>arch</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>MutableLiveData</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>arch</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>ViewModel</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>arch</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>ViewModelProvider</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>Spannable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>SpannableString</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextUtils</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>attachments</name><operator>.</operator><name>Attachment</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>attachments</name><operator>.</operator><name>UriAttachment</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>logging</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>net</name><operator>.</operator><name>RequestController</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>providers</name><operator>.</operator><name>MemoryBlobProvider</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>providers</name><operator>.</operator><name>PersistentBlobProvider</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>Debouncer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>MediaUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>Util</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>util</name><operator>.</operator><name>guava</name><operator>.</operator><name>Optional</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>


<class><specifier>public</specifier> class <name>LinkPreviewViewModel</name> <super><extends>extends <name>ViewModel</name></extends></super> <block>{

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>LinkPreviewRepository</name></type>             <name>repository</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>MutableLiveData</name><argument_list type="generic">&lt;<argument><name>LinkPreviewState</name></argument>&gt;</argument_list></name></type> <name>linkPreviewState</name></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type>            <name>activeUrl</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>RequestController</name></type> <name>activeRequest</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type>           <name>userCanceled</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>Debouncer</name></type>         <name>debouncer</name></decl>;</decl_stmt>

  <constructor><specifier>private</specifier> <name>LinkPreviewViewModel</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>LinkPreviewRepository</name></type> <name>repository</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>repository</name></name>       <operator>=</operator> <name>repository</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>linkPreviewState</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>MutableLiveData</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>debouncer</name></name>        <operator>=</operator> <operator>new</operator> <call><name>Debouncer</name><argument_list>(<argument><expr><literal type="number">250</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <function><specifier>public</specifier> <type><name><name>LiveData</name><argument_list type="generic">&lt;<argument><name>LinkPreviewState</name></argument>&gt;</argument_list></name></type> <name>getLinkPreviewState</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>linkPreviewState</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasLinkPreview</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name><name>linkPreviewState</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>linkPreviewState</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getLinkPreview</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isPresent</name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>LinkPreview</name></argument>&gt;</argument_list></name></type> <name>getActiveLinkPreviews</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>LinkPreviewState</name></type> <name>state</name> <init>= <expr><call><name><name>linkPreviewState</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>state</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <operator>!</operator><call><name><name>state</name><operator>.</operator><name>getLinkPreview</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isPresent</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><call><name><name>Collections</name><operator>.</operator><name>emptyList</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></then> <else>else <block>{
      <return>return <expr><call><name><name>Collections</name><operator>.</operator><name>singletonList</name></name><argument_list>(<argument><expr><call><name><name>state</name><operator>.</operator><name>getLinkPreview</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></else></if>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>onTextChanged</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cursorStart</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cursorEnd</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>debouncer</name><operator>.</operator><name>publish</name></name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{
      <if>if <condition>(<expr><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>userCanceled</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
      }</block></then></if>

      <if>if <condition>(<expr><name>userCanceled</name></expr>)</condition><then> <block>{
        <return>return;</return>
      }</block></then></if>

      <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Link</name></argument>&gt;</argument_list></name></type>     <name>links</name> <init>= <expr><call><name><name>LinkPreviewUtil</name><operator>.</operator><name>findWhitelistedUrls</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>Link</name></argument>&gt;</argument_list></name></type> <name>link</name>  <init>= <expr><ternary><condition><expr><call><name><name>links</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name><name>Optional</name><operator>.</operator><name>absent</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name><name>Optional</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><call><name><name>links</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><call><name><name>link</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>link</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getUrl</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>activeUrl</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return;</return>
      }</block></then></if>

      <if>if <condition>(<expr><name>activeRequest</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>activeRequest</name><operator>.</operator><name>cancel</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>activeRequest</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
      }</block></then></if>

      <if>if <condition>(<expr><operator>!</operator><call><name><name>link</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>isCursorPositionValid</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><call><name><name>link</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>cursorStart</name></expr></argument>, <argument><expr><name>cursorEnd</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>activeUrl</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>linkPreviewState</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><call><name><name>LinkPreviewState</name><operator>.</operator><name>forEmpty</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
      }</block></then></if>

      <expr_stmt><expr><call><name><name>linkPreviewState</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><call><name><name>LinkPreviewState</name><operator>.</operator><name>forLoading</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>activeUrl</name>     <operator>=</operator> <call><name><name>link</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getUrl</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>activeRequest</name> <operator>=</operator> <call><name><name>repository</name><operator>.</operator><name>getLinkPreview</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>link</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getUrl</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>lp</name></decl></parameter></parameter_list> -&gt; <block>{
        <expr_stmt><expr><call><name><name>Util</name><operator>.</operator><name>runOnMain</name></name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{
          <if>if <condition>(<expr><operator>!</operator><name>userCanceled</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>linkPreviewState</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><call><name><name>LinkPreviewState</name><operator>.</operator><name>forPreview</name></name><argument_list>(<argument><expr><name>lp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></then></if>
          <expr_stmt><expr><name>activeRequest</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>onUserCancel</name><parameter_list>()</parameter_list> <block>{
    <if>if <condition>(<expr><name>activeRequest</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>activeRequest</name><operator>.</operator><name>cancel</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>activeRequest</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><name>userCanceled</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>activeUrl</name>    <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>debouncer</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>linkPreviewState</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><call><name><name>LinkPreviewState</name><operator>.</operator><name>forEmpty</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>onEnabled</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><name>userCanceled</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>protected</specifier> <type><name>void</name></type> <name>onCleared</name><parameter_list>()</parameter_list> <block>{
    <if>if <condition>(<expr><name>activeRequest</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>activeRequest</name><operator>.</operator><name>cancel</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><call><name><name>debouncer</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>boolean</name></type> <name>isCursorPositionValid</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>text</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Link</name></type> <name>link</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cursorStart</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cursorEnd</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>cursorStart</name> <operator>!=</operator> <name>cursorEnd</name></expr>)</condition><then> <block>{
      <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><call><name><name>text</name><operator>.</operator><name>endsWith</name></name><argument_list>(<argument><expr><call><name><name>link</name><operator>.</operator><name>getUrl</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>cursorStart</name> <operator>==</operator> <call><name><name>link</name><operator>.</operator><name>getPosition</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>link</name><operator>.</operator><name>getUrl</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></then></if>

    <return>return <expr><name><name>cursorStart</name> <argument_list type="generic">&lt; <argument><name><name>link</name><operator>.</operator><name>getPosition</name></name><operator>(</operator><operator>)</operator> <operator>||</operator> <name>cursorStart</name></argument> &gt;</argument_list></name> <call><name><name>link</name><operator>.</operator><name>getPosition</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>link</name><operator>.</operator><name>getUrl</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <class><specifier>public</specifier> <specifier>static</specifier> class <name>LinkPreviewState</name> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>boolean</name></type>               <name>isLoading</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>Optional</name><argument_list type="generic">&lt;<argument><name>LinkPreview</name></argument>&gt;</argument_list></name></type> <name>linkPreview</name></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>LinkPreviewState</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>isLoading</name></decl></parameter>, <parameter><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>LinkPreview</name></argument>&gt;</argument_list></name></type> <name>linkPreview</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>isLoading</name></name>   <operator>=</operator> <name>isLoading</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>linkPreview</name></name> <operator>=</operator> <name>linkPreview</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>private</specifier> <specifier>static</specifier> <type><name>LinkPreviewState</name></type> <name>forLoading</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><operator>new</operator> <call><name>LinkPreviewState</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><call><name><name>Optional</name><operator>.</operator><name>absent</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <specifier>static</specifier> <type><name>LinkPreviewState</name></type> <name>forPreview</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>Optional</name><argument_list type="generic">&lt;<argument><name>LinkPreview</name></argument>&gt;</argument_list></name></type> <name>linkPreview</name></decl></parameter>)</parameter_list> <block>{
      <return>return <expr><operator>new</operator> <call><name>LinkPreviewState</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>linkPreview</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <specifier>static</specifier> <type><name>LinkPreviewState</name></type> <name>forEmpty</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><operator>new</operator> <call><name>LinkPreviewState</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><call><name><name>Optional</name><operator>.</operator><name>absent</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isLoading</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>isLoading</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>LinkPreview</name></argument>&gt;</argument_list></name></type> <name>getLinkPreview</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>linkPreview</name></expr>;</return>
    }</block></function>
  }</block></class>

  <class><specifier>public</specifier> <specifier>static</specifier> class <name>Factory</name> <super><extends>extends <name><name>ViewModelProvider</name><operator>.</operator><name>NewInstanceFactory</name></name></extends></super> <block>{

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>LinkPreviewRepository</name></type> <name>repository</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>Factory</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>LinkPreviewRepository</name></type> <name>repository</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>repository</name></name> <operator>=</operator> <name>repository</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <annotation>@<name><name>NonNull</name> <argument_list type="generic">&lt;<argument><name>T</name> <extends>extends <name>ViewModel</name></extends></argument>&gt;</argument_list></name></annotation> <type><name>T</name></type> <name>create</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>Class</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>modelClass</name></decl></parameter>)</parameter_list> <block>{
      <return>return <expr><call><name><name>modelClass</name><operator>.</operator><name>cast</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>LinkPreviewViewModel</name><argument_list>(<argument><expr><name>repository</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
  }</block></class>
}</block></class>
</unit>
