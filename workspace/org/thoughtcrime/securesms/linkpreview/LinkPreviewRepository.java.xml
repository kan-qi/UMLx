<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\linkpreview\LinkPreviewRepository.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>linkpreview</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Bitmap</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>Html</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextUtils</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>bumptech</name><operator>.</operator><name>glide</name><operator>.</operator><name>load</name><operator>.</operator><name>engine</name><operator>.</operator><name>DiskCacheStrategy</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>bumptech</name><operator>.</operator><name>glide</name><operator>.</operator><name>load</name><operator>.</operator><name>resource</name><operator>.</operator><name>bitmap</name><operator>.</operator><name>DownsampleStrategy</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>bumptech</name><operator>.</operator><name>glide</name><operator>.</operator><name>request</name><operator>.</operator><name>FutureTarget</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>attachments</name><operator>.</operator><name>Attachment</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>attachments</name><operator>.</operator><name>UriAttachment</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>AttachmentDatabase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>giph</name><operator>.</operator><name>model</name><operator>.</operator><name>ChunkedImageUrl</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>logging</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mms</name><operator>.</operator><name>GlideApp</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>net</name><operator>.</operator><name>CallRequestController</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>net</name><operator>.</operator><name>CompositeRequestController</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>net</name><operator>.</operator><name>ContentProxySelector</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>net</name><operator>.</operator><name>RequestController</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>providers</name><operator>.</operator><name>MemoryBlobProvider</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>MediaUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>SignalExecutors</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>util</name><operator>.</operator><name>guava</name><operator>.</operator><name>Optional</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>CancellationException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ExecutionException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>regex</name><operator>.</operator><name>Matcher</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>regex</name><operator>.</operator><name>Pattern</name></name>;</import>

<import>import <name><name>okhttp3</name><operator>.</operator><name>CacheControl</name></name>;</import>
<import>import <name><name>okhttp3</name><operator>.</operator><name>Call</name></name>;</import>
<import>import <name><name>okhttp3</name><operator>.</operator><name>OkHttpClient</name></name>;</import>
<import>import <name><name>okhttp3</name><operator>.</operator><name>Request</name></name>;</import>
<import>import <name><name>okhttp3</name><operator>.</operator><name>Response</name></name>;</import>

<class><specifier>public</specifier> class <name>LinkPreviewRepository</name> <block>{

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>LinkPreviewRepository</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>CacheControl</name></type> <name>NO_CACHE</name> <init>= <expr><operator>new</operator> <call><name><name>CacheControl</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>noCache</name><argument_list>()</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>OkHttpClient</name></type> <name>client</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>LinkPreviewRepository</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>client</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>OkHttpClient</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call>
                                  <operator>.</operator><call><name>proxySelector</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ContentProxySelector</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                                  <operator>.</operator><call><name>cache</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call>
                                  <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <function><type><name>RequestController</name></type> <name>getLinkPreview</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>url</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>Callback</name><argument_list type="generic">&lt;<argument><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>LinkPreview</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>callback</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>CompositeRequestController</name></type> <name>compositeController</name> <init>= <expr><operator>new</operator> <call><name>CompositeRequestController</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><operator>!</operator><call><name><name>LinkPreviewUtil</name><operator>.</operator><name>isWhitelistedLinkUrl</name></name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Tried to get a link preview for a non-whitelisted domain."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>callback</name><operator>.</operator><name>onComplete</name></name><argument_list>(<argument><expr><call><name><name>Optional</name><operator>.</operator><name>absent</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>compositeController</name></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name>RequestController</name></type> <name>metadataController</name> <init>= <expr><call><name>fetchMetadata</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>metadata</name></decl></parameter></parameter_list> -&gt; <block>{
      <if>if <condition>(<expr><call><name><name>metadata</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>callback</name><operator>.</operator><name>onComplete</name></name><argument_list>(<argument><expr><call><name><name>Optional</name><operator>.</operator><name>absent</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
      }</block></then></if>

      <if>if <condition>(<expr><operator>!</operator><call><name><name>metadata</name><operator>.</operator><name>getImageUrl</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isPresent</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>callback</name><operator>.</operator><name>onComplete</name></name><argument_list>(<argument><expr><call><name><name>Optional</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>LinkPreview</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><call><name><name>metadata</name><operator>.</operator><name>getTitle</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Optional</name><operator>.</operator><name>absent</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
      }</block></then></if>

      <decl_stmt><decl><type><name>RequestController</name></type> <name>imageController</name> <init>= <expr><call><name>fetchThumbnail</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>metadata</name><operator>.</operator><name>getImageUrl</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>attachment</name></decl></parameter></parameter_list> -&gt; <block>{
        <if>if <condition>(<expr><operator>!</operator><call><name><name>metadata</name><operator>.</operator><name>getTitle</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isPresent</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>attachment</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name><name>callback</name><operator>.</operator><name>onComplete</name></name><argument_list>(<argument><expr><call><name><name>Optional</name><operator>.</operator><name>absent</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>callback</name><operator>.</operator><name>onComplete</name></name><argument_list>(<argument><expr><call><name><name>Optional</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>LinkPreview</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><call><name><name>metadata</name><operator>.</operator><name>getTitle</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>or</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>attachment</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
      }</block></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name><name>compositeController</name><operator>.</operator><name>addController</name></name><argument_list>(<argument><expr><name>imageController</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>compositeController</name><operator>.</operator><name>addController</name></name><argument_list>(<argument><expr><name>metadataController</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>compositeController</name></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>RequestController</name></type> <name>fetchMetadata</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>url</name></decl></parameter>, <parameter><decl><type><name><name>Callback</name><argument_list type="generic">&lt;<argument><name>Metadata</name></argument>&gt;</argument_list></name></type> <name>callback</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>Call</name></type> <name>call</name> <init>= <expr><call><name><name>client</name><operator>.</operator><name>newCall</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>Request</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>url</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>cacheControl</name><argument_list>(<argument><expr><name>NO_CACHE</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>call</name><operator>.</operator><name>enqueue</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>okhttp3</name><operator>.</operator><name>Callback</name></name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <specifier>public</specifier> <type><name>void</name></type> <name>onFailure</name><parameter_list>(<parameter><decl><type><name>Call</name></type> <name>call</name></decl></parameter>, <parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Request failed."</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>callback</name><operator>.</operator><name>onComplete</name></name><argument_list>(<argument><expr><call><name><name>Metadata</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></function>

      <function><annotation>@<name>Override</name></annotation>
      <specifier>public</specifier> <type><name>void</name></type> <name>onResponse</name><parameter_list>(<parameter><decl><type><name>Call</name></type> <name>call</name></decl></parameter>, <parameter><decl><type><name>Response</name></type> <name>response</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><operator>!</operator><call><name><name>response</name><operator>.</operator><name>isSuccessful</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Non-successful response. Code: "</literal> <operator>+</operator> <call><name><name>response</name><operator>.</operator><name>code</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>callback</name><operator>.</operator><name>onComplete</name></name><argument_list>(<argument><expr><call><name><name>Metadata</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return;</return>
        }</block></then> <elseif>else <if>if <condition>(<expr><call><name><name>response</name><operator>.</operator><name>body</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"No response body."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>callback</name><operator>.</operator><name>onComplete</name></name><argument_list>(<argument><expr><call><name><name>Metadata</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return;</return>
        }</block></then></if></elseif></if>

        <decl_stmt><decl><type><name>String</name></type>            <name>body</name>     <init>= <expr><call><name><name>response</name><operator>.</operator><name>body</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>string</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type>  <name>title</name>    <init>= <expr><call><name>getProperty</name><argument_list>(<argument><expr><name>body</name></expr></argument>, <argument><expr><literal type="string">"title"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type>  <name>imageUrl</name> <init>= <expr><call><name>getProperty</name><argument_list>(<argument><expr><name>body</name></expr></argument>, <argument><expr><literal type="string">"image"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><call><name><name>imageUrl</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>LinkPreviewUtil</name><operator>.</operator><name>isWhitelistedMediaUrl</name></name><argument_list>(<argument><expr><call><name><name>imageUrl</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Image URL was invalid or for a non-whitelisted domain. Skipping."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>imageUrl</name> <operator>=</operator> <call><name><name>Optional</name><operator>.</operator><name>absent</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><call><name><name>callback</name><operator>.</operator><name>onComplete</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Metadata</name><argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><name>imageUrl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><operator>new</operator> <call><name>CallRequestController</name><argument_list>(<argument><expr><name>call</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>RequestController</name></type> <name>fetchThumbnail</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>imageUrl</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>Callback</name><argument_list type="generic">&lt;<argument><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>Attachment</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>callback</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>FutureTarget</name><argument_list type="generic">&lt;<argument><name>Bitmap</name></argument>&gt;</argument_list></name></type> <name>bitmapFuture</name> <init>= <expr><call><name><name>GlideApp</name><operator>.</operator><name>with</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>asBitmap</name><argument_list>()</argument_list></call>
                                                              <operator>.</operator><call><name>load</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ChunkedImageUrl</name><argument_list>(<argument><expr><name>imageUrl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                                                              <operator>.</operator><call><name>skipMemoryCache</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call>
                                                              <operator>.</operator><call><name>diskCacheStrategy</name><argument_list>(<argument><expr><name><name>DiskCacheStrategy</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call>
                                                              <operator>.</operator><call><name>downsample</name><argument_list>(<argument><expr><name><name>DownsampleStrategy</name><operator>.</operator><name>AT_MOST</name></name></expr></argument>)</argument_list></call>
                                                              <operator>.</operator><call><name>submit</name><argument_list>(<argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>RequestController</name></type> <name>controller</name> <init>= <expr><lambda><parameter_list>()</parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>bitmapFuture</name><operator>.</operator><name>cancel</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></block></lambda></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>SignalExecutors</name><operator>.</operator><name>IO</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{
      <try>try <block>{
        <decl_stmt><decl><type><name>Bitmap</name></type>                <name>bitmap</name> <init>= <expr><call><name><name>bitmapFuture</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ByteArrayOutputStream</name></type> <name>baos</name> <init>= <expr><operator>new</operator> <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>bitmap</name><operator>.</operator><name>compress</name></name><argument_list>(<argument><expr><name><name>Bitmap</name><operator>.</operator><name>CompressFormat</name><operator>.</operator><name>JPEG</name></name></expr></argument>, <argument><expr><literal type="number">80</literal></expr></argument>, <argument><expr><name>baos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type>               <name>bytes</name>     <init>= <expr><call><name><name>baos</name><operator>.</operator><name>toByteArray</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Uri</name></type>                  <name>uri</name>       <init>= <expr><call><name><name>MemoryBlobProvider</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>createUri</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>Attachment</name></argument>&gt;</argument_list></name></type> <name>thumbnail</name> <init>= <expr><call><name><name>Optional</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>UriAttachment</name><argument_list>(<argument><expr><name>uri</name></expr></argument>,
                                                                       <argument><expr><name>uri</name></expr></argument>,
                                                                       <argument><expr><name><name>MediaUtil</name><operator>.</operator><name>IMAGE_JPEG</name></name></expr></argument>,
                                                                       <argument><expr><name><name>AttachmentDatabase</name><operator>.</operator><name>TRANSFER_PROGRESS_STARTED</name></name></expr></argument>,
                                                                       <argument><expr><name><name>bytes</name><operator>.</operator><name>length</name></name></expr></argument>,
                                                                       <argument><expr><call><name><name>bitmap</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                                       <argument><expr><call><name><name>bitmap</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                                       <argument><expr><literal type="null">null</literal></expr></argument>,
                                                                       <argument><expr><literal type="null">null</literal></expr></argument>,
                                                                       <argument><expr><literal type="boolean">false</literal></expr></argument>,
                                                                       <argument><expr><literal type="boolean">false</literal></expr></argument>,
                                                                       <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>callback</name><operator>.</operator><name>onComplete</name></name><argument_list>(<argument><expr><name>thumbnail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>CancellationException</name></type> | <type><name>ExecutionException</name></type> | <type><name>InterruptedException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>controller</name><operator>.</operator><name>cancel</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>callback</name><operator>.</operator><name>onComplete</name></name><argument_list>(<argument><expr><call><name><name>Optional</name><operator>.</operator><name>absent</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></catch> <finally>finally <block>{
        <expr_stmt><expr><call><name><name>bitmapFuture</name><operator>.</operator><name>cancel</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></finally></try>
    }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><lambda><parameter_list>()</parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>bitmapFuture</name><operator>.</operator><name>cancel</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></block></lambda></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getProperty</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>searchText</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>property</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>Pattern</name></type> <name>pattern</name> <init>= <expr><call><name><name>Pattern</name><operator>.</operator><name>compile</name></name><argument_list>(<argument><expr><literal type="string">"&lt;\\s*meta\\s+property\\s*=\\s*\"\\s*og:"</literal> <operator>+</operator> <name>property</name> <operator>+</operator> <literal type="string">"\\s*\"\\s+content\\s*=\\s*\"(.*?)\"\\s*/?\\s*&gt;"</literal></expr></argument>, <argument><expr><name><name>Pattern</name><operator>.</operator><name>CASE_INSENSITIVE</name></name> <operator>|</operator> <name><name>Pattern</name><operator>.</operator><name>DOTALL</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Matcher</name></type> <name>matcher</name> <init>= <expr><call><name><name>pattern</name><operator>.</operator><name>matcher</name></name><argument_list>(<argument><expr><name>searchText</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name><name>matcher</name><operator>.</operator><name>find</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>String</name></type> <name>text</name> <init>= <expr><call><name><name>Html</name><operator>.</operator><name>fromHtml</name></name><argument_list>(<argument><expr><call><name><name>matcher</name><operator>.</operator><name>group</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr><ternary><condition><expr><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name><name>Optional</name><operator>.</operator><name>absent</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name><name>Optional</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
    }</block></then></if>

    <return>return <expr><call><name><name>Optional</name><operator>.</operator><name>absent</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>Metadata</name> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>Optional</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>title</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>Optional</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>imageUrl</name></decl>;</decl_stmt>

    <constructor><name>Metadata</name><parameter_list>(<parameter><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>title</name></decl></parameter>, <parameter><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>imageUrl</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>title</name></name>    <operator>=</operator> <name>title</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>imageUrl</name></name> <operator>=</operator> <name>imageUrl</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>static</specifier> <type><name>Metadata</name></type> <name>empty</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><operator>new</operator> <call><name>Metadata</name><argument_list>(<argument><expr><call><name><name>Optional</name><operator>.</operator><name>absent</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Optional</name><operator>.</operator><name>absent</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getTitle</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>title</name></expr>;</return>
    }</block></function>

    <function><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getImageUrl</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>imageUrl</name></expr>;</return>
    }</block></function>

    <function><type><name>boolean</name></type> <name>isEmpty</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><operator>!</operator><call><name><name>title</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>imageUrl</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
  }</block></class>

  <interface>interface <name><name>Callback</name><parameter_list>&lt;<parameter><name>T</name></parameter>&gt;</parameter_list></name> <block>{
    <function_decl><type><name>void</name></type> <name>onComplete</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>T</name></type> <name>result</name></decl></parameter>)</parameter_list>;</function_decl>
  }</block></interface>
}</block></class>
</unit>
