<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\PassphraseRequiredActionBarActivity.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>BroadcastReceiver</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>IntentFilter</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>IdRes</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>app</name><operator>.</operator><name>Fragment</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>logging</name><operator>.</operator><name>Log</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>crypto</name><operator>.</operator><name>MasterSecretUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>jobs</name><operator>.</operator><name>PushNotificationReceiveJob</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>push</name><operator>.</operator><name>SignalServiceNetworkAccess</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>registration</name><operator>.</operator><name>WelcomeActivity</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>service</name><operator>.</operator><name>KeyCachingService</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>TextSecurePreferences</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>Util</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Locale</name></name>;</import>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>PassphraseRequiredActionBarActivity</name> <super><extends>extends <name>BaseActionBarActivity</name></extends> <implements>implements <name>MasterSecretListener</name></implements></super> <block>{
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>PassphraseRequiredActionBarActivity</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>LOCALE_EXTRA</name> <init>= <expr><literal type="string">"locale_extra"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>STATE_NORMAL</name>                   <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>STATE_CREATE_PASSPHRASE</name>        <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>STATE_PROMPT_PASSPHRASE</name>        <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>STATE_UPGRADE_DATABASE</name>         <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>STATE_PROMPT_PUSH_REGISTRATION</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>STATE_EXPERIENCE_UPGRADE</name>       <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>STATE_WELCOME_SCREEN</name>           <init>= <expr><literal type="number">6</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><name>SignalServiceNetworkAccess</name></type> <name>networkAccess</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>BroadcastReceiver</name></type>          <name>clearKeyReceiver</name></decl>;</decl_stmt>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>protected</specifier> <specifier>final</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"onCreate("</literal> <operator>+</operator> <name>savedInstanceState</name> <operator>+</operator> <literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>networkAccess</name></name> <operator>=</operator> <operator>new</operator> <call><name>SignalServiceNetworkAccess</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>onPreCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>locked</name> <init>= <expr><call><name><name>KeyCachingService</name><operator>.</operator><name>isLocked</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>routeApplicationState</name><argument_list>(<argument><expr><name>locked</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><operator>!</operator><call><name>isFinishing</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>initializeClearKeyReceiver</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>onCreate</name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <function><specifier>protected</specifier> <type><name>void</name></type> <name>onPreCreate</name><parameter_list>()</parameter_list> <block>{}</block></function>
  <function><specifier>protected</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>ready</name></decl></parameter>)</parameter_list> <block>{}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>protected</specifier> <type><name>void</name></type> <name>onResume</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"onResume()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onResume</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><call><name><name>networkAccess</name><operator>.</operator><name>isCensored</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>ApplicationContext</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getJobManager</name><argument_list>()</argument_list></call><operator>.</operator><call><name>add</name><argument_list>(<argument><expr><operator>new</operator> <call><name>PushNotificationReceiveJob</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>protected</specifier> <type><name>void</name></type> <name>onPause</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"onPause()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onPause</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>protected</specifier> <type><name>void</name></type> <name>onDestroy</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"onDestroy()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onDestroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>removeClearKeyReceiver</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onMasterSecretCleared</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"onMasterSecretCleared()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name><name>ApplicationContext</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>isAppVisible</name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>routeApplicationState</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
    <else>else                                                     <block type="pseudo"><expr_stmt><expr><call><name>finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></else></if>
  }</block></function>

  <function><specifier>protected</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name> <extends>extends <name>Fragment</name></extends></parameter>&gt;</parameter_list> <type><name>T</name></type> <name>initFragment</name><parameter_list>(<parameter><decl><type><annotation>@<name>IdRes</name></annotation> <name>int</name></type> <name>target</name></decl></parameter>,
                                                <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>T</name></type> <name>fragment</name></decl></parameter>)</parameter_list>
  <block>{
    <return>return <expr><call><name>initFragment</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>fragment</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>protected</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name> <extends>extends <name>Fragment</name></extends></parameter>&gt;</parameter_list> <type><name>T</name></type> <name>initFragment</name><parameter_list>(<parameter><decl><type><annotation>@<name>IdRes</name></annotation> <name>int</name></type> <name>target</name></decl></parameter>,
                                                <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>T</name></type> <name>fragment</name></decl></parameter>,
                                                <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Locale</name></type> <name>locale</name></decl></parameter>)</parameter_list>
  <block>{
    <return>return <expr><call><name>initFragment</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>fragment</name></expr></argument>, <argument><expr><name>locale</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>protected</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name> <extends>extends <name>Fragment</name></extends></parameter>&gt;</parameter_list> <type><name>T</name></type> <name>initFragment</name><parameter_list>(<parameter><decl><type><annotation>@<name>IdRes</name></annotation> <name>int</name></type> <name>target</name></decl></parameter>,
                                                <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>T</name></type> <name>fragment</name></decl></parameter>,
                                                <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Locale</name></type> <name>locale</name></decl></parameter>,
                                                <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Bundle</name></type> <name>extras</name></decl></parameter>)</parameter_list>
  <block>{
    <decl_stmt><decl><type><name>Bundle</name></type> <name>args</name> <init>= <expr><operator>new</operator> <call><name>Bundle</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>putSerializable</name></name><argument_list>(<argument><expr><name>LOCALE_EXTRA</name></expr></argument>, <argument><expr><name>locale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>extras</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>putAll</name></name><argument_list>(<argument><expr><name>extras</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><call><name><name>fragment</name><operator>.</operator><name>setArguments</name></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>getSupportFragmentManager</name><argument_list>()</argument_list></call><operator>.</operator><call><name>beginTransaction</name><argument_list>()</argument_list></call>
                               <operator>.</operator><call><name>replace</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>fragment</name></expr></argument>)</argument_list></call>
                               <operator>.</operator><call><name>commitAllowingStateLoss</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>fragment</name></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>routeApplicationState</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>locked</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>Intent</name></type> <name>intent</name> <init>= <expr><call><name>getIntentForState</name><argument_list>(<argument><expr><call><name>getApplicationState</name><argument_list>(<argument><expr><name>locked</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>intent</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>startActivity</name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <function><specifier>private</specifier> <type><name>Intent</name></type> <name>getIntentForState</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>state</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"routeApplicationState(), state: "</literal> <operator>+</operator> <name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <switch>switch <condition>(<expr><name>state</name></expr>)</condition> <block>{
    <case>case <expr><name>STATE_CREATE_PASSPHRASE</name></expr>:</case>        <return>return <expr><call><name>getCreatePassphraseIntent</name><argument_list>()</argument_list></call></expr>;</return>
    <case>case <expr><name>STATE_PROMPT_PASSPHRASE</name></expr>:</case>        <return>return <expr><call><name>getPromptPassphraseIntent</name><argument_list>()</argument_list></call></expr>;</return>
    <case>case <expr><name>STATE_UPGRADE_DATABASE</name></expr>:</case>         <return>return <expr><call><name>getUpgradeDatabaseIntent</name><argument_list>()</argument_list></call></expr>;</return>
    <case>case <expr><name>STATE_WELCOME_SCREEN</name></expr>:</case>           <return>return <expr><call><name>getWelcomeIntent</name><argument_list>()</argument_list></call></expr>;</return>
    <case>case <expr><name>STATE_PROMPT_PUSH_REGISTRATION</name></expr>:</case> <return>return <expr><call><name>getPushRegistrationIntent</name><argument_list>()</argument_list></call></expr>;</return>
    <case>case <expr><name>STATE_EXPERIENCE_UPGRADE</name></expr>:</case>       <return>return <expr><call><name>getExperienceUpgradeIntent</name><argument_list>()</argument_list></call></expr>;</return>
    <default>default:</default>                             <return>return <expr><literal type="null">null</literal></expr>;</return>
    }</block></switch>
  }</block></function>

  <function><specifier>private</specifier> <type><name>int</name></type> <name>getApplicationState</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>locked</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><operator>!</operator><call><name><name>MasterSecretUtil</name><operator>.</operator><name>isPassphraseInitialized</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><name>STATE_CREATE_PASSPHRASE</name></expr>;</return>
    }</block></then> <elseif>else <if>if <condition>(<expr><name>locked</name></expr>)</condition><then> <block>{
      <return>return <expr><name>STATE_PROMPT_PASSPHRASE</name></expr>;</return>
    }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name><name>DatabaseUpgradeActivity</name><operator>.</operator><name>isUpdate</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><name>STATE_UPGRADE_DATABASE</name></expr>;</return>
    }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><operator>!</operator><call><name><name>TextSecurePreferences</name><operator>.</operator><name>hasSeenWelcomeScreen</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><name>STATE_WELCOME_SCREEN</name></expr>;</return>
    }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><operator>!</operator><call><name><name>TextSecurePreferences</name><operator>.</operator><name>hasPromptedPushRegistration</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><name>STATE_PROMPT_PUSH_REGISTRATION</name></expr>;</return>
    }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name><name>ExperienceUpgradeActivity</name><operator>.</operator><name>isUpdate</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><name>STATE_EXPERIENCE_UPGRADE</name></expr>;</return>
    }</block></then></if></elseif> <else>else <block>{
      <return>return <expr><name>STATE_NORMAL</name></expr>;</return>
    }</block></else></if>
  }</block></function>

  <function><specifier>private</specifier> <type><name>Intent</name></type> <name>getCreatePassphraseIntent</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name>getRoutedIntent</name><argument_list>(<argument><expr><name><name>PassphraseCreateActivity</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getIntent</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>Intent</name></type> <name>getPromptPassphraseIntent</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name>getRoutedIntent</name><argument_list>(<argument><expr><name><name>PassphrasePromptActivity</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getIntent</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>Intent</name></type> <name>getUpgradeDatabaseIntent</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name>getRoutedIntent</name><argument_list>(<argument><expr><name><name>DatabaseUpgradeActivity</name><operator>.</operator><name>class</name></name></expr></argument>,
                           <argument><expr><ternary><condition><expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>hasPromptedPushRegistration</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>
                               ?</condition><then> <expr><call><name>getConversationListIntent</name><argument_list>()</argument_list></call></expr>
                               </then><else>: <expr><call><name>getPushRegistrationIntent</name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>Intent</name></type> <name>getExperienceUpgradeIntent</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name>getRoutedIntent</name><argument_list>(<argument><expr><name><name>ExperienceUpgradeActivity</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getIntent</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>Intent</name></type> <name>getWelcomeIntent</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name>getRoutedIntent</name><argument_list>(<argument><expr><name><name>WelcomeActivity</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getPushRegistrationIntent</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>Intent</name></type> <name>getPushRegistrationIntent</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name>getRoutedIntent</name><argument_list>(<argument><expr><name><name>RegistrationActivity</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getCreateProfileIntent</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>Intent</name></type> <name>getCreateProfileIntent</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name>getRoutedIntent</name><argument_list>(<argument><expr><name><name>CreateProfileActivity</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name>getConversationListIntent</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>Intent</name></type> <name>getRoutedIntent</name><parameter_list>(<parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>destination</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Intent</name></type> <name>nextIntent</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>intent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>destination</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>nextIntent</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>   <block type="pseudo"><expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><literal type="string">"next_intent"</literal></expr></argument>, <argument><expr><name>nextIntent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    <return>return <expr><name>intent</name></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>Intent</name></type> <name>getConversationListIntent</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>ConversationListActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>initializeClearKeyReceiver</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"initializeClearKeyReceiver()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>clearKeyReceiver</name></name> <operator>=</operator> <operator>new</operator> <class><super><name>BroadcastReceiver</name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <specifier>public</specifier> <type><name>void</name></type> <name>onReceive</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"onReceive() for clear key event"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>onMasterSecretCleared</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></function>
    }</block></class></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>IntentFilter</name></type> <name>filter</name> <init>= <expr><operator>new</operator> <call><name>IntentFilter</name><argument_list>(<argument><expr><name><name>KeyCachingService</name><operator>.</operator><name>CLEAR_KEY_EVENT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>registerReceiver</name><argument_list>(<argument><expr><name>clearKeyReceiver</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><name><name>KeyCachingService</name><operator>.</operator><name>KEY_PERMISSION</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>removeClearKeyReceiver</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>clearKeyReceiver</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>context</name><operator>.</operator><name>unregisterReceiver</name></name><argument_list>(<argument><expr><name>clearKeyReceiver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>clearKeyReceiver</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>
}</block></class>
</unit>
