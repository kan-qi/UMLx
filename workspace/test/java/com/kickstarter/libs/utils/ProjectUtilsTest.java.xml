<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\kickstarter\app\src\test\java\com\kickstarter\libs\utils\ProjectUtilsTest.java"><package>package <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>utils</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Pair</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>KSRobolectricTestCase</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>mock</name><operator>.</operator><name>factories</name><operator>.</operator><name>ProjectFactory</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>mock</name><operator>.</operator><name>factories</name><operator>.</operator><name>UserFactory</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>models</name><operator>.</operator><name>Project</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>services</name><operator>.</operator><name>DiscoveryParams</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>joda</name><operator>.</operator><name>time</name><operator>.</operator><name>DateTime</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>

<class><specifier>public</specifier> <specifier>final</specifier> class <name>ProjectUtilsTest</name> <super><extends>extends <name>KSRobolectricTestCase</name></extends></super> <block>{

  <function><annotation>@<name>Test</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>testCombineProjectsAndParams</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>Project</name></type> <name>project</name> <init>= <expr><call><name><name>ProjectFactory</name><operator>.</operator><name>project</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>DiscoveryParams</name></type> <name>discoveryParams</name> <init>= <expr><call><name><name>DiscoveryParams</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>ProjectUtils</name><operator>.</operator><name>combineProjectsAndParams</name></name><argument_list>(<argument><expr><call><name><name>Collections</name><operator>.</operator><name>singletonList</name></name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>discoveryParams</name></expr></argument>)</argument_list></call></expr></argument>,
      <argument><expr><call><name><name>Collections</name><operator>.</operator><name>singletonList</name></name><argument_list>(<argument><expr><call><name><name>Pair</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>project</name></expr></argument>, <argument><expr><name>discoveryParams</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>testIsCompleted</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>ProjectUtils</name><operator>.</operator><name>isCompleted</name></name><argument_list>(<argument><expr><call><name><name>ProjectFactory</name><operator>.</operator><name>successfulProject</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>ProjectUtils</name><operator>.</operator><name>isCompleted</name></name><argument_list>(<argument><expr><call><name><name>ProjectFactory</name><operator>.</operator><name>project</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>testIsUsUserViewingNonUsProject</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>ProjectUtils</name><operator>.</operator><name>isUSUserViewingNonUSProject</name></name><argument_list>(
      <argument><expr><call><name><name>UserFactory</name><operator>.</operator><name>user</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>location</name><argument_list>()</argument_list></call><operator>.</operator><call><name>country</name><argument_list>()</argument_list></call></expr></argument>,
      <argument><expr><call><name><name>ProjectFactory</name><operator>.</operator><name>ukProject</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>country</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>ProjectUtils</name><operator>.</operator><name>isUSUserViewingNonUSProject</name></name><argument_list>(
      <argument><expr><call><name><name>UserFactory</name><operator>.</operator><name>user</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>location</name><argument_list>()</argument_list></call><operator>.</operator><call><name>country</name><argument_list>()</argument_list></call></expr></argument>,
      <argument><expr><call><name><name>ProjectFactory</name><operator>.</operator><name>project</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>country</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>ProjectUtils</name><operator>.</operator><name>isUSUserViewingNonUSProject</name></name><argument_list>(
      <argument><expr><call><name><name>UserFactory</name><operator>.</operator><name>germanUser</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>location</name><argument_list>()</argument_list></call><operator>.</operator><call><name>country</name><argument_list>()</argument_list></call></expr></argument>,
      <argument><expr><call><name><name>ProjectFactory</name><operator>.</operator><name>caProject</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>country</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>testMetadataForProject</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><call><name><name>ProjectUtils</name><operator>.</operator><name>metadataForProject</name></name><argument_list>(<argument><expr><call><name><name>ProjectFactory</name><operator>.</operator><name>project</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>ProjectUtils</name><operator>.</operator><name>Metadata</name><operator>.</operator><name>BACKING</name></name></expr></argument>, <argument><expr><call><name><name>ProjectUtils</name><operator>.</operator><name>metadataForProject</name></name><argument_list>(<argument><expr><call><name><name>ProjectFactory</name><operator>.</operator><name>backedProject</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>ProjectUtils</name><operator>.</operator><name>Metadata</name><operator>.</operator><name>CATEGORY_FEATURED</name></name></expr></argument>, <argument><expr><call><name><name>ProjectUtils</name><operator>.</operator><name>metadataForProject</name></name><argument_list>(<argument><expr><call><name><name>ProjectFactory</name><operator>.</operator><name>featured</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>ProjectUtils</name><operator>.</operator><name>Metadata</name><operator>.</operator><name>SAVING</name></name></expr></argument>, <argument><expr><call><name><name>ProjectUtils</name><operator>.</operator><name>metadataForProject</name></name><argument_list>(<argument><expr><call><name><name>ProjectFactory</name><operator>.</operator><name>saved</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>Project</name></type> <name>savedAndBacked</name> <init>= <expr><call><name><name>ProjectFactory</name><operator>.</operator><name>backedProject</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toBuilder</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isStarred</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>ProjectUtils</name><operator>.</operator><name>Metadata</name><operator>.</operator><name>BACKING</name></name></expr></argument>, <argument><expr><call><name><name>ProjectUtils</name><operator>.</operator><name>metadataForProject</name></name><argument_list>(<argument><expr><name>savedAndBacked</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>DateTime</name></type> <name>now</name> <init>= <expr><operator>new</operator> <call><name>DateTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>Project</name></type> <name>savedAndFeatured</name> <init>= <expr><call><name><name>ProjectFactory</name><operator>.</operator><name>saved</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toBuilder</name><argument_list>()</argument_list></call><operator>.</operator><call><name>featuredAt</name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>ProjectUtils</name><operator>.</operator><name>Metadata</name><operator>.</operator><name>SAVING</name></name></expr></argument>, <argument><expr><call><name><name>ProjectUtils</name><operator>.</operator><name>metadataForProject</name></name><argument_list>(<argument><expr><name>savedAndFeatured</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>Project</name></type> <name>savedBackedFeatured</name> <init>= <expr><call><name><name>ProjectFactory</name><operator>.</operator><name>backedProject</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toBuilder</name><argument_list>()</argument_list></call><operator>.</operator><call><name>featuredAt</name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>isStarred</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>ProjectUtils</name><operator>.</operator><name>Metadata</name><operator>.</operator><name>BACKING</name></name></expr></argument>, <argument><expr><call><name><name>ProjectUtils</name><operator>.</operator><name>metadataForProject</name></name><argument_list>(<argument><expr><name>savedBackedFeatured</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>testPhotoHeightFromWidthRatio</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">360</literal></expr></argument>, <argument><expr><call><name><name>ProjectUtils</name><operator>.</operator><name>photoHeightFromWidthRatio</name></name><argument_list>(<argument><expr><literal type="number">640</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">576</literal></expr></argument>, <argument><expr><call><name><name>ProjectUtils</name><operator>.</operator><name>photoHeightFromWidthRatio</name></name><argument_list>(<argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>
}</block></class>
</unit>
