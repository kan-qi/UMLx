<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\kickstarter\app\src\test\java\com\kickstarter\libs\utils\NumberUtilsTest.java"><package>package <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>utils</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>NumberOptions</name></name>;</import>

<import>import <name><name>junit</name><operator>.</operator><name>framework</name><operator>.</operator><name>TestCase</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>math</name><operator>.</operator><name>RoundingMode</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Locale</name></name>;</import>

<class><specifier>public</specifier> <specifier>final</specifier> class <name>NumberUtilsTest</name> <super><extends>extends <name>TestCase</name></extends></super> <block>{
  <function><specifier>public</specifier> <type><name>void</name></type> <name>testFlooredPercentage</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"50%"</literal></expr></argument>, <argument><expr><call><name><name>NumberUtils</name><operator>.</operator><name>flooredPercentage</name></name><argument_list>(<argument><expr><literal type="number">50.0f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"99%"</literal></expr></argument>, <argument><expr><call><name><name>NumberUtils</name><operator>.</operator><name>flooredPercentage</name></name><argument_list>(<argument><expr><literal type="number">99.99f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"0%"</literal></expr></argument>, <argument><expr><call><name><name>NumberUtils</name><operator>.</operator><name>flooredPercentage</name></name><argument_list>(<argument><expr><literal type="number">0.01f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"1,000%"</literal></expr></argument>, <argument><expr><call><name><name>NumberUtils</name><operator>.</operator><name>flooredPercentage</name></name><argument_list>(<argument><expr><literal type="number">1000.0f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>testFlooredPercentage_withFrenchLocale</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"50 %"</literal></expr></argument>, <argument><expr><call><name><name>NumberUtils</name><operator>.</operator><name>flooredPercentage</name></name><argument_list>(<argument><expr><literal type="number">50.0f</literal></expr></argument>, <argument><expr><name><name>Locale</name><operator>.</operator><name>FRENCH</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>testFlooredPercentage_withGermanLocale</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"1.000%"</literal></expr></argument>, <argument><expr><call><name><name>NumberUtils</name><operator>.</operator><name>flooredPercentage</name></name><argument_list>(<argument><expr><literal type="number">1000.0f</literal></expr></argument>, <argument><expr><name><name>Locale</name><operator>.</operator><name>GERMAN</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>testFormatNumber_int</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"100"</literal></expr></argument>, <argument><expr><call><name><name>NumberUtils</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"1,000"</literal></expr></argument>, <argument><expr><call><name><name>NumberUtils</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>testFormatNumber_intWithGermanyLocale</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"1.000"</literal></expr></argument>, <argument><expr><call><name><name>NumberUtils</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>, <argument><expr><name><name>Locale</name><operator>.</operator><name>GERMANY</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>testFormatNumber_float</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"100"</literal></expr></argument>, <argument><expr><call><name><name>NumberUtils</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="number">100.0f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"1,000"</literal></expr></argument>, <argument><expr><call><name><name>NumberUtils</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="number">1000.0f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"1,001"</literal></expr></argument>, <argument><expr><call><name><name>NumberUtils</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="number">1000.6f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>testFormatNumber_floatRounding</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><call><name><name>NumberUtils</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="number">1.1f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><call><name><name>NumberUtils</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="number">1.5f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"2"</literal></expr></argument>, <argument><expr><call><name><name>NumberUtils</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="number">2.5f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"2"</literal></expr></argument>, <argument><expr><call><name><name>NumberUtils</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="number">1.51f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><call><name><name>NumberUtils</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="number">1.9f</literal></expr></argument>, <argument><expr><call><name><name>NumberOptions</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>roundingMode</name><argument_list>(<argument><expr><name><name>RoundingMode</name><operator>.</operator><name>DOWN</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"2"</literal></expr></argument>, <argument><expr><call><name><name>NumberUtils</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="number">1.1f</literal></expr></argument>, <argument><expr><call><name><name>NumberOptions</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>roundingMode</name><argument_list>(<argument><expr><name><name>RoundingMode</name><operator>.</operator><name>UP</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>testFormatNumber_floatWithPrecision</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"100.12"</literal></expr></argument>, <argument><expr><call><name><name>NumberUtils</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="number">100.12f</literal></expr></argument>, <argument><expr><call><name><name>NumberOptions</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>precision</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"100.2"</literal></expr></argument>, <argument><expr><call><name><name>NumberUtils</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="number">100.16f</literal></expr></argument>, <argument><expr><call><name><name>NumberOptions</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>precision</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"100.00"</literal></expr></argument>, <argument><expr><call><name><name>NumberUtils</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="number">100.0f</literal></expr></argument>, <argument><expr><call><name><name>NumberOptions</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>precision</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>testFormatNumber_floatWithBucket</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"100"</literal></expr></argument>, <argument><expr><call><name><name>NumberUtils</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="number">100.0f</literal></expr></argument>, <argument><expr><call><name><name>NumberOptions</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>bucketAbove</name><argument_list>(<argument><expr><literal type="number">100.0f</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"100"</literal></expr></argument>, <argument><expr><call><name><name>NumberUtils</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="number">100.0f</literal></expr></argument>, <argument><expr><call><name><name>NumberOptions</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>bucketAbove</name><argument_list>(<argument><expr><literal type="number">1000.0f</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"1K"</literal></expr></argument>, <argument><expr><call><name><name>NumberUtils</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="number">1000.0f</literal></expr></argument>, <argument><expr><call><name><name>NumberOptions</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>bucketAbove</name><argument_list>(<argument><expr><literal type="number">1000.0f</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"10K"</literal></expr></argument>, <argument><expr><call><name><name>NumberUtils</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="number">10000.0f</literal></expr></argument>, <argument><expr><call><name><name>NumberOptions</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>bucketAbove</name><argument_list>(<argument><expr><literal type="number">1000.0f</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"100K"</literal></expr></argument>, <argument><expr><call><name><name>NumberUtils</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="number">100_000.0f</literal></expr></argument>, <argument><expr><call><name><name>NumberOptions</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>bucketAbove</name><argument_list>(<argument><expr><literal type="number">1000.0f</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"1,000K"</literal></expr></argument>, <argument><expr><call><name><name>NumberUtils</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="number">1_000_000.0f</literal></expr></argument>, <argument><expr><call><name><name>NumberOptions</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>bucketAbove</name><argument_list>(<argument><expr><literal type="number">1000.0f</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"100"</literal></expr></argument>, <argument><expr><call><name><name>NumberUtils</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="number">100.0f</literal></expr></argument>, <argument><expr><call><name><name>NumberOptions</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>bucketAbove</name><argument_list>(<argument><expr><literal type="number">10000.0f</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"1,000"</literal></expr></argument>, <argument><expr><call><name><name>NumberUtils</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="number">1000.0f</literal></expr></argument>, <argument><expr><call><name><name>NumberOptions</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>bucketAbove</name><argument_list>(<argument><expr><literal type="number">10000.0f</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"10K"</literal></expr></argument>, <argument><expr><call><name><name>NumberUtils</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="number">10000.0f</literal></expr></argument>, <argument><expr><call><name><name>NumberOptions</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>bucketAbove</name><argument_list>(<argument><expr><literal type="number">10000.0f</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"100K"</literal></expr></argument>, <argument><expr><call><name><name>NumberUtils</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="number">100_000.0f</literal></expr></argument>, <argument><expr><call><name><name>NumberOptions</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>bucketAbove</name><argument_list>(<argument><expr><literal type="number">10000.0f</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"1,000K"</literal></expr></argument>, <argument><expr><call><name><name>NumberUtils</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="number">1_000_000.0f</literal></expr></argument>, <argument><expr><call><name><name>NumberOptions</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>bucketAbove</name><argument_list>(<argument><expr><literal type="number">10000.0f</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"100"</literal></expr></argument>, <argument><expr><call><name><name>NumberUtils</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="number">100.0f</literal></expr></argument>, <argument><expr><call><name><name>NumberOptions</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>bucketAbove</name><argument_list>(<argument><expr><literal type="number">100_000.0f</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"1,000"</literal></expr></argument>, <argument><expr><call><name><name>NumberUtils</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="number">1000.0f</literal></expr></argument>, <argument><expr><call><name><name>NumberOptions</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>bucketAbove</name><argument_list>(<argument><expr><literal type="number">100_000.0f</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"10,000"</literal></expr></argument>, <argument><expr><call><name><name>NumberUtils</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="number">10000.0f</literal></expr></argument>, <argument><expr><call><name><name>NumberOptions</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>bucketAbove</name><argument_list>(<argument><expr><literal type="number">100_000.0f</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"100K"</literal></expr></argument>, <argument><expr><call><name><name>NumberUtils</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="number">100_000.0f</literal></expr></argument>, <argument><expr><call><name><name>NumberOptions</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>bucketAbove</name><argument_list>(<argument><expr><literal type="number">100_000.0f</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"1,000K"</literal></expr></argument>, <argument><expr><call><name><name>NumberUtils</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="number">1_000_000.0f</literal></expr></argument>, <argument><expr><call><name><name>NumberOptions</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>bucketAbove</name><argument_list>(<argument><expr><literal type="number">100_000.0f</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"100"</literal></expr></argument>, <argument><expr><call><name><name>NumberUtils</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="number">100.0f</literal></expr></argument>, <argument><expr><call><name><name>NumberOptions</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>bucketAbove</name><argument_list>(<argument><expr><literal type="number">1_000_000.0f</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"1,000"</literal></expr></argument>, <argument><expr><call><name><name>NumberUtils</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="number">1000.0f</literal></expr></argument>, <argument><expr><call><name><name>NumberOptions</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>bucketAbove</name><argument_list>(<argument><expr><literal type="number">1_000_000.0f</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"10,000"</literal></expr></argument>, <argument><expr><call><name><name>NumberUtils</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="number">10000.0f</literal></expr></argument>, <argument><expr><call><name><name>NumberOptions</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>bucketAbove</name><argument_list>(<argument><expr><literal type="number">1_000_000.0f</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"100,000"</literal></expr></argument>, <argument><expr><call><name><name>NumberUtils</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="number">100_000.0f</literal></expr></argument>, <argument><expr><call><name><name>NumberOptions</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>bucketAbove</name><argument_list>(<argument><expr><literal type="number">1_000_000.0f</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"1M"</literal></expr></argument>, <argument><expr><call><name><name>NumberUtils</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="number">1_000_000.0f</literal></expr></argument>, <argument><expr><call><name><name>NumberOptions</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>bucketAbove</name><argument_list>(<argument><expr><literal type="number">1_000_000.0f</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"111"</literal></expr></argument>, <argument><expr><call><name><name>NumberUtils</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="number">111.0f</literal></expr></argument>, <argument><expr><call><name><name>NumberOptions</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>bucketAbove</name><argument_list>(<argument><expr><literal type="number">1000.0f</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>bucketPrecision</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"111.00"</literal></expr></argument>, <argument><expr><call><name><name>NumberUtils</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="number">111.0f</literal></expr></argument>, <argument><expr><call><name><name>NumberOptions</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>bucketAbove</name><argument_list>(<argument><expr><literal type="number">111.0f</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>bucketPrecision</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>precision</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"1.1K"</literal></expr></argument>, <argument><expr><call><name><name>NumberUtils</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="number">1111.0f</literal></expr></argument>, <argument><expr><call><name><name>NumberOptions</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>bucketAbove</name><argument_list>(<argument><expr><literal type="number">1000.0f</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>bucketPrecision</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"1.1K"</literal></expr></argument>, <argument><expr><call><name><name>NumberUtils</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="number">1111.0f</literal></expr></argument>, <argument><expr><call><name><name>NumberOptions</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>bucketAbove</name><argument_list>(<argument><expr><literal type="number">1000.0f</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>bucketPrecision</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>precision</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"11.1K"</literal></expr></argument>, <argument><expr><call><name><name>NumberUtils</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="number">11111.0f</literal></expr></argument>, <argument><expr><call><name><name>NumberOptions</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>bucketAbove</name><argument_list>(<argument><expr><literal type="number">1000.0f</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>bucketPrecision</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"111.1K"</literal></expr></argument>, <argument><expr><call><name><name>NumberUtils</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="number">111_111.0f</literal></expr></argument>, <argument><expr><call><name><name>NumberOptions</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>bucketAbove</name><argument_list>(<argument><expr><literal type="number">1000.0f</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>bucketPrecision</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"1,111.1K"</literal></expr></argument>, <argument><expr><call><name><name>NumberUtils</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="number">1_111_111.0f</literal></expr></argument>, <argument><expr><call><name><name>NumberOptions</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>bucketAbove</name><argument_list>(<argument><expr><literal type="number">1000.0f</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>bucketPrecision</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>testFormatNumber_floatWithCurrency</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"$100"</literal></expr></argument>, <argument><expr><call><name><name>NumberUtils</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="number">100.0f</literal></expr></argument>, <argument><expr><call><name><name>NumberOptions</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>currencySymbol</name><argument_list>(<argument><expr><literal type="string">"$"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"â¬100"</literal></expr></argument>, <argument><expr><call><name><name>NumberUtils</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="number">100.0f</literal></expr></argument>, <argument><expr><call><name><name>NumberOptions</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>currencySymbol</name><argument_list>(<argument><expr><literal type="string">"â¬"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"$100 CAD"</literal></expr></argument>, <argument><expr><call><name><name>NumberUtils</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="number">100.0f</literal></expr></argument>, <argument><expr><call><name><name>NumberOptions</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>currencySymbol</name><argument_list>(<argument><expr><literal type="string">"$"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>currencyCode</name><argument_list>(<argument><expr><literal type="string">"CAD"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>testFormatNumber_floatWithCurrencyAndGermanyLocale</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"100 $"</literal></expr></argument>, <argument><expr><call><name><name>NumberUtils</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="number">100.0f</literal></expr></argument>, <argument><expr><call><name><name>NumberOptions</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>currencySymbol</name><argument_list>(<argument><expr><literal type="string">"$"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Locale</name><operator>.</operator><name>GERMANY</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"1.000"</literal></expr></argument>, <argument><expr><call><name><name>NumberUtils</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="number">1000.0f</literal></expr></argument>, <argument><expr><call><name><name>NumberOptions</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Locale</name><operator>.</operator><name>GERMANY</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"100,12"</literal></expr></argument>, <argument><expr><call><name><name>NumberUtils</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="number">100.12f</literal></expr></argument>, <argument><expr><call><name><name>NumberOptions</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>precision</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Locale</name><operator>.</operator><name>GERMANY</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>
}</block></class>

</unit>
