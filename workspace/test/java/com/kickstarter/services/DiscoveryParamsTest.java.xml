<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\kickstarter\app\src\test\java\com\kickstarter\services\DiscoveryParamsTest.java"><package>package <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>services</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>KSRobolectricTestCase</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>mock</name><operator>.</operator><name>factories</name><operator>.</operator><name>CategoryFactory</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>models</name><operator>.</operator><name>Category</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>

<class><specifier>public</specifier> <specifier>final</specifier> class <name>DiscoveryParamsTest</name> <super><extends>extends <name>KSRobolectricTestCase</name></extends></super> <block>{
  <function><annotation>@<name>Test</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>testFromUri_discoverRoot</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>Uri</name></type> <name>uri</name> <init>= <expr><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><literal type="string">"https://www.kickstarter.com/discover"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>DiscoveryParams</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>DiscoveryParams</name><operator>.</operator><name>fromUri</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>testFromUri_backed</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>Uri</name></type> <name>uri</name> <init>= <expr><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><literal type="string">"https://www.kickstarter.com/discover/advanced?backed=1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>DiscoveryParams</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>backed</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>DiscoveryParams</name><operator>.</operator><name>fromUri</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>testFromUri_categories</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>DiscoveryParams</name></type> <name>params</name> <init>= <expr><call><name><name>DiscoveryParams</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>categoryParam</name><argument_list>(<argument><expr><literal type="string">"music"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name>Uri</name></type> <name>categoryUri</name> <init>= <expr><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><literal type="string">"https://www.kickstarter.com/discover/categories/music"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><call><name><name>DiscoveryParams</name><operator>.</operator><name>fromUri</name></name><argument_list>(<argument><expr><name>categoryUri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name>Uri</name></type> <name>advancedUri</name> <init>= <expr><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><literal type="string">"https://www.kickstarter.com/discover/advanced?category_id=music"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><call><name><name>DiscoveryParams</name><operator>.</operator><name>fromUri</name></name><argument_list>(<argument><expr><name>advancedUri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>testFromUri_filters</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>DiscoveryParams</name></type> <name>allParams</name> <init>= <expr><call><name><name>DiscoveryParams</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call>
      <operator>.</operator><call><name>recommended</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>social</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>staffPicks</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>starred</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name>Uri</name></type> <name>allParamsUri</name> <init>= <expr><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(
      <argument><expr><literal type="string">"https://www.kickstarter.com/discover/advanced?recommended=true&amp;social=1&amp;staff_picks=true&amp;starred=1"</literal></expr></argument>
    )</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>allParams</name></expr></argument>, <argument><expr><call><name><name>DiscoveryParams</name><operator>.</operator><name>fromUri</name></name><argument_list>(<argument><expr><name>allParamsUri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name>DiscoveryParams</name></type> <name>recommendedParams</name> <init>= <expr><call><name><name>DiscoveryParams</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>recommended</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>Uri</name></type> <name>recommendedUri</name> <init>= <expr><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><literal type="string">"https://www.kickstarter.com/discover/advanced?recommended=true"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>recommendedParams</name></expr></argument>, <argument><expr><call><name><name>DiscoveryParams</name><operator>.</operator><name>fromUri</name></name><argument_list>(<argument><expr><name>recommendedUri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name>DiscoveryParams</name></type> <name>socialParams</name> <init>= <expr><call><name><name>DiscoveryParams</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>social</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>Uri</name></type> <name>socialUri</name> <init>= <expr><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><literal type="string">"https://www.kickstarter.com/discover/advanced?social=1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>socialParams</name></expr></argument>, <argument><expr><call><name><name>DiscoveryParams</name><operator>.</operator><name>fromUri</name></name><argument_list>(<argument><expr><name>socialUri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name>DiscoveryParams</name></type> <name>staffPickParams</name> <init>= <expr><call><name><name>DiscoveryParams</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>staffPicks</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>Uri</name></type> <name>staffPicksUri</name> <init>= <expr><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><literal type="string">"https://www.kickstarter.com/discover/advanced?staff_picks=true"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>staffPickParams</name></expr></argument>, <argument><expr><call><name><name>DiscoveryParams</name><operator>.</operator><name>fromUri</name></name><argument_list>(<argument><expr><name>staffPicksUri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name>DiscoveryParams</name></type> <name>starredParams</name> <init>= <expr><call><name><name>DiscoveryParams</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>starred</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>Uri</name></type> <name>starredUri</name> <init>= <expr><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><literal type="string">"https://www.kickstarter.com/discover/advanced?starred=1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>starredParams</name></expr></argument>, <argument><expr><call><name><name>DiscoveryParams</name><operator>.</operator><name>fromUri</name></name><argument_list>(<argument><expr><name>starredUri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>testFromUri_locations</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>DiscoveryParams</name></type> <name>params</name> <init>= <expr><call><name><name>DiscoveryParams</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>locationParam</name><argument_list>(<argument><expr><literal type="string">"sydney-au"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name>Uri</name></type> <name>placesUri</name> <init>= <expr><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><literal type="string">"https://www.kickstarter.com/discover/places/sydney-au"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><call><name><name>DiscoveryParams</name><operator>.</operator><name>fromUri</name></name><argument_list>(<argument><expr><name>placesUri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name>Uri</name></type> <name>advancedUri</name> <init>= <expr><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><literal type="string">"https://www.kickstarter.com/discover/advanced?woe_id=sydney-au"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><call><name><name>DiscoveryParams</name><operator>.</operator><name>fromUri</name></name><argument_list>(<argument><expr><name>advancedUri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>testFromUri_customScopes</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>DiscoveryParams</name></type> <name>endingSoonParams</name> <init>= <expr><call><name><name>DiscoveryParams</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>sort</name><argument_list>(<argument><expr><name><name>DiscoveryParams</name><operator>.</operator><name>Sort</name><operator>.</operator><name>ENDING_SOON</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>Uri</name></type> <name>endingSoonUri</name> <init>= <expr><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><literal type="string">"https://www.kickstarter.com/discover/ending-soon"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>endingSoonParams</name></expr></argument>, <argument><expr><call><name><name>DiscoveryParams</name><operator>.</operator><name>fromUri</name></name><argument_list>(<argument><expr><name>endingSoonUri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name>DiscoveryParams</name></type> <name>newestParams</name> <init>= <expr><call><name><name>DiscoveryParams</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>sort</name><argument_list>(<argument><expr><name><name>DiscoveryParams</name><operator>.</operator><name>Sort</name><operator>.</operator><name>NEWEST</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>staffPicks</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>Uri</name></type> <name>newestUri</name> <init>= <expr><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><literal type="string">"https://www.kickstarter.com/discover/newest"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>newestParams</name></expr></argument>, <argument><expr><call><name><name>DiscoveryParams</name><operator>.</operator><name>fromUri</name></name><argument_list>(<argument><expr><name>newestUri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name>DiscoveryParams</name></type> <name>popularParams</name> <init>= <expr><call><name><name>DiscoveryParams</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>sort</name><argument_list>(<argument><expr><name><name>DiscoveryParams</name><operator>.</operator><name>Sort</name><operator>.</operator><name>POPULAR</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>Uri</name></type> <name>popularUri</name> <init>= <expr><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><literal type="string">"https://www.kickstarter.com/discover/popular"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>popularParams</name></expr></argument>, <argument><expr><call><name><name>DiscoveryParams</name><operator>.</operator><name>fromUri</name></name><argument_list>(<argument><expr><name>popularUri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name>DiscoveryParams</name></type> <name>recentlyLaunchedParams</name> <init>= <expr><call><name><name>DiscoveryParams</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>sort</name><argument_list>(<argument><expr><name><name>DiscoveryParams</name><operator>.</operator><name>Sort</name><operator>.</operator><name>NEWEST</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>Uri</name></type> <name>recentlyLaunchedUri</name> <init>= <expr><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><literal type="string">"https://www.kickstarter.com/discover/recently-launched"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>recentlyLaunchedParams</name></expr></argument>, <argument><expr><call><name><name>DiscoveryParams</name><operator>.</operator><name>fromUri</name></name><argument_list>(<argument><expr><name>recentlyLaunchedUri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name>DiscoveryParams</name></type> <name>smallProjectsParams</name> <init>= <expr><call><name><name>DiscoveryParams</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>pledged</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>Uri</name></type> <name>smallProjectsUri</name> <init>= <expr><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><literal type="string">"https://www.kickstarter.com/discover/small-projects"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>smallProjectsParams</name></expr></argument>, <argument><expr><call><name><name>DiscoveryParams</name><operator>.</operator><name>fromUri</name></name><argument_list>(<argument><expr><name>smallProjectsUri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name>DiscoveryParams</name></type> <name>socialParams</name> <init>= <expr><call><name><name>DiscoveryParams</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>social</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>Uri</name></type> <name>socialUri</name> <init>= <expr><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><literal type="string">"https://www.kickstarter.com/discover/social"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>socialParams</name></expr></argument>, <argument><expr><call><name><name>DiscoveryParams</name><operator>.</operator><name>fromUri</name></name><argument_list>(<argument><expr><name>socialUri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name>DiscoveryParams</name></type> <name>successfulParams</name> <init>= <expr><call><name><name>DiscoveryParams</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>sort</name><argument_list>(<argument><expr><name><name>DiscoveryParams</name><operator>.</operator><name>Sort</name><operator>.</operator><name>ENDING_SOON</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>state</name><argument_list>(<argument><expr><name><name>DiscoveryParams</name><operator>.</operator><name>State</name><operator>.</operator><name>SUCCESSFUL</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>Uri</name></type> <name>successfulUri</name> <init>= <expr><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><literal type="string">"https://www.kickstarter.com/discover/successful"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>successfulParams</name></expr></argument>, <argument><expr><call><name><name>DiscoveryParams</name><operator>.</operator><name>fromUri</name></name><argument_list>(<argument><expr><name>successfulUri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>testFromUri_pagination</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>DiscoveryParams</name></type> <name>params</name> <init>= <expr><call><name><name>DiscoveryParams</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>page</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>perPage</name><argument_list>(<argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name>Uri</name></type> <name>uri</name> <init>= <expr><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><literal type="string">"https://www.kickstarter.com/discover/advanced?page=5&amp;per_page=21"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><call><name><name>DiscoveryParams</name><operator>.</operator><name>fromUri</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>testFromUri_sort</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>DiscoveryParams</name></type> <name>params</name> <init>= <expr><call><name><name>DiscoveryParams</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>sort</name><argument_list>(<argument><expr><name><name>DiscoveryParams</name><operator>.</operator><name>Sort</name><operator>.</operator><name>POPULAR</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name>Uri</name></type> <name>uri</name> <init>= <expr><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><literal type="string">"https://www.kickstarter.com/discover/advanced?sort=popularity"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><call><name><name>DiscoveryParams</name><operator>.</operator><name>fromUri</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>testFromUri_term</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>DiscoveryParams</name></type> <name>params</name> <init>= <expr><call><name><name>DiscoveryParams</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>term</name><argument_list>(<argument><expr><literal type="string">"skull graphic tee"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name>Uri</name></type> <name>advancedUri</name> <init>= <expr><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><literal type="string">"https://www.kickstarter.com/discover/advanced?term=skull+graphic+tee"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><call><name><name>DiscoveryParams</name><operator>.</operator><name>fromUri</name></name><argument_list>(<argument><expr><name>advancedUri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name>Uri</name></type> <name>searchUri</name> <init>= <expr><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><literal type="string">"https://www.kickstarter.com/projects/search?term=skull+graphic+tee"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><call><name><name>DiscoveryParams</name><operator>.</operator><name>fromUri</name></name><argument_list>(<argument><expr><name>searchUri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>testShouldIncludeFeatured</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>Category</name></type> <name>nonRootCategory</name> <init>= <expr><call><name><name>CategoryFactory</name><operator>.</operator><name>bluesCategory</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>DiscoveryParams</name></type> <name>nonRootParams</name> <init>= <expr><call><name><name>DiscoveryParams</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>category</name><argument_list>(<argument><expr><name>nonRootCategory</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><call><name><name>nonRootParams</name><operator>.</operator><name>shouldIncludeFeatured</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name>Category</name></type> <name>rootCategory</name> <init>= <expr><call><name><name>CategoryFactory</name><operator>.</operator><name>gamesCategory</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>DiscoveryParams</name></type> <name>rootParams</name> <init>= <expr><call><name><name>DiscoveryParams</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>category</name><argument_list>(<argument><expr><name>rootCategory</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><call><name><name>rootParams</name><operator>.</operator><name>shouldIncludeFeatured</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>
}</block></class>
</unit>
