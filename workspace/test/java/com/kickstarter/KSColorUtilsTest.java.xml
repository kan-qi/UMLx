<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\kickstarter\app\src\test\java\com\kickstarter\KSColorUtilsTest.java"><package>package <name><name>com</name><operator>.</operator><name>kickstarter</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>utils</name><operator>.</operator><name>KSColorUtils</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>

<class><specifier>public</specifier> class <name>KSColorUtilsTest</name> <super><extends>extends <name>KSRobolectricTestCase</name></extends></super> <block>{
  <function><annotation>@<name>Test</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>testSetAlpha</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0x00FFFFFF</literal></expr></argument>, <argument><expr><call><name><name>KSColorUtils</name><operator>.</operator><name>setAlpha</name></name><argument_list>(<argument><expr><literal type="number">0xFFFFFFFF</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0xFFFFFFFF</literal></expr></argument>, <argument><expr><call><name><name>KSColorUtils</name><operator>.</operator><name>setAlpha</name></name><argument_list>(<argument><expr><literal type="number">0x00FFFFFF</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0x0ACCCCCC</literal></expr></argument>, <argument><expr><call><name><name>KSColorUtils</name><operator>.</operator><name>setAlpha</name></name><argument_list>(<argument><expr><literal type="number">0xCCCCCC</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0x0ACCCCCC</literal></expr></argument>, <argument><expr><call><name><name>KSColorUtils</name><operator>.</operator><name>setAlpha</name></name><argument_list>(<argument><expr><literal type="number">0xFFCCCCCC</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>testDarken</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0xFF1DB75B</literal></expr></argument>, <argument><expr><call><name><name>KSColorUtils</name><operator>.</operator><name>darken</name></name><argument_list>(<argument><expr><literal type="number">0xFF2BDE73</literal></expr></argument>, <argument><expr><literal type="number">0.2f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>testDarkenWithAlpha</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0xCC1DB75B</literal></expr></argument>, <argument><expr><call><name><name>KSColorUtils</name><operator>.</operator><name>darken</name></name><argument_list>(<argument><expr><literal type="number">0xCC2BDE73</literal></expr></argument>, <argument><expr><literal type="number">0.2f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>testLighten</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0xFF55E58F</literal></expr></argument>, <argument><expr><call><name><name>KSColorUtils</name><operator>.</operator><name>lighten</name></name><argument_list>(<argument><expr><literal type="number">0xFF2BDE73</literal></expr></argument>, <argument><expr><literal type="number">0.2f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>testLightenWithAlpha</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0xCC55E58F</literal></expr></argument>, <argument><expr><call><name><name>KSColorUtils</name><operator>.</operator><name>lighten</name></name><argument_list>(<argument><expr><literal type="number">0xCC2BDE73</literal></expr></argument>, <argument><expr><literal type="number">0.2f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>testArtIsLight</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>KSColorUtils</name><operator>.</operator><name>isLight</name></name><argument_list>(<argument><expr><literal type="number">0xFFFFBDAB</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>testComicsIsLight</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>KSColorUtils</name><operator>.</operator><name>isLight</name></name><argument_list>(<argument><expr><literal type="number">0xFFFFFB78</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>testCraftsIsNotLight</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>KSColorUtils</name><operator>.</operator><name>isLight</name></name><argument_list>(<argument><expr><literal type="number">0xFFFF81AC</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>testDanceIsNotLight</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>KSColorUtils</name><operator>.</operator><name>isLight</name></name><argument_list>(<argument><expr><literal type="number">0xFFA695F9</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>testDesignIsNotLight</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>KSColorUtils</name><operator>.</operator><name>isLight</name></name><argument_list>(<argument><expr><literal type="number">0xFF2752FF</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>testFashionIsNotLight</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>KSColorUtils</name><operator>.</operator><name>isLight</name></name><argument_list>(<argument><expr><literal type="number">0xFFFF9FD6</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>testFilmAndVideoIsNotLight</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>KSColorUtils</name><operator>.</operator><name>isLight</name></name><argument_list>(<argument><expr><literal type="number">0xFFFF596E</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>testFoodIsNotLight</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>KSColorUtils</name><operator>.</operator><name>isLight</name></name><argument_list>(<argument><expr><literal type="number">0xFFFF3642</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>testGamesIsNotLight</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>KSColorUtils</name><operator>.</operator><name>isLight</name></name><argument_list>(<argument><expr><literal type="number">0xFF00C9AB</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>testJournalismIsNotLight</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>KSColorUtils</name><operator>.</operator><name>isLight</name></name><argument_list>(<argument><expr><literal type="number">0xFF12BCEA</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>testMusicIsLight</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>KSColorUtils</name><operator>.</operator><name>isLight</name></name><argument_list>(<argument><expr><literal type="number">0xFFA5FFD3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>testPhotographyIsNotLight</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>KSColorUtils</name><operator>.</operator><name>isLight</name></name><argument_list>(<argument><expr><literal type="number">0xFF00E3E5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>testPublishingIsLight</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>KSColorUtils</name><operator>.</operator><name>isLight</name></name><argument_list>(<argument><expr><literal type="number">0xFFE2DCD0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>testTechnologyIsNotLight</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>KSColorUtils</name><operator>.</operator><name>isLight</name></name><argument_list>(<argument><expr><literal type="number">0xFF6396FC</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>testTheaterIsNotLight</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>KSColorUtils</name><operator>.</operator><name>isLight</name></name><argument_list>(<argument><expr><literal type="number">0xFFFF7D5F</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>testBlackIsDark</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>KSColorUtils</name><operator>.</operator><name>isDark</name></name><argument_list>(<argument><expr><literal type="number">0xFF000000</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>testWhiteIsNotDark</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>KSColorUtils</name><operator>.</operator><name>isDark</name></name><argument_list>(<argument><expr><literal type="number">0xFFFFFFFF</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>
}</block></class>
</unit>
