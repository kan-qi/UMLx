<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\kickstarter\app\src\test\java\com\kickstarter\KSCurrencyTest.java"><package>package <name><name>com</name><operator>.</operator><name>kickstarter</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>Config</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>CurrentConfigType</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>KSCurrency</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>mock</name><operator>.</operator><name>MockCurrentConfig</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>mock</name><operator>.</operator><name>factories</name><operator>.</operator><name>ConfigFactory</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>mock</name><operator>.</operator><name>factories</name><operator>.</operator><name>ProjectFactory</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>models</name><operator>.</operator><name>Project</name></name>;</import>

<import>import <name><name>junit</name><operator>.</operator><name>framework</name><operator>.</operator><name>TestCase</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>math</name><operator>.</operator><name>RoundingMode</name></name>;</import>

<class><specifier>public</specifier> class <name>KSCurrencyTest</name> <super><extends>extends <name>TestCase</name></extends></super> <block>{
  <function><specifier>public</specifier> <type><name>void</name></type> <name>testFormatCurrency_withUserInUS</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>KSCurrency</name></type> <name>currency</name> <init>= <expr><call><name>createKSCurrency</name><argument_list>(<argument><expr><literal type="string">"US"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"$100"</literal></expr></argument>, <argument><expr><call><name><name>currency</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="number">100.0f</literal></expr></argument>, <argument><expr><call><name><name>ProjectFactory</name><operator>.</operator><name>project</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"$100 CAD"</literal></expr></argument>, <argument><expr><call><name><name>currency</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="number">100.0f</literal></expr></argument>, <argument><expr><call><name><name>ProjectFactory</name><operator>.</operator><name>caProject</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"Â£100"</literal></expr></argument>, <argument><expr><call><name><name>currency</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="number">100.0f</literal></expr></argument>, <argument><expr><call><name><name>ProjectFactory</name><operator>.</operator><name>ukProject</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"$100"</literal></expr></argument>, <argument><expr><call><name><name>currency</name><operator>.</operator><name>formatWithUserPreference</name></name><argument_list>(<argument><expr><literal type="number">100.0f</literal></expr></argument>, <argument><expr><call><name><name>ProjectFactory</name><operator>.</operator><name>project</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>RoundingMode</name><operator>.</operator><name>DOWN</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"CA$ 100"</literal></expr></argument>, <argument><expr><call><name><name>currency</name><operator>.</operator><name>formatWithUserPreference</name></name><argument_list>(<argument><expr><literal type="number">100.0f</literal></expr></argument>, <argument><expr><call><name><name>ProjectFactory</name><operator>.</operator><name>caProject</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>RoundingMode</name><operator>.</operator><name>DOWN</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"Â£100"</literal></expr></argument>, <argument><expr><call><name><name>currency</name><operator>.</operator><name>formatWithUserPreference</name></name><argument_list>(<argument><expr><literal type="number">100.0f</literal></expr></argument>, <argument><expr><call><name><name>ProjectFactory</name><operator>.</operator><name>ukProject</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>RoundingMode</name><operator>.</operator><name>DOWN</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>testFormatCurrency_withUserInCA</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>KSCurrency</name></type> <name>currency</name> <init>= <expr><call><name>createKSCurrency</name><argument_list>(<argument><expr><literal type="string">"CA"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"$100 USD"</literal></expr></argument>, <argument><expr><call><name><name>currency</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="number">100.0f</literal></expr></argument>, <argument><expr><call><name><name>ProjectFactory</name><operator>.</operator><name>project</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"$100 CAD"</literal></expr></argument>, <argument><expr><call><name><name>currency</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="number">100.0f</literal></expr></argument>, <argument><expr><call><name><name>ProjectFactory</name><operator>.</operator><name>caProject</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"Â£100"</literal></expr></argument>, <argument><expr><call><name><name>currency</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="number">100.0f</literal></expr></argument>, <argument><expr><call><name><name>ProjectFactory</name><operator>.</operator><name>ukProject</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"US$ 100"</literal></expr></argument>, <argument><expr><call><name><name>currency</name><operator>.</operator><name>formatWithUserPreference</name></name><argument_list>(<argument><expr><literal type="number">100.0f</literal></expr></argument>, <argument><expr><call><name><name>ProjectFactory</name><operator>.</operator><name>project</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>RoundingMode</name><operator>.</operator><name>DOWN</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"Â£100"</literal></expr></argument>, <argument><expr><call><name><name>currency</name><operator>.</operator><name>formatWithUserPreference</name></name><argument_list>(<argument><expr><literal type="number">100.0f</literal></expr></argument>, <argument><expr><call><name><name>ProjectFactory</name><operator>.</operator><name>ukProject</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>RoundingMode</name><operator>.</operator><name>DOWN</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"CA$ 100"</literal></expr></argument>, <argument><expr><call><name><name>currency</name><operator>.</operator><name>formatWithUserPreference</name></name><argument_list>(<argument><expr><literal type="number">100.0f</literal></expr></argument>, <argument><expr><call><name><name>ProjectFactory</name><operator>.</operator><name>caProject</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>RoundingMode</name><operator>.</operator><name>DOWN</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>testFormatCurrency_withUserInUK</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>KSCurrency</name></type> <name>currency</name> <init>= <expr><call><name>createKSCurrency</name><argument_list>(<argument><expr><literal type="string">"UK"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"$100 USD"</literal></expr></argument>, <argument><expr><call><name><name>currency</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="number">100.0f</literal></expr></argument>, <argument><expr><call><name><name>ProjectFactory</name><operator>.</operator><name>project</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"$100 CAD"</literal></expr></argument>, <argument><expr><call><name><name>currency</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="number">100.0f</literal></expr></argument>, <argument><expr><call><name><name>ProjectFactory</name><operator>.</operator><name>caProject</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"Â£100"</literal></expr></argument>, <argument><expr><call><name><name>currency</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="number">100.0f</literal></expr></argument>, <argument><expr><call><name><name>ProjectFactory</name><operator>.</operator><name>ukProject</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"CA$ 100"</literal></expr></argument>, <argument><expr><call><name><name>currency</name><operator>.</operator><name>formatWithUserPreference</name></name><argument_list>(<argument><expr><literal type="number">100.0f</literal></expr></argument>, <argument><expr><call><name><name>ProjectFactory</name><operator>.</operator><name>caProject</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>RoundingMode</name><operator>.</operator><name>DOWN</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"Â£100"</literal></expr></argument>, <argument><expr><call><name><name>currency</name><operator>.</operator><name>formatWithUserPreference</name></name><argument_list>(<argument><expr><literal type="number">100.0f</literal></expr></argument>, <argument><expr><call><name><name>ProjectFactory</name><operator>.</operator><name>ukProject</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>RoundingMode</name><operator>.</operator><name>DOWN</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>testFormatCurrency_withUserInUnlaunchedCountry</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>KSCurrency</name></type> <name>currency</name> <init>= <expr><call><name>createKSCurrency</name><argument_list>(<argument><expr><literal type="string">"XX"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"$100 USD"</literal></expr></argument>, <argument><expr><call><name><name>currency</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="number">100.0f</literal></expr></argument>, <argument><expr><call><name><name>ProjectFactory</name><operator>.</operator><name>project</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"$100 CAD"</literal></expr></argument>, <argument><expr><call><name><name>currency</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="number">100.0f</literal></expr></argument>, <argument><expr><call><name><name>ProjectFactory</name><operator>.</operator><name>caProject</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"Â£100"</literal></expr></argument>, <argument><expr><call><name><name>currency</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="number">100.0f</literal></expr></argument>, <argument><expr><call><name><name>ProjectFactory</name><operator>.</operator><name>ukProject</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"US$ 100"</literal></expr></argument>, <argument><expr><call><name><name>currency</name><operator>.</operator><name>formatWithUserPreference</name></name><argument_list>(<argument><expr><literal type="number">100.0f</literal></expr></argument>, <argument><expr><call><name><name>ProjectFactory</name><operator>.</operator><name>project</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>RoundingMode</name><operator>.</operator><name>DOWN</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"US$ 100"</literal></expr></argument>, <argument><expr><call><name><name>currency</name><operator>.</operator><name>formatWithUserPreference</name></name><argument_list>(<argument><expr><literal type="number">100.0f</literal></expr></argument>, <argument><expr><call><name><name>ProjectFactory</name><operator>.</operator><name>caProject</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>RoundingMode</name><operator>.</operator><name>DOWN</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"US$ 100"</literal></expr></argument>, <argument><expr><call><name><name>currency</name><operator>.</operator><name>formatWithUserPreference</name></name><argument_list>(<argument><expr><literal type="number">100.0f</literal></expr></argument>, <argument><expr><call><name><name>ProjectFactory</name><operator>.</operator><name>ukProject</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>RoundingMode</name><operator>.</operator><name>DOWN</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>testFormatCurrency_withCurrencyCodeExcluded</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>KSCurrency</name></type> <name>currency</name> <init>= <expr><call><name>createKSCurrency</name><argument_list>(<argument><expr><literal type="string">"CA"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"$100"</literal></expr></argument>, <argument><expr><call><name><name>currency</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="number">100.0f</literal></expr></argument>, <argument><expr><call><name><name>ProjectFactory</name><operator>.</operator><name>project</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>testFormatCurrency_withUserInUSAndUSDPreferred</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>KSCurrency</name></type> <name>currency</name> <init>= <expr><call><name>createKSCurrency</name><argument_list>(<argument><expr><literal type="string">"US"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"$150"</literal></expr></argument>, <argument><expr><call><name><name>currency</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="number">100.0f</literal></expr></argument>, <argument><expr><call><name><name>ProjectFactory</name><operator>.</operator><name>ukProject</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name><name>RoundingMode</name><operator>.</operator><name>DOWN</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>testFormatCurrency_withUserInUKAndUSDPreferred</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>KSCurrency</name></type> <name>currency</name> <init>= <expr><call><name>createKSCurrency</name><argument_list>(<argument><expr><literal type="string">"UK"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"Â£100"</literal></expr></argument>, <argument><expr><call><name><name>currency</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="number">100.0f</literal></expr></argument>, <argument><expr><call><name><name>ProjectFactory</name><operator>.</operator><name>ukProject</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name><name>RoundingMode</name><operator>.</operator><name>DOWN</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>testFormatCurrency_roundsDown</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>KSCurrency</name></type> <name>currency</name> <init>= <expr><call><name>createKSCurrency</name><argument_list>(<argument><expr><literal type="string">"US"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>Project</name></type> <name>project</name> <init>= <expr><call><name><name>ProjectFactory</name><operator>.</operator><name>project</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"$100"</literal></expr></argument>, <argument><expr><call><name><name>currency</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="number">100.4f</literal></expr></argument>, <argument><expr><name>project</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"$100"</literal></expr></argument>, <argument><expr><call><name><name>currency</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="number">100.5f</literal></expr></argument>, <argument><expr><name>project</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"$101"</literal></expr></argument>, <argument><expr><call><name><name>currency</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="number">101.5f</literal></expr></argument>, <argument><expr><name>project</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"$100"</literal></expr></argument>, <argument><expr><call><name><name>currency</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="number">100.9f</literal></expr></argument>, <argument><expr><name>project</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name>KSCurrency</name></type> <name>createKSCurrency</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>countryCode</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>Config</name></type> <name>config</name> <init>= <expr><call><name><name>ConfigFactory</name><operator>.</operator><name>config</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toBuilder</name><argument_list>()</argument_list></call>
      <operator>.</operator><call><name>countryCode</name><argument_list>(<argument><expr><name>countryCode</name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name>CurrentConfigType</name></type> <name>currentConfig</name> <init>= <expr><operator>new</operator> <call><name>MockCurrentConfig</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>currentConfig</name><operator>.</operator><name>config</name></name><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><operator>new</operator> <call><name>KSCurrency</name><argument_list>(<argument><expr><name>currentConfig</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>
}</block></class>
</unit>
