knitr::opts_chunk$set(echo = TRUE)
data <- read.csv('./modelEvaluation_4_20_cleaned_1.csv',stringsAsFactors= T)
summary(data)
data$NUM = ifelse(is.na(data$NUM), ave(data$NUM, FUN = function(x) mean(x, na.rm = TRUE)),data$NUM)
data$PROJ = ifelse(is.na(data$PROJ), ave(data$PROJ, FUN = function(x) mean(x, na.rm = TRUE)),data$PROJ)
data$Effort_Norm = ifelse(is.na(data$Effort_Norm), ave(data$Effort_Norm, FUN = function(x) mean(x, na.rm = TRUE)),data$Effort_Norm)
data$Norm_Factor = ifelse(is.na(data$Norm_Factor), ave(data$Norm_Factor, FUN = function(x) mean(x, na.rm = TRUE)),data$Norm_Factor)
data$KSLOC = ifelse(is.na(data$KSLOC), ave(data$KSLOC, FUN = function(x) mean(x, na.rm = TRUE)),data$KSLOC)
data$Effort = ifelse(is.na(data$Effort), ave(data$Effort, FUN = function(x) mean(x, na.rm = TRUE)),data$Effort)
data$Effort_Norm_UCP = ifelse(is.na(data$Effort_Norm_UCP), ave(data$Effort_Norm_UCP, FUN = function(x) mean(x, na.rm = TRUE)),data$Effort_Norm_UCP)
data$Path_Num = ifelse(is.na(data$Path_Num), ave(data$Path_Num, FUN = function(x) mean(x, na.rm = TRUE)),data$Path_Num)
data$UseCase_Num = ifelse(is.na(data$UseCase_Num), ave(data$UseCase_Num, FUN = function(x) mean(x, na.rm = TRUE)),data$UseCase_Num)
data$Total_Degree = ifelse(is.na(data$Total_Degree), ave(data$Total_Degree, FUN = function(x) mean(x, na.rm = TRUE)),data$Total_Degree)
data$Element_Num = ifelse(is.na(data$Element_Num), ave(data$Element_Num, FUN = function(x) mean(x, na.rm = TRUE)),data$Element_Num)
data$Entity_Num = ifelse(is.na(data$Entity_Num), ave(data$Entity_Num, FUN = function(x) mean(x, na.rm = TRUE)),data$Entity_Num)
data$attribute_num = ifelse(is.na(data$attribute_num), ave(data$attribute_num, FUN = function(x) mean(x, na.rm = TRUE)),data$attribute_num)
data$operation_num = ifelse(is.na(data$operation_num), ave(data$operation_num, FUN = function(x) mean(x, na.rm = TRUE)),data$operation_num)
data$class_num = ifelse(is.na(data$class_num), ave(data$class_num, FUN = function(x) mean(x, na.rm = TRUE)),data$class_num)
data$Top_Level_Classes = ifelse(is.na(data$Top_Level_Classes), ave(data$Top_Level_Classes, FUN = function(x) mean(x, na.rm = TRUE)),data$Top_Level_Classes)
data$Average_Depth_Inheritance_Tree = ifelse(is.na(data$Average_Depth_Inheritance_Tree), ave(data$Average_Depth_Inheritance_Tree, FUN = function(x) mean(x, na.rm = TRUE)),data$Average_Depth_Inheritance_Tree)
data$Average_Number_Of_Children_Per_Base_Class = ifelse(is.na(data$Average_Number_Of_Children_Per_Base_Class), ave(data$Average_Number_Of_Children_Per_Base_Class, FUN = function(x) mean(x, na.rm = TRUE)),data$Average_Number_Of_Children_Per_Base_Class)
data$Number_Of_Inheritance_Relationships = ifelse(is.na(data$Number_Of_Inheritance_Relationships), ave(data$Number_Of_Inheritance_Relationships, FUN = function(x) mean(x, na.rm = TRUE)),data$Number_Of_Inheritance_Relationships)
data$Number_Of_Derived_Classes = ifelse(is.na(data$Number_Of_Derived_Classes), ave(data$Number_Of_Derived_Classes, FUN = function(x) mean(x, na.rm = TRUE)),data$Number_Of_Derived_Classes)
data$Number_Of_Classes_Inherited = ifelse(is.na(data$Number_Of_Classes_Inherited), ave(data$Number_Of_Classes_Inherited, FUN = function(x) mean(x, na.rm = TRUE)),data$Number_Of_Classes_Inherited)
data$Number_Of_Classes_Inherited_From = ifelse(is.na(data$Number_Of_Classes_Inherited_From), ave(data$Number_Of_Classes_Inherited_From, FUN = function(x) mean(x, na.rm = TRUE)),data$Number_Of_Classes_Inherited_From)
data$Number_Of_Children = ifelse(is.na(data$Number_Of_Children), ave(data$Number_Of_Children, FUN = function(x) mean(x, na.rm = TRUE)),data$Number_Of_Children)
data$Depth_Inheritance_Tree = ifelse(is.na(data$Depth_Inheritance_Tree), ave(data$Depth_Inheritance_Tree, FUN = function(x) mean(x, na.rm = TRUE)),data$Depth_Inheritance_Tree)
data$Coupling_Between_Objects = ifelse(is.na(data$Coupling_Between_Objects), ave(data$Coupling_Between_Objects, FUN = function(x) mean(x, na.rm = TRUE)),data$Coupling_Between_Objects)
data$para_num = ifelse(is.na(data$para_num), ave(data$para_num, FUN = function(x) mean(x, na.rm = TRUE)),data$para_num)
data$usage_num = ifelse(is.na(data$usage_num), ave(data$usage_num, FUN = function(x) mean(x, na.rm = TRUE)),data$usage_num)
data$real_num = ifelse(is.na(data$real_num), ave(data$real_num, FUN = function(x) mean(x, na.rm = TRUE)),data$real_num)
data$assoc_num = ifelse(is.na(data$assoc_num), ave(data$assoc_num, FUN = function(x) mean(x, na.rm = TRUE)),data$assoc_num)
data$externaloper_num = ifelse(is.na(data$externaloper_num), ave(data$externaloper_num, FUN = function(x) mean(x, na.rm = TRUE)),data$externaloper_num)
data$objectdata_num = ifelse(is.na(data$objectdata_num), ave(data$objectdata_num, FUN = function(x) mean(x, na.rm = TRUE)),data$objectdata_num)
data$avg_operation = ifelse(is.na(data$avg_operation), ave(data$avg_operation, FUN = function(x) mean(x, na.rm = TRUE)),data$avg_operation)
data$avg_attribute = ifelse(is.na(data$avg_attribute), ave(data$avg_attribute, FUN = function(x) mean(x, na.rm = TRUE)),data$avg_attribute)
data$avg_parameter = ifelse(is.na(data$avg_parameter), ave(data$avg_parameter, FUN = function(x) mean(x, na.rm = TRUE)),data$avg_parameter)
data$avg_instVar = ifelse(is.na(data$avg_instVar), ave(data$avg_instVar, FUN = function(x) mean(x, na.rm = TRUE)),data$avg_instVar)
data$FUNC_NA = ifelse(is.na(data$FUNC_NA), ave(data$FUNC_NA, FUN = function(x) mean(x, na.rm = TRUE)),data$FUNC_NA)
data$EI = ifelse(is.na(data$EI), ave(data$EI, FUN = function(x) mean(x, na.rm = TRUE)),data$EI)
data$INT = ifelse(is.na(data$INT), ave(data$INT, FUN = function(x) mean(x, na.rm = TRUE)),data$INT)
data$DM = ifelse(is.na(data$DM), ave(data$DM, FUN = function(x) mean(x, na.rm = TRUE)),data$DM)
data$CTRL = ifelse(is.na(data$CTRL), ave(data$CTRL, FUN = function(x) mean(x, na.rm = TRUE)),data$CTRL)
data$EXTCLL = ifelse(is.na(data$EXTCLL), ave(data$EXTCLL, FUN = function(x) mean(x, na.rm = TRUE)),data$EXTCLL)
data$TRAN_NA = ifelse(is.na(data$TRAN_NA), ave(data$TRAN_NA, FUN = function(x) mean(x, na.rm = TRUE)),data$TRAN_NA)
data$NT = ifelse(is.na(data$NT), ave(data$NT, FUN = function(x) mean(x, na.rm = TRUE)),data$NT)
data$Complex_UC = ifelse(is.na(data$Complex_UC), ave(data$Complex_UC, FUN = function(x) mean(x, na.rm = TRUE)),data$Complex_UC)
data$UEUCW = ifelse(is.na(data$UEUCW), ave(data$UEUCW, FUN = function(x) mean(x, na.rm = TRUE)),data$UEUCW)
data$UEXUCW = ifelse(is.na(data$UEXUCW), ave(data$UEXUCW, FUN = function(x) mean(x, na.rm = TRUE)),data$UEXUCW)
data$UDUCW = ifelse(is.na(data$UDUCW), ave(data$UDUCW, FUN = function(x) mean(x, na.rm = TRUE)),data$UDUCW)
data$UAW = ifelse(is.na(data$UAW), ave(data$UAW, FUN = function(x) mean(x, na.rm = TRUE)),data$UAW)
data$TCF = ifelse(is.na(data$TCF), ave(data$TCF, FUN = function(x) mean(x, na.rm = TRUE)),data$TCF)
data$EF = ifelse(is.na(data$EF), ave(data$EF, FUN = function(x) mean(x, na.rm = TRUE)),data$EF)
data$EUCP = ifelse(is.na(data$EUCP), ave(data$EUCP, FUN = function(x) mean(x, na.rm = TRUE)),data$EUCP)
data$EXUCP = ifelse(is.na(data$EXUCP), ave(data$EXUCP, FUN = function(x) mean(x, na.rm = TRUE)),data$EXUCP)
data$DUCP = ifelse(is.na(data$DUCP), ave(data$DUCP, FUN = function(x) mean(x, na.rm = TRUE)),data$DUCP)
data$SWTI = ifelse(is.na(data$SWTI), ave(data$SWTI, FUN = function(x) mean(x, na.rm = TRUE)),data$SWTI)
data$SWTII = ifelse(is.na(data$SWTII), ave(data$SWTII, FUN = function(x) mean(x, na.rm = TRUE)),data$SWTII)
data$SWTIII = ifelse(is.na(data$SWTIII), ave(data$SWTIII, FUN = function(x) mean(x, na.rm = TRUE)),data$SWTIII)
x <-data[,7:56];
x$Total_Degree<-NULL
x$operation_num<-NULL
x$usage_num<-NULL
x$real_num<-NULL
x$assoc_num<-NULL
x$EI<-NULL
x$INT<-NULL
x$DM<-NULL
y =data$Effort
summary(x)
corr <- cor(x,y)
plot(corr,xlim=c(0, 36))
text(1:42,corr,row.names(corr),cex=0.4, pos=4, col="blue")
abline(h=0.15,col="red")
abline(h=-0.15,col="red")
independentVar <- data.frame(x$Effort_Norm_UCP, x$UseCase_Num, x$CTRL, x$NT, x$Complex_UC, x$UEUCW, x$TCF, x$EUCP, x$EXUCP, x$DUCP, x$Top_Level_Classes, x$Number_Of_Inheritance_Relationships, x$Number_Of_Derived_Classes, x$Number_Of_Classes_Inherited, x$Number_Of_Classes_Inherited_From, x$Number_Of_Children, x$Depth_Inheritance_Tree, x$Coupling_Between_Objects, x$FUNC_NA, x$UAW)
names(independentVar)<- c("Effort_Norm_UCP","UseCase_Num","CTRL","NT","Complex_UC","UEUCW","TCF","EUCP","EXUCP","DUCP","Top_Level_Classes","Number_Of_Inheritance_Relationships","Number_Of_Derived_Classes","Number_Of_Classes_Inherited","Number_Of_Classes_Inherited_From","Number_Of_Children","Depth_Inheritance_Tree","Coupling_Between_Objects","FUNC_NA","UAW")
#library(caret)
#set.seed(30)
#model <- train(y~.,data=independentVar,method="lm",trControl = trainControl(method = "cv", number=2,verboseIter = TRUE))
fit <- lm(y~.,data=independentVar)
summary(fit)
raw_data <- read.csv(file = "./modelEvaluation_4_20_cleaned_1.csv", stringsAsFactors = F)
raw_data[is.na(raw_data[,"KSLOC"]), "KSLOC"] <- 0
X_data = subset(raw_data, select = c("KSLOC","Path_Num","UseCase_Num","Element_Num",                                "Entity_Num","attribute_num","operation_num","class_num","Top_Level_Classes",                    "Average_Depth_Inheritance_Tree","Average_Number_Of_Children_Per_Base_Class",             "Number_Of_Inheritance_Relationships","Number_Of_Derived_Classes","Number_Of_Classes_Inherited", "Number_Of_Classes_Inherited_From","Number_Of_Children","Depth_Inheritance_Tree","Coupling_Between_Objects","para_num",         "externaloper_num","objectdata_num","avg_operation",          "avg_attribute","avg_parameter","avg_instVar",                               "FUNC_NA","EI","INT","DM","CTRL","EXTCLL","TRAN_NA","NT","Complex_UC","UEUCW",                "UEXUCW","UDUCW","UAW","TCF","EF","EUCP","EXUCP","DUCP","SWTI","SWTII","SWTIII"))
Y_data <- raw_data[,"Effort"]
library(glmnet)
lasso_lm <- glmnet(x = data.matrix(X_data), y = as.vector(Y_data), alpha = 1, standardize = T)
knitr::opts_chunk$set(echo = TRUE)
source("transaction_weights_calibration4.R")
source("comparison_between_size_metrics.R")
library(jsonlite)
library(reshape)
library(tidyverse)
library(fitdistrplus)
library(egg)
library(gridExtra)
library(plyr)
cutsAsVec <- function(x) {
ret <- c("Cut Points:")
for (row in rownames(x)) {
cutPoints <- round(x[row, ], digits = 1)
ret <- c(ret, paste(row,":", paste(cutPoints, collapse = ", ")))
}
ret
}
modelData <- read.csv("modelEvaluations-9-13-1.csv")
modelData$Project <- as.character(modelData$Project)
modelData$transaction_file <- as.character(modelData$transaction_file)
effort <- subset(modelData, select=c("Effort"))
transactionFiles <- subset(modelData, select=c("transaction_file"))
rownames(effort) <- modelData$Project
rownames(transactionFiles) <- modelData$Project
combined <- combineData(transactionFiles)
ggplot(modelData, aes(x=UseCase_Num)) +
geom_histogram(binwidth=5, colour="black", fill="gray") +
xlab("Number of Use Case") + ylab("Number of Projects") + ggtitle("Project Distribution - Use Case")+
theme_bw(base_size=20)
ggplot(modelData, aes(x=KSLOC)) +
geom_histogram(binwidth=0.5, colour="black", fill="gray") +
xlab("KSLOC") + ylab("Number of Projects") + ggtitle("Project Distribution - SLOC") +
theme_bw(base_size=20)
ggplot(modelData, aes(x=Personnel)) +
geom_histogram(binwidth=1, colour="black", fill="gray") +
xlab("Personnel") + ylab("Number of Projects") + ggtitle("Project Distribution - Personnel") +
theme_bw(base_size=20)
ggplot(modelData, aes(x=Effort)) +
geom_histogram(binwidth=300, colour="black", fill="gray") +
xlab("Effort") + ylab("Number of Projects") + ggtitle("Project Distribution - Effort") +
theme_bw(base_size=20)
unique.levels <- sort(unique(modelData$Type))
count <- table(modelData$Type)
count.modelData <- data.frame(unique.levels, count)
ggplot(count.modelData, aes(unique.levels, count)) +
geom_bar(stat="identity", colour="black", fill="gray") +
xlab("Project Type") + ylab("Number of Projects") + ggtitle("Project Distribution - Type") +
theme_bw(base_size=20)
#effort$Project <- NULL
ggplot(combined, aes(x=TL)) +
geom_histogram(aes(y = ..density..), binwidth=1, colour="black", fill="white") +
#stat_function(fun = dnorm, args = list(mean = mean(combined$TL), sd(combined$TL))) +
stat_function(fun = dgamma, args = list(shape=6.543586, rate=1.160249)) +
xlab("TL") + ylab("Density")+ ggtitle("Combined TL Data Summary") +
annotate("text", x=14, y=0.25, label= "Gamma: shape=6.54, rate=1.16; KS: p-value < 0.01")+
theme_bw(base_size=15)
ggplot(combined, aes(x=TD)) +
geom_histogram(aes(y = ..density..), binwidth=0.5, colour="black", fill="white") +
#stat_function(fun = dnorm, args = list(mean = mean(combined$TD), sd(combined$TD))) +
stat_function(fun = dgamma, args = list(shape=3.6492150, rate=0.6985361 )) +
annotate("text", x=16, y=0.18, label= "Gamma: shape=3.65, rate=0.70; KS: p-value < 0.01")+
xlab("TD") + ylab("Density") +ggtitle("Combined TD Data Summary") +
theme_bw()
ggplot(combined, aes(x=DETs)) +
geom_histogram(aes(y = ..density..), binwidth=1, colour="black", fill="white") +
#stat_function(fun = dnorm, args = list(mean = mean(combined$DETs), sd(combined$DETs))) +
stat_function(fun = dgamma, args = list(shape=1.6647412, rate=0.1691911)) +
annotate("text", x=57, y=0.15, label= "Gamma: shape=1.66, rate=0.17; KS: p-value < 0.01")+
xlab("DETs") + ylab("Density") + ggtitle("Combined DETs Data Summary") +
theme_bw()
selectedModels = list()
ggplot(modelData[!(modelData$Effort==0),], aes(x=Effort)) +
geom_histogram(binwidth=300, colour="black", fill="gray") +
xlab("Effort") + ylab("Number of Projects") + ggtitle("Project Distribution - Effort") +
theme_bw(base_size=20)
ggplot(modelData[!(modelData$Effort==0),], aes(x=Effort)) +
geom_histogram(binwidth=100, colour="black", fill="gray") +
xlab("Effort") + ylab("Number of Projects") + ggtitle("Project Distribution - Effort") +
theme_bw(base_size=20)
ggplot(modelData[!(modelData$Effort==0),], aes(x=Effort)) +
geom_histogram(binwidth=200, colour="black", fill="gray") +
xlab("Effort") + ylab("Number of Projects") + ggtitle("Project Distribution - Effort") +
theme_bw(base_size=20)
ggplot(modelData[!(modelData$UseCase_Num==0),], aes(x=UseCase_Num)) +
geom_histogram(binwidth=5, colour="black", fill="gray") +
xlab("Number of Use Case") + ylab("Number of Projects") + ggtitle("Project Distribution - Use Case")+
theme_bw(base_size=20)
ggplot(modelData[!(modelData$Effort==0),], aes(x=Effort)) +
geom_histogram(binwidth=200, colour="black", fill="gray") +
xlab("Effort") + ylab("Number of Projects") + ggtitle("Project Distribution - Effort") +
theme_bw(base_size=20)
