cutPoints <- round(x[row, ], digits = 1)
ret <- c(ret, paste(row,":", paste(cutPoints, collapse = ", ")))
}
ret
}
modelData <- read.csv("modelEvaluations-9-29.csv")
modelData$Project <- as.character(modelData$Project)
modelData$transaction_file <- as.character(modelData$transaction_file)
effort <- subset(modelData, select=c("Effort"))
transactionFiles <- subset(modelData, select=c("transaction_file"))
rownames(effort) <- modelData$Project
rownames(transactionFiles) <- modelData$Project
combined <- combineData(transactionFiles)
#Ks parameteric test
parametricKStest(combined[, "TL"])
dist <- combined[, "DETs"]
tableValues <- table(dist)
#reduce sizes for fitting with gamma curve
#print(as.integer(tableValues/10))
dist <- rep(as.numeric(names(tableValues)), as.integer(tableValues/10))
fit.gamma <- fitdist(dist, distr = "gamma", method = "mle", lower = c(0, 0))
# Check result
shape = coefficients(fit.gamma)["shape"]
rate = coefficients(fit.gamma)["rate"]
# testing the goodness of fit.
#num_of_samples = length(dist)
#y <- rgamma(num_of_samples, shape = shape, rate = rate)
#result = ks.test(dist, y)
ksResults <- ks.test(dist, "pgamma", shape, rate)
print("gamma goodness of fit")
print(ksResult)
ks = ksResult[['statistic']]
# iterate 10000 samples for ks-statistics
#num_of_samples = length(dist)
sample_ks <- c()
runs = 10000
for(i in 1: runs){
run.Sample <- rgamma(num_of_samples, shape = shape, rate = rate)
run.fit.gamma <- fitdist(run.Sample, distr = "gamma", method = "mle", lower = c(0, 0))
# Check result
run.shape = coefficients(run.fit.gamma)["shape"]
run.rate = coefficients(run.fit.gamma)["rate"]
result = ks.test(run.Sample, "pgamma", run.shape, run.rate)
#result = ks.test(dist, y)
#print("gamma goodness of fit")
#print(result)
sample_ks = c(sample_ks, result[['statistic']])
}
tests<-sapply(sample_ks, function(x) {
if(x > ks ){
1
}
else {
0
}
})
print(sample_ks)
#print(tests)
parametric_test <- sum(tests)/runs
print("parametric test")
print(parametric_test)
parametric_test
dist <- combined[, "DETs"]
tableValues <- table(dist)
#reduce sizes for fitting with gamma curve
#print(as.integer(tableValues/10))
dist <- rep(as.numeric(names(tableValues)), as.integer(tableValues/10))
fit.gamma <- fitdist(dist, distr = "gamma", method = "mle", lower = c(0, 0))
# Check result
shape = coefficients(fit.gamma)["shape"]
rate = coefficients(fit.gamma)["rate"]
# testing the goodness of fit.
#num_of_samples = length(dist)
#y <- rgamma(num_of_samples, shape = shape, rate = rate)
#result = ks.test(dist, y)
ksResults <- ks.test(dist, "pgamma", shape, rate)
print("gamma goodness of fit")
print(ksResult)
ks = ksResult[['statistic']]
# iterate 10000 samples for ks-statistics
#num_of_samples = length(dist)
sample_ks <- c()
runs = 10000
for(i in 1: runs){
run.Sample <- rgamma(num_of_samples, shape = shape, rate = rate)
run.fit.gamma <- fitdist(run.Sample, distr = "gamma", method = "mle", lower = c(0, 0))
# Check result
run.shape = coefficients(run.fit.gamma)["shape"]
run.rate = coefficients(run.fit.gamma)["rate"]
result = ks.test(run.Sample, "pgamma", run.shape, run.rate)
#result = ks.test(dist, y)
#print("gamma goodness of fit")
#print(result)
sample_ks = c(sample_ks, result[['statistic']])
}
tests<-sapply(sample_ks, function(x) {
if(x > ks ){
1
}
else {
0
}
})
print(sample_ks)
#print(tests)
parametric_test = sum(tests)/runs
print("parametric test")
print(parametric_test)
parametric_test
parametric_test = sum(tests)/runs
tests<-sapply(sample_ks, function(x) {
if(x > ks ){
1
}
else {
0
}
})
View(tests)
View(tests)
sample_ks <- c()
runs = 10000
for(i in 1: runs){
run.Sample <- rgamma(num_of_samples, shape = shape, rate = rate)
run.fit.gamma <- fitdist(run.Sample, distr = "gamma", method = "mle", lower = c(0, 0))
# Check result
run.shape = coefficients(run.fit.gamma)["shape"]
run.rate = coefficients(run.fit.gamma)["rate"]
result = ks.test(run.Sample, "pgamma", run.shape, run.rate)
#result = ks.test(dist, y)
#print("gamma goodness of fit")
#print(result)
sample_ks = c(sample_ks, result[['statistic']])
}
num_of_samples = length(dist)
sample_ks <- c()
runs = 10000
for(i in 1: runs){
run.Sample <- rgamma(num_of_samples, shape = shape, rate = rate)
run.fit.gamma <- fitdist(run.Sample, distr = "gamma", method = "mle", lower = c(0, 0))
# Check result
run.shape = coefficients(run.fit.gamma)["shape"]
run.rate = coefficients(run.fit.gamma)["rate"]
result = ks.test(run.Sample, "pgamma", run.shape, run.rate)
#result = ks.test(dist, y)
#print("gamma goodness of fit")
#print(result)
sample_ks = c(sample_ks, result[['statistic']])
}
num_of_samples = length(dist)
sample_ks <- c()
runs = 10000
for(i in 1: runs){
run.Sample <- rgamma(num_of_samples, shape = shape, rate = rate)
run.fit.gamma <- fitdist(run.Sample, distr = "gamma", method = "mle", lower = c(0, 0))
# Check result
run.shape = coefficients(run.fit.gamma)["shape"]
run.rate = coefficients(run.fit.gamma)["rate"]
result = ks.test(run.Sample, "pgamma", run.shape, run.rate)
#result = ks.test(dist, y)
#print("gamma goodness of fit")
#print(result)
sample_ks = c(sample_ks, result[['statistic']])
}
dist <- combined[, "DETs"]
tableValues <- table(dist)
#reduce sizes for fitting with gamma curve
#print(as.integer(tableValues/10))
dist <- rep(as.numeric(names(tableValues)), as.integer(tableValues/10))
fit.gamma <- fitdist(dist, distr = "gamma", method = "mle", lower = c(0, 0))
# Check result
shape = coefficients(fit.gamma)["shape"]
rate = coefficients(fit.gamma)["rate"]
# testing the goodness of fit.
#num_of_samples = length(dist)
#y <- rgamma(num_of_samples, shape = shape, rate = rate)
#result = ks.test(dist, y)
ksResults <- ks.test(dist, "pgamma", shape, rate)
print("gamma goodness of fit")
print(ksResult)
ks = ksResult[['statistic']]
# iterate 10000 samples for ks-statistics
num_of_samples = length(dist)
sample_ks <- c()
runs = 10
for(i in 1: runs){
run.Sample <- rgamma(num_of_samples, shape = shape, rate = rate)
run.fit.gamma <- fitdist(run.Sample, distr = "gamma", method = "mle", lower = c(0, 0))
# Check result
run.shape = coefficients(run.fit.gamma)["shape"]
run.rate = coefficients(run.fit.gamma)["rate"]
result = ks.test(run.Sample, "pgamma", run.shape, run.rate)
#result = ks.test(dist, y)
#print("gamma goodness of fit")
#print(result)
sample_ks = c(sample_ks, result[['statistic']])
}
tests<-sapply(sample_ks, function(x) {
if(x > ks ){
1
}
else {
0
}
})
print(sample_ks)
#print(tests)
parametric_test = sum(tests)/runs
print("parametric test")
print(parametric_test)
parametric_test
runs = 10
for(i in 1: runs){
run.Sample <- rgamma(num_of_samples, shape = shape, rate = rate)
run.fit.gamma <- fitdist(run.Sample, distr = "gamma", method = "mle", lower = c(0, 0))
# Check result
run.shape = coefficients(run.fit.gamma)["shape"]
run.rate = coefficients(run.fit.gamma)["rate"]
result = ks.test(run.Sample, "pgamma", run.shape, run.rate)
#result = ks.test(dist, y)
#print("gamma goodness of fit")
#print(result)
sample_ks = c(sample_ks, result[['statistic']])
}
tests<-sapply(sample_ks, function(x) {
if(x > ks ){
1
}
else {
0
}
})
tableValues <- table(dist)
#reduce sizes for fitting with gamma curve
#print(as.integer(tableValues/10))
dist <- rep(as.numeric(names(tableValues)), as.integer(tableValues/10))
fit.gamma <- fitdist(dist, distr = "gamma", method = "mle", lower = c(0, 0))
# Check result
shape = coefficients(fit.gamma)["shape"]
rate = coefficients(fit.gamma)["rate"]
# testing the goodness of fit.
#num_of_samples = length(dist)
#y <- rgamma(num_of_samples, shape = shape, rate = rate)
#result = ks.test(dist, y)
ksResults <- ks.test(dist, "pgamma", shape, rate)
print("gamma goodness of fit")
print(ksResult)
ks = ksResult[['statistic']]
dist <- combined[, "DETs"]
tableValues <- table(dist)
#reduce sizes for fitting with gamma curve
#print(as.integer(tableValues/10))
dist <- rep(as.numeric(names(tableValues)), as.integer(tableValues/10))
fit.gamma <- fitdist(dist, distr = "gamma", method = "mle", lower = c(0, 0))
# Check result
shape = coefficients(fit.gamma)["shape"]
rate = coefficients(fit.gamma)["rate"]
# testing the goodness of fit.
#num_of_samples = length(dist)
#y <- rgamma(num_of_samples, shape = shape, rate = rate)
#result = ks.test(dist, y)
ksResult <- ks.test(dist, "pgamma", shape, rate)
print("gamma goodness of fit")
print(ksResult)
ks = ksResult[['statistic']]
# iterate 10000 samples for ks-statistics
num_of_samples = length(dist)
sample_ks <- c()
runs = 10
for(i in 1: runs){
run.Sample <- rgamma(num_of_samples, shape = shape, rate = rate)
run.fit.gamma <- fitdist(run.Sample, distr = "gamma", method = "mle", lower = c(0, 0))
# Check result
run.shape = coefficients(run.fit.gamma)["shape"]
run.rate = coefficients(run.fit.gamma)["rate"]
result = ks.test(run.Sample, "pgamma", run.shape, run.rate)
#result = ks.test(dist, y)
#print("gamma goodness of fit")
#print(result)
sample_ks = c(sample_ks, result[['statistic']])
}
tests<-sapply(sample_ks, function(x) {
if(x > ks ){
1
}
else {
0
}
})
tests<-sapply(sample_ks, function(x) {
if(x > ks ){
1
}
else {
0
}
})
print(sample_ks)
parametric_test = sum(tests)/runs
print("parametric test")
print(parametric_test)
parametric_test
dist <- combined[, "DETs"]
tableValues <- table(dist)
#reduce sizes for fitting with gamma curve
#print(as.integer(tableValues/10))
dist <- rep(as.numeric(names(tableValues)), as.integer(tableValues/10))
fit.gamma <- fitdist(dist, distr = "gamma", method = "mle", lower = c(0, 0))
# Check result
shape = coefficients(fit.gamma)["shape"]
rate = coefficients(fit.gamma)["rate"]
# testing the goodness of fit.
#num_of_samples = length(dist)
#y <- rgamma(num_of_samples, shape = shape, rate = rate)
#result = ks.test(dist, y)
ksResult <- ks.test(dist, "pgamma", shape, rate)
print("gamma goodness of fit")
print(ksResult)
ks = ksResult[['statistic']]
# iterate 10000 samples for ks-statistics
num_of_samples = length(dist)
sample_ks <- c()
runs = 1000
for(i in 1: runs){
run.Sample <- rgamma(num_of_samples, shape = shape, rate = rate)
run.fit.gamma <- fitdist(run.Sample, distr = "gamma", method = "mle", lower = c(0, 0))
# Check result
run.shape = coefficients(run.fit.gamma)["shape"]
run.rate = coefficients(run.fit.gamma)["rate"]
result = ks.test(run.Sample, "pgamma", run.shape, run.rate)
#result = ks.test(dist, y)
#print("gamma goodness of fit")
#print(result)
sample_ks = c(sample_ks, result[['statistic']])
}
tests<-sapply(sample_ks, function(x) {
if(x > ks ){
1
}
else {
0
}
})
print(sample_ks)
#print(tests)
parametric_test = sum(tests)/runs
print("parametric test")
print(parametric_test)
parametric_test
dist <- combined[, "DETs"]
tableValues <- table(dist)
#reduce sizes for fitting with gamma curve
#print(as.integer(tableValues/10))
dist <- rep(as.numeric(names(tableValues)), as.integer(tableValues/10))
fit.gamma <- fitdist(dist, distr = "gamma", method = "mle", lower = c(0, 0))
# Check result
shape = coefficients(fit.gamma)["shape"]
rate = coefficients(fit.gamma)["rate"]
# testing the goodness of fit.
#num_of_samples = length(dist)
#y <- rgamma(num_of_samples, shape = shape, rate = rate)
#result = ks.test(dist, y)
ksResult <- ks.test(dist, "pgamma", shape, rate)
print("gamma goodness of fit")
print(ksResult)
ks = ksResult[['statistic']]
# iterate 10000 samples for ks-statistics
num_of_samples = length(dist)
sample_ks <- c()
runs = 10000
for(i in 1: runs){
run.Sample <- rgamma(num_of_samples, shape = shape, rate = rate)
run.fit.gamma <- fitdist(run.Sample, distr = "gamma", method = "mle", lower = c(0, 0))
# Check result
run.shape = coefficients(run.fit.gamma)["shape"]
run.rate = coefficients(run.fit.gamma)["rate"]
result = ks.test(run.Sample, "pgamma", run.shape, run.rate)
#result = ks.test(dist, y)
#print("gamma goodness of fit")
#print(result)
sample_ks = c(sample_ks, result[['statistic']])
}
tests<-sapply(sample_ks, function(x) {
if(x > ks ){
1
}
else {
0
}
})
print(sample_ks)
#print(tests)
parametric_test = sum(tests)/runs
print("parametric test")
print(parametric_test)
parametric_test
dist <- combined[, "DETs"]
tableValues <- table(dist)
#reduce sizes for fitting with gamma curve
#print(as.integer(tableValues/10))
dist <- rep(as.numeric(names(tableValues)), as.integer(tableValues/10))
fit.gamma <- fitdist(dist, distr = "gamma", method = "mle", lower = c(0, 0))
# Check result
shape = coefficients(fit.gamma)["shape"]
rate = coefficients(fit.gamma)["rate"]
print(coefficients(fit.gamma))
ggplot(combined, aes(x=DETs)) +
geom_histogram(aes(y = ..density..), binwidth=1, colour="black", fill="white") +
#stat_function(fun = dnorm, args = list(mean = mean(combined$DETs), sd(combined$DETs))) +
#stat_function(fun = dgamma, args = list(shape=1.6647412, rate=0.1691911)) +
stat_function(fun = dgamma, args = list(shape=1.6902002, rate=0.1692468)) +
annotate("text", x=57, y=0.15, label= "Gamma: shape=1.66, rate=0.17; KS: p-value < 0.01")+
xlab("DETs") + ylab("Density") + ggtitle("Combined DETs Data Summary") +
theme_bw()
clear
clear()
dist <- combined[, "TL"]
tableValues <- table(dist)
#reduce sizes for fitting with gamma curve
#print(as.integer(tableValues/10))
dist <- rep(as.numeric(names(tableValues)), as.integer(tableValues/10))
fit.gamma <- fitdist(dist, distr = "gamma", method = "mle", lower = c(0, 0))
# Check result
shape = coefficients(fit.gamma)["shape"]
rate = coefficients(fit.gamma)["rate"]
print(coefficients(fit.gamma))
# testing the goodness of fit.
#num_of_samples = length(dist)
#y <- rgamma(num_of_samples, shape = shape, rate = rate)
#result = ks.test(dist, y)
ksResult <- ks.test(dist, "pgamma", shape, rate)
print("gamma goodness of fit")
print(ksResult)
ks = ksResult[['statistic']]
# iterate 10000 samples for ks-statistics
num_of_samples = length(dist)
sample_ks <- c()
runs = 10000
for(i in 1: runs){
run.Sample <- rgamma(num_of_samples, shape = shape, rate = rate)
run.fit.gamma <- fitdist(run.Sample, distr = "gamma", method = "mle", lower = c(0, 0))
# Check result
run.shape = coefficients(run.fit.gamma)["shape"]
run.rate = coefficients(run.fit.gamma)["rate"]
result = ks.test(run.Sample, "pgamma", run.shape, run.rate)
#result = ks.test(dist, y)
#print("gamma goodness of fit")
#print(result)
sample_ks = c(sample_ks, result[['statistic']])
}
tests<-sapply(sample_ks, function(x) {
if(x > ks ){
1
}
else {
0
}
})
print(sample_ks)
#print(tests)
parametric_test = sum(tests)/runs
print("parametric test")
print(parametric_test)
parametric_test
dist <- combined[, "TD"]
tableValues <- table(dist)
#reduce sizes for fitting with gamma curve
#print(as.integer(tableValues/10))
dist <- rep(as.numeric(names(tableValues)), as.integer(tableValues/10))
fit.gamma <- fitdist(dist, distr = "gamma", method = "mle", lower = c(0, 0))
# Check result
shape = coefficients(fit.gamma)["shape"]
rate = coefficients(fit.gamma)["rate"]
print(coefficients(fit.gamma))
# testing the goodness of fit.
#num_of_samples = length(dist)
#y <- rgamma(num_of_samples, shape = shape, rate = rate)
#result = ks.test(dist, y)
ksResult <- ks.test(dist, "pgamma", shape, rate)
print("gamma goodness of fit")
print(ksResult)
ks = ksResult[['statistic']]
# iterate 10000 samples for ks-statistics
num_of_samples = length(dist)
sample_ks <- c()
runs = 10000
for(i in 1: runs){
run.Sample <- rgamma(num_of_samples, shape = shape, rate = rate)
run.fit.gamma <- fitdist(run.Sample, distr = "gamma", method = "mle", lower = c(0, 0))
# Check result
run.shape = coefficients(run.fit.gamma)["shape"]
run.rate = coefficients(run.fit.gamma)["rate"]
result = ks.test(run.Sample, "pgamma", run.shape, run.rate)
#result = ks.test(dist, y)
#print("gamma goodness of fit")
#print(result)
sample_ks = c(sample_ks, result[['statistic']])
}
tests<-sapply(sample_ks, function(x) {
if(x > ks ){
1
}
else {
0
}
})
print(sample_ks)
#print(tests)
parametric_test = sum(tests)/runs
print("parametric test")
print(parametric_test)
parametric_test
