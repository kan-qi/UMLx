<<<<<<< HEAD
#SWTIILevelsDist$levels <- factor(gsub("L", "l", SWTIILevelsDist$levels))
ggplot(data = SWTIILevelsDist, aes(x = levels, y = counts)) +
geom_bar(stat = "identity") +
xlab("Complexity Levels") +
ylab("Number of Transactions") +
facet_wrap(. ~ Label, scales="free", ncol=2) +theme_bw()
#print(SWTIIresults[[5]][["model"]])
# Plot predicted vs. actual effort values
predictedValuesSWTII <- sapply(1:length(SWTIIresults), function(i) {
predicted <- apply(SWTIIresults[[i]]$data, 1, function(x) {
blmpredicted <- predict.blm(SWTIIresults[[i]]$model, newdata = as.data.frame(t(x)))
#blmpredicted*SWTIIresults[[i]]$normFactor
})
})
colnames(predictedValuesSWTII) <- paste(1:length(SWTIIresults), "Bins")
predictedValuesSWTII <- subset(predictedValuesSWTII, rownames(predictedValuesSWTII) != "Aggregate")
predictedValuesSWTII <- merge(as.data.frame(predictedValuesSWTII), effort, by='row.names', all=TRUE)
rownames(predictedValuesSWTII) <- predictedValuesSWTII$Row.names
predictedValuesSWTII$Row.names <- NULL
r2Vals <- apply(subset(predictedValuesSWTII, select = -Effort), 2, function (x) {
dat <- data.frame(Predicted = x, Effort = predictedValuesSWTII$Effort)
model <- lm(Effort ~ ., data = dat)
summary(model)$r.squared
})
r2Vals <- round(r2Vals, digits = 5)
r2Vals <- paste("R2:", r2Vals, sep = "")
predictedValues <- gather(predictedValuesSWTII, numBins, Predicted, -Effort)
r2data_txt <- data.frame(label = as.character(r2Vals), numBins = paste(1:length(SWTIIresults), "Bins"))
ggplot(predictedValues, aes(x = Predicted, y = Effort)) +
geom_point(shape = 1) + stat_smooth(method = "lm",  se = FALSE, fullrange = TRUE) +
facet_wrap(. ~ numBins, scales = "free", nrow=2) + xlab("Predicted Effort") +
ylab("Actual Effort") + ggtitle("Goodness of Fit") +
theme(panel.spacing = unit(1, "lines")) +
geom_text(data = r2data_txt, size = 3, mapping = aes(x = -Inf, y = -Inf, label = label),
hjust = -1, vjust = -1) +
theme_bw()
# Plots cross validation results
R2data <- data.frame(NumBins = 1:length(SWTIIresults), R2=r2Vals)
MSEdata <- data.frame(NumBins = 1:length(SWTIIresults), MSE = sapply(SWTIIresults, function(x) { x$MSE }))
MMREdata <- data.frame(NumBins = 1:length(SWTIIresults), MMRE = sapply(SWTIIresults, function(x) { x$MMRE }))
PREDdata <- data.frame(NumBins = 1:length(SWTIIresults), PRED = sapply(SWTIIresults, function(x) { x$PRED }))
ggplot(data = MSEdata, aes(x = NumBins, y = log(MSE))) + geom_point(shape = 1) + geom_line() + ggtitle("MSE vs Number of Bins") +
theme_bw()
ggplot(data = MMREdata, aes(x = NumBins, y = MMRE)) + geom_point(shape = 1) + geom_line() + ggtitle("MMRE vs Number of Bins") +
theme_bw()
ggplot(data = PREDdata, aes(x = NumBins, y = PRED)) + geom_point(shape = 1) + geom_line() + ylab("PRED(0.25)") + ggtitle("PRED(0.25) Results") + theme_bw()
mergedMMREPREDII <- merge(MMREdata, PREDdata, by="NumBins")
mergedMMREPREDII <- merge(mergedMMREPREDII, R2data, by="NumBins")
meltMergedMMREPREDII = melt(mergedMMREPREDII, id.vars=c("NumBins","R2"))
colnames(meltMergedMMREPREDII) <- c("Bins", "R2", "Method", "Value")
ggplot(data = meltMergedMMREPREDII, aes(x = Bins, y = Value)) + geom_point(shape = 1) + geom_line() + facet_wrap(Method~., scales="free_y", ncol=1) + theme_bw()
# Plot marginal posteriors for each parameter
for (i in 1:length(SWTIIresults)) {
marginalData <- SWTIIresults[[i]]$model[, !names(SWTIIresults[[i]]$model) %in% c("(Intercept)", "sigma")]
if (is.vector(marginalData)) {
marginalData <- data.frame(l1 = marginalData)
}
for (col in names(marginalData)) {
mean <- mean(marginalData[, col])
sd <- sd(marginalData[, col])
peakDensity <- dnorm(mean, mean, sd)
g <- ggplot(marginalData, aes(x=marginalData[, col])) +
geom_histogram(aes(y = ..density..), binwidth = 1, colour="black", fill="white") +
stat_function(fun = dnorm, args = list(mean = mean(mean), sd = sd)) +
xlab(col) + ggtitle("Posterior Weight", paste(col, i, "bins")) +
annotate("text", x = mean, y = peakDensity * ((sd/3 *.1) + 1), label = paste("mean:", round(mean,2),",", "sd:", round(sd,2))) +
theme_bw()
print(g)
}
}
SWTIILevelsDist <- data.frame(levels=c(),counts=c(),bins=c())
# Plot classification results
for (i in 1:length(SWTIIresults)) {
result <- SWTIIresults[[i]]
df <- as.data.frame(t(subset(result$data, select = -c(Effort))))
g <- ggplot(data = df, aes(x = rownames(df), y = Aggregate)) +
geom_bar(stat = "identity") +
xlab("Levels") +
ylab("Counts") +
ggtitle(paste("Classification Results:", i*2-2+1, "levels")) +
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
SWTIILevelsDist = rbind(SWTIILevelsDist, data.frame(levels=gsub("l", "L", rownames(df)),counts=df$Aggregate,bins=rep(i,nrow(df))))
cutsVec <- cutsAsVec(result$cuts)
g <- g + geom_text(data = data.frame(cutsVec), aes(label=cutsVec, col=cutsVec), alpha=0, x=1, y=1) +
theme(legend.key=element_blank(), legend.title = element_blank()) +
guides(colour=guide_legend(override.aes=list(size=0)), reverse = TRUE) +
theme_bw()
print(g)
}
SWTIILevelsDist$Label <- paste("Cut ", SWTIILevelsDist$bins, sep="")
#SWTIILevelsDist$levels <- factor(gsub("L", "l", SWTIILevelsDist$levels))
ggplot(data = SWTIILevelsDist, aes(x = levels, y = counts)) +
geom_bar(stat = "identity") +
xlab("Complexity Levels") +
ylab("Number of Transactions") +
facet_wrap(. ~ Label, scales="free", ncol=2) +theme_bw()
#print(SWTIIresults[[5]][["model"]])
# Plot predicted vs. actual effort values
predictedValuesSWTII <- sapply(1:length(SWTIIresults), function(i) {
predicted <- apply(SWTIIresults[[i]]$data, 1, function(x) {
blmpredicted <- predict.blm(SWTIIresults[[i]]$model, newdata = as.data.frame(t(x)))
#blmpredicted*SWTIIresults[[i]]$normFactor
})
})
colnames(predictedValuesSWTII) <- paste(1:length(SWTIIresults), "Bins")
predictedValuesSWTII <- subset(predictedValuesSWTII, rownames(predictedValuesSWTII) != "Aggregate")
predictedValuesSWTII <- merge(as.data.frame(predictedValuesSWTII), effort, by='row.names', all=TRUE)
rownames(predictedValuesSWTII) <- predictedValuesSWTII$Row.names
predictedValuesSWTII$Row.names <- NULL
r2Vals <- apply(subset(predictedValuesSWTII, select = -Effort), 2, function (x) {
dat <- data.frame(Predicted = x, Effort = predictedValuesSWTII$Effort)
model <- lm(Effort ~ ., data = dat)
summary(model)$r.squared
})
r2Vals <- round(r2Vals, digits = 5)
r2Vals <- paste("R2:", r2Vals, sep = "")
predictedValues <- gather(predictedValuesSWTII, numBins, Predicted, -Effort)
r2data_txt <- data.frame(label = as.character(r2Vals), numBins = paste(1:length(SWTIIresults), "Bins"))
ggplot(predictedValues, aes(x = Predicted, y = Effort)) +
geom_point(shape = 1) + stat_smooth(method = "lm",  se = FALSE, fullrange = TRUE) +
facet_wrap(. ~ numBins, scales = "free", nrow=2) + xlab("Predicted Effort") +
ylab("Actual Effort") + ggtitle("Goodness of Fit") +
theme(panel.spacing = unit(1, "lines")) +
geom_text(data = r2data_txt, size = 3, mapping = aes(x = -Inf, y = -Inf, label = label),
hjust = -1, vjust = -1) +
theme_bw()
# Plots cross validation results
R2data <- data.frame(NumBins = 1:length(SWTIIresults), R2=r2Vals)
MSEdata <- data.frame(NumBins = 1:length(SWTIIresults), MSE = sapply(SWTIIresults, function(x) { x$MSE }))
MMREdata <- data.frame(NumBins = 1:length(SWTIIresults), MMRE = sapply(SWTIIresults, function(x) { x$MMRE }))
PREDdata <- data.frame(NumBins = 1:length(SWTIIresults), PRED = sapply(SWTIIresults, function(x) { x$PRED }))
ggplot(data = MSEdata, aes(x = NumBins, y = log(MSE))) + geom_point(shape = 1) + geom_line() + ggtitle("MSE vs Number of Bins") +
theme_bw()
ggplot(data = MMREdata, aes(x = NumBins, y = MMRE)) + geom_point(shape = 1) + geom_line() + ggtitle("MMRE vs Number of Bins") +
theme_bw()
ggplot(data = PREDdata, aes(x = NumBins, y = PRED)) + geom_point(shape = 1) + geom_line() + ylab("PRED(0.25)") + ggtitle("PRED(0.25) Results") + theme_bw()
SWTIIresults <- performSearch(6, effort, combined, transactionFiles, c("TL", "TD"))
SWTIILevelsDist <- data.frame(levels=c(),counts=c(),bins=c())
# Plot classification results
for (i in 1:length(SWTIIresults)) {
result <- SWTIIresults[[i]]
df <- as.data.frame(t(subset(result$data, select = -c(Effort))))
g <- ggplot(data = df, aes(x = rownames(df), y = Aggregate)) +
geom_bar(stat = "identity") +
xlab("Levels") +
ylab("Counts") +
ggtitle(paste("Classification Results:", i*2-2+1, "levels")) +
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
SWTIILevelsDist = rbind(SWTIILevelsDist, data.frame(levels=gsub("l", "L", rownames(df)),counts=df$Aggregate,bins=rep(i,nrow(df))))
cutsVec <- cutsAsVec(result$cuts)
g <- g + geom_text(data = data.frame(cutsVec), aes(label=cutsVec, col=cutsVec), alpha=0, x=1, y=1) +
theme(legend.key=element_blank(), legend.title = element_blank()) +
guides(colour=guide_legend(override.aes=list(size=0)), reverse = TRUE) +
theme_bw()
print(g)
}
SWTIILevelsDist$Label <- paste("Cut ", SWTIILevelsDist$bins, sep="")
#SWTIILevelsDist$levels <- factor(gsub("L", "l", SWTIILevelsDist$levels))
ggplot(data = SWTIILevelsDist, aes(x = levels, y = counts)) +
geom_bar(stat = "identity") +
xlab("Complexity Levels") +
ylab("Number of Transactions") +
facet_wrap(. ~ Label, scales="free", ncol=2) +theme_bw()
#print(SWTIIresults[[5]][["model"]])
# Plot predicted vs. actual effort values
predictedValuesSWTII <- sapply(1:length(SWTIIresults), function(i) {
predicted <- apply(SWTIIresults[[i]]$data, 1, function(x) {
blmpredicted <- predict.blm(SWTIIresults[[i]]$model, newdata = as.data.frame(t(x)))
#blmpredicted*SWTIIresults[[i]]$normFactor
})
})
colnames(predictedValuesSWTII) <- paste(1:length(SWTIIresults), "Bins")
predictedValuesSWTII <- subset(predictedValuesSWTII, rownames(predictedValuesSWTII) != "Aggregate")
predictedValuesSWTII <- merge(as.data.frame(predictedValuesSWTII), effort, by='row.names', all=TRUE)
rownames(predictedValuesSWTII) <- predictedValuesSWTII$Row.names
predictedValuesSWTII$Row.names <- NULL
r2Vals <- apply(subset(predictedValuesSWTII, select = -Effort), 2, function (x) {
dat <- data.frame(Predicted = x, Effort = predictedValuesSWTII$Effort)
model <- lm(Effort ~ ., data = dat)
summary(model)$r.squared
})
r2Vals <- round(r2Vals, digits = 5)
r2Vals <- paste("R2:", r2Vals, sep = "")
predictedValues <- gather(predictedValuesSWTII, numBins, Predicted, -Effort)
r2data_txt <- data.frame(label = as.character(r2Vals), numBins = paste(1:length(SWTIIresults), "Bins"))
ggplot(predictedValues, aes(x = Predicted, y = Effort)) +
geom_point(shape = 1) + stat_smooth(method = "lm",  se = FALSE, fullrange = TRUE) +
facet_wrap(. ~ numBins, scales = "free", nrow=2) + xlab("Predicted Effort") +
ylab("Actual Effort") + ggtitle("Goodness of Fit") +
theme(panel.spacing = unit(1, "lines")) +
geom_text(data = r2data_txt, size = 3, mapping = aes(x = -Inf, y = -Inf, label = label),
hjust = -1, vjust = -1) +
theme_bw()
# Plots cross validation results
R2data <- data.frame(NumBins = 1:length(SWTIIresults), R2=r2Vals)
MSEdata <- data.frame(NumBins = 1:length(SWTIIresults), MSE = sapply(SWTIIresults, function(x) { x$MSE }))
MMREdata <- data.frame(NumBins = 1:length(SWTIIresults), MMRE = sapply(SWTIIresults, function(x) { x$MMRE }))
PREDdata <- data.frame(NumBins = 1:length(SWTIIresults), PRED = sapply(SWTIIresults, function(x) { x$PRED }))
ggplot(data = MSEdata, aes(x = NumBins, y = log(MSE))) + geom_point(shape = 1) + geom_line() + ggtitle("MSE vs Number of Bins") +
theme_bw()
ggplot(data = MMREdata, aes(x = NumBins, y = MMRE)) + geom_point(shape = 1) + geom_line() + ggtitle("MMRE vs Number of Bins") +
theme_bw()
ggplot(data = PREDdata, aes(x = NumBins, y = PRED)) + geom_point(shape = 1) + geom_line() + ylab("PRED(0.25)") + ggtitle("PRED(0.25) Results") + theme_bw()
mergedMMREPREDII <- merge(MMREdata, PREDdata, by="NumBins")
mergedMMREPREDII <- merge(mergedMMREPREDII, R2data, by="NumBins")
meltMergedMMREPREDII = melt(mergedMMREPREDII, id.vars=c("NumBins","R2"))
colnames(meltMergedMMREPREDII) <- c("Bins", "R2", "Method", "Value")
ggplot(data = meltMergedMMREPREDII, aes(x = Bins, y = Value)) + geom_point(shape = 1) + geom_line() + facet_wrap(Method~., scales="free_y", ncol=1) + theme_bw()
# Plot marginal posteriors for each parameter
for (i in 1:length(SWTIIresults)) {
marginalData <- SWTIIresults[[i]]$model[, !names(SWTIIresults[[i]]$model) %in% c("(Intercept)", "sigma")]
if (is.vector(marginalData)) {
marginalData <- data.frame(l1 = marginalData)
}
for (col in names(marginalData)) {
mean <- mean(marginalData[, col])
sd <- sd(marginalData[, col])
peakDensity <- dnorm(mean, mean, sd)
g <- ggplot(marginalData, aes(x=marginalData[, col])) +
geom_histogram(aes(y = ..density..), binwidth = 1, colour="black", fill="white") +
stat_function(fun = dnorm, args = list(mean = mean(mean), sd = sd)) +
xlab(col) + ggtitle("Posterior Weight", paste(col, i, "bins")) +
annotate("text", x = mean, y = peakDensity * ((sd/3 *.1) + 1), label = paste("mean:", round(mean,2),",", "sd:", round(sd,2))) +
theme_bw()
print(g)
}
}
SWTIIresults <- performSearch(6, effort, combined, transactionFiles, c("TL", "TD"))
SWTIILevelsDist <- data.frame(levels=c(),counts=c(),bins=c())
# Plot classification results
for (i in 1:length(SWTIIresults)) {
result <- SWTIIresults[[i]]
df <- as.data.frame(t(subset(result$data, select = -c(Effort))))
g <- ggplot(data = df, aes(x = rownames(df), y = Aggregate)) +
geom_bar(stat = "identity") +
xlab("Levels") +
ylab("Counts") +
ggtitle(paste("Classification Results:", i*2-2+1, "levels")) +
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
SWTIILevelsDist = rbind(SWTIILevelsDist, data.frame(levels=gsub("l", "L", rownames(df)),counts=df$Aggregate,bins=rep(i,nrow(df))))
cutsVec <- cutsAsVec(result$cuts)
g <- g + geom_text(data = data.frame(cutsVec), aes(label=cutsVec, col=cutsVec), alpha=0, x=1, y=1) +
theme(legend.key=element_blank(), legend.title = element_blank()) +
guides(colour=guide_legend(override.aes=list(size=0)), reverse = TRUE) +
theme_bw()
print(g)
}
SWTIILevelsDist$Label <- paste("Cut ", SWTIILevelsDist$bins, sep="")
#SWTIILevelsDist$levels <- factor(gsub("L", "l", SWTIILevelsDist$levels))
ggplot(data = SWTIILevelsDist, aes(x = levels, y = counts)) +
geom_bar(stat = "identity") +
xlab("Complexity Levels") +
ylab("Number of Transactions") +
facet_wrap(. ~ Label, scales="free", ncol=2) +theme_bw()
#print(SWTIIresults[[5]][["model"]])
# Plot predicted vs. actual effort values
predictedValuesSWTII <- sapply(1:length(SWTIIresults), function(i) {
predicted <- apply(SWTIIresults[[i]]$data, 1, function(x) {
blmpredicted <- predict.blm(SWTIIresults[[i]]$model, newdata = as.data.frame(t(x)))
#blmpredicted*SWTIIresults[[i]]$normFactor
})
})
colnames(predictedValuesSWTII) <- paste(1:length(SWTIIresults), "Bins")
predictedValuesSWTII <- subset(predictedValuesSWTII, rownames(predictedValuesSWTII) != "Aggregate")
predictedValuesSWTII <- merge(as.data.frame(predictedValuesSWTII), effort, by='row.names', all=TRUE)
rownames(predictedValuesSWTII) <- predictedValuesSWTII$Row.names
predictedValuesSWTII$Row.names <- NULL
r2Vals <- apply(subset(predictedValuesSWTII, select = -Effort), 2, function (x) {
dat <- data.frame(Predicted = x, Effort = predictedValuesSWTII$Effort)
model <- lm(Effort ~ ., data = dat)
summary(model)$r.squared
})
r2Vals <- round(r2Vals, digits = 5)
r2Vals <- paste("R2:", r2Vals, sep = "")
predictedValues <- gather(predictedValuesSWTII, numBins, Predicted, -Effort)
r2data_txt <- data.frame(label = as.character(r2Vals), numBins = paste(1:length(SWTIIresults), "Bins"))
ggplot(predictedValues, aes(x = Predicted, y = Effort)) +
geom_point(shape = 1) + stat_smooth(method = "lm",  se = FALSE, fullrange = TRUE) +
facet_wrap(. ~ numBins, scales = "free", nrow=2) + xlab("Predicted Effort") +
ylab("Actual Effort") + ggtitle("Goodness of Fit") +
theme(panel.spacing = unit(1, "lines")) +
geom_text(data = r2data_txt, size = 3, mapping = aes(x = -Inf, y = -Inf, label = label),
hjust = -1, vjust = -1) +
theme_bw()
# Plots cross validation results
R2data <- data.frame(NumBins = 1:length(SWTIIresults), R2=r2Vals)
MSEdata <- data.frame(NumBins = 1:length(SWTIIresults), MSE = sapply(SWTIIresults, function(x) { x$MSE }))
MMREdata <- data.frame(NumBins = 1:length(SWTIIresults), MMRE = sapply(SWTIIresults, function(x) { x$MMRE }))
PREDdata <- data.frame(NumBins = 1:length(SWTIIresults), PRED = sapply(SWTIIresults, function(x) { x$PRED }))
ggplot(data = MSEdata, aes(x = NumBins, y = log(MSE))) + geom_point(shape = 1) + geom_line() + ggtitle("MSE vs Number of Bins") +
theme_bw()
ggplot(data = MMREdata, aes(x = NumBins, y = MMRE)) + geom_point(shape = 1) + geom_line() + ggtitle("MMRE vs Number of Bins") +
theme_bw()
ggplot(data = PREDdata, aes(x = NumBins, y = PRED)) + geom_point(shape = 1) + geom_line() + ylab("PRED(0.25)") + ggtitle("PRED(0.25) Results") + theme_bw()
mergedMMREPREDII <- merge(MMREdata, PREDdata, by="NumBins")
mergedMMREPREDII <- merge(mergedMMREPREDII, R2data, by="NumBins")
meltMergedMMREPREDII = melt(mergedMMREPREDII, id.vars=c("NumBins","R2"))
colnames(meltMergedMMREPREDII) <- c("Bins", "R2", "Method", "Value")
ggplot(data = meltMergedMMREPREDII, aes(x = Bins, y = Value)) + geom_point(shape = 1) + geom_line() + facet_wrap(Method~., scales="free_y", ncol=1) + theme_bw()
# Plot marginal posteriors for each parameter
for (i in 1:length(SWTIIresults)) {
marginalData <- SWTIIresults[[i]]$model[, !names(SWTIIresults[[i]]$model) %in% c("(Intercept)", "sigma")]
if (is.vector(marginalData)) {
marginalData <- data.frame(l1 = marginalData)
}
for (col in names(marginalData)) {
mean <- mean(marginalData[, col])
sd <- sd(marginalData[, col])
peakDensity <- dnorm(mean, mean, sd)
g <- ggplot(marginalData, aes(x=marginalData[, col])) +
geom_histogram(aes(y = ..density..), binwidth = 1, colour="black", fill="white") +
stat_function(fun = dnorm, args = list(mean = mean(mean), sd = sd)) +
xlab(col) + ggtitle("Posterior Weight", paste(col, i, "bins")) +
annotate("text", x = mean, y = peakDensity * ((sd/3 *.1) + 1), label = paste("mean:", round(mean,2),",", "sd:", round(sd,2))) +
theme_bw()
print(g)
}
}
knitr::opts_chunk$set(echo = TRUE)
source("transaction_weights_calibration4.R")
source("comparison_between_size_metrics.R")
library(jsonlite)
library(reshape)
library(tidyverse)
library(fitdistrplus)
library(egg)
library(gridExtra)
library(plyr)
require(MASS)
cutsAsVec <- function(x) {
ret <- c("Cut Points:")
for (row in rownames(x)) {
cutPoints <- round(x[row, ], digits = 1)
ret <- c(ret, paste(row,":", paste(cutPoints, collapse = ", ")))
=======
result <- SWTIIIresults[[i]]
data <- subset(result$data, select = -c(Effort))
df <- as.data.frame(t(data))
g <- ggplot(data = df, aes(x = rownames(df), y = Aggregate)) +
geom_bar(stat = "identity") +
scale_x_discrete(limits = paste("l", 1:length(data), sep=""))+
xlab("Levels") +
ylab("Counts") +
ggtitle(paste("Classification Results:", i*3-3+1, "levels")) +
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))+
theme_bw(base_size=15)
cutsVec <- cutsAsVec(result$cuts)
g <- g + geom_text(data = data.frame(cutsVec), aes(label=cutsVec, col=cutsVec), alpha=0, x=1, y=1) +
theme(legend.key=element_blank(), legend.title = element_blank()) +
guides(colour=guide_legend(override.aes=list(size=0)), reverse = TRUE)
print(g)
}
# Plot predicted vs. actual effort values
predictedValuesSWTIII <- sapply(1:length(SWTIIIresults), function(i) {
predicted <- apply(SWTIIIresults[[i]]$data, 1, function(x) {
blmpredicted <- predict.blm(SWTIIIresults[[i]]$model, newdata = as.data.frame(t(x)))
#blmpredicted*SWTIIIresults[[i]]$normFactor
})
})
colnames(predictedValuesSWTIII) <- paste(1:length(SWTIIIresults), "Bins")
predictedValuesSWTIII <- subset(predictedValuesSWTIII, rownames(predictedValuesSWTIII) != "Aggregate")
predictedValuesSWTIII <- merge(as.data.frame(predictedValuesSWTIII), effort, by='row.names', all=TRUE)
rownames(predictedValuesSWTIII) <- predictedValuesSWTIII$Row.names
predictedValuesSWTIII$Row.names <- NULL
r2Vals <- apply(subset(predictedValuesSWTIII, select = -Effort), 2, function (x) {
dat <- data.frame(Predicted = x, Effort = predictedValuesSWTIII$Effort)
model <- lm(Effort ~ ., data = dat)
summary(model)$r.squared
})
r2Vals <- round(r2Vals, digits = 5)
r2Vals <- paste("R2:", r2Vals, sep = "")
predictedValues <- gather(predictedValuesSWTIII, numBins, Predicted, -Effort)
r2data_txt <- data.frame(label = as.character(r2Vals), numBins = paste(1:length(SWTIIIresults), "Bins"))
ggplot(predictedValues, aes(x = Predicted, y = Effort)) +
geom_point(shape = 1) + stat_smooth(method = "lm",  se = FALSE, fullrange = TRUE) +
facet_wrap(. ~ numBins, scales = "free", nrow=2) + xlab("Predicted Effort") +
ylab("Actual Effort") + ggtitle("Goodness of Fit") +
theme(panel.spacing = unit(1, "lines")) +
geom_text(data = r2data_txt, size = 3, mapping = aes(x = -Inf, y = -Inf, label = label),
hjust = -1, vjust = -1) +
theme_bw()
# Plots cross validation results
R2data <- data.frame(NumBins = 1:length(SWTIIIresults), R2=r2Vals)
MSEdata <- data.frame(NumBins = 1:length(SWTIIIresults), MSE = sapply(SWTIIIresults, function(x) { x$MSE }))
MMREdata <- data.frame(NumBins = 1:length(SWTIIIresults), MMRE = sapply(SWTIIIresults, function(x) { x$MMRE }))
PREDdata <- data.frame(NumBins = 1:length(SWTIIIresults), PRED = sapply(SWTIIIresults, function(x) { x$PRED }))
ggplot(data = MSEdata, aes(x = NumBins, y = log(MSE))) + geom_point(shape = 1) + geom_line() + ggtitle("MSE vs Number of Bins") +
theme_bw(base_size=20)
ggplot(data = MMREdata, aes(x = NumBins, y = MMRE)) + geom_point(shape = 1) + geom_line() + ggtitle("MMRE vs Number of Bins") +
theme_bw(base_size=20)
ggplot(data = PREDdata, aes(x = NumBins, y = PRED)) + geom_point(shape = 1) + geom_line() + ylab("PRED(0.25)") + ggtitle("PRED vs Number of Bins") +
theme_bw(base_size=20)
mergedMMREPREDIII <- merge(MMREdata, PREDdata, by="NumBins")
mergedMMREPREDIII <- merge(mergedMMREPREDIII, R2data, by="NumBins")
meltMergedMMREPREDIII = melt(mergedMMREPREDIII, id.vars=c("NumBins", "R2"))
colnames(meltMergedMMREPREDIII) <- c("Bins", "R2", "Method", "Value")
ggplot(data = meltMergedMMREPREDIII, aes(x = Bins, y = Value)) + geom_point(shape = 1) + geom_line() + facet_grid(rows=vars(Method), scales="free_y") +theme_bw()
#ggplot(data = meltMergedMMREPREDII, aes(x = Bins, y = Value)) + geom_point(shape = 1) + geom_line() + facet_wrap(.~Method, scales="free_y", ncol=1) + theme_bw()
# Plot marginal posteriors for each parameter
for (i in 1:length(SWTIIIresults)) {
marginalData <- SWTIIIresults[[i]]$model[, !names(SWTIIIresults[[i]]$model) %in% c("(Intercept)", "sigma")]
if (is.vector(marginalData)) {
marginalData <- data.frame(TL1TD1DETs1 = marginalData)
}
for (col in names(marginalData)) {
mean <- mean(marginalData[, col])
sd <- sd(marginalData[, col])
peakDensity <- dnorm(mean, mean, sd)
g <- ggplot(marginalData, aes(x=marginalData[, col])) +
geom_histogram(aes(y = ..density..), binwidth = 1, colour="black", fill="white") +
stat_function(fun = dnorm, args = list(mean = mean(mean), sd = sd)) +
xlab(col) + ggtitle(paste("Posterior Weight", col, i, "bins")) +
annotate("text", x = mean, y = peakDensity * ((sd/3 *.1) + 1), label = paste("mean:", round(mean,2),",", "sd:", round(sd,2))) +
theme_bw()
print(g)
}
}
SWTIIresults <- performSearch(6, effort, combined, transactionFiles, c("TL", "TD"))
SWTIILevelsDist <- data.frame(levels=c(),counts=c(),bins=c())
# Plot classification results
for (i in 1:length(SWTIIresults)) {
result <- SWTIIresults[[i]]
df <- as.data.frame(t(subset(result$data, select = -c(Effort))))
g <- ggplot(data = df, aes(x = rownames(df), y = Aggregate)) +
geom_bar(stat = "identity") +
xlab("Levels") +
ylab("Counts") +
ggtitle(paste("Classification Results:", i*2-2+1, "levels")) +
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
SWTIILevelsDist = rbind(SWTIILevelsDist, data.frame(levels=gsub("l", "L", rownames(df)),counts=df$Aggregate,bins=rep(i,nrow(df))))
cutsVec <- cutsAsVec(result$cuts)
g <- g + geom_text(data = data.frame(cutsVec), aes(label=cutsVec, col=cutsVec), alpha=0, x=1, y=1) +
theme(legend.key=element_blank(), legend.title = element_blank()) +
guides(colour=guide_legend(override.aes=list(size=0)), reverse = TRUE) +
theme_bw()
print(g)
}
SWTIILevelsDist$Label <- paste("Cut ", SWTIILevelsDist$bins, sep="")
#SWTIILevelsDist$levels <- factor(gsub("L", "l", SWTIILevelsDist$levels))
ggplot(data = SWTIILevelsDist, aes(x = levels, y = counts)) +
geom_bar(stat = "identity") +
xlab("Complexity Levels") +
ylab("Number of Transactions") +
facet_wrap(. ~ Label, scales="free", ncol=2) +theme_bw()
#print(SWTIIresults[[5]][["model"]])
# Plot predicted vs. actual effort values
predictedValuesSWTII <- sapply(1:length(SWTIIresults), function(i) {
predicted <- apply(SWTIIresults[[i]]$data, 1, function(x) {
blmpredicted <- predict.blm(SWTIIresults[[i]]$model, newdata = as.data.frame(t(x)))
#blmpredicted*SWTIIresults[[i]]$normFactor
})
})
colnames(predictedValuesSWTII) <- paste(1:length(SWTIIresults), "Bins")
predictedValuesSWTII <- subset(predictedValuesSWTII, rownames(predictedValuesSWTII) != "Aggregate")
predictedValuesSWTII <- merge(as.data.frame(predictedValuesSWTII), effort, by='row.names', all=TRUE)
rownames(predictedValuesSWTII) <- predictedValuesSWTII$Row.names
predictedValuesSWTII$Row.names <- NULL
r2Vals <- apply(subset(predictedValuesSWTII, select = -Effort), 2, function (x) {
dat <- data.frame(Predicted = x, Effort = predictedValuesSWTII$Effort)
model <- lm(Effort ~ ., data = dat)
summary(model)$r.squared
})
r2Vals <- round(r2Vals, digits = 5)
r2Vals <- paste("R2:", r2Vals, sep = "")
predictedValues <- gather(predictedValuesSWTII, numBins, Predicted, -Effort)
r2data_txt <- data.frame(label = as.character(r2Vals), numBins = paste(1:length(SWTIIresults), "Bins"))
ggplot(predictedValues, aes(x = Predicted, y = Effort)) +
geom_point(shape = 1) + stat_smooth(method = "lm",  se = FALSE, fullrange = TRUE) +
facet_wrap(. ~ numBins, scales = "free", nrow=2) + xlab("Predicted Effort") +
ylab("Actual Effort") + ggtitle("Goodness of Fit") +
theme(panel.spacing = unit(1, "lines")) +
geom_text(data = r2data_txt, size = 3, mapping = aes(x = -Inf, y = -Inf, label = label),
hjust = -1, vjust = -1) +
theme_bw()
# Plots cross validation results
R2data <- data.frame(NumBins = 1:length(SWTIIresults), R2=r2Vals)
MSEdata <- data.frame(NumBins = 1:length(SWTIIresults), MSE = sapply(SWTIIresults, function(x) { x$MSE }))
MMREdata <- data.frame(NumBins = 1:length(SWTIIresults), MMRE = sapply(SWTIIresults, function(x) { x$MMRE }))
PREDdata <- data.frame(NumBins = 1:length(SWTIIresults), PRED = sapply(SWTIIresults, function(x) { x$PRED }))
ggplot(data = MSEdata, aes(x = NumBins, y = log(MSE))) + geom_point(shape = 1) + geom_line() + ggtitle("MSE vs Number of Bins") +
theme_bw()
ggplot(data = MMREdata, aes(x = NumBins, y = MMRE)) + geom_point(shape = 1) + geom_line() + ggtitle("MMRE vs Number of Bins") +
theme_bw()
ggplot(data = PREDdata, aes(x = NumBins, y = PRED)) + geom_point(shape = 1) + geom_line() + ylab("PRED(0.25)") + ggtitle("PRED(0.25) Results") + theme_bw()
mergedMMREPREDII <- merge(MMREdata, PREDdata, by="NumBins")
mergedMMREPREDII <- merge(mergedMMREPREDII, R2data, by="NumBins")
meltMergedMMREPREDII = melt(mergedMMREPREDII, id.vars=c("NumBins","R2"))
colnames(meltMergedMMREPREDII) <- c("Bins", "R2", "Method", "Value")
ggplot(data = meltMergedMMREPREDII, aes(x = Bins, y = Value)) + geom_point(shape = 1) + geom_line() + facet_wrap(Method~., scales="free_y", ncol=1) + theme_bw()
# Plot marginal posteriors for each parameter
for (i in 1:length(SWTIIresults)) {
marginalData <- SWTIIresults[[i]]$model[, !names(SWTIIresults[[i]]$model) %in% c("(Intercept)", "sigma")]
if (is.vector(marginalData)) {
marginalData <- data.frame(l1 = marginalData)
}
for (col in names(marginalData)) {
mean <- mean(marginalData[, col])
sd <- sd(marginalData[, col])
peakDensity <- dnorm(mean, mean, sd)
g <- ggplot(marginalData, aes(x=marginalData[, col])) +
geom_histogram(aes(y = ..density..), binwidth = 1, colour="black", fill="white") +
stat_function(fun = dnorm, args = list(mean = mean(mean), sd = sd)) +
xlab(col) + ggtitle("Posterior Weight", paste(col, i, "bins")) +
annotate("text", x = mean, y = peakDensity * ((sd/3 *.1) + 1), label = paste("mean:", round(mean,2),",", "sd:", round(sd,2))) +
theme_bw()
print(g)
}
}
SWTIIresults <- performSearch(6, effort, combined, transactionFiles, c("TL", "TD"))
SWTIILevelsDist <- data.frame(levels=c(),counts=c(),bins=c())
# Plot classification results
for (i in 1:length(SWTIIresults)) {
result <- SWTIIresults[[i]]
df <- as.data.frame(t(subset(result$data, select = -c(Effort))))
g <- ggplot(data = df, aes(x = rownames(df), y = Aggregate)) +
geom_bar(stat = "identity") +
xlab("Levels") +
ylab("Counts") +
ggtitle(paste("Classification Results:", i*2-2+1, "levels")) +
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
SWTIILevelsDist = rbind(SWTIILevelsDist, data.frame(levels=gsub("l", "L", rownames(df)),counts=df$Aggregate,bins=rep(i,nrow(df))))
cutsVec <- cutsAsVec(result$cuts)
g <- g + geom_text(data = data.frame(cutsVec), aes(label=cutsVec, col=cutsVec), alpha=0, x=1, y=1) +
theme(legend.key=element_blank(), legend.title = element_blank()) +
guides(colour=guide_legend(override.aes=list(size=0)), reverse = TRUE) +
theme_bw()
print(g)
}
SWTIILevelsDist$Label <- paste("Cut ", SWTIILevelsDist$bins, sep="")
#SWTIILevelsDist$levels <- factor(gsub("L", "l", SWTIILevelsDist$levels))
ggplot(data = SWTIILevelsDist, aes(x = levels, y = counts)) +
geom_bar(stat = "identity") +
xlab("Complexity Levels") +
ylab("Number of Transactions") +
facet_wrap(. ~ Label, scales="free", ncol=2) +theme_bw()
#print(SWTIIresults[[5]][["model"]])
# Plot predicted vs. actual effort values
predictedValuesSWTII <- sapply(1:length(SWTIIresults), function(i) {
predicted <- apply(SWTIIresults[[i]]$data, 1, function(x) {
blmpredicted <- predict.blm(SWTIIresults[[i]]$model, newdata = as.data.frame(t(x)))
#blmpredicted*SWTIIresults[[i]]$normFactor
})
})
colnames(predictedValuesSWTII) <- paste(1:length(SWTIIresults), "Bins")
predictedValuesSWTII <- subset(predictedValuesSWTII, rownames(predictedValuesSWTII) != "Aggregate")
predictedValuesSWTII <- merge(as.data.frame(predictedValuesSWTII), effort, by='row.names', all=TRUE)
rownames(predictedValuesSWTII) <- predictedValuesSWTII$Row.names
predictedValuesSWTII$Row.names <- NULL
r2Vals <- apply(subset(predictedValuesSWTII, select = -Effort), 2, function (x) {
dat <- data.frame(Predicted = x, Effort = predictedValuesSWTII$Effort)
model <- lm(Effort ~ ., data = dat)
summary(model)$r.squared
})
r2Vals <- round(r2Vals, digits = 5)
r2Vals <- paste("R2:", r2Vals, sep = "")
predictedValues <- gather(predictedValuesSWTII, numBins, Predicted, -Effort)
r2data_txt <- data.frame(label = as.character(r2Vals), numBins = paste(1:length(SWTIIresults), "Bins"))
ggplot(predictedValues, aes(x = Predicted, y = Effort)) +
geom_point(shape = 1) + stat_smooth(method = "lm",  se = FALSE, fullrange = TRUE) +
facet_wrap(. ~ numBins, scales = "free", nrow=2) + xlab("Predicted Effort") +
ylab("Actual Effort") + ggtitle("Goodness of Fit") +
theme(panel.spacing = unit(1, "lines")) +
geom_text(data = r2data_txt, size = 3, mapping = aes(x = -Inf, y = -Inf, label = label),
hjust = -1, vjust = -1) +
theme_bw()
# Plots cross validation results
R2data <- data.frame(NumBins = 1:length(SWTIIresults), R2=r2Vals)
MSEdata <- data.frame(NumBins = 1:length(SWTIIresults), MSE = sapply(SWTIIresults, function(x) { x$MSE }))
MMREdata <- data.frame(NumBins = 1:length(SWTIIresults), MMRE = sapply(SWTIIresults, function(x) { x$MMRE }))
PREDdata <- data.frame(NumBins = 1:length(SWTIIresults), PRED = sapply(SWTIIresults, function(x) { x$PRED }))
ggplot(data = MSEdata, aes(x = NumBins, y = log(MSE))) + geom_point(shape = 1) + geom_line() + ggtitle("MSE vs Number of Bins") +
theme_bw()
ggplot(data = MMREdata, aes(x = NumBins, y = MMRE)) + geom_point(shape = 1) + geom_line() + ggtitle("MMRE vs Number of Bins") +
theme_bw()
ggplot(data = PREDdata, aes(x = NumBins, y = PRED)) + geom_point(shape = 1) + geom_line() + ylab("PRED(0.25)") + ggtitle("PRED(0.25) Results") + theme_bw()
mergedMMREPREDII <- merge(MMREdata, PREDdata, by="NumBins")
mergedMMREPREDII <- merge(mergedMMREPREDII, R2data, by="NumBins")
meltMergedMMREPREDII = melt(mergedMMREPREDII, id.vars=c("NumBins","R2"))
colnames(meltMergedMMREPREDII) <- c("Bins", "R2", "Method", "Value")
ggplot(data = meltMergedMMREPREDII, aes(x = Bins, y = Value)) + geom_point(shape = 1) + geom_line() + facet_wrap(Method~., scales="free_y", ncol=1) + theme_bw()
# Plot marginal posteriors for each parameter
for (i in 1:length(SWTIIresults)) {
marginalData <- SWTIIresults[[i]]$model[, !names(SWTIIresults[[i]]$model) %in% c("(Intercept)", "sigma")]
if (is.vector(marginalData)) {
marginalData <- data.frame(l1 = marginalData)
}
for (col in names(marginalData)) {
mean <- mean(marginalData[, col])
sd <- sd(marginalData[, col])
peakDensity <- dnorm(mean, mean, sd)
g <- ggplot(marginalData, aes(x=marginalData[, col])) +
geom_histogram(aes(y = ..density..), binwidth = 1, colour="black", fill="white") +
stat_function(fun = dnorm, args = list(mean = mean(mean), sd = sd)) +
xlab(col) + ggtitle("Posterior Weight", paste(col, i, "bins")) +
annotate("text", x = mean, y = peakDensity * ((sd/3 *.1) + 1), label = paste("mean:", round(mean,2),",", "sd:", round(sd,2))) +
theme_bw()
print(g)
}
}
SWTIILevelsDist <- data.frame(levels=c(),counts=c(),bins=c())
# Plot classification results
for (i in 1:length(SWTIIresults)) {
result <- SWTIIresults[[i]]
df <- as.data.frame(t(subset(result$data, select = -c(Effort))))
g <- ggplot(data = df, aes(x = rownames(df), y = Aggregate)) +
geom_bar(stat = "identity") +
xlab("Levels") +
ylab("Counts") +
ggtitle(paste("Classification Results:", i*2-2+1, "levels")) +
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
SWTIILevelsDist = rbind(SWTIILevelsDist, data.frame(levels=gsub("l", "L", rownames(df)),counts=df$Aggregate,bins=rep(i,nrow(df))))
cutsVec <- cutsAsVec(result$cuts)
g <- g + geom_text(data = data.frame(cutsVec), aes(label=cutsVec, col=cutsVec), alpha=0, x=1, y=1) +
theme(legend.key=element_blank(), legend.title = element_blank()) +
guides(colour=guide_legend(override.aes=list(size=0)), reverse = TRUE) +
theme_bw()
print(g)
}
SWTIILevelsDist$Label <- paste("Cut ", SWTIILevelsDist$bins, sep="")
#SWTIILevelsDist$levels <- factor(gsub("L", "l", SWTIILevelsDist$levels))
ggplot(data = SWTIILevelsDist, aes(x = levels, y = counts)) +
geom_bar(stat = "identity") +
xlab("Complexity Levels") +
ylab("Number of Transactions") +
facet_wrap(. ~ Label, scales="free", ncol=2) +theme_bw()
#print(SWTIIresults[[5]][["model"]])
# Plot predicted vs. actual effort values
predictedValuesSWTII <- sapply(1:length(SWTIIresults), function(i) {
predicted <- apply(SWTIIresults[[i]]$data, 1, function(x) {
blmpredicted <- predict.blm(SWTIIresults[[i]]$model, newdata = as.data.frame(t(x)))
#blmpredicted*SWTIIresults[[i]]$normFactor
})
})
colnames(predictedValuesSWTII) <- paste(1:length(SWTIIresults), "Bins")
predictedValuesSWTII <- subset(predictedValuesSWTII, rownames(predictedValuesSWTII) != "Aggregate")
predictedValuesSWTII <- merge(as.data.frame(predictedValuesSWTII), effort, by='row.names', all=TRUE)
rownames(predictedValuesSWTII) <- predictedValuesSWTII$Row.names
predictedValuesSWTII$Row.names <- NULL
r2Vals <- apply(subset(predictedValuesSWTII, select = -Effort), 2, function (x) {
dat <- data.frame(Predicted = x, Effort = predictedValuesSWTII$Effort)
model <- lm(Effort ~ ., data = dat)
summary(model)$r.squared
})
r2Vals <- round(r2Vals, digits = 5)
r2Vals <- paste("R2:", r2Vals, sep = "")
predictedValues <- gather(predictedValuesSWTII, numBins, Predicted, -Effort)
r2data_txt <- data.frame(label = as.character(r2Vals), numBins = paste(1:length(SWTIIresults), "Bins"))
ggplot(predictedValues, aes(x = Predicted, y = Effort)) +
geom_point(shape = 1) + stat_smooth(method = "lm",  se = FALSE, fullrange = TRUE) +
facet_wrap(. ~ numBins, scales = "free", nrow=2) + xlab("Predicted Effort") +
ylab("Actual Effort") + ggtitle("Goodness of Fit") +
theme(panel.spacing = unit(1, "lines")) +
geom_text(data = r2data_txt, size = 3, mapping = aes(x = -Inf, y = -Inf, label = label),
hjust = -1, vjust = -1) +
theme_bw()
# Plots cross validation results
R2data <- data.frame(NumBins = 1:length(SWTIIresults), R2=r2Vals)
MSEdata <- data.frame(NumBins = 1:length(SWTIIresults), MSE = sapply(SWTIIresults, function(x) { x$MSE }))
MMREdata <- data.frame(NumBins = 1:length(SWTIIresults), MMRE = sapply(SWTIIresults, function(x) { x$MMRE }))
PREDdata <- data.frame(NumBins = 1:length(SWTIIresults), PRED = sapply(SWTIIresults, function(x) { x$PRED }))
ggplot(data = MSEdata, aes(x = NumBins, y = log(MSE))) + geom_point(shape = 1) + geom_line() + ggtitle("MSE vs Number of Bins") +
theme_bw()
ggplot(data = MMREdata, aes(x = NumBins, y = MMRE)) + geom_point(shape = 1) + geom_line() + ggtitle("MMRE vs Number of Bins") +
theme_bw()
ggplot(data = PREDdata, aes(x = NumBins, y = PRED)) + geom_point(shape = 1) + geom_line() + ylab("PRED(0.25)") + ggtitle("PRED(0.25) Results") + theme_bw()
SWTIIresults <- performSearch(6, effort, combined, transactionFiles, c("TL", "TD"))
SWTIILevelsDist <- data.frame(levels=c(),counts=c(),bins=c())
# Plot classification results
for (i in 1:length(SWTIIresults)) {
result <- SWTIIresults[[i]]
df <- as.data.frame(t(subset(result$data, select = -c(Effort))))
g <- ggplot(data = df, aes(x = rownames(df), y = Aggregate)) +
geom_bar(stat = "identity") +
xlab("Levels") +
ylab("Counts") +
ggtitle(paste("Classification Results:", i*2-2+1, "levels")) +
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
SWTIILevelsDist = rbind(SWTIILevelsDist, data.frame(levels=gsub("l", "L", rownames(df)),counts=df$Aggregate,bins=rep(i,nrow(df))))
cutsVec <- cutsAsVec(result$cuts)
g <- g + geom_text(data = data.frame(cutsVec), aes(label=cutsVec, col=cutsVec), alpha=0, x=1, y=1) +
theme(legend.key=element_blank(), legend.title = element_blank()) +
guides(colour=guide_legend(override.aes=list(size=0)), reverse = TRUE) +
theme_bw()
print(g)
}
SWTIILevelsDist$Label <- paste("Cut ", SWTIILevelsDist$bins, sep="")
#SWTIILevelsDist$levels <- factor(gsub("L", "l", SWTIILevelsDist$levels))
ggplot(data = SWTIILevelsDist, aes(x = levels, y = counts)) +
geom_bar(stat = "identity") +
xlab("Complexity Levels") +
ylab("Number of Transactions") +
facet_wrap(. ~ Label, scales="free", ncol=2) +theme_bw()
#print(SWTIIresults[[5]][["model"]])
# Plot predicted vs. actual effort values
predictedValuesSWTII <- sapply(1:length(SWTIIresults), function(i) {
predicted <- apply(SWTIIresults[[i]]$data, 1, function(x) {
blmpredicted <- predict.blm(SWTIIresults[[i]]$model, newdata = as.data.frame(t(x)))
#blmpredicted*SWTIIresults[[i]]$normFactor
})
})
colnames(predictedValuesSWTII) <- paste(1:length(SWTIIresults), "Bins")
predictedValuesSWTII <- subset(predictedValuesSWTII, rownames(predictedValuesSWTII) != "Aggregate")
predictedValuesSWTII <- merge(as.data.frame(predictedValuesSWTII), effort, by='row.names', all=TRUE)
rownames(predictedValuesSWTII) <- predictedValuesSWTII$Row.names
predictedValuesSWTII$Row.names <- NULL
r2Vals <- apply(subset(predictedValuesSWTII, select = -Effort), 2, function (x) {
dat <- data.frame(Predicted = x, Effort = predictedValuesSWTII$Effort)
model <- lm(Effort ~ ., data = dat)
summary(model)$r.squared
})
r2Vals <- round(r2Vals, digits = 5)
r2Vals <- paste("R2:", r2Vals, sep = "")
predictedValues <- gather(predictedValuesSWTII, numBins, Predicted, -Effort)
r2data_txt <- data.frame(label = as.character(r2Vals), numBins = paste(1:length(SWTIIresults), "Bins"))
ggplot(predictedValues, aes(x = Predicted, y = Effort)) +
geom_point(shape = 1) + stat_smooth(method = "lm",  se = FALSE, fullrange = TRUE) +
facet_wrap(. ~ numBins, scales = "free", nrow=2) + xlab("Predicted Effort") +
ylab("Actual Effort") + ggtitle("Goodness of Fit") +
theme(panel.spacing = unit(1, "lines")) +
geom_text(data = r2data_txt, size = 3, mapping = aes(x = -Inf, y = -Inf, label = label),
hjust = -1, vjust = -1) +
theme_bw()
# Plots cross validation results
R2data <- data.frame(NumBins = 1:length(SWTIIresults), R2=r2Vals)
MSEdata <- data.frame(NumBins = 1:length(SWTIIresults), MSE = sapply(SWTIIresults, function(x) { x$MSE }))
MMREdata <- data.frame(NumBins = 1:length(SWTIIresults), MMRE = sapply(SWTIIresults, function(x) { x$MMRE }))
PREDdata <- data.frame(NumBins = 1:length(SWTIIresults), PRED = sapply(SWTIIresults, function(x) { x$PRED }))
ggplot(data = MSEdata, aes(x = NumBins, y = log(MSE))) + geom_point(shape = 1) + geom_line() + ggtitle("MSE vs Number of Bins") +
theme_bw()
ggplot(data = MMREdata, aes(x = NumBins, y = MMRE)) + geom_point(shape = 1) + geom_line() + ggtitle("MMRE vs Number of Bins") +
theme_bw()
ggplot(data = PREDdata, aes(x = NumBins, y = PRED)) + geom_point(shape = 1) + geom_line() + ylab("PRED(0.25)") + ggtitle("PRED(0.25) Results") + theme_bw()
mergedMMREPREDII <- merge(MMREdata, PREDdata, by="NumBins")
mergedMMREPREDII <- merge(mergedMMREPREDII, R2data, by="NumBins")
meltMergedMMREPREDII = melt(mergedMMREPREDII, id.vars=c("NumBins","R2"))
colnames(meltMergedMMREPREDII) <- c("Bins", "R2", "Method", "Value")
ggplot(data = meltMergedMMREPREDII, aes(x = Bins, y = Value)) + geom_point(shape = 1) + geom_line() + facet_wrap(Method~., scales="free_y", ncol=1) + theme_bw()
# Plot marginal posteriors for each parameter
for (i in 1:length(SWTIIresults)) {
marginalData <- SWTIIresults[[i]]$model[, !names(SWTIIresults[[i]]$model) %in% c("(Intercept)", "sigma")]
if (is.vector(marginalData)) {
marginalData <- data.frame(l1 = marginalData)
}
for (col in names(marginalData)) {
mean <- mean(marginalData[, col])
sd <- sd(marginalData[, col])
peakDensity <- dnorm(mean, mean, sd)
g <- ggplot(marginalData, aes(x=marginalData[, col])) +
geom_histogram(aes(y = ..density..), binwidth = 1, colour="black", fill="white") +
stat_function(fun = dnorm, args = list(mean = mean(mean), sd = sd)) +
xlab(col) + ggtitle("Posterior Weight", paste(col, i, "bins")) +
annotate("text", x = mean, y = peakDensity * ((sd/3 *.1) + 1), label = paste("mean:", round(mean,2),",", "sd:", round(sd,2))) +
theme_bw()
print(g)
}
}
SWTIIresults <- performSearch(6, effort, combined, transactionFiles, c("TL", "TD"))
SWTIILevelsDist <- data.frame(levels=c(),counts=c(),bins=c())
# Plot classification results
for (i in 1:length(SWTIIresults)) {
result <- SWTIIresults[[i]]
df <- as.data.frame(t(subset(result$data, select = -c(Effort))))
g <- ggplot(data = df, aes(x = rownames(df), y = Aggregate)) +
geom_bar(stat = "identity") +
xlab("Levels") +
ylab("Counts") +
ggtitle(paste("Classification Results:", i*2-2+1, "levels")) +
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
SWTIILevelsDist = rbind(SWTIILevelsDist, data.frame(levels=gsub("l", "L", rownames(df)),counts=df$Aggregate,bins=rep(i,nrow(df))))
cutsVec <- cutsAsVec(result$cuts)
g <- g + geom_text(data = data.frame(cutsVec), aes(label=cutsVec, col=cutsVec), alpha=0, x=1, y=1) +
theme(legend.key=element_blank(), legend.title = element_blank()) +
guides(colour=guide_legend(override.aes=list(size=0)), reverse = TRUE) +
theme_bw()
print(g)
}
SWTIILevelsDist$Label <- paste("Cut ", SWTIILevelsDist$bins, sep="")
#SWTIILevelsDist$levels <- factor(gsub("L", "l", SWTIILevelsDist$levels))
ggplot(data = SWTIILevelsDist, aes(x = levels, y = counts)) +
geom_bar(stat = "identity") +
xlab("Complexity Levels") +
ylab("Number of Transactions") +
facet_wrap(. ~ Label, scales="free", ncol=2) +theme_bw()
#print(SWTIIresults[[5]][["model"]])
# Plot predicted vs. actual effort values
predictedValuesSWTII <- sapply(1:length(SWTIIresults), function(i) {
predicted <- apply(SWTIIresults[[i]]$data, 1, function(x) {
blmpredicted <- predict.blm(SWTIIresults[[i]]$model, newdata = as.data.frame(t(x)))
#blmpredicted*SWTIIresults[[i]]$normFactor
})
})
colnames(predictedValuesSWTII) <- paste(1:length(SWTIIresults), "Bins")
predictedValuesSWTII <- subset(predictedValuesSWTII, rownames(predictedValuesSWTII) != "Aggregate")
predictedValuesSWTII <- merge(as.data.frame(predictedValuesSWTII), effort, by='row.names', all=TRUE)
rownames(predictedValuesSWTII) <- predictedValuesSWTII$Row.names
predictedValuesSWTII$Row.names <- NULL
r2Vals <- apply(subset(predictedValuesSWTII, select = -Effort), 2, function (x) {
dat <- data.frame(Predicted = x, Effort = predictedValuesSWTII$Effort)
model <- lm(Effort ~ ., data = dat)
summary(model)$r.squared
})
r2Vals <- round(r2Vals, digits = 5)
r2Vals <- paste("R2:", r2Vals, sep = "")
predictedValues <- gather(predictedValuesSWTII, numBins, Predicted, -Effort)
r2data_txt <- data.frame(label = as.character(r2Vals), numBins = paste(1:length(SWTIIresults), "Bins"))
ggplot(predictedValues, aes(x = Predicted, y = Effort)) +
geom_point(shape = 1) + stat_smooth(method = "lm",  se = FALSE, fullrange = TRUE) +
facet_wrap(. ~ numBins, scales = "free", nrow=2) + xlab("Predicted Effort") +
ylab("Actual Effort") + ggtitle("Goodness of Fit") +
theme(panel.spacing = unit(1, "lines")) +
geom_text(data = r2data_txt, size = 3, mapping = aes(x = -Inf, y = -Inf, label = label),
hjust = -1, vjust = -1) +
theme_bw()
# Plots cross validation results
R2data <- data.frame(NumBins = 1:length(SWTIIresults), R2=r2Vals)
MSEdata <- data.frame(NumBins = 1:length(SWTIIresults), MSE = sapply(SWTIIresults, function(x) { x$MSE }))
MMREdata <- data.frame(NumBins = 1:length(SWTIIresults), MMRE = sapply(SWTIIresults, function(x) { x$MMRE }))
PREDdata <- data.frame(NumBins = 1:length(SWTIIresults), PRED = sapply(SWTIIresults, function(x) { x$PRED }))
ggplot(data = MSEdata, aes(x = NumBins, y = log(MSE))) + geom_point(shape = 1) + geom_line() + ggtitle("MSE vs Number of Bins") +
theme_bw()
ggplot(data = MMREdata, aes(x = NumBins, y = MMRE)) + geom_point(shape = 1) + geom_line() + ggtitle("MMRE vs Number of Bins") +
theme_bw()
ggplot(data = PREDdata, aes(x = NumBins, y = PRED)) + geom_point(shape = 1) + geom_line() + ylab("PRED(0.25)") + ggtitle("PRED(0.25) Results") + theme_bw()
mergedMMREPREDII <- merge(MMREdata, PREDdata, by="NumBins")
mergedMMREPREDII <- merge(mergedMMREPREDII, R2data, by="NumBins")
meltMergedMMREPREDII = melt(mergedMMREPREDII, id.vars=c("NumBins","R2"))
colnames(meltMergedMMREPREDII) <- c("Bins", "R2", "Method", "Value")
ggplot(data = meltMergedMMREPREDII, aes(x = Bins, y = Value)) + geom_point(shape = 1) + geom_line() + facet_wrap(Method~., scales="free_y", ncol=1) + theme_bw()
# Plot marginal posteriors for each parameter
for (i in 1:length(SWTIIresults)) {
marginalData <- SWTIIresults[[i]]$model[, !names(SWTIIresults[[i]]$model) %in% c("(Intercept)", "sigma")]
if (is.vector(marginalData)) {
marginalData <- data.frame(l1 = marginalData)
}
for (col in names(marginalData)) {
mean <- mean(marginalData[, col])
sd <- sd(marginalData[, col])
peakDensity <- dnorm(mean, mean, sd)
g <- ggplot(marginalData, aes(x=marginalData[, col])) +
geom_histogram(aes(y = ..density..), binwidth = 1, colour="black", fill="white") +
stat_function(fun = dnorm, args = list(mean = mean(mean), sd = sd)) +
xlab(col) + ggtitle("Posterior Weight", paste(col, i, "bins")) +
annotate("text", x = mean, y = peakDensity * ((sd/3 *.1) + 1), label = paste("mean:", round(mean,2),",", "sd:", round(sd,2))) +
theme_bw()
print(g)
>>>>>>> 0946ae77c1969aebf136a88f6d93b8ffe5fe39a5
}
}
<<<<<<< HEAD
r2Vals <- apply(subset(predictedValues, select = -Effort), 2, function (x) {
dat <- data.frame(Predicted = x, Effort = predictedValues$Effort)
dat <- na.omit(dat)
model <- lm(Effort ~ ., data = dat)
totVar <- sum((dat$Predicted-mean(dat$Predicted))^2)
print(totVar)
resVar <- sum((dat$Effort-dat$Predicted)^2)
R2 <- 1-(resVar/totVar)
ftest <- var.test(dat$Predicted-mean(dat$Effort), dat$Predicted-dat$Effort, alternative = "two.sided")
print(ftest)
print(R2)
print(summary(model))
c(summary(model)$r.squared,ftest$p.value)
})
TNModelSelector <- 1;
TNModelPredictedValues <- as.data.frame(predictedValuesTN[, c(paste(TNModelSelector, "Bins", sep=" "))])
TNModelData <- TNresults[[TNModelSelector]][["data"]]
TNModelData <- TNModelData[rownames(TNModelData) != "Aggregate", ]
colnames(TNModelPredictedValues) <- c("EUCP")
rownames(TNModelPredictedValues) <- rownames(predictedValuesTN)
SWTIIModelSelector <- 4;
SWTIIModelPredictedValues = as.data.frame(predictedValuesSWTII[, c(paste(SWTIIModelSelector, "Bins", sep=" "))])
SWTIIModelData <- SWTIIresults[[SWTIIModelSelector]][["data"]]
SWTIIModelData <- SWTIIModelData[rownames(SWTIIModelData) != "Aggregate", ]
#print(SWTIIModelData)
colnames(SWTIIModelPredictedValues) <- c("EXUCP")
rownames(SWTIIModelPredictedValues) <- rownames(predictedValuesSWTII)
SWTIIIModelSelector <- 3;
SWTIIIModelPredictedValues = as.data.frame(predictedValuesSWTIII[, c(paste(SWTIIIModelSelector, "Bins", sep=" "))])
SWTIIIModelData <- SWTIIIresults[[SWTIIIModelSelector]][["data"]]
SWTIIIModelData <- SWTIIIModelData[rownames(SWTIIIModelData) != "Aggregate", ]
colnames(SWTIIIModelPredictedValues) <- c("DUCP")
rownames(SWTIIIModelPredictedValues) <- rownames(predictedValuesSWTIII)
predictedValues <- merge(TNModelPredictedValues, SWTIIModelPredictedValues, by='row.names', all=TRUE)
rownames(predictedValues) <- predictedValues$Row.names
predictedValues$Row.names <- NULL
predictedValues <- merge(predictedValues, SWTIIIModelPredictedValues, by='row.names', all=TRUE)
rownames(predictedValues) <- predictedValues$Row.names
predictedValues$Row.names <- NULL
predictedValues <- merge(predictedValues, effort, by='row.names', all=TRUE)
rownames(predictedValues) <- predictedValues$Row.names
predictedValues$Row.names <- NULL
r2Vals <- apply(subset(predictedValues, select = -Effort), 2, function (x) {
dat <- data.frame(Predicted = x, Effort = predictedValues$Effort)
dat <- na.omit(dat)
model <- lm(Effort ~ ., data = dat)
totVar <- sum((dat$Predicted-mean(dat$Predicted))^2)
print(totVar)
resVar <- sum((dat$Effort-dat$Predicted)^2)
R2 <- 1-(resVar/totVar)
ftest <- var.test(dat$Predicted-mean(dat$Effort), dat$Predicted-dat$Effort, alternative = "two.sided")
print(ftest)
print(R2)
print(summary(model))
c(summary(model)$r.squared,ftest$p.value)
})
r2Vals <- as.data.frame(t(r2Vals))
colnames(r2Vals) <- c("R2", "PValue")
r2Vals$R2 <- round(r2Vals$R2, digits = 2)
r2Vals$PValue <- round(r2Vals$PValue, digits = 3)
r2Vals <- paste("R2:", r2Vals$R2, " P:",r2Vals$PValue, sep = "")
predictedValues <- gather(predictedValues, models, Predicted, -Effort)
r2data_txt <- data.frame(label = as.character(r2Vals), models = c("EUCP", "EXUCP", "DUCP"))
ggplot(predictedValues, aes(x = Predicted, y = Effort)) +
geom_point(shape = 1) + stat_smooth(method = "lm",  se = FALSE, fullrange = TRUE) +
facet_grid(. ~ models, scales = "free") + xlab("Predicted Effort") +
ylab("Actual Effort") +
theme(panel.spacing = unit(1, "lines")) +
geom_text(data = r2data_txt, size = 3, mapping = aes(x = -Inf, y = -Inf, label = label),
hjust = -0.4, vjust = -1)+
theme_bw()
#plot only DUCP
predictedValuesDUCP <- merge(SWTIIIModelPredictedValues, effort, by='row.names', all=TRUE)
rownames(predictedValuesDUCP) <- predictedValuesDUCP$Row.names
predictedValuesDUCP$Row.names <- NULL
r2Vals <- apply(subset(predictedValuesDUCP, select = -Effort), 2, function (x) {
dat <- data.frame(Predicted = x, Effort = predictedValuesDUCP$Effort)
model <- lm(Effort ~ ., data = dat)
print(summary(model))
summary(model)$r.squared
})
r2Vals <- round(r2Vals, digits = 5)
r2Vals <- paste("R2:", r2Vals, sep = "")
r2data_txt <- data.frame(label = as.character(r2Vals))
ggplot(predictedValuesDUCP, aes(x = DUCP, y = Effort)) +
geom_point(shape = 1) + stat_smooth(method = "lm",  se = FALSE, fullrange = TRUE) + xlab("Predicted Effort") +
ylab("Actual Effort") + ggtitle("Goodness of Fit") +
theme(panel.spacing = unit(1, "lines")) +
geom_text(data = r2data_txt, size = 5, mapping = aes(x = -Inf, y = -Inf, label = label),
hjust = -5, vjust = -1)+
theme_bw(base_size=20)
#draw example of posterior estimates
marginalData <- SWTIIIresults[[SWTIIIModelSelector]]$model[, !names(SWTIIIresults[[SWTIIIModelSelector]]$model) %in% c("(Intercept)", "sigma", "sd")]
colnames(marginalData) <- c(paste("l", 1:7, sep=""), "Effort Adj.")
#for (col in names(marginalData)) {
means <- apply(marginalData, 2, mean)
sd <- apply(marginalData, 2, sd)
labels <- paste(colnames(marginalData), ":", round(means,2),",", round(sd,2))
print(labels)
colnames(marginalData) <- labels
gatheredData <- gather(marginalData, level, value)
normaldens <- ddply(gatheredData, "level", function(df) {
values <- seq(min(df$value), max(df$value), length = 100)
data.frame(
value = values,
density = dnorm(values, mean(df$value), sd(df$value))
)
})
ggplot(gatheredData, aes(value))  +
geom_histogram(aes(y = ..density..), colour="black", fill="white") +
geom_line(aes(y = density), data = normaldens, colour = "red") +
facet_wrap(~ level, scales = "free", nrow=4) + xlab("Posterior Estimates") +ylab("Density")+
theme_bw(base_size=10)
#geom_text(
#data    = dat_text,
#mapping = aes(x = 0, y = 0, label = label),
#hjust   = -0.1,
#vjust   = -1
#)
#draw example of posterior estimates II
marginalData <- SWTIIresults[[SWTIIModelSelector]]$model[, !names(SWTIIresults[[SWTIIModelSelector]]$model) %in% c("(Intercept)", "sigma", "sd")]
colnames(marginalData) <- c(paste("l", 1:7, sep=""), "Effort Adj.")
#for (col in names(marginalData)) {
means <- apply(marginalData, 2, mean)
sd <- apply(marginalData, 2, sd)
labels <- paste(colnames(marginalData), ": Est.~", round(means,2),"; SD.~", round(sd,2),sep="")
print(labels)
colnames(marginalData) <- labels
gatheredData <- gather(marginalData, level, value)
normaldens <- ddply(gatheredData, "level", function(df) {
values <- seq(min(df$value), max(df$value), length = 100)
data.frame(
value = values,
density = dnorm(values, mean(df$value), sd(df$value))
)
})
ggplot(gatheredData, aes(value))  +
geom_histogram(aes(y = ..density..), colour="black", fill="white") +
geom_line(aes(y = density), data = normaldens, colour = "red") +
facet_wrap(~ level, scales = "free", nrow=4) + xlab("Posterior Estimates of the Parameters") +ylab("Probability Density")+
theme_bw(base_size=12)
#geom_text(
#data    = dat_text,
#mapping = aes(x = 0, y = 0, label = label),
#hjust   = -0.1,
#vjust   = -1
#)
#draw example of posterior estimates III
marginalData <- SWTIIIresults[[SWTIIIModelSelector]]$model[, !names(SWTIIIresults[[SWTIIIModelSelector]]$model) %in% c("(Intercept)", "sigma", "sd")]
colnames(marginalData) <- c(paste("l", 1:7, sep=""), "Effort Adj.")
#for (col in names(marginalData)) {
means <- apply(marginalData, 2, mean)
sd <- apply(marginalData, 2, sd)
labels <- paste(colnames(marginalData), ": Est.~", round(means,2),"; SD.~", round(sd,2),sep="")
print(labels)
colnames(marginalData) <- labels
gatheredData <- gather(marginalData, level, value)
normaldens <- ddply(gatheredData, "level", function(df) {
values <- seq(min(df$value), max(df$value), length = 100)
data.frame(
value = values,
density = dnorm(values, mean(df$value), sd(df$value))
)
})
ggplot(gatheredData, aes(value))  +
geom_histogram(aes(y = ..density..), colour="black", fill="white") +
geom_line(aes(y = density), data = normaldens, colour = "red") +
facet_wrap(~ level, scales = "free", nrow=4) + xlab("Posterior Estimates") +ylab("Density")+
theme_bw(base_size=12)
#geom_text(
#data    = dat_text,
#mapping = aes(x = 0, y = 0, label = label),
#hjust   = -0.1,
#vjust   = -1
#)
=======
>>>>>>> 0946ae77c1969aebf136a88f6d93b8ffe5fe39a5
