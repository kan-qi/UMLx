for(i in names(trainedModels)){
accuracyMeasurements[, paste(i, "MMRE",sep="_")] <- calcMMRE(modelPredicts$Effort, modelPredicts[,i])
accuracyMeasurements[, paste(i, "PRED",sep="_")] <- calcPRED(modelPredicts$Effort, modelPredicts[,i], 25)
}
source("transaction_weights_calibration3.R")
modelPredicts <- as.data.frame(modelPredicts)
accuracyMeasurements <- matrix(nrow = 1, ncol = length(trainedModels)*2)
colnames(accuracyMeasurements) <- c(paste(names(trainedModels), "PRED", sep="_"), paste(names(trainedModels), "MMRE", sep="_"))
accuracyMeasurements <- as.data.frame(accuracyMeasurements)
for(i in names(trainedModels)){
accuracyMeasurements[, paste(i, "MMRE",sep="_")] <- calcMMRE(modelPredicts$Effort, modelPredicts[,i])
accuracyMeasurements[, paste(i, "PRED",sep="_")] <- calcPRED(modelPredicts$Effort, modelPredicts[,i], 25)
}
modelPredicts <- as.data.frame(modelPredicts)
accuracyMeasurements <- matrix(nrow = 1, ncol = length(trainedModels)*3)
colnames(accuracyMeasurements) <- c(paste(names(trainedModels), "PRED25", sep="_"), paste(names(trainedModels), "PRED50", sep="_"), paste(names(trainedModels), "MMRE", sep="_"))
accuracyMeasurements <- as.data.frame(accuracyMeasurements)
for(i in names(trainedModels)){
accuracyMeasurements[, paste(i, "MMRE",sep="_")] <- calcMMRE(modelPredicts$Effort, modelPredicts[,i])
accuracyMeasurements[, paste(i, "PRED25",sep="_")] <- calcPRED(modelPredicts$Effort, modelPredicts[,i], 25)
accuracyMeasurements[, paste(i, "PRED50",sep="_")] <- calcPRED(modelPredicts$Effort, modelPredicts[,i], 25)
}
modelPredicts <- as.data.frame(modelPredicts)
accuracyMeasurements <- matrix(nrow = 1, ncol = length(trainedModels)*3)
colnames(accuracyMeasurements) <- c(paste(names(trainedModels), "PRED25", sep="_"), paste(names(trainedModels), "PRED50", sep="_"), paste(names(trainedModels), "MMRE", sep="_"))
accuracyMeasurements <- as.data.frame(accuracyMeasurements)
for(i in names(trainedModels)){
accuracyMeasurements[, paste(i, "MMRE",sep="_")] <- calcMMRE(modelPredicts$Effort, modelPredicts[,i])
accuracyMeasurements[, paste(i, "PRED25",sep="_")] <- calcPRED(modelPredicts$Effort, modelPredicts[,i], 25)
accuracyMeasurements[, paste(i, "PRED50",sep="_")] <- calcPRED(modelPredicts$Effort, modelPredicts[,i], 80)
}
View(transactionFiles)
knitr::opts_chunk$set(echo = TRUE)
source("transaction_weights_calibration3.R")
source("comparison_between_size_metrics.R")
library(jsonlite)
library(tidyverse)
cutsAsVec <- function(x) {
ret <- c("Cut Points:")
for (row in rownames(x)) {
cutPoints <- round(x[row, ], digits = 1)
ret <- c(ret, paste(row,":", paste(cutPoints, collapse = ", ")))
}
ret
}
trainedModels = list()
trainedModels[["TNModel"]] = TNresults[[1]]
trainedModels[["SWTIIModel"]] = SWTIIresults[[4]]
trainedModels[["SWTIIIModel"]] = SWTIIIresults[[4]]
View(trainedModels)
View(trainedModels)
library(jsonlite)
trainedModelParameters = list()
trainedModelParameters[["TNModel"]] = TNresults[[1]][["cuts"]]
trainedModelParameters[["SWTIIModel"]] = SWTIIresults[[4]][["cuts"]]
trainedModelParameters[["SWTIIIModel"]] = SWTIIIresults[[4]][["cuts"]]
write(jsonlite::toJSON(trainedModelParameters,pretty = TRUE,auto_unbox = TRUE))
write(jsonlite::toJSON(trainedModelParameters,pretty = TRUE,auto_unbox = TRUE), "hello.json")
View(trainedModels)
View(trainedModels)
View(trainedModels)
trainedModelParameters = list()
TNModelParameters = list()
TNModelParameters[["cuts"]] = TNresults[[1]][["cuts"]]
TNModelParameters[["levels"]] = matrix(nrow=length(TNresults[[1]][["model"]])-1,ncol=2)
colnames(TNModelParameters[["levels"]]) <- c("mean", "variance")
rownames(TNModelParameters[["levels"]]) <- subset(names(TNresults[[1]][["model"]]), select=-c("sigma"))
levels <- names(TNresults[[1]][["model"]])
print(levels)
levels <- levels[levels != "sigma"]
print(levels)
levels <- levels[levels != "sigma"]
TNModelParameters[["levels"]] = matrix(nrow=length(levels),ncol=2)
colnames(TNModelParameters[["levels"]]) <- c("mean", "variance")
rownames(TNModelParameters[["levels"]]) <- levels
for(i in subset(TNresults[[1]][["model"]], select=levels)){
TNModelParameters[["levels"]][i,"mean"] = mean(TNresult[[1]][["model"]][[i]])
TNModelParameters[["levels"]][i,"mean"] = var(TNresult[[1]][["model"]][[i]])
}
for(i in subset(TNresults[[1]][["model"]], select=levels)){
TNModelParameters[["levels"]][i,"mean"] = mean(TNresults[[1]][["model"]][[i]])
TNModelParameters[["levels"]][i,"mean"] = var(TNresults[[1]][["model"]][[i]])
}
for(i in levels){
TNModelParameters[["levels"]][i,"mean"] = mean(TNresults[[1]][["model"]][[i]])
TNModelParameters[["levels"]][i,"mean"] = var(TNresults[[1]][["model"]][[i]])
}
View(TNModelParameters)
for(i in levels){
TNModelParameters[["levels"]][i,"mean"] = mean(TNresults[[1]][["model"]][[i]])
TNModelParameters[["levels"]][i,"variance"] = var(TNresults[[1]][["model"]][[i]])
}
View(TNModelParameters)
View(TNModelParameters)
TNModelParameters[["levels"]] = as.data.frame(matrix(nrow=length(levels),ncol=2))
colnames(TNModelParameters[["levels"]]) <- c("mean", "variance")
rownames(TNModelParameters[["levels"]]) <- levels
View(TNModelParameters)
View(TNModelParameters)
View(TNModelParameters)
View(TNModelParameters)
for(i in levels){
TNModelParameters[["levels"]][i,"mean"] = mean(TNresults[[1]][["model"]][[i]])
TNModelParameters[["levels"]][i,"variance"] = var(TNresults[[1]][["model"]][[i]])
}
View(TNModelParameters)
View(TNModelParameters)
TNModelParameters[["levels"]] = matrix(nrow=length(levels),ncol=2)
colnames(TNModelParameters[["levels"]]) <- c("mean", "variance")
rownames(TNModelParameters[["levels"]]) <- levels
View(TNModelParameters)
View(TNModelParameters)
TNModelParameters[["levels"]] = matrix(nrow=length(levels),ncol=2)
colnames(TNModelParameters[["levels"]]) <- c("mean", "variance")
View(trainedModelParameters)
View(trainedModelParameters)
View(TNModelParameters)
View(TNModelParameters)
for(i in levels){
TNModelParameters[["levels"]][i,"mean"] = mean(TNresults[[1]][["model"]][[i]])
TNModelParameters[["levels"]][i,"variance"] = var(TNresults[[1]][["model"]][[i]])
}
colnames(TNModelParameters[["levels"]]) <- c("mean", "variance")
rownames(TNModelParameters[["levels"]]) <- levels
for(i in levels){
TNModelParameters[["levels"]][i,"mean"] = mean(TNresults[[1]][["model"]][[i]])
TNModelParameters[["levels"]][i,"variance"] = var(TNresults[[1]][["model"]][[i]])
}
View(TNModelParameters)
View(TNModelParameters)
View(TNModelParameters)
View(TNModelParameters)
trainedModelParameters[["TNModel"]] = TNModelParameters
write(jsonlite::toJSON(trainedModelParameters,pretty = TRUE,auto_unbox = TRUE), "trained_model_parameters.json")
#extract parameters for SWTII
trainedModelParameters = list()
SWTIModelParameters[["cuts"]] = SWTIIresults[[4]][["cuts"]]
rownames(SWTIModelParameters[["levels"]]) <- levels
#extract parameters for SWTII
trainedModelParameters = list()
SWTIModelParameters = list()
SWTIModelParameters[["cuts"]] = SWTIIresults[[4]][["cuts"]]
levels <- names(SWTIresults[[1]][["model"]])
levels <- levels[levels != "sigma"]
SWTIModelParameters[["levels"]] = matrix(nrow=length(levels),ncol=2)
colnames(SWTIModelParameters[["levels"]]) <- c("mean", "variance")
rownames(SWTIModelParameters[["levels"]]) <- levels
for(i in levels){
SWTIModelParameters[["levels"]][i,"mean"] = mean(SWTIresults[[1]][["model"]][[i]])
SWTIModelParameters[["levels"]][i,"variance"] = var(SWTIresults[[1]][["model"]][[i]])
}
trainedModelParameters[["SWTIModel"]] = SWTIModelParameters
write(jsonlite::toJSON(trainedModelParameters,pretty = TRUE,auto_unbox = TRUE), "trained_model_parameters.json")
#extract parameters for NT
trainedModelParameters = list()
TNModelParameters = list()
TNModelParameters[["cuts"]] = TNresults[[1]][["cuts"]]
levels <- names(TNresults[[1]][["model"]])
levels <- levels[levels != "sigma"]
TNModelParameters[["levels"]] = matrix(nrow=length(levels),ncol=2)
colnames(TNModelParameters[["levels"]]) <- c("mean", "variance")
rownames(TNModelParameters[["levels"]]) <- levels
for(i in levels){
TNModelParameters[["levels"]][i,"mean"] = mean(TNresults[[1]][["model"]][[i]])
TNModelParameters[["levels"]][i,"variance"] = var(TNresults[[1]][["model"]][[i]])
}
trainedModelParameters[["TNModel"]] = TNModelParameters
#extract parameters for SWTII
trainedModelParameters = list()
SWTIIModelParameters = list()
SWTIIModelParameters[["cuts"]] = SWTIIresults[[4]][["cuts"]]
levels <- names(SWTIIresults[[1]][["model"]])
levels <- levels[levels != "sigma"]
SWTIIModelParameters[["levels"]] = matrix(nrow=length(levels),ncol=2)
colnames(SWTIIModelParameters[["levels"]]) <- c("mean", "variance")
rownames(SWTIIModelParameters[["levels"]]) <- levels
for(i in levels){
SWTIIModelParameters[["levels"]][i,"mean"] = mean(SWTIIresults[[1]][["model"]][[i]])
SWTIIModelParameters[["levels"]][i,"variance"] = var(SWTIIresults[[1]][["model"]][[i]])
}
trainedModelParameters[["SWTIIModel"]] = SWTIIModelParameters
#extract parameters for SWTIII
trainedModelParameters = list()
SWTIIIModelParameters = list()
SWTIIIModelParameters[["cuts"]] = SWTIIIresults[[4]][["cuts"]]
levels <- names(SWTIIIresults[[1]][["model"]])
levels <- levels[levels != "sigma"]
SWTIIIModelParameters[["levels"]] = matrix(nrow=length(levels),ncol=2)
colnames(SWTIIIModelParameters[["levels"]]) <- c("mean", "variance")
rownames(SWTIIIModelParameters[["levels"]]) <- levels
for(i in levels){
SWTIIIModelParameters[["levels"]][i,"mean"] = mean(SWTIIIresults[[1]][["model"]][[i]])
SWTIIIModelParameters[["levels"]][i,"variance"] = var(SWTIIIresults[[1]][["model"]][[i]])
}
trainedModelParameters[["SWTIIIModel"]] = SWTIIIModelParameters
write(jsonlite::toJSON(trainedModelParameters,pretty = TRUE,auto_unbox = TRUE), "trained_model_parameters.json")
#extract parameters for NT
trainedModelParameters = list()
TNModelParameters = list()
TNModelParameters[["cuts"]] = TNresults[[1]][["cuts"]]
levels <- names(TNresults[[1]][["model"]])
levels <- levels[levels != "sigma"]
TNModelParameters[["levels"]] = matrix(nrow=length(levels),ncol=2)
colnames(TNModelParameters[["levels"]]) <- c("mean", "variance")
rownames(TNModelParameters[["levels"]]) <- levels
for(i in levels){
TNModelParameters[["levels"]][i,"mean"] = mean(TNresults[[1]][["model"]][[i]])
TNModelParameters[["levels"]][i,"variance"] = var(TNresults[[1]][["model"]][[i]])
}
trainedModelParameters[["TNModel"]] = TNModelParameters
#extract parameters for SWTII
trainedModelParameters = list()
SWTIIModelParameters = list()
SWTIIModelParameters[["cuts"]] = SWTIIresults[[4]][["cuts"]]
levels <- names(SWTIIresults[[4]][["model"]])
levels <- levels[levels != "sigma"]
SWTIIModelParameters[["levels"]] = matrix(nrow=length(levels),ncol=2)
colnames(SWTIIModelParameters[["levels"]]) <- c("mean", "variance")
rownames(SWTIIModelParameters[["levels"]]) <- levels
for(i in levels){
SWTIIModelParameters[["levels"]][i,"mean"] = mean(SWTIIresults[[4]][["model"]][[i]])
SWTIIModelParameters[["levels"]][i,"variance"] = var(SWTIIresults[[4]][["model"]][[i]])
}
trainedModelParameters[["SWTIIModel"]] = SWTIIModelParameters
#extract parameters for SWTIII
trainedModelParameters = list()
SWTIIIModelParameters = list()
SWTIIIModelParameters[["cuts"]] = SWTIIIresults[[4]][["cuts"]]
levels <- names(SWTIIIresults[[4]][["model"]])
levels <- levels[levels != "sigma"]
SWTIIIModelParameters[["levels"]] = matrix(nrow=length(levels),ncol=2)
colnames(SWTIIIModelParameters[["levels"]]) <- c("mean", "variance")
rownames(SWTIIIModelParameters[["levels"]]) <- levels
for(i in levels){
SWTIIIModelParameters[["levels"]][i,"mean"] = mean(SWTIIIresults[[4]][["model"]][[i]])
SWTIIIModelParameters[["levels"]][i,"variance"] = var(SWTIIIresults[[4]][["model"]][[i]])
}
trainedModelParameters[["SWTIIIModel"]] = SWTIIIModelParameters
write(jsonlite::toJSON(trainedModelParameters,pretty = TRUE,auto_unbox = TRUE), "trained_model_parameters.json")
View(trainedModelParameters)
View(trainedModelParameters)
#extract parameters for NT
trainedModelParameters = list()
TNModelParameters = list()
TNModelParameters[["cuts"]] = TNresults[[1]][["cuts"]]
levels <- names(TNresults[[1]][["model"]])
levels <- levels[levels != "sigma"]
TNModelParameters[["levels"]] = matrix(nrow=length(levels),ncol=2)
colnames(TNModelParameters[["levels"]]) <- c("mean", "variance")
rownames(TNModelParameters[["levels"]]) <- levels
for(i in levels){
TNModelParameters[["levels"]][i,"mean"] = mean(TNresults[[1]][["model"]][[i]])
TNModelParameters[["levels"]][i,"variance"] = var(TNresults[[1]][["model"]][[i]])
}
trainedModelParameters[["TNModel"]] = TNModelParameters
#extract parameters for SWTII
trainedModelParameters = list()
SWTIIModelParameters = list()
SWTIIModelParameters[["cuts"]] = SWTIIresults[[4]][["cuts"]]
levels <- names(SWTIIresults[[4]][["model"]])
levels <- levels[levels != "sigma"]
SWTIIModelParameters[["levels"]] = matrix(nrow=length(levels),ncol=2)
colnames(SWTIIModelParameters[["levels"]]) <- c("mean", "variance")
rownames(SWTIIModelParameters[["levels"]]) <- levels
for(i in levels){
SWTIIModelParameters[["levels"]][i,"mean"] = mean(SWTIIresults[[4]][["model"]][[i]])
SWTIIModelParameters[["levels"]][i,"variance"] = var(SWTIIresults[[4]][["model"]][[i]])
}
trainedModelParameters[["SWTIIModel"]] = SWTIIModelParameters
#extract parameters for SWTIII
trainedModelParameters = list()
SWTIIIModelParameters = list()
SWTIIIModelParameters[["cuts"]] = SWTIIIresults[[4]][["cuts"]]
levels <- names(SWTIIIresults[[4]][["model"]])
levels <- levels[levels != "sigma"]
SWTIIIModelParameters[["levels"]] = matrix(nrow=length(levels),ncol=2)
colnames(SWTIIIModelParameters[["levels"]]) <- c("mean", "variance")
rownames(SWTIIIModelParameters[["levels"]]) <- levels
for(i in levels){
SWTIIIModelParameters[["levels"]][i,"mean"] = mean(SWTIIIresults[[4]][["model"]][[i]])
SWTIIIModelParameters[["levels"]][i,"variance"] = var(SWTIIIresults[[4]][["model"]][[i]])
}
trainedModelParameters[["SWTIIIModel"]] = SWTIIIModelParameters
View(trainedModelParameters)
View(trainedModelParameters)
#extract parameters for NT
trainedModelParameters = list()
TNModelParameters = list()
TNModelParameters[["cuts"]] = TNresults[[1]][["cuts"]]
levels <- names(TNresults[[1]][["model"]])
levels <- levels[levels != "sigma"]
TNModelParameters[["levels"]] = matrix(nrow=length(levels),ncol=2)
colnames(TNModelParameters[["levels"]]) <- c("mean", "variance")
rownames(TNModelParameters[["levels"]]) <- levels
for(i in levels){
TNModelParameters[["levels"]][i,"mean"] = mean(TNresults[[1]][["model"]][[i]])
TNModelParameters[["levels"]][i,"variance"] = var(TNresults[[1]][["model"]][[i]])
}
trainedModelParameters[["TNModel"]] = TNModelParameters
#extract parameters for SWTII
SWTIIModelParameters = list()
SWTIIModelParameters[["cuts"]] = SWTIIresults[[4]][["cuts"]]
levels <- names(SWTIIresults[[4]][["model"]])
levels <- levels[levels != "sigma"]
SWTIIModelParameters[["levels"]] = matrix(nrow=length(levels),ncol=2)
colnames(SWTIIModelParameters[["levels"]]) <- c("mean", "variance")
rownames(SWTIIModelParameters[["levels"]]) <- levels
for(i in levels){
SWTIIModelParameters[["levels"]][i,"mean"] = mean(SWTIIresults[[4]][["model"]][[i]])
SWTIIModelParameters[["levels"]][i,"variance"] = var(SWTIIresults[[4]][["model"]][[i]])
}
trainedModelParameters[["SWTIIModel"]] = SWTIIModelParameters
#extract parameters for SWTIII
SWTIIIModelParameters = list()
SWTIIIModelParameters[["cuts"]] = SWTIIIresults[[4]][["cuts"]]
levels <- names(SWTIIIresults[[4]][["model"]])
levels <- levels[levels != "sigma"]
SWTIIIModelParameters[["levels"]] = matrix(nrow=length(levels),ncol=2)
colnames(SWTIIIModelParameters[["levels"]]) <- c("mean", "variance")
rownames(SWTIIIModelParameters[["levels"]]) <- levels
for(i in levels){
SWTIIIModelParameters[["levels"]][i,"mean"] = mean(SWTIIIresults[[4]][["model"]][[i]])
SWTIIIModelParameters[["levels"]][i,"variance"] = var(SWTIIIresults[[4]][["model"]][[i]])
}
trainedModelParameters[["SWTIIIModel"]] = SWTIIIModelParameters
write(jsonlite::toJSON(trainedModelParameters,pretty = TRUE,auto_unbox = TRUE), "trained_model_parameters.json")
View(SWTIIIresults)
View(SWTIIIresults)
View(SWTIIIModelParameters)
View(SWTIIIModelParameters)
print(SWTIIModelParameters[["cuts"]])
#extract parameters for SWTII
SWTIIModelParameters = list()
SWTIIModelParameters[["cuts"]] = list()
for(i in SWTIIresults[[4]][["cuts"]]){
SWTIIModelParameters[["cuts"]][[i]] = SWTIIresults[[4]][["cuts"]]
}
for(i in rownames(SWTIIresults[[4]][["cuts"]])){
SWTIIModelParameters[["cuts"]][[i]] = SWTIIresults[[4]][["cuts"]][i,]
}
print(SWTIIModelParameters[["cuts"]])
levels <- names(SWTIIresults[[4]][["model"]])
levels <- levels[levels != "sigma"]
SWTIIModelParameters[["levels"]] = matrix(nrow=length(levels),ncol=2)
colnames(SWTIIModelParameters[["levels"]]) <- c("mean", "variance")
rownames(SWTIIModelParameters[["levels"]]) <- levels
for(i in levels){
SWTIIModelParameters[["levels"]][i,"mean"] = mean(SWTIIresults[[4]][["model"]][[i]])
SWTIIModelParameters[["levels"]][i,"variance"] = var(SWTIIresults[[4]][["model"]][[i]])
}
trainedModelParameters[["SWTIIModel"]] = SWTIIModelParameters
#extract parameters for SWTIII
SWTIIIModelParameters = list()
SWTIIIModelParameters[["cuts"]] = SWTIIIresults[[4]][["cuts"]]
levels <- names(SWTIIIresults[[4]][["model"]])
levels <- levels[levels != "sigma"]
SWTIIIModelParameters[["levels"]] = matrix(nrow=length(levels),ncol=2)
colnames(SWTIIIModelParameters[["levels"]]) <- c("mean", "variance")
rownames(SWTIIIModelParameters[["levels"]]) <- levels
for(i in levels){
SWTIIIModelParameters[["levels"]][i,"mean"] = mean(SWTIIIresults[[4]][["model"]][[i]])
SWTIIIModelParameters[["levels"]][i,"variance"] = var(SWTIIIresults[[4]][["model"]][[i]])
}
trainedModelParameters[["SWTIIIModel"]] = SWTIIIModelParameters
write(jsonlite::toJSON(trainedModelParameters,pretty = TRUE,auto_unbox = TRUE), "trained_model_parameters.json")
SWTIIIModelParameters = list()
SWTIIIModelParameters[["cuts"]] = list()
for(i in rownames(SWTIIIresults[[4]][["cuts"]])){
SWTIIIModelParameters[["cuts"]][[i]] = SWTIIIresults[[4]][["cuts"]][i,]
}
SWTIIIModelParameters[["cuts"]] = SWTIIIresults[[4]][["cuts"]]
levels <- names(SWTIIIresults[[4]][["model"]])
levels <- levels[levels != "sigma"]
SWTIIIModelParameters[["levels"]] = matrix(nrow=length(levels),ncol=2)
colnames(SWTIIIModelParameters[["levels"]]) <- c("mean", "variance")
rownames(SWTIIIModelParameters[["levels"]]) <- levels
for(i in levels){
SWTIIIModelParameters[["levels"]][i,"mean"] = mean(SWTIIIresults[[4]][["model"]][[i]])
SWTIIIModelParameters[["levels"]][i,"variance"] = var(SWTIIIresults[[4]][["model"]][[i]])
}
trainedModelParameters[["SWTIIIModel"]] = SWTIIIModelParameters
write(jsonlite::toJSON(trainedModelParameters,pretty = TRUE,auto_unbox = TRUE), "trained_model_parameters.json")
#extract parameters for NT
trainedModelParameters = list()
TNModelParameters = list()
TNModelParameters[["cuts"]] = list()
for(i in rownames(TNresults[[1]][["cuts"]])){
TNModelParameters[["cuts"]][[i]] = TNresults[[4]][["cuts"]][i,]
}
levels <- names(TNresults[[1]][["model"]])
levels <- levels[levels != "sigma"]
TNModelParameters[["levels"]] = list()
for(i in levels){
TNModelParameters[["levels"]][[i]] = c(mean(TNresults[[1]][["model"]][[i]]), var(TNresults[[1]][["model"]][[i]]))
}
trainedModelParameters[["TNModel"]] = TNModelParameters
#extract parameters for SWTII
SWTIIModelParameters = list()
SWTIIModelParameters[["cuts"]] = list()
for(i in rownames(SWTIIresults[[4]][["cuts"]])){
SWTIIModelParameters[["cuts"]][[i]] = SWTIIresults[[4]][["cuts"]][i,]
}
print(SWTIIModelParameters[["cuts"]])
levels <- names(SWTIIresults[[4]][["model"]])
levels <- levels[levels != "sigma"]
SWTIIModelParameters[["levels"]] = matrix(nrow=length(levels),ncol=2)
colnames(SWTIIModelParameters[["levels"]]) <- c("mean", "variance")
rownames(SWTIIModelParameters[["levels"]]) <- levels
for(i in levels){
SWTIIModelParameters[["levels"]][i,"mean"] = mean(SWTIIresults[[4]][["model"]][[i]])
SWTIIModelParameters[["levels"]][i,"variance"] = var(SWTIIresults[[4]][["model"]][[i]])
}
trainedModelParameters[["SWTIIModel"]] = SWTIIModelParameters
#extract parameters for SWTIII
SWTIIIModelParameters = list()
SWTIIIModelParameters[["cuts"]] = list()
for(i in rownames(SWTIIIresults[[4]][["cuts"]])){
SWTIIIModelParameters[["cuts"]][[i]] = SWTIIIresults[[4]][["cuts"]][i,]
}
levels <- names(SWTIIIresults[[4]][["model"]])
levels <- levels[levels != "sigma"]
SWTIIIModelParameters[["levels"]] = matrix(nrow=length(levels),ncol=2)
colnames(SWTIIIModelParameters[["levels"]]) <- c("mean", "variance")
rownames(SWTIIIModelParameters[["levels"]]) <- levels
for(i in levels){
SWTIIIModelParameters[["levels"]][i,"mean"] = mean(SWTIIIresults[[4]][["model"]][[i]])
SWTIIIModelParameters[["levels"]][i,"variance"] = var(SWTIIIresults[[4]][["model"]][[i]])
}
trainedModelParameters[["SWTIIIModel"]] = SWTIIIModelParameters
write(jsonlite::toJSON(trainedModelParameters,pretty = TRUE,auto_unbox = TRUE), "trained_model_parameters.json")
#extract parameters for NT
trainedModelParameters = list()
TNModelParameters = list()
TNModelParameters[["cuts"]] = list()
for(i in rownames(TNresults[[1]][["cuts"]])){
TNModelParameters[["cuts"]][[i]] = TNresults[[4]][["cuts"]][i,]
}
levels <- names(TNresults[[1]][["model"]])
levels <- levels[levels != "sigma"]
TNModelParameters[["levels"]] = list()
for(i in levels){
TNModelParameters[["levels"]][[i]] = c(mean(TNresults[[1]][["model"]][[i]]), var(TNresults[[1]][["model"]][[i]]))
}
trainedModelParameters[["TNModel"]] = TNModelParameters
#extract parameters for SWTII
SWTIIModelParameters = list()
SWTIIModelParameters[["cuts"]] = list()
for(i in rownames(SWTIIresults[[4]][["cuts"]])){
SWTIIModelParameters[["cuts"]][[i]] = SWTIIresults[[4]][["cuts"]][i,]
}
print(SWTIIModelParameters[["cuts"]])
levels <- names(SWTIIresults[[4]][["model"]])
levels <- levels[levels != "sigma"]
SWTIIModelParameters[["levels"]] = list()
for(i in levels){
SWTIIModelParameters[["levels"]][[i]] = c(mean(SWTIIresults[[4]][["model"]][[i]]), var(SWTIIresults[[4]][["model"]][[i]]))
}
trainedModelParameters[["SWTIIModel"]] = SWTIIModelParameters
#extract parameters for SWTIII
SWTIIIModelParameters = list()
SWTIIIModelParameters[["cuts"]] = list()
for(i in rownames(SWTIIIresults[[4]][["cuts"]])){
SWTIIIModelParameters[["cuts"]][[i]] = SWTIIIresults[[4]][["cuts"]][i,]
}
levels <- names(SWTIIIresults[[4]][["model"]])
levels <- levels[levels != "sigma"]
SWTIIIModelParameters[["levels"]] = list()
for(i in levels){
SWTIIIModelParameters[["levels"]][i,"mean"] = c(mean(SWTIIIresults[[4]][["model"]][[i]]), var(SWTIIIresults[[4]][["model"]][[i]]))
}
#extract parameters for NT
trainedModelParameters = list()
TNModelParameters = list()
TNModelParameters[["cuts"]] = list()
for(i in rownames(TNresults[[1]][["cuts"]])){
TNModelParameters[["cuts"]][[i]] = TNresults[[4]][["cuts"]][i,]
}
levels <- names(TNresults[[1]][["model"]])
levels <- levels[levels != "sigma"]
TNModelParameters[["levels"]] = list()
for(i in levels){
TNModelParameters[["levels"]][[i]] = c(mean(TNresults[[1]][["model"]][[i]]), var(TNresults[[1]][["model"]][[i]]))
}
trainedModelParameters[["TNModel"]] = TNModelParameters
#extract parameters for SWTII
SWTIIModelParameters = list()
SWTIIModelParameters[["cuts"]] = list()
for(i in rownames(SWTIIresults[[4]][["cuts"]])){
SWTIIModelParameters[["cuts"]][[i]] = SWTIIresults[[4]][["cuts"]][i,]
}
print(SWTIIModelParameters[["cuts"]])
levels <- names(SWTIIresults[[4]][["model"]])
levels <- levels[levels != "sigma"]
SWTIIModelParameters[["levels"]] = list()
for(i in levels){
SWTIIModelParameters[["levels"]][[i]] = c(mean(SWTIIresults[[4]][["model"]][[i]]), var(SWTIIresults[[4]][["model"]][[i]]))
}
trainedModelParameters[["SWTIIModel"]] = SWTIIModelParameters
#extract parameters for SWTIII
SWTIIIModelParameters = list()
SWTIIIModelParameters[["cuts"]] = list()
for(i in rownames(SWTIIIresults[[4]][["cuts"]])){
SWTIIIModelParameters[["cuts"]][[i]] = SWTIIIresults[[4]][["cuts"]][i,]
}
levels <- names(SWTIIIresults[[4]][["model"]])
levels <- levels[levels != "sigma"]
SWTIIIModelParameters[["levels"]] = list()
for(i in levels){
SWTIIIModelParameters[["levels"]][[i]] = c(mean(SWTIIIresults[[4]][["model"]][[i]]), var(SWTIIIresults[[4]][["model"]][[i]]))
}
trainedModelParameters[["SWTIIIModel"]] = SWTIIIModelParameters
write(jsonlite::toJSON(trainedModelParameters,pretty = TRUE,auto_unbox = TRUE), "trained_model_parameters.json")
