r2Vals <- round(r2Vals, digits = 5)
r2Vals <- paste("r2:", r2Vals, sep = "")
predictedValues <- gather(predictedValues, models, Predicted, -Effort)
r2data_txt <- data.frame(label = as.character(r2Vals), models = c("EUCP", "EXUCP", "DUCP"))
ggplot(predictedValues, aes(x = Predicted, y = Effort)) +
geom_point(shape = 1) + stat_smooth(method = "lm",  se = FALSE, fullrange = TRUE) +
facet_grid(. ~ models, scales = "free") + xlab("Predicted Effort") +
ylab("Actual Effort") + ggtitle("Goodness of Fit") +
theme(panel.spacing = unit(1, "lines")) +
geom_text(data = r2data_txt, size = 3, mapping = aes(x = -Inf, y = -Inf, label = label),
hjust = -1, vjust = -1)+
theme_bw()
#draw example of posterior estimates
marginalData <- SWTIIIresults[[SWTIIIModelSelector]]$model[, !names(SWTIIIresults[[SWTIIIModelSelector]]$model) %in% c("(Intercept)", "sigma", "normFactor", "sd")]
#for (col in names(marginalData)) {
means <- apply(marginalData, 2, mean)
sd <- apply(marginalData, 2, sd)
labels <- paste(colnames(marginalData), ":", round(means,2),",", round(sd,2))
print(labels)
colnames(marginalData) <- labels
gatheredData <- gather(marginalData, level, value)
normaldens <- ddply(gatheredData, "level", function(df) {
values <- seq(min(df$value), max(df$value), length = 100)
data.frame(
value = values,
density = dnorm(values, mean(df$value), sd(df$value))
)
})
ggplot(gatheredData, aes(value))  +
geom_histogram(aes(y = ..density..), binwidth = 1, colour="black", fill="white") +
geom_line(aes(y = density), data = normaldens, colour = "red") +
facet_wrap(~ level, scales = "free", nrow=2) + xlab("Posterior Estimates") +ylab("Density")
#geom_text(
#data    = dat_text,
#mapping = aes(x = 0, y = 0, label = label),
#hjust   = -0.1,
#vjust   = -1
#)
trainedModels = list()
trainedModels[["TNModel"]] = TNresults[[TNModelSelector]]
trainedModels[["SWTIIModel"]] = SWTIIresults[[SWTIIModelSelector]]
trainedModels[["SWTIIIModel"]] = SWTIIIresults[[SWTIIIModelSelector]]
saveRDS(trainedModels, file="train_models.rds")
#extract parameters for NT
trainedModelParameters = list()
TNModelParameters = list()
TNModelParameters[["normFactor"]] = TNresults[[TNModelSelector]][["normFactor"]]
TNModelParameters[["cuts"]] = list()
for(i in rownames(TNresults[[TNModelSelector]][["cuts"]])){
TNModelParameters[["cuts"]][[i]] = TNresults[[TNModelSelector]][["cuts"]][i,]
}
levels <- names(TNresults[[TNModelSelector]][["model"]])
levels <- levels[levels != "sigma"]
TNModelParameters[["levels"]] = list()
for(i in levels){
TNModelParameters[["levels"]][[i]] = c(mean(TNresults[[TNModelSelector]][["model"]][[i]]), var(TNresults[[TNModelSelector]][["model"]][[i]]))
}
trainedModelParameters[["EUCP"]] = TNModelParameters
#extract parameters for SWTII
SWTIIModelParameters = list()
SWTIIModelParameters[["normFactor"]] = SWTIIresults[[SWTIIModelSelector]][["normFactor"]]
SWTIIModelParameters[["cuts"]] = list()
for(i in rownames(SWTIIresults[[SWTIIModelSelector]][["cuts"]])){
SWTIIModelParameters[["cuts"]][[i]] = SWTIIresults[[SWTIIModelSelector]][["cuts"]][i,]
}
#print(SWTIIModelParameters[["cuts"]])
levels <- names(SWTIIresults[[SWTIIModelSelector]][["model"]])
levels <- levels[levels != "sigma"]
SWTIIModelParameters[["levels"]] = list()
for(i in levels){
SWTIIModelParameters[["levels"]][[i]] = c(mean(SWTIIresults[[SWTIIModelSelector]][["model"]][[i]]), var(SWTIIresults[[SWTIIModelSelector]][["model"]][[i]]))
}
trainedModelParameters[["EXUCP"]] = SWTIIModelParameters
#extract parameters for SWTIII
SWTIIIModelParameters = list()
SWTIIIModelParameters[["normFactor"]] = SWTIIIresults[[SWTIIIModelSelector]][["normFactor"]]
SWTIIIModelParameters[["cuts"]] = list()
for(i in rownames(SWTIIIresults[[SWTIIIModelSelector]][["cuts"]])){
SWTIIIModelParameters[["cuts"]][[i]] = SWTIIIresults[[SWTIIIModelSelector]][["cuts"]][i,]
}
levels <- names(SWTIIIresults[[SWTIIIModelSelector]][["model"]])
levels <- levels[levels != "sigma"]
SWTIIIModelParameters[["levels"]] = list()
for(i in levels){
SWTIIIModelParameters[["levels"]][[i]] = c(mean(SWTIIIresults[[SWTIIIModelSelector]][["model"]][[i]]), var(SWTIIIresults[[SWTIIIModelSelector]][["model"]][[i]]))
}
trainedModelParameters[["DUCP"]] = SWTIIIModelParameters
write(jsonlite::toJSON(trainedModelParameters,pretty = TRUE,auto_unbox = TRUE), "trained_model_parameters.json")
save.image("~/Research Projects/UMLx/data/TransactionWeighting/9-4.RData")
knitr::opts_chunk$set(echo = TRUE)
source("transaction_weights_calibration4.R")
source("comparison_between_size_metrics.R")
library(jsonlite)
library(reshape)
library(tidyverse)
library(fitdistrplus)
library(egg)
library(gridExtra)
library(plyr)
cutsAsVec <- function(x) {
ret <- c("Cut Points:")
for (row in rownames(x)) {
cutPoints <- round(x[row, ], digits = 1)
ret <- c(ret, paste(row,":", paste(cutPoints, collapse = ", ")))
}
ret
}
predictedValues <- merge(TNModelPredictedValues, SWTIIModelPredictedValues, by='row.names', all=TRUE)
rownames(predictedValues) <- predictedValues$Row.names
predictedValues$Row.names <- NULL
predictedValues <- merge(predictedValues, SWTIIIModelPredictedValues, by='row.names', all=TRUE)
rownames(predictedValues) <- predictedValues$Row.names
predictedValues$Row.names <- NULL
predictedValues <- merge(predictedValues, effort, by='row.names', all=TRUE)
rownames(predictedValues) <- predictedValues$Row.names
predictedValues$Row.names <- NULL
r2Vals <- apply(subset(predictedValues, select = -Effort), 2, function (x) {
dat <- data.frame(Predicted = x, Effort = predictedValues$Effort)
model <- lm(Effort ~ ., data = dat)
print(summary(model))
summary(model)$r.squared
})
View(predictedValues)
View(predictedValues)
predictedValues <- merge(TNModelPredictedValues, SWTIIModelPredictedValues, by='row.names', all=TRUE)
rownames(predictedValues) <- predictedValues$Row.names
predictedValues$Row.names <- NULL
predictedValues <- merge(predictedValues, SWTIIIModelPredictedValues, by='row.names', all=TRUE)
rownames(predictedValues) <- predictedValues$Row.names
predictedValues$Row.names <- NULL
predictedValues <- merge(predictedValues, effort, by='row.names', all=TRUE)
rownames(predictedValues) <- predictedValues$Row.names
predictedValues$Row.names <- NULL
r2Vals <- apply(subset(predictedValues, select = -Effort), 2, function (x) {
dat <- data.frame(Predicted = x, Effort = predictedValues$Effort)
model <- lm(Effort ~ ., data = dat)
print(names(x))
print(summary(model))
summary(model)$r.squared
})
predictedValues <- merge(TNModelPredictedValues, SWTIIModelPredictedValues, by='row.names', all=TRUE)
rownames(predictedValues) <- predictedValues$Row.names
predictedValues$Row.names <- NULL
predictedValues <- merge(predictedValues, SWTIIIModelPredictedValues, by='row.names', all=TRUE)
rownames(predictedValues) <- predictedValues$Row.names
predictedValues$Row.names <- NULL
predictedValues <- merge(predictedValues, effort, by='row.names', all=TRUE)
rownames(predictedValues) <- predictedValues$Row.names
predictedValues$Row.names <- NULL
r2Vals <- apply(subset(predictedValues, select = -Effort), 2, function (x) {
dat <- data.frame(Predicted = x, Effort = predictedValues$Effort)
model <- lm(Effort ~ ., data = dat)
print(colnames(x))
print(summary(model))
summary(model)$r.squared
})
predictedValues <- merge(TNModelPredictedValues, SWTIIModelPredictedValues, by='row.names', all=TRUE)
rownames(predictedValues) <- predictedValues$Row.names
predictedValues$Row.names <- NULL
predictedValues <- merge(predictedValues, SWTIIIModelPredictedValues, by='row.names', all=TRUE)
rownames(predictedValues) <- predictedValues$Row.names
predictedValues$Row.names <- NULL
predictedValues <- merge(predictedValues, effort, by='row.names', all=TRUE)
rownames(predictedValues) <- predictedValues$Row.names
predictedValues$Row.names <- NULL
r2Vals <- apply(subset(predictedValues, select = -Effort), 2, function (x) {
dat <- data.frame(Predicted = x, Effort = predictedValues$Effort)
model <- lm(Effort ~ ., data = dat)
print(x)
print(summary(model))
summary(model)$r.squared
})
predictedValues <- merge(TNModelPredictedValues, SWTIIModelPredictedValues, by='row.names', all=TRUE)
rownames(predictedValues) <- predictedValues$Row.names
predictedValues$Row.names <- NULL
predictedValues <- merge(predictedValues, SWTIIIModelPredictedValues, by='row.names', all=TRUE)
rownames(predictedValues) <- predictedValues$Row.names
predictedValues$Row.names <- NULL
predictedValues <- merge(predictedValues, effort, by='row.names', all=TRUE)
rownames(predictedValues) <- predictedValues$Row.names
predictedValues$Row.names <- NULL
r2Vals <- apply(subset(predictedValues, select = -Effort), 2, function (x) {
dat <- data.frame(Predicted = x, Effort = predictedValues$Effort)
model <- lm(Effort ~ ., data = dat)
print(summary(model))
summary(model)$r.squared
})
discretize <- function(data, n) {
# Discretizes continuous data into different levels of complexity based on
# quantiles of normal distribution defined by the data.
#
# Args:
#   data: vector of data to discretize
#   n: number of bins to discretize into
#
# Returns:
#   A vector of cut points
#n = 6
#data = combined[, "TD"]
#print(data)
if (n <= 1) {
return(c(-Inf, Inf))
}
quantiles <- seq(1/n, 1 - (1/n), 1/n)
tableValues <- table(data)
#reduce sizes for fitting with gamma curve
#print(as.integer(tableValues/10))
vec <- rep(as.numeric(names(tableValues)), as.integer(tableValues/10))
fit.gamma <- fitdist(vec, distr = "gamma", method = "mle", lower = c(0, 0))
# Check result
shape = coefficients(fit.gamma)["shape"]
rate = coefficients(fit.gamma)["rate"]
print(coefficients(fit.gamma))
# testing the goodness of fit.
num_of_samples = length(vec)
y <- rgamma(num_of_samples, shape = shape, scale = rate)
result = ks.test(vec, y)
print(result)
cutPoints <- qgamma(quantiles, shape, rate, lower.tail = TRUE)
cutPoints <- c(-Inf, cutPoints, Inf)
#print(cutPoints)
#par(mar = rep(2, 4))
#plot(fit.gamma)
}
discretize <- function(data, n) {
# Discretizes continuous data into different levels of complexity based on
# quantiles of normal distribution defined by the data.
#
# Args:
#   data: vector of data to discretize
#   n: number of bins to discretize into
#
# Returns:
#   A vector of cut points
#n = 6
#data = combined[, "TD"]
#print(data)
if (n <= 1) {
return(c(-Inf, Inf))
}
quantiles <- seq(1/n, 1 - (1/n), 1/n)
tableValues <- table(data)
#reduce sizes for fitting with gamma curve
#print(as.integer(tableValues/10))
vec <- rep(as.numeric(names(tableValues)), as.integer(tableValues/10))
fit.gamma <- fitdist(vec, distr = "gamma", method = "mle", lower = c(0, 0))
# Check result
shape = coefficients(fit.gamma)["shape"]
rate = coefficients(fit.gamma)["rate"]
print(coefficients(fit.gamma))
# testing the goodness of fit.
num_of_samples = length(vec)
y <- rgamma(num_of_samples, shape = shape, scale = rate)
result = ks.test(vec, y)
print(result)
cutPoints <- qgamma(quantiles, shape, rate, lower.tail = TRUE)
cutPoints <- c(-Inf, cutPoints, Inf)
#print(cutPoints)
#par(mar = rep(2, 4))
#plot(fit.gamma)
}
SWTIresults <- performSearch(6, effort, transactionFiles, c("TL"))
discretize <- function(data, n) {
# Discretizes continuous data into different levels of complexity based on
# quantiles of normal distribution defined by the data.
#
# Args:
#   data: vector of data to discretize
#   n: number of bins to discretize into
#
# Returns:
#   A vector of cut points
#n = 6
#data = combined[, "TD"]
#print(data)
if (n <= 1) {
return(c(-Inf, Inf))
}
quantiles <- seq(1/n, 1 - (1/n), 1/n)
tableValues <- table(data)
#reduce sizes for fitting with gamma curve
#print(as.integer(tableValues/10))
vec <- rep(as.numeric(names(tableValues)), as.integer(tableValues/10))
fit.gamma <- fitdist(vec, distr = "gamma", method = "mle", lower = c(0, 0))
# Check result
shape = coefficients(fit.gamma)["shape"]
rate = coefficients(fit.gamma)["rate"]
print(coefficients(fit.gamma))
# testing the goodness of fit.
num_of_samples = length(vec)
y <- rgamma(num_of_samples, shape = shape, scale = rate)
result = ks.test(vec, y)
print("gamma goodness of fit")
print(result)
cutPoints <- qgamma(quantiles, shape, rate, lower.tail = TRUE)
cutPoints <- c(-Inf, cutPoints, Inf)
#print(cutPoints)
#par(mar = rep(2, 4))
#plot(fit.gamma)
}
SWTIresults <- performSearch(6, effort, transactionFiles, c("TL"))
SWTIresults_II <- performSearch(6, effort, transactionFiles, c("TD"))
SWTIresults_III <- performSearch(6, effort, transactionFiles, c("DETs"))
ggplot(combined, aes(x=TL)) +
geom_histogram(aes(y = ..density..), binwidth=1, colour="black", fill="white") +
#stat_function(fun = dnorm, args = list(mean = mean(combined$TL), sd(combined$TL))) +
stat_function(fun = dgamma, args = list(shape=6.543586, rate=1.160249)) +
xlab("TL") + ggtitle("Combined TL Data Summary") +
geom_text("hello")
ggplot(combined, aes(x=TL)) +
geom_histogram(aes(y = ..density..), binwidth=1, colour="black", fill="white") +
#stat_function(fun = dnorm, args = list(mean = mean(combined$TL), sd(combined$TL))) +
stat_function(fun = dgamma, args = list(shape=6.543586, rate=1.160249)) +
xlab("TL") + ggtitle("Combined TL Data Summary") +
geom_text("hello")+
theme_bw()
unique.levels <- sort(unique(modelData$Type))
count <- table(modelData$Type)
count.modelData <- data.frame(unique.levels, count)
ggplot(count.modelData, aes(unique.levels, count)) +
geom_bar(stat="identity", colour="black", fill="gray") +
xlab("Project Type") + ylab("Number of Projects") + ggtitle("Project Distribution - Type") +
theme_bw(base_size=20)
#effort$Project <- NULL
ggplot(combined, aes(x=TL)) +
geom_histogram(aes(y = ..density..), binwidth=1, colour="black", fill="white") +
#stat_function(fun = dnorm, args = list(mean = mean(combined$TL), sd(combined$TL))) +
stat_function(fun = dgamma, args = list(shape=6.543586, rate=1.160249)) +
xlab("TL") + ggtitle("Combined TL Data Summary") +
geom_text("hello")+
theme_bw()
ggplot(combined, aes(x=TL)) +
geom_histogram(aes(y = ..density..), binwidth=1, colour="black", fill="white") +
#stat_function(fun = dnorm, args = list(mean = mean(combined$TL), sd(combined$TL))) +
stat_function(fun = dgamma, args = list(shape=6.543586, rate=1.160249)) +
xlab("TL") + ggtitle("Combined TL Data Summary") +
theme_bw()
ggplot(combined, aes(x=TL)) +
geom_histogram(aes(y = ..density..), binwidth=1, colour="black", fill="white") +
#stat_function(fun = dnorm, args = list(mean = mean(combined$TL), sd(combined$TL))) +
stat_function(fun = dgamma, args = list(shape=6.543586, rate=1.160249)) +
xlab("TL") + ggtitle("Combined TL Data Summary") +
annotate("text", x=8, y=13000, label= "boat")+
theme_bw()
ggplot(combined, aes(x=TL)) +
geom_histogram(aes(y = ..density..), binwidth=1, colour="black", fill="white") +
#stat_function(fun = dnorm, args = list(mean = mean(combined$TL), sd(combined$TL))) +
stat_function(fun = dgamma, args = list(shape=6.543586, rate=1.160249)) +
xlab("TL") + ggtitle("Combined TL Data Summary") +
annotate("text", label= "boat")+
theme_bw()
ggplot(combined, aes(x=TL)) +
geom_histogram(aes(y = ..density..), binwidth=1, colour="black", fill="white") +
#stat_function(fun = dnorm, args = list(mean = mean(combined$TL), sd(combined$TL))) +
stat_function(fun = dgamma, args = list(shape=6.543586, rate=1.160249)) +
xlab("TL") + ggtitle("Combined TL Data Summary") +
annotate("text", x=8, y=1.2, label= "boat")+
theme_bw()
ggplot(combined, aes(x=TL)) +
geom_histogram(aes(y = ..density..), binwidth=1, colour="black", fill="white") +
#stat_function(fun = dnorm, args = list(mean = mean(combined$TL), sd(combined$TL))) +
stat_function(fun = dgamma, args = list(shape=6.543586, rate=1.160249)) +
xlab("TL") + ggtitle("Combined TL Data Summary") +
annotate("text", x=8, y=0.2, label= "boat")+
theme_bw()
ggplot(combined, aes(x=TL)) +
geom_histogram(aes(y = ..density..), binwidth=1, colour="black", fill="white") +
#stat_function(fun = dnorm, args = list(mean = mean(combined$TL), sd(combined$TL))) +
stat_function(fun = dgamma, args = list(shape=6.543586, rate=1.160249)) +
xlab("TL") + ggtitle("Combined TL Data Summary") +
annotate("text", x=8, y=0.12, label= "boat")+
theme_bw()
ggplot(combined, aes(x=TL)) +
geom_histogram(aes(y = ..density..), binwidth=1, colour="black", fill="white") +
#stat_function(fun = dnorm, args = list(mean = mean(combined$TL), sd(combined$TL))) +
stat_function(fun = dgamma, args = list(shape=6.543586, rate=1.160249)) +
xlab("TL") + ggtitle("Combined TL Data Summary") +
annotate("text", x=8, y=0.12, label= "gamma: shape=6.543586, rate=1.160249, p-value < 0.01")+
theme_bw()
ggplot(combined, aes(x=TL)) +
geom_histogram(aes(y = ..density..), binwidth=1, colour="black", fill="white") +
#stat_function(fun = dnorm, args = list(mean = mean(combined$TL), sd(combined$TL))) +
stat_function(fun = dgamma, args = list(shape=6.543586, rate=1.160249)) +
xlab("TL") + ggtitle("Combined TL Data Summary") +
annotate("text", x=8, y=0.25, label= "gamma: shape=6.543586, rate=1.160249, p-value < 0.01")+
theme_bw()
ggplot(combined, aes(x=TL)) +
geom_histogram(aes(y = ..density..), binwidth=1, colour="black", fill="white") +
#stat_function(fun = dnorm, args = list(mean = mean(combined$TL), sd(combined$TL))) +
stat_function(fun = dgamma, args = list(shape=6.543586, rate=1.160249)) +
xlab("TL") + ggtitle("Combined TL Data Summary") +
annotate("text", x=12, y=0.25, label= "gamma: shape=6.543586, rate=1.160249, p-value < 0.01")+
theme_bw()
ggplot(combined, aes(x=TL)) +
geom_histogram(aes(y = ..density..), binwidth=1, colour="black", fill="white") +
#stat_function(fun = dnorm, args = list(mean = mean(combined$TL), sd(combined$TL))) +
stat_function(fun = dgamma, args = list(shape=6.543586, rate=1.160249)) +
xlab("TL") + ggtitle("Combined TL Data Summary") +
annotate("text", x=15, y=0.25, label= "gamma: shape=6.543586, rate=1.160249, p-value < 0.01")+
theme_bw()
ggplot(combined, aes(x=TL)) +
geom_histogram(aes(y = ..density..), binwidth=1, colour="black", fill="white") +
#stat_function(fun = dnorm, args = list(mean = mean(combined$TL), sd(combined$TL))) +
stat_function(fun = dgamma, args = list(shape=6.543586, rate=1.160249)) +
xlab("TL") + ggtitle("Combined TL Data Summary") +
annotate("text", x=13, y=0.25, label= "gamma: shape=6.543586, rate=1.160249, p-value < 0.01")+
theme_bw()
ggplot(combined, aes(x=TL)) +
geom_histogram(aes(y = ..density..), binwidth=1, colour="black", fill="white") +
#stat_function(fun = dnorm, args = list(mean = mean(combined$TL), sd(combined$TL))) +
stat_function(fun = dgamma, args = list(shape=6.543586, rate=1.160249)) +
xlab("TL") + ggtitle("Combined TL Data Summary") +
annotate("text", x=13, y=0.25, label= "Gamma: shape=6.54, rate=1.16, p-value < 0.01")+
theme_bw()
ggplot(combined, aes(x=TD)) +
geom_histogram(aes(y = ..density..), binwidth=0.5, colour="black", fill="white") +
#stat_function(fun = dnorm, args = list(mean = mean(combined$TD), sd(combined$TD))) +
stat_function(fun = dgamma, args = list(shape=3.6492150, rate=0.6985361 )) +
annotate("text", x=13, y=0.25, label= "Gamma: shape=3.65, rate=0.70, p-value < 0.01")+
xlab("TD") + ggtitle("Combined TD Data Summary") +
theme_bw()
ggplot(combined, aes(x=DETs)) +
geom_histogram(aes(y = ..density..), binwidth=1, colour="black", fill="white") +
#stat_function(fun = dnorm, args = list(mean = mean(combined$DETs), sd(combined$DETs))) +
stat_function(fun = dgamma, args = list(shape=1.6647412, rate=0.1691911)) +
annotate("text", x=13, y=0.25, label= "Gamma: shape=1.66, rate=0.17, p-value < 0.01")+
xlab("DETs") + ggtitle("Combined DETs Data Summary") +
theme_bw()
ggplot(combined, aes(x=TL)) +
geom_histogram(aes(y = ..density..), binwidth=1, colour="black", fill="white") +
#stat_function(fun = dnorm, args = list(mean = mean(combined$TL), sd(combined$TL))) +
stat_function(fun = dgamma, args = list(shape=6.543586, rate=1.160249)) +
xlab("TL") + ggtitle("Combined TL Data Summary") +
annotate("text", x=13, y=0.25, label= "Gamma: shape=6.54, rate=1.16, p-value < 0.01")+
theme_bw()
ggplot(combined, aes(x=TD)) +
geom_histogram(aes(y = ..density..), binwidth=0.5, colour="black", fill="white") +
#stat_function(fun = dnorm, args = list(mean = mean(combined$TD), sd(combined$TD))) +
stat_function(fun = dgamma, args = list(shape=3.6492150, rate=0.6985361 )) +
annotate("text", x=15, y=0.20, label= "Gamma: shape=3.65, rate=0.70, p-value < 0.01")+
xlab("TD") + ggtitle("Combined TD Data Summary") +
theme_bw()
ggplot(combined, aes(x=DETs)) +
geom_histogram(aes(y = ..density..), binwidth=1, colour="black", fill="white") +
#stat_function(fun = dnorm, args = list(mean = mean(combined$DETs), sd(combined$DETs))) +
stat_function(fun = dgamma, args = list(shape=1.6647412, rate=0.1691911)) +
annotate("text", x=50, y=0.15, label= "Gamma: shape=1.66, rate=0.17, p-value < 0.01")+
xlab("DETs") + ggtitle("Combined DETs Data Summary") +
theme_bw()
ggplot(combined, aes(x=TL)) +
geom_histogram(aes(y = ..density..), binwidth=1, colour="black", fill="white") +
#stat_function(fun = dnorm, args = list(mean = mean(combined$TL), sd(combined$TL))) +
stat_function(fun = dgamma, args = list(shape=6.543586, rate=1.160249)) +
xlab("TL") + ggtitle("Combined TL Data Summary") +
annotate("text", x=13, y=0.25, label= "Gamma: shape=6.54, rate=1.16, p-value < 0.01")+
theme_bw()
ggplot(combined, aes(x=TD)) +
geom_histogram(aes(y = ..density..), binwidth=0.5, colour="black", fill="white") +
#stat_function(fun = dnorm, args = list(mean = mean(combined$TD), sd(combined$TD))) +
stat_function(fun = dgamma, args = list(shape=3.6492150, rate=0.6985361 )) +
annotate("text", x=15, y=0.18, label= "Gamma: shape=3.65, rate=0.70, p-value < 0.01")+
xlab("TD") + ggtitle("Combined TD Data Summary") +
theme_bw()
ggplot(combined, aes(x=DETs)) +
geom_histogram(aes(y = ..density..), binwidth=1, colour="black", fill="white") +
#stat_function(fun = dnorm, args = list(mean = mean(combined$DETs), sd(combined$DETs))) +
stat_function(fun = dgamma, args = list(shape=1.6647412, rate=0.1691911)) +
annotate("text", x=60, y=0.15, label= "Gamma: shape=1.66, rate=0.17, p-value < 0.01")+
xlab("DETs") + ggtitle("Combined DETs Data Summary") +
theme_bw()
ggplot(combined, aes(x=TL)) +
geom_histogram(aes(y = ..density..), binwidth=1, colour="black", fill="white") +
#stat_function(fun = dnorm, args = list(mean = mean(combined$TL), sd(combined$TL))) +
stat_function(fun = dgamma, args = list(shape=6.543586, rate=1.160249)) +
xlab("TL") + ggtitle("Combined TL Data Summary") +
annotate("text", x=15, y=0.25, label= "Gamma: shape=6.54, rate=1.16, p-value < 0.01")+
theme_bw()
ggplot(combined, aes(x=TD)) +
geom_histogram(aes(y = ..density..), binwidth=0.5, colour="black", fill="white") +
#stat_function(fun = dnorm, args = list(mean = mean(combined$TD), sd(combined$TD))) +
stat_function(fun = dgamma, args = list(shape=3.6492150, rate=0.6985361 )) +
annotate("text", x=18, y=0.18, label= "Gamma: shape=3.65, rate=0.70, p-value < 0.01")+
xlab("TD") + ggtitle("Combined TD Data Summary") +
theme_bw()
ggplot(combined, aes(x=DETs)) +
geom_histogram(aes(y = ..density..), binwidth=1, colour="black", fill="white") +
#stat_function(fun = dnorm, args = list(mean = mean(combined$DETs), sd(combined$DETs))) +
stat_function(fun = dgamma, args = list(shape=1.6647412, rate=0.1691911)) +
annotate("text", x=60, y=0.15, label= "Gamma: shape=1.66, rate=0.17, p-value < 0.01")+
xlab("DETs") + ggtitle("Combined DETs Data Summary") +
theme_bw()
ggplot(combined, aes(x=TL)) +
geom_histogram(aes(y = ..density..), binwidth=1, colour="black", fill="white") +
#stat_function(fun = dnorm, args = list(mean = mean(combined$TL), sd(combined$TL))) +
stat_function(fun = dgamma, args = list(shape=6.543586, rate=1.160249)) +
xlab("TL") + ggtitle("Combined TL Data Summary") +
annotate("text", x=14, y=0.25, label= "Gamma: shape=6.54, rate=1.16, p-value < 0.01")+
theme_bw()
ggplot(combined, aes(x=TD)) +
geom_histogram(aes(y = ..density..), binwidth=0.5, colour="black", fill="white") +
#stat_function(fun = dnorm, args = list(mean = mean(combined$TD), sd(combined$TD))) +
stat_function(fun = dgamma, args = list(shape=3.6492150, rate=0.6985361 )) +
annotate("text", x=17, y=0.18, label= "Gamma: shape=3.65, rate=0.70, p-value < 0.01")+
xlab("TD") + ggtitle("Combined TD Data Summary") +
theme_bw()
ggplot(combined, aes(x=DETs)) +
geom_histogram(aes(y = ..density..), binwidth=1, colour="black", fill="white") +
#stat_function(fun = dnorm, args = list(mean = mean(combined$DETs), sd(combined$DETs))) +
stat_function(fun = dgamma, args = list(shape=1.6647412, rate=0.1691911)) +
annotate("text", x=60, y=0.15, label= "Gamma: shape=1.66, rate=0.17, p-value < 0.01")+
xlab("DETs") + ggtitle("Combined DETs Data Summary") +
theme_bw()
