<<<<<<< HEAD
# Args:
#   data: vector of data to discretize
#   n: number of bins to discretize into
#
# Returns:
#   A vector of cut points
#n = 6
#data = combined[, "TD"]
#print(data)
if (n <= 1) {
return(c(-Inf, Inf))
=======
}
for (i in 1:length(SWTIIIresults)) {
result <- SWTIIIresults[[i]]
data <- subset(result$data, select = -c(Effort))
df <- as.data.frame(t(data))
g <- ggplot(data = df, aes(x = rownames(df), y = Aggregate)) +
geom_bar(stat = "identity") +
scale_x_discrete(limits = paste("l", 1:length(data), sep=""))+
xlab("Levels") +
ylab("Counts") +
ggtitle(paste("Classification Results:", i*3-3+1, "levels")) +
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))+
theme_bw(base_size=15)
cutsVec <- cutsAsVec(result$cuts)
g <- g + geom_text(data = data.frame(cutsVec), aes(label=cutsVec, col=cutsVec), alpha=0, x=1, y=1) +
theme(legend.key=element_blank(), legend.title = element_blank()) +
guides(colour=guide_legend(override.aes=list(size=10)), reverse = TRUE)
print(g)
}
for (i in 1:length(SWTIIIresults)) {
result <- SWTIIIresults[[i]]
data <- subset(result$data, select = -c(Effort))
df <- as.data.frame(t(data))
g <- ggplot(data = df, aes(x = rownames(df), y = Aggregate)) +
geom_bar(stat = "identity") +
scale_x_discrete(limits = paste("l", 1:length(data), sep=""))+
xlab("Levels") +
ylab("Counts") +
ggtitle(paste("Classification Results:", i*3-3+1, "levels")) +
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))+
theme_bw(base_size=15)
cutsVec <- cutsAsVec(result$cuts)
g <- g + geom_text(data = data.frame(cutsVec), aes(label=cutsVec, col=cutsVec), alpha=0, x=1, y=1) +
theme(legend.key=element_blank(), legend.title = element_blank()) +
guides(colour=guide_legend(override.aes=list(size=5)), reverse = TRUE)
print(g)
}
for (i in 1:length(SWTIIIresults)) {
result <- SWTIIIresults[[i]]
data <- subset(result$data, select = -c(Effort))
df <- as.data.frame(t(data))
g <- ggplot(data = df, aes(x = rownames(df), y = Aggregate)) +
geom_bar(stat = "identity") +
scale_x_discrete(limits = paste("l", 1:length(data), sep=""))+
xlab("Levels") +
ylab("Counts") +
ggtitle(paste("Classification Results:", i*3-3+1, "levels")) +
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))+
theme_bw(base_size=15)
cutsVec <- cutsAsVec(result$cuts)
g <- g + geom_text(data = data.frame(cutsVec), aes(label=cutsVec, col=cutsVec), alpha=0, x=1, y=1) +
theme(legend.key=element_blank(), legend.title = element_blank()) +
guides(colour=guide_legend(override.aes=list(size=0)), reverse = TRUE)
print(g)
}
for (i in 1:length(SWTIIIresults)) {
result <- SWTIIIresults[[i]]
data <- subset(result$data, select = -c(Effort))
df <- as.data.frame(t(data))
g <- ggplot(data = df, aes(x = rownames(df), y = Aggregate)) +
geom_bar(stat = "identity") +
scale_x_discrete(limits = paste("l", 1:length(data), sep=""))+
xlab("Levels") +
ylab("Counts") +
#ggtitle(paste("Classification Results:", i*3-3+1, "levels")) +
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))+
theme_bw(base_size=15)
cutsVec <- cutsAsVec(result$cuts)
g <- g + geom_text(data = data.frame(cutsVec), aes(label=cutsVec, col=cutsVec), alpha=0, x=1, y=1) +
theme(legend.key=element_blank(), legend.title = element_blank()) +
guides(colour=guide_legend(override.aes=list(size=0)), reverse = TRUE)
print(g)
}
for (i in 1:length(SWTIIIresults)) {
result <- SWTIIIresults[[i]]
data <- subset(result$data, select = -c(Effort))
df <- as.data.frame(t(data))
g <- ggplot(data = df, aes(x = rownames(df), y = Aggregate)) +
geom_bar(stat = "identity") +
scale_x_discrete(limits = paste("l", 1:length(data), sep=""))+
xlab("Levels") +
ylab("Counts") +
ggtitle(paste("Classification Results:", i*3-3+1, "levels")) +
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))+
theme_bw(base_size=15)
cutsVec <- cutsAsVec(result$cuts)
g <- g + geom_text(data = data.frame(cutsVec), aes(label=cutsVec, col=cutsVec), alpha=0, x=1, y=1) +
theme(legend.key=element_blank(), legend.title = element_blank()) +
guides(colour=guide_legend(override.aes=list(size=0)), reverse = TRUE)
print(g)
>>>>>>> eeb31ae77ab5fc8e2547c2ca89a88d15da914ad8
}
# Plot predicted vs. actual effort values
predictedValuesSWTIII <- sapply(1:length(SWTIIIresults), function(i) {
predicted <- apply(SWTIIIresults[[i]]$data, 1, function(x) {
blmpredicted <- predict.blm(SWTIIIresults[[i]]$model, newdata = as.data.frame(t(x)))
#blmpredicted*SWTIIIresults[[i]]$normFactor
})
})
colnames(predictedValuesSWTIII) <- paste(1:length(SWTIIIresults), "Bins")
predictedValuesSWTIII <- subset(predictedValuesSWTIII, rownames(predictedValuesSWTIII) != "Aggregate")
predictedValuesSWTIII <- merge(as.data.frame(predictedValuesSWTIII), effort, by='row.names', all=TRUE)
rownames(predictedValuesSWTIII) <- predictedValuesSWTIII$Row.names
predictedValuesSWTIII$Row.names <- NULL
r2Vals <- apply(subset(predictedValuesSWTIII, select = -Effort), 2, function (x) {
dat <- data.frame(Predicted = x, Effort = predictedValuesSWTIII$Effort)
model <- lm(Effort ~ ., data = dat)
summary(model)$r.squared
})
r2Vals <- round(r2Vals, digits = 5)
r2Vals <- paste("r2:", r2Vals, sep = "")
predictedValues <- gather(predictedValuesSWTIII, numBins, Predicted, -Effort)
r2data_txt <- data.frame(label = as.character(r2Vals), numBins = paste(1:length(SWTIIIresults), "Bins"))
ggplot(predictedValues, aes(x = Predicted, y = Effort)) +
geom_point(shape = 1) + stat_smooth(method = "lm",  se = FALSE, fullrange = TRUE) +
facet_wrap(. ~ numBins, scales = "free", nrow=2) + xlab("Predicted Effort") +
ylab("Actual Effort") + ggtitle("Goodness of Fit") +
theme(panel.spacing = unit(1, "lines")) +
geom_text(data = r2data_txt, size = 3, mapping = aes(x = -Inf, y = -Inf, label = label),
hjust = -1, vjust = -1) +
theme_bw()
# Plots cross validation results
MSEdata <- data.frame(NumBins = 1:length(SWTIIIresults), MSE = sapply(SWTIIIresults, function(x) { x$MSE }))
MMREdata <- data.frame(NumBins = 1:length(SWTIIIresults), MMRE = sapply(SWTIIIresults, function(x) { x$MMRE }))
PREDdata <- data.frame(NumBins = 1:length(SWTIIIresults), PRED = sapply(SWTIIIresults, function(x) { x$PRED }))
ggplot(data = MSEdata, aes(x = NumBins, y = log(MSE))) + geom_point(shape = 1) + geom_line() + ggtitle("MSE vs Number of Bins") +
theme_bw()
ggplot(data = MMREdata, aes(x = NumBins, y = MMRE)) + geom_point(shape = 1) + geom_line() + ggtitle("MMRE vs Number of Bins") +
theme_bw()
ggplot(data = PREDdata, aes(x = NumBins, y = PRED)) + geom_point(shape = 1) + geom_line() + ylab("PRED(0.25)") + ggtitle("PRED vs Number of Bins") +
theme_bw()
# Plot marginal posteriors for each parameter
for (i in 1:length(SWTIIIresults)) {
marginalData <- SWTIIIresults[[i]]$model[, !names(SWTIIIresults[[i]]$model) %in% c("(Intercept)", "sigma")]
if (is.vector(marginalData)) {
marginalData <- data.frame(TL1TD1DETs1 = marginalData)
}
for (col in names(marginalData)) {
mean <- mean(marginalData[, col])
sd <- sd(marginalData[, col])
peakDensity <- dnorm(mean, mean, sd)
g <- ggplot(marginalData, aes(x=marginalData[, col])) +
geom_histogram(aes(y = ..density..), binwidth = 1, colour="black", fill="white") +
stat_function(fun = dnorm, args = list(mean = mean(mean), sd = sd)) +
xlab(col) + ggtitle(paste("Posterior Weight", col, i, "bins")) +
annotate("text", x = mean, y = peakDensity * ((sd/3 *.1) + 1), label = paste("mean:", round(mean,2),",", "sd:", round(sd,2))) +
theme_bw()
print(g)
}
}
MSEdata <- data.frame(NumBins = 1:length(SWTIIIresults), MSE = sapply(SWTIIIresults, function(x) { x$MSE }))
MMREdata <- data.frame(NumBins = 1:length(SWTIIIresults), MMRE = sapply(SWTIIIresults, function(x) { x$MMRE }))
PREDdata <- data.frame(NumBins = 1:length(SWTIIIresults), PRED = sapply(SWTIIIresults, function(x) { x$PRED }))
ggplot(data = MSEdata, aes(x = NumBins, y = log(MSE))) + geom_point(shape = 1) + geom_line() + ggtitle("MSE vs Number of Bins") +
theme_bw(base_size=20)
ggplot(data = MMREdata, aes(x = NumBins, y = MMRE)) + geom_point(shape = 1) + geom_line() + ggtitle("MMRE vs Number of Bins") +
theme_bw(base_size=20)
ggplot(data = PREDdata, aes(x = NumBins, y = PRED)) + geom_point(shape = 1) + geom_line() + ylab("PRED(0.25)") + ggtitle("PRED vs Number of Bins") +
theme_bw(base_size=20)
TNModelSelector <- 1;
TNModelPredictedValues <- as.data.frame(predictedValuesTN[, c(paste(TNModelSelector, "Bins", sep=" "))])
TNModelData <- TNresults[[TNModelSelector]][["data"]]
TNModelData <- TNModelData[rownames(TNModelData) != "Aggregate", ]
colnames(TNModelPredictedValues) <- c("EUCP")
rownames(TNModelPredictedValues) <- rownames(predictedValuesTN)
SWTIIModelSelector <- 4;
SWTIIModelPredictedValues = as.data.frame(predictedValuesSWTII[, c(paste(SWTIIModelSelector, "Bins", sep=" "))])
SWTIIModelData <- SWTIIresults[[SWTIIModelSelector]][["data"]]
SWTIIModelData <- SWTIIModelData[rownames(SWTIIModelData) != "Aggregate", ]
#print(SWTIIModelData)
colnames(SWTIIModelPredictedValues) <- c("EXUCP")
rownames(SWTIIModelPredictedValues) <- rownames(predictedValuesSWTII)
SWTIIIModelSelector <- 3;
SWTIIIModelPredictedValues = as.data.frame(predictedValuesSWTIII[, c(paste(SWTIIIModelSelector, "Bins", sep=" "))])
SWTIIIModelData <- SWTIIIresults[[SWTIIIModelSelector]][["data"]]
SWTIIIModelData <- SWTIIIModelData[rownames(SWTIIIModelData) != "Aggregate", ]
colnames(SWTIIIModelPredictedValues) <- c("DUCP")
rownames(SWTIIIModelPredictedValues) <- rownames(predictedValuesSWTIII)
predictedValues <- merge(TNModelPredictedValues, SWTIIModelPredictedValues, by='row.names', all=TRUE)
rownames(predictedValues) <- predictedValues$Row.names
predictedValues$Row.names <- NULL
predictedValues <- merge(predictedValues, SWTIIIModelPredictedValues, by='row.names', all=TRUE)
rownames(predictedValues) <- predictedValues$Row.names
predictedValues$Row.names <- NULL
predictedValues <- merge(predictedValues, effort, by='row.names', all=TRUE)
rownames(predictedValues) <- predictedValues$Row.names
predictedValues$Row.names <- NULL
r2Vals <- apply(subset(predictedValues, select = -Effort), 2, function (x) {
dat <- data.frame(Predicted = x, Effort = predictedValues$Effort)
model <- lm(Effort ~ ., data = dat)
print(summary(model))
summary(model)$r.squared
})
r2Vals <- round(r2Vals, digits = 5)
r2Vals <- paste("r2:", r2Vals, sep = "")
predictedValues <- gather(predictedValues, models, Predicted, -Effort)
r2data_txt <- data.frame(label = as.character(r2Vals), models = c("EUCP", "EXUCP", "DUCP"))
ggplot(predictedValues, aes(x = Predicted, y = Effort)) +
geom_point(shape = 1) + stat_smooth(method = "lm",  se = FALSE, fullrange = TRUE) +
facet_grid(. ~ models, scales = "free") + xlab("Predicted Effort") +
ylab("Actual Effort") + ggtitle("Goodness of Fit") +
theme(panel.spacing = unit(1, "lines")) +
geom_text(data = r2data_txt, size = 3, mapping = aes(x = -Inf, y = -Inf, label = label),
hjust = -1, vjust = -1)+
theme_bw()
#plot only DUCP
predictedValuesDUCP <- merge(SWTIIIModelPredictedValues, effort, by='row.names', all=TRUE)
rownames(predictedValuesDUCP) <- predictedValuesDUCP$Row.names
predictedValuesDUCP$Row.names <- NULL
r2Vals <- apply(subset(predictedValuesDUCP, select = -Effort), 2, function (x) {
dat <- data.frame(Predicted = x, Effort = predictedValuesDUCP$Effort)
model <- lm(Effort ~ ., data = dat)
print(summary(model))
summary(model)$r.squared
})
r2Vals <- round(r2Vals, digits = 5)
r2Vals <- paste("r2:", r2Vals, sep = "")
r2data_txt <- data.frame(label = as.character(r2Vals))
ggplot(predictedValuesDUCP, aes(x = DUCP, y = Effort)) +
geom_point(shape = 1) + stat_smooth(method = "lm",  se = FALSE, fullrange = TRUE) + xlab("Predicted Effort") +
ylab("Actual Effort") + ggtitle("Goodness of Fit") +
theme(panel.spacing = unit(1, "lines")) +
geom_text(data = r2data_txt, size = 5, mapping = aes(x = -Inf, y = -Inf, label = label),
hjust = -5, vjust = -1)+
theme_bw(base_size=20)
#draw example of posterior estimates
marginalData <- SWTIIIresults[[SWTIIIModelSelector]]$model[, !names(SWTIIIresults[[SWTIIIModelSelector]]$model) %in% c("(Intercept)", "sigma", "normFactor", "sd")]
#for (col in names(marginalData)) {
means <- apply(marginalData, 2, mean)
sd <- apply(marginalData, 2, sd)
labels <- paste(colnames(marginalData), ":", round(means,2),",", round(sd,2))
print(labels)
colnames(marginalData) <- labels
gatheredData <- gather(marginalData, level, value)
normaldens <- ddply(gatheredData, "level", function(df) {
values <- seq(min(df$value), max(df$value), length = 100)
data.frame(
value = values,
density = dnorm(values, mean(df$value), sd(df$value))
)
})
ggplot(gatheredData, aes(value))  +
geom_histogram(aes(y = ..density..), binwidth = 1, colour="black", fill="white") +
geom_line(aes(y = density), data = normaldens, colour = "red") +
facet_wrap(~ level, scales = "free", nrow=2) + xlab("Posterior Estimates") +ylab("Density")
#geom_text(
#data    = dat_text,
#mapping = aes(x = 0, y = 0, label = label),
#hjust   = -0.1,
#vjust   = -1
#)
#draw example of norm factor
marginalData <- SWTIIIresults[[SWTIIIModelSelector]]$model[, "normFactor"]
#for (col in names(marginalData)) {
means <- apply(marginalData, 2, mean)
#draw example of norm factor
marginalData <- SWTIIIresults[[SWTIIIModelSelector]]$model[, "normFactor"]
print(marginalData)
#draw example of norm factor
marginalData <- as.data.frame(SWTIIIresults[[SWTIIIModelSelector]]$model[, "normFactor"])
print(marginalData)
marginalData <- as.data.frame(SWTIIIresults[[SWTIIIModelSelector]]$model[, "normFactor"])
colnames(marginalData) <- c("a")
print(marginalData)
marginalData <- as.data.frame(SWTIIIresults[[SWTIIIModelSelector]]$model[, "normFactor"])
colnames(marginalData) <- c("Effort Adj.")
print(marginalData)
marginalData <- as.data.frame(SWTIIIresults[[SWTIIIModelSelector]]$model[, "normFactor"])
colnames(marginalData) <- c("Effort Adj.")
#print(marginalData)
#for (col in names(marginalData)) {
means <- apply(marginalData, 2, mean)
sd <- apply(marginalData, 2, sd)
labels <- paste(colnames(marginalData), ":", round(means,2),",", round(sd,2))
print(labels)
colnames(marginalData) <- labels
gatheredData <- gather(marginalData, level, value)
normaldens <- ddply(gatheredData, "level", function(df) {
values <- seq(min(df$value), max(df$value), length = 100)
data.frame(
value = values,
density = dnorm(values, mean(df$value), sd(df$value))
)
})
ggplot(gatheredData, aes(value))  +
geom_histogram(aes(y = ..density..), binwidth = 1, colour="black", fill="white") +
geom_line(aes(y = density), data = normaldens, colour = "red") +
facet_wrap(~ level, scales = "free", nrow=2) + xlab("Posterior Estimates") +ylab("Density")
marginalData <- as.data.frame(SWTIIIresults[[SWTIIIModelSelector]]$model[, "normFactor"])
colnames(marginalData) <- c("Effort Adj.")
#print(marginalData)
#for (col in names(marginalData)) {
means <- apply(marginalData, 2, mean)
sd <- apply(marginalData, 2, sd)
labels <- paste(colnames(marginalData), ":", round(means,2),",", round(sd,2))
print(labels)
colnames(marginalData) <- labels
gatheredData <- gather(marginalData, level, value)
normaldens <- ddply(gatheredData, "level", function(df) {
values <- seq(min(df$value), max(df$value), length = 100)
data.frame(
value = values,
density = dnorm(values, mean(df$value), sd(df$value))
)
})
ggplot(gatheredData, aes(value))  +
geom_histogram(aes(y = ..density..), colour="black", fill="white") +
geom_line(aes(y = density), data = normaldens, colour = "red") +
facet_wrap(~ level, scales = "free", nrow=2) + xlab("Posterior Estimates") +ylab("Density")
marginalData <- SWTIIIresults[[SWTIIIModelSelector]]$model[, !names(SWTIIIresults[[SWTIIIModelSelector]]$model) %in% c("(Intercept)", "sigma", "normFactor", "sd")]
#for (col in names(marginalData)) {
means <- apply(marginalData, 2, mean)
sd <- apply(marginalData, 2, sd)
labels <- paste(colnames(marginalData), ":", round(means,2),",", round(sd,2))
print(labels)
colnames(marginalData) <- labels
gatheredData <- gather(marginalData, level, value)
normaldens <- ddply(gatheredData, "level", function(df) {
values <- seq(min(df$value), max(df$value), length = 100)
data.frame(
value = values,
density = dnorm(values, mean(df$value), sd(df$value))
)
})
ggplot(gatheredData, aes(value))  +
geom_histogram(aes(y = ..density..), colour="black", fill="white") +
geom_line(aes(y = density), data = normaldens, colour = "red") +
facet_wrap(~ level, scales = "free", nrow=2) + xlab("Posterior Estimates") +ylab("Density")
#geom_text(
#data    = dat_text,
#mapping = aes(x = 0, y = 0, label = label),
#hjust   = -0.1,
#vjust   = -1
#)
#draw example of norm factor
marginalData <- as.data.frame(SWTIIIresults[[SWTIIIModelSelector]]$model[, "normFactor"])
colnames(marginalData) <- c("Effort Adj.")
#print(marginalData)
#for (col in names(marginalData)) {
means <- apply(marginalData, 2, mean)
sd <- apply(marginalData, 2, sd)
labels <- paste(colnames(marginalData), ":", round(means,2),",", round(sd,2))
print(labels)
colnames(marginalData) <- labels
gatheredData <- gather(marginalData, level, value)
normaldens <- ddply(gatheredData, "level", function(df) {
values <- seq(min(df$value), max(df$value), length = 100)
data.frame(
value = values,
density = dnorm(values, mean(df$value), sd(df$value))
)
})
ggplot(gatheredData, aes(value))  +
geom_histogram(aes(y = ..density..), colour="black", fill="white") +
geom_line(aes(y = density), data = normaldens, colour = "red") +
facet_wrap(~ level, scales = "free", nrow=2) + xlab("Posterior Estimates") +ylab("Density")
#draw example of posterior estimates
marginalData <- SWTIIIresults[[SWTIIIModelSelector]]$model[, !names(SWTIIIresults[[SWTIIIModelSelector]]$model) %in% c("(Intercept)", "sigma", "sd")]
#for (col in names(marginalData)) {
means <- apply(marginalData, 2, mean)
sd <- apply(marginalData, 2, sd)
labels <- paste(colnames(marginalData), ":", round(means,2),",", round(sd,2))
print(labels)
colnames(marginalData) <- labels
gatheredData <- gather(marginalData, level, value)
normaldens <- ddply(gatheredData, "level", function(df) {
values <- seq(min(df$value), max(df$value), length = 100)
data.frame(
value = values,
density = dnorm(values, mean(df$value), sd(df$value))
)
})
ggplot(gatheredData, aes(value))  +
geom_histogram(aes(y = ..density..), colour="black", fill="white") +
geom_line(aes(y = density), data = normaldens, colour = "red") +
facet_wrap(~ level, scales = "free", nrow=2) + xlab("Posterior Estimates") +ylab("Density")
#draw example of posterior estimates
marginalData <- SWTIIIresults[[SWTIIIModelSelector]]$model[, !names(SWTIIIresults[[SWTIIIModelSelector]]$model) %in% c("(Intercept)", "sigma", "sd")]
View(marginalData)
View(marginalData)
marginalData <- SWTIIIresults[[SWTIIIModelSelector]]$model[, !names(SWTIIIresults[[SWTIIIModelSelector]]$model) %in% c("(Intercept)", "sigma", "sd")]
colnames(marginalData) <- c(paste("l", 1:7, sep=""), "Effort Adj.")
#for (col in names(marginalData)) {
means <- apply(marginalData, 2, mean)
sd <- apply(marginalData, 2, sd)
labels <- paste(colnames(marginalData), ":", round(means,2),",", round(sd,2))
print(labels)
colnames(marginalData) <- labels
gatheredData <- gather(marginalData, level, value)
normaldens <- ddply(gatheredData, "level", function(df) {
values <- seq(min(df$value), max(df$value), length = 100)
data.frame(
value = values,
density = dnorm(values, mean(df$value), sd(df$value))
)
})
ggplot(gatheredData, aes(value))  +
geom_histogram(aes(y = ..density..), colour="black", fill="white") +
geom_line(aes(y = density), data = normaldens, colour = "red") +
facet_wrap(~ level, scales = "free", nrow=2) + xlab("Posterior Estimates") +ylab("Density")
#geom_text(
#data    = dat_text,
#mapping = aes(x = 0, y = 0, label = label),
#hjust   = -0.1,
#vjust   = -1
#)
#draw example of posterior estimates
marginalData <- SWTIIIresults[[SWTIIIModelSelector]]$model[, !names(SWTIIIresults[[SWTIIIModelSelector]]$model) %in% c("(Intercept)", "sigma", "sd")]
colnames(marginalData) <- c(paste("l", 1:7, sep=""), "Effort Adj.")
#for (col in names(marginalData)) {
means <- apply(marginalData, 2, mean)
sd <- apply(marginalData, 2, sd)
labels <- paste(colnames(marginalData), ":", round(means,2),",", round(sd,2))
print(labels)
colnames(marginalData) <- labels
gatheredData <- gather(marginalData, level, value)
normaldens <- ddply(gatheredData, "level", function(df) {
values <- seq(min(df$value), max(df$value), length = 100)
data.frame(
value = values,
density = dnorm(values, mean(df$value), sd(df$value))
)
})
ggplot(gatheredData, aes(value))  +
geom_histogram(aes(y = ..density..), colour="black", fill="white") +
geom_line(aes(y = density), data = normaldens, colour = "red") +
facet_wrap(~ level, scales = "free", nrow=3) + xlab("Posterior Estimates") +ylab("Density")
#geom_text(
#data    = dat_text,
#mapping = aes(x = 0, y = 0, label = label),
#hjust   = -0.1,
#vjust   = -1
#)
ggplot(modelData, aes(x=UseCase_Num)) +
geom_histogram(binwidth=5, colour="black", fill="gray") +
xlab("Number of Use Case") + ylab("Number of Projects") + ggtitle("Project Distribution - Use Case")+
theme_bw(base_size=20)
ggplot(modelData, aes(x=KSLOC)) +
geom_histogram(binwidth=0.5, colour="black", fill="gray") +
xlab("KSLOC") + ylab("Number of Projects") + ggtitle("Project Distribution - SLOC") +
theme_bw(base_size=20)
ggplot(modelData, aes(x=Personnel)) +
geom_histogram(binwidth=1, colour="black", fill="gray") +
xlab("Personnel") + ylab("Number of Projects") + ggtitle("Project Distribution - Personnel") +
theme_bw(base_size=20)
ggplot(modelData, aes(x=Effort)) +
geom_histogram(binwidth=300, colour="black", fill="gray") +
xlab("Effort") + ylab("Number of Projects") + ggtitle("Project Distribution - Effort") +
theme_bw(base_size=20)
unique.levels <- sort(unique(modelData$Type))
count <- table(modelData$Type)
count.modelData <- data.frame(unique.levels, count)
ggplot(count.modelData, aes(unique.levels, count)) +
geom_bar(stat="identity", colour="black", fill="gray") +
xlab("Project Type") + ylab("Number of Projects") + ggtitle("Project Distribution - Type") +
theme_bw(base_size=20)
#effort$Project <- NULL
ggplot(combined, aes(x=TL)) +
geom_histogram(aes(y = ..density..), binwidth=1, colour="black", fill="white") +
#stat_function(fun = dnorm, args = list(mean = mean(combined$TL), sd(combined$TL))) +
stat_function(fun = dgamma, args = list(shape=6.543586, rate=1.160249)) +
xlab("TL") + ggtitle("Combined TL Data Summary") +
annotate("text", x=14, y=0.25, label= "Gamma: shape=6.54, rate=1.16; KS: p-value < 0.01")+
theme_bw()
ggplot(combined, aes(x=TD)) +
geom_histogram(aes(y = ..density..), binwidth=0.5, colour="black", fill="white") +
#stat_function(fun = dnorm, args = list(mean = mean(combined$TD), sd(combined$TD))) +
stat_function(fun = dgamma, args = list(shape=3.6492150, rate=0.6985361 )) +
annotate("text", x=16, y=0.18, label= "Gamma: shape=3.65, rate=0.70; KS: p-value < 0.01")+
xlab("TD") + ggtitle("Combined TD Data Summary") +
theme_bw()
ggplot(combined, aes(x=DETs)) +
geom_histogram(aes(y = ..density..), binwidth=1, colour="black", fill="white") +
#stat_function(fun = dnorm, args = list(mean = mean(combined$DETs), sd(combined$DETs))) +
stat_function(fun = dgamma, args = list(shape=1.6647412, rate=0.1691911)) +
annotate("text", x=57, y=0.15, label= "Gamma: shape=1.66, rate=0.17; KS: p-value < 0.01")+
xlab("DETs") + ggtitle("Combined DETs Data Summary") +
theme_bw()
ggplot(combined, aes(x=TL)) +
geom_histogram(aes(y = ..density..), binwidth=1, colour="black", fill="white") +
#stat_function(fun = dnorm, args = list(mean = mean(combined$TL), sd(combined$TL))) +
stat_function(fun = dgamma, args = list(shape=6.543586, rate=1.160249)) +
xlab("TL") + ggtitle("Combined TL Data Summary") +
annotate("text", x=14, y=0.25, label= "Gamma: shape=6.54, rate=1.16; KS: p-value < 0.01")+
theme_bw(base_size=20)
ggplot(combined, aes(x=TL)) +
geom_histogram(aes(y = ..density..), binwidth=1, colour="black", fill="white") +
#stat_function(fun = dnorm, args = list(mean = mean(combined$TL), sd(combined$TL))) +
stat_function(fun = dgamma, args = list(shape=6.543586, rate=1.160249)) +
xlab("TL") + ggtitle("Combined TL Data Summary") +
annotate("text", x=14, y=0.25, label= "Gamma: shape=6.54, rate=1.16; KS: p-value < 0.01")+
theme_bw(base_size=15)
ggplot(combined, aes(x=TL)) +
geom_histogram(aes(y = ..density..), binwidth=1, colour="black", fill="white") +
#stat_function(fun = dnorm, args = list(mean = mean(combined$TL), sd(combined$TL))) +
stat_function(fun = dgamma, args = list(shape=6.543586, rate=1.160249)) +
xlab("TL") + ylab("Density")+ ggtitle("Combined TL Data Summary") +
annotate("text", x=14, y=0.25, label= "Gamma: shape=6.54, rate=1.16; KS: p-value < 0.01")+
theme_bw(base_size=18)
ggplot(combined, aes(x=TL)) +
geom_histogram(aes(y = ..density..), binwidth=1, colour="black", fill="white") +
#stat_function(fun = dnorm, args = list(mean = mean(combined$TL), sd(combined$TL))) +
stat_function(fun = dgamma, args = list(shape=6.543586, rate=1.160249)) +
xlab("TL") + ylab("Density")+ ggtitle("Combined TL Data Summary") +
annotate("text", x=14, y=0.25, label= "Gamma: shape=6.54, rate=1.16; KS: p-value < 0.01")+
theme_bw(base_size=16)
ggplot(combined, aes(x=TL)) +
geom_histogram(aes(y = ..density..), binwidth=1, colour="black", fill="white") +
#stat_function(fun = dnorm, args = list(mean = mean(combined$TL), sd(combined$TL))) +
stat_function(fun = dgamma, args = list(shape=6.543586, rate=1.160249)) +
xlab("TL") + ylab("Density")+ ggtitle("Combined TL Data Summary") +
annotate("text", x=14, y=0.25, label= "Gamma: shape=6.54, rate=1.16; KS: p-value < 0.01")+
<<<<<<< HEAD
theme_bw()
ggplot(combined, aes(x=TD)) +
geom_histogram(aes(y = ..density..), binwidth=0.5, colour="black", fill="white") +
#stat_function(fun = dnorm, args = list(mean = mean(combined$TD), sd(combined$TD))) +
stat_function(fun = dgamma, args = list(shape=3.6492150, rate=0.6985361 )) +
annotate("text", x=16, y=0.18, label= "Gamma: shape=3.65, rate=0.70; KS: p-value < 0.01")+
xlab("TD") + ggtitle("Combined TD Data Summary") +
theme_bw()
ggplot(combined, aes(x=DETs)) +
geom_histogram(aes(y = ..density..), binwidth=1, colour="black", fill="white") +
#stat_function(fun = dnorm, args = list(mean = mean(combined$DETs), sd(combined$DETs))) +
stat_function(fun = dgamma, args = list(shape=1.6647412, rate=0.1691911)) +
annotate("text", x=57, y=0.15, label= "Gamma: shape=1.66, rate=0.17; KS: p-value < 0.01")+
xlab("DETs") + ggtitle("Combined DETs Data Summary") +
theme_bw()
categorizedTransactions = matrix(nrow=0, ncol=3)
colnames(categorizedTransactions) <- c("Counts", "Bins", "Classification")
for (i in 1:length(SWTIresults_III)) {
result <- SWTIresults_III[[i]]
df <- as.data.frame(t(subset(result$data, select = -c(Effort))))
rownames(df) <- c(paste("b", seq(1, nrow(df)), sep=""))
#print(rep(paste(i, "Bins", sep=" "), nrow(df)))
mergedTransactionCounts = cbind(df$Aggregate, rownames(df), rep(paste(i, "Bins", sep=" "), nrow(df)))
names(mergedTransactionCounts) <- c("Counts", "Bins", "Classification")
rownames(mergedTransactionCounts) <- NULL
categorizedTransactions <- rbind(categorizedTransactions, mergedTransactionCounts)
}
categorizedTransactions = as.data.frame(categorizedTransactions)
categorizedTransactions$Counts <- as.numeric(as.character(categorizedTransactions$Counts))
ggplot(data = categorizedTransactions, aes(x = rownames(categorizedTransactions), y = Counts)) +
geom_bar(stat = "identity") +
facet_wrap(. ~ Classification, scales="free", nrow=2)+
xlab("Bins") +
ylab("Counts") +
ggtitle(paste("Classification Results:", i, "levels"))+
theme_bw(base_size=12)
categorizedTransactions = matrix(nrow=0, ncol=3)
colnames(categorizedTransactions) <- c("Counts", "Bins", "Classification")
for (i in 1:length(SWTIresults_III)) {
result <- SWTIresults_III[[i]]
df <- as.data.frame(t(subset(result$data, select = -c(Effort))))
rownames(df) <- c(paste("b", seq(1, nrow(df)), sep=""))
#print(rep(paste(i, "Bins", sep=" "), nrow(df)))
mergedTransactionCounts = cbind(df$Aggregate, rownames(df), rep(paste(i, "Bins", sep=" "), nrow(df)))
names(mergedTransactionCounts) <- c("Counts", "Bins", "Classification")
rownames(mergedTransactionCounts) <- NULL
categorizedTransactions <- rbind(categorizedTransactions, mergedTransactionCounts)
}
categorizedTransactions = as.data.frame(categorizedTransactions)
categorizedTransactions$Counts <- as.numeric(as.character(categorizedTransactions$Counts))
ggplot(data = categorizedTransactions, aes(x = rownames(categorizedTransactions), y = Counts)) +
geom_bar(stat = "identity") +
facet_wrap(. ~ Classification, scales="free", nrow=2)+
xlab("Bins") +
ylab("Counts") +
ggtitle(paste("Identification Results:", i, "bins"))+
theme_bw(base_size=12)
for (i in 1:length(SWTIIresults)) {
result <- SWTIIresults[[i]]
df <- as.data.frame(t(subset(result$data, select = -c(Effort))))
g <- ggplot(data = df, aes(x = rownames(df), y = Aggregate)) +
geom_bar(stat = "identity") +
xlab("Bins") +
ylab("Counts") +
ggtitle(paste("Classification Results:", i*2-2+1, "levels")) +
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
cutsVec <- cutsAsVec(result$cuts)
g <- g + geom_text(data = data.frame(cutsVec), aes(label=cutsVec, col=cutsVec), alpha=0, x=1, y=1) +
theme(legend.key=element_blank(), legend.title = element_blank()) +
guides(colour=guide_legend(override.aes=list(size=0)), reverse = TRUE) +
theme_bw()
print(g)
}
for (i in 1:length(SWTIIresults)) {
result <- SWTIIresults[[i]]
df <- as.data.frame(t(subset(result$data, select = -c(Effort))))
g <- ggplot(data = df, aes(x = rownames(df), y = Aggregate)) +
geom_bar(stat = "identity") +
xlab("Levels") +
ylab("Counts") +
ggtitle(paste("Classification Results:", i*2-2+1, "levels")) +
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
cutsVec <- cutsAsVec(result$cuts)
g <- g + geom_text(data = data.frame(cutsVec), aes(label=cutsVec, col=cutsVec), alpha=0, x=1, y=1) +
theme(legend.key=element_blank(), legend.title = element_blank()) +
guides(colour=guide_legend(override.aes=list(size=0)), reverse = TRUE) +
theme_bw()
print(g)
}
for (i in 1:length(SWTIIIresults)) {
result <- SWTIIIresults[[i]]
df <- as.data.frame(t(subset(result$data, select = -c(Effort))))
g <- ggplot(data = df, aes(x = rownames(df), y = Aggregate)) +
geom_bar(stat = "identity") +
xlab("Levels") +
ylab("Counts") +
ggtitle(paste("Classification Results:", i*3-3+1, "levels")) +
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
cutsVec <- cutsAsVec(result$cuts)
g <- g + geom_text(data = data.frame(cutsVec), aes(label=cutsVec, col=cutsVec), alpha=0, x=1, y=1) +
theme(legend.key=element_blank(), legend.title = element_blank()) +
guides(colour=guide_legend(override.aes=list(size=0)), reverse = TRUE) +
theme_bw()
print(g)
}
ggplot(meltAvgPreds) + theme_bw() + geom_point(aes(x=Pred, y=Value, group=Method,color=Method),size=3)+ xlab("Relative Deviation (%)") +
ylab("Percentage of Estimates <= x%")+ theme(legend.position="bottom")
print("melt avg preds info as lines and smooth function")
ggplot(meltAvgPreds) + theme_bw() +
geom_line(aes(y=Value, x=Pred, group=Method,color=Method)) +
stat_smooth(aes(y=Value, x=Pred, group=Method,color=Method), method = lm, formula = y ~ poly(x, 10), se = FALSE)+ xlab("Relative Deviation (%)") +
ylab("Percentage of Estimates <= x%")+ theme(legend.position="bottom")
print("melt avg preds info as dots and smooth function")
ggplot(meltAvgPreds) + theme_bw() +
geom_point(aes(x=Pred, y=Value, group=Method,color=Method,shape=Method),size=1.5) +
scale_shape_manual(values=c(0,1,2,3,4,5,6))+
stat_smooth(aes(x=Pred, y=Value, group=Method,color=Method), method = lm, formula = y ~ poly(x, 10), se = FALSE)+ xlab("Relative Deviation (%)") +
ylab("Percentage of Estimates <= x%")+ theme(legend.position="bottom")
knitr::opts_chunk$set(echo = TRUE)
source("transaction_weights_calibration4.R")
source("transaction_weights_calibration4.R")
source("transaction_weights_calibration4.R")
source("comparison_between_size_metrics.R")
n_weights_calibration4.R")
source("comparison_between_size_metrics.R")
knitr::opts_chunk$set(echo = TRUE)
source("transaction_weights_calibration4.R")
source("comparison_between_size_metrics.R")
library(jsonlite)
library(reshape)
knitr::opts_chunk$set(echo = TRUE)
source("transaction_weights_calibration4.R")
source("comparison_between_size_metrics.R")
library(jsonlite)
library(reshape)
library(tidyverse)
library(fitdistrplus)
library(egg)
library(gridExtra)
library(plyr)
knitr::opts_chunk$set(echo = TRUE)
source("transaction_weights_calibration4.R")
source("comparison_between_size_metrics.R")
library(jsonlite)
library(reshape)
library(tidyverse)
library(fitdistrplus)
library(egg)
library(gridExtra)
library(plyr)
knitr::opts_chunk$set(echo = TRUE)
source("transaction_weights_calibration4.R")
source("comparison_between_size_metrics.R")
library(jsonlite)
library(reshape)
library(tidyverse)
library(fitdistrplus)
library(egg)
library(gridExtra)
cutsAsVec <- function(x) {
ret <- c("Cut Points:")
for (row in rownames(x)) {
cutPoints <- round(x[row, ], digits = 1)
ret <- c(ret, paste(row,":", paste(cutPoints, collapse = ", ")))
}
ret
}
modelData <- read.csv("modelEvaluations-8-30-2.csv")
modelData$Project <- as.character(modelData$Project)
modelData$transaction_file <- as.character(modelData$transaction_file)
effort <- subset(modelData, select=c("Effort"))
transactionFiles <- subset(modelData, select=c("transaction_file"))
rownames(effort) <- modelData$Project
rownames(transactionFiles) <- modelData$Project
combined <- combineData(transactionFiles)
=======
theme_bw(base_size=15)
>>>>>>> eeb31ae77ab5fc8e2547c2ca89a88d15da914ad8
