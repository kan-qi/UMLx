prodByLinearRegression <- function(effortData, transactionFiles, cutPoints, weights){
#effortData <- effort
#transactionFiles <- transactionsFiles
#cutPoints <- cutpoints
#weights <- weights
projects <- rownames(effortData)
regressionData <- matrix(nrow = length(projects), ncol = 2)
rownames(regressionData) <- projects
colnames(regressionData) <- c("size", "Effort")
numOfTrans <- 0
for (project in projects) {
#project <- projects[1]
filePath <- transactionFiles[project, "transaction_file"]
print(filePath)
if (!file.exists(filePath)) {
print("file doesn't exist")
next
}
fileData <- read.csv(filePath)
fileData <- data.frame(apply(subset(fileData, select = c("TL", "TD", "DETs")), 2, function(x) as.numeric(x)))
fileData <- na.omit(fileData)
if(nrow(fileData) < 1){
next
}
numOfTrans = numOfTrans + nrow(fileData)
classifiedData <- classify(fileData, cutPoints)
size <- classifiedData %*% weights
regressionData[project, ] <- c(size, effortData[project, "Effort"])
}
print(numOfTrans)
regressionData <- na.omit(regressionData)
#regressionData <- rbind(regressionData, "Aggregate" = colSums(regressionData))
regressionData <- as.data.frame(regressionData)
#}
lm.fit <- lm(Effort ~ ., regressionData)
coefficients <- summary(lm.fit)$coefficients
predicts <- as.data.frame(predict(lm.fit, newData = regressionData))
#names(predicts) <- rownames(regressionData)
results = list()
results[["predicts"]] <- predicts
results[["coefficients"]] <- coefficients
results
}
results <- prodByLinearRegression(effort1, transactionFiles1, cutpoints, weights)
print(results)
prodByLinearRegression <- function(effortData, transactionFiles, cutPoints, weights){
#effortData <- effort
#transactionFiles <- transactionsFiles
#cutPoints <- cutpoints
#weights <- weights
projects <- rownames(effortData)
regressionData <- matrix(nrow = length(projects), ncol = 2)
rownames(regressionData) <- projects
colnames(regressionData) <- c("size", "Effort")
numOfTrans <- 0
for (project in projects) {
#project <- projects[1]
filePath <- transactionFiles[project, "transaction_file"]
print(filePath)
if (!file.exists(filePath)) {
print("file doesn't exist")
next
}
fileData <- read.csv(filePath)
fileData <- data.frame(apply(subset(fileData, select = c("TL", "TD", "DETs")), 2, function(x) as.numeric(x)))
fileData <- na.omit(fileData)
if(nrow(fileData) < 1){
next
}
numOfTrans = numOfTrans + nrow(fileData)
classifiedData <- classify(fileData, cutPoints)
size <- classifiedData %*% weights
regressionData[project, ] <- c(size, effortData[project, "Effort"])
}
print(numOfTrans)
regressionData <- na.omit(regressionData)
#regressionData <- rbind(regressionData, "Aggregate" = colSums(regressionData))
regressionData <- as.data.frame(regressionData)
#}
lm.fit <- lm(Effort ~ ., regressionData)
coefficients <- summary(lm.fit)$coefficients
predicts <- as.data.frame(predict(lm.fit, newData = regressionData))
rownames(predicts) <- rownames(regressionData)
results = list()
results[["predicts"]] <- predicts
results[["coefficients"]] <- coefficients
results
}
weights <- c(1, 2, 3, 5, 8)
names(weights) <- c("L1", "L2", "L3", "L4", "L5")
cutpoints <- matrix(NA, nrow = 2, ncol = 4)
rownames(cutpoints) <- c("TL", "TD")
cutpoints["TL",] = c(-Inf, 4.1, 6.1, Inf)
cutpoints["TD",] = c(-Inf, 3.1, 6.1, Inf)
results <- prodByLinearRegression(effort1, transactionFiles1, cutpoints, weights)
print(results)
prodByLinearRegression <- function(effortData, transactionFiles, cutPoints, weights){
#effortData <- effort
#transactionFiles <- transactionsFiles
#cutPoints <- cutpoints
#weights <- weights
projects <- rownames(effortData)
regressionData <- matrix(nrow = length(projects), ncol = 2)
rownames(regressionData) <- projects
colnames(regressionData) <- c("size", "Effort")
numOfTrans <- 0
for (project in projects) {
#project <- projects[1]
filePath <- transactionFiles[project, "transaction_file"]
print(filePath)
if (!file.exists(filePath)) {
print("file doesn't exist")
next
}
fileData <- read.csv(filePath)
fileData <- data.frame(apply(subset(fileData, select = c("TL", "TD", "DETs")), 2, function(x) as.numeric(x)))
fileData <- na.omit(fileData)
if(nrow(fileData) < 1){
next
}
numOfTrans = numOfTrans + nrow(fileData)
classifiedData <- classify(fileData, cutPoints)
size <- classifiedData %*% weights
regressionData[project, ] <- c(size, effortData[project, "Effort"])
}
print(numOfTrans)
regressionData <- na.omit(regressionData)
#regressionData <- rbind(regressionData, "Aggregate" = colSums(regressionData))
regressionData <- as.data.frame(regressionData)
#}
lm.fit <- lm(Effort ~ ., regressionData)
coefficients <- summary(lm.fit)$coefficients
predicts <- as.data.frame(predict(lm.fit, newData = regressionData))
rownames(predicts) <- regressionData$project
results = list()
results[["predicts"]] <- predicts
results[["coefficients"]] <- coefficients
results
}
weights <- c(1, 2, 3, 5, 8)
names(weights) <- c("L1", "L2", "L3", "L4", "L5")
cutpoints <- matrix(NA, nrow = 2, ncol = 4)
rownames(cutpoints) <- c("TL", "TD")
cutpoints["TL",] = c(-Inf, 4.1, 6.1, Inf)
cutpoints["TD",] = c(-Inf, 3.1, 6.1, Inf)
results <- prodByLinearRegression(effort1, transactionFiles1, cutpoints, weights)
print(results)
prodByLinearRegression <- function(effortData, transactionFiles, cutPoints, weights){
#effortData <- effort
#transactionFiles <- transactionsFiles
#cutPoints <- cutpoints
#weights <- weights
projects <- rownames(effortData)
regressionData <- matrix(nrow = length(projects), ncol = 2)
rownames(regressionData) <- projects
colnames(regressionData) <- c("size", "Effort")
numOfTrans <- 0
for (project in projects) {
#project <- projects[1]
filePath <- transactionFiles[project, "transaction_file"]
print(filePath)
if (!file.exists(filePath)) {
print("file doesn't exist")
next
}
fileData <- read.csv(filePath)
fileData <- data.frame(apply(subset(fileData, select = c("TL", "TD", "DETs")), 2, function(x) as.numeric(x)))
fileData <- na.omit(fileData)
if(nrow(fileData) < 1){
next
}
numOfTrans = numOfTrans + nrow(fileData)
classifiedData <- classify(fileData, cutPoints)
size <- classifiedData %*% weights
regressionData[project, ] <- c(size, effortData[project, "Effort"])
}
print(numOfTrans)
regressionData <- na.omit(regressionData)
#regressionData <- rbind(regressionData, "Aggregate" = colSums(regressionData))
regressionData <- as.data.frame(regressionData)
print(regressionData)
#}
lm.fit <- lm(Effort ~ ., regressionData)
coefficients <- summary(lm.fit)$coefficients
predicts <- as.data.frame(predict(lm.fit, newData = regressionData))
rownames(predicts) <- regressionData$project
results = list()
results[["predicts"]] <- predicts
results[["coefficients"]] <- coefficients
results
}
weights <- c(1, 2, 3, 5, 8)
names(weights) <- c("L1", "L2", "L3", "L4", "L5")
cutpoints <- matrix(NA, nrow = 2, ncol = 4)
rownames(cutpoints) <- c("TL", "TD")
cutpoints["TL",] = c(-Inf, 4.1, 6.1, Inf)
cutpoints["TD",] = c(-Inf, 3.1, 6.1, Inf)
results <- prodByLinearRegression(effort1, transactionFiles1, cutpoints, weights)
print(results)
prodByLinearRegression <- function(effortData, transactionFiles, cutPoints, weights){
#effortData <- effort
#transactionFiles <- transactionsFiles
#cutPoints <- cutpoints
#weights <- weights
projects <- rownames(effortData)
regressionData <- matrix(nrow = length(projects), ncol = 2)
rownames(regressionData) <- projects
colnames(regressionData) <- c("size", "Effort")
numOfTrans <- 0
for (project in projects) {
#project <- projects[1]
filePath <- transactionFiles[project, "transaction_file"]
print(filePath)
if (!file.exists(filePath)) {
print("file doesn't exist")
next
}
fileData <- read.csv(filePath)
fileData <- data.frame(apply(subset(fileData, select = c("TL", "TD", "DETs")), 2, function(x) as.numeric(x)))
fileData <- na.omit(fileData)
if(nrow(fileData) < 1){
next
}
numOfTrans = numOfTrans + nrow(fileData)
classifiedData <- classify(fileData, cutPoints)
size <- classifiedData %*% weights
regressionData[project, ] <- c(size, effortData[project, "Effort"])
}
print(numOfTrans)
regressionData <- na.omit(regressionData)
#regressionData <- rbind(regressionData, "Aggregate" = colSums(regressionData))
regressionData <- as.data.frame(regressionData)
print(regressionData)
#}
lm.fit <- lm(Effort ~ ., regressionData)
coefficients <- summary(lm.fit)$coefficients
predicts <- as.data.frame(predict(lm.fit, newData = regressionData))
rownames(predicts) <- regressionData$project
results = list()
results[["predicts"]] <- predicts
results[["coefficients"]] <- coefficients
results
}
weights <- c(1, 2, 3, 5, 8)
names(weights) <- c("L1", "L2", "L3", "L4", "L5")
cutpoints <- matrix(NA, nrow = 2, ncol = 4)
rownames(cutpoints) <- c("TL", "TD")
cutpoints["TL",] = c(-Inf, 4.1, 6.1, Inf)
cutpoints["TD",] = c(-Inf, 3.1, 6.1, Inf)
results <- prodByLinearRegression(effort1, transactionFiles1, cutpoints, weights)
print(results)
prodByLinearRegression <- function(effortData, transactionFiles, cutPoints, weights){
#effortData <- effort
#transactionFiles <- transactionsFiles
#cutPoints <- cutpoints
#weights <- weights
projects <- rownames(effortData)
regressionData <- matrix(nrow = length(projects), ncol = 2)
rownames(regressionData) <- projects
colnames(regressionData) <- c("size", "Effort")
numOfTrans <- 0
for (project in projects) {
#project <- projects[1]
filePath <- transactionFiles[project, "transaction_file"]
print(filePath)
if (!file.exists(filePath)) {
print("file doesn't exist")
next
}
fileData <- read.csv(filePath)
fileData <- data.frame(apply(subset(fileData, select = c("TL", "TD", "DETs")), 2, function(x) as.numeric(x)))
fileData <- na.omit(fileData)
if(nrow(fileData) < 1){
next
}
numOfTrans = numOfTrans + nrow(fileData)
classifiedData <- classify(fileData, cutPoints)
size <- classifiedData %*% weights
regressionData[project, ] <- c(size, effortData[project, "Effort"])
}
print(numOfTrans)
regressionData <- na.omit(regressionData)
#regressionData <- rbind(regressionData, "Aggregate" = colSums(regressionData))
regressionData <- as.data.frame(regressionData)
print("regressionData")
print(regressionData)
#}
lm.fit <- lm(Effort ~ ., regressionData)
coefficients <- summary(lm.fit)$coefficients
predicts <- as.data.frame(predict(lm.fit, newData = regressionData))
rownames(predicts) <- regressionData$project
results = list()
results[["predicts"]] <- predicts
results[["coefficients"]] <- coefficients
results
}
weights <- c(1, 2, 3, 5, 8)
names(weights) <- c("L1", "L2", "L3", "L4", "L5")
cutpoints <- matrix(NA, nrow = 2, ncol = 4)
rownames(cutpoints) <- c("TL", "TD")
cutpoints["TL",] = c(-Inf, 4.1, 6.1, Inf)
cutpoints["TD",] = c(-Inf, 3.1, 6.1, Inf)
results <- prodByLinearRegression(effort1, transactionFiles1, cutpoints, weights)
print(results)
prodByLinearRegression <- function(effortData, transactionFiles, cutPoints, weights){
#effortData <- effort
#transactionFiles <- transactionsFiles
#cutPoints <- cutpoints
#weights <- weights
projects <- rownames(effortData)
regressionData <- matrix(nrow = length(projects), ncol = 2)
rownames(regressionData) <- projects
colnames(regressionData) <- c("size", "Effort")
numOfTrans <- 0
for (project in projects) {
#project <- projects[1]
filePath <- transactionFiles[project, "transaction_file"]
print(filePath)
if (!file.exists(filePath)) {
print("file doesn't exist")
next
}
fileData <- read.csv(filePath)
fileData <- data.frame(apply(subset(fileData, select = c("TL", "TD", "DETs")), 2, function(x) as.numeric(x)))
fileData <- na.omit(fileData)
if(nrow(fileData) < 1){
next
}
numOfTrans = numOfTrans + nrow(fileData)
classifiedData <- classify(fileData, cutPoints)
size <- classifiedData %*% weights
regressionData[project, ] <- c(size, effortData[project, "Effort"])
}
print(numOfTrans)
regressionData <- na.omit(regressionData)
#regressionData <- rbind(regressionData, "Aggregate" = colSums(regressionData))
regressionData <- as.data.frame(regressionData)
print("regressionData")
print(regressionData)
#}
lm.fit <- lm(Effort ~ ., regressionData)
coefficients <- summary(lm.fit)$coefficients
predicts <- as.data.frame(predict(lm.fit, newData = regressionData))
rownames(predicts) <- projects
results = list()
results[["predicts"]] <- predicts
results[["coefficients"]] <- coefficients
results
}
weights <- c(1, 2, 3, 5, 8)
names(weights) <- c("L1", "L2", "L3", "L4", "L5")
cutpoints <- matrix(NA, nrow = 2, ncol = 4)
rownames(cutpoints) <- c("TL", "TD")
cutpoints["TL",] = c(-Inf, 4.1, 6.1, Inf)
cutpoints["TD",] = c(-Inf, 3.1, 6.1, Inf)
results <- prodByLinearRegression(effort1, transactionFiles1, cutpoints, weights)
print(results)
modelData1 <- read.csv("../Resilient Agile/modelEvaluations.csv")
modelData1$Project <- as.character(modelData1$Project)
modelData1$transaction_file <- as.character(modelData1$transaction_file)
effort1 <- subset(modelData1, select=c("Effort"))
rownames(effort1) <- modelData1$Project
transactionFiles1 <- subset(modelData1, select=c("transaction_file"))
rownames(transactionFiles1) <- modelData1$Project
weights <- c(1, 2, 3, 5, 8)
names(weights) <- c("L1", "L2", "L3", "L4", "L5")
cutpoints <- matrix(NA, nrow = 2, ncol = 4)
rownames(cutpoints) <- c("TL", "TD")
cutpoints["TL",] = c(-Inf, 4.1, 6.1, Inf)
cutpoints["TD",] = c(-Inf, 3.1, 6.1, Inf)
results <- prodByLinearRegression(effort1, transactionFiles1, cutpoints, weights)
print(results)
weights <- c(1, 1, 2, 3, 5, 8, 8)
names(weights) <- c("L1", "L2", "L3", "L4", "L5", "L6", "L7")
cutpoints <- matrix(NA, nrow = 3, ncol = 4)
rownames(cutpoints) <- c("TL", "TD", "DETs")
cutpoints[["TL"]] = c(-Inf, 4.1, 6.1, Inf)
weights <- c(1, 1, 2, 3, 5, 8, 8)
names(weights) <- c("L1", "L2", "L3", "L4", "L5", "L6", "L7")
cutpoints <- matrix(NA, nrow = 3, ncol = 4)
rownames(cutpoints) <- c("TL", "TD", "DETs")
cutpoints["TL",] = c(-Inf, 4.1, 6.1, Inf)
cutpoints["TD",] = c(-Inf, 3.1, 6.1, Inf)
cutpoints["DETs",] = c(-Inf, 5.1, 11.1, Inf)
results <- prodByLinearRegression(effort1, transactionFiles1, c())
weights <- c(1, 1, 2, 3, 5, 8, 8)
names(weights) <- c("L1", "L2", "L3", "L4", "L5", "L6", "L7")
cutpoints <- matrix(NA, nrow = 3, ncol = 4)
rownames(cutpoints) <- c("TL", "TD", "DETs")
cutpoints["TL",] = c(-Inf, 4.1, 6.1, Inf)
cutpoints["TD",] = c(-Inf, 3.1, 6.1, Inf)
cutpoints["DETs",] = c(-Inf, 5.1, 11.1, Inf)
results <- prodByLinearRegression(effort1, transactionFiles1, cutpoints, weights)
print(results)
prodByLinearRegression <- function(effortData, transactionFiles, cutPoints, weights){
#effortData <- effort
#transactionFiles <- transactionsFiles
#cutPoints <- cutpoints
#weights <- weights
projects <- rownames(effortData)
regressionData <- matrix(nrow = length(projects), ncol = 2)
rownames(regressionData) <- projects
colnames(regressionData) <- c("size", "Effort")
numOfTrans <- 0
for (project in projects) {
#project <- projects[1]
filePath <- transactionFiles[project, "transaction_file"]
print(filePath)
if (!file.exists(filePath)) {
print("file doesn't exist")
next
}
fileData <- read.csv(filePath)
fileData <- data.frame(apply(subset(fileData, select = c("TL", "TD", "DETs")), 2, function(x) as.numeric(x)))
fileData <- na.omit(fileData)
if(nrow(fileData) < 1){
next
}
numOfTrans = numOfTrans + nrow(fileData)
classifiedData <- classify(fileData, cutPoints)
size <- classifiedData %*% weights
regressionData[project, ] <- c(size, effortData[project, "Effort"])
}
print(numOfTrans)
regressionData <- na.omit(regressionData)
#regressionData <- rbind(regressionData, "Aggregate" = colSums(regressionData))
regressionData <- as.data.frame(regressionData)
print("regressionData")
print(regressionData)
#}
lm.fit <- lm(Effort ~ .-1, regressionData)
coefficients <- summary(lm.fit)$coefficients
predicts <- as.data.frame(predict(lm.fit, newData = regressionData))
rownames(predicts) <- projects
results = list()
results[["predicts"]] <- predicts
results[["coefficients"]] <- coefficients
results
}
weights <- c(1, 1, 2, 3, 5, 8, 8)
names(weights) <- c("L1", "L2", "L3", "L4", "L5", "L6", "L7")
cutpoints <- matrix(NA, nrow = 3, ncol = 4)
rownames(cutpoints) <- c("TL", "TD", "DETs")
cutpoints["TL",] = c(-Inf, 4.1, 6.1, Inf)
cutpoints["TD",] = c(-Inf, 3.1, 6.1, Inf)
cutpoints["DETs",] = c(-Inf, 5.1, 11.1, Inf)
results <- prodByLinearRegression(effort1, transactionFiles1, cutpoints, weights)
print(results)
weights <- c(1, 2, 3, 5, 8)
names(weights) <- c("L1", "L2", "L3", "L4", "L5")
cutpoints <- matrix(NA, nrow = 2, ncol = 4)
rownames(cutpoints) <- c("TL", "TD")
cutpoints["TL",] = c(-Inf, 4.1, 6.1, Inf)
cutpoints["TD",] = c(-Inf, 3.1, 6.1, Inf)
results <- prodByLinearRegression(effort1, transactionFiles1, cutpoints, weights)
print(results)
prodByLinearRegression <- function(effortData, transactionFiles, cutPoints, weights){
#effortData <- effort
#transactionFiles <- transactionsFiles
#cutPoints <- cutpoints
#weights <- weights
projects <- rownames(effortData)
regressionData <- matrix(nrow = length(projects), ncol = 2)
rownames(regressionData) <- projects
colnames(regressionData) <- c("size", "Effort")
numOfTrans <- 0
for (project in projects) {
#project <- projects[1]
filePath <- transactionFiles[project, "transaction_file"]
print(filePath)
if (!file.exists(filePath)) {
print("file doesn't exist")
next
}
fileData <- read.csv(filePath)
fileData <- data.frame(apply(subset(fileData, select = c("TL", "TD", "DETs")), 2, function(x) as.numeric(x)))
fileData <- na.omit(fileData)
if(nrow(fileData) < 1){
next
}
numOfTrans = numOfTrans + nrow(fileData)
if(is.null(cutPoints)){
size = nrow(fileData)
}
else{
classifiedData <- classify(fileData, cutPoints)
size <- classifiedData %*% weights
}
regressionData[project, ] <- c(size, effortData[project, "Effort"])
}
print(numOfTrans)
regressionData <- na.omit(regressionData)
#regressionData <- rbind(regressionData, "Aggregate" = colSums(regressionData))
regressionData <- as.data.frame(regressionData)
print("regressionData")
print(regressionData)
#}
lm.fit <- lm(Effort ~ .-1, regressionData)
coefficients <- summary(lm.fit)$coefficients
predicts <- as.data.frame(predict(lm.fit, newData = regressionData))
rownames(predicts) <- projects
results = list()
results[["predicts"]] <- predicts
results[["coefficients"]] <- coefficients
results
}
#EUCP
weights <- c(1)
names(weights) <- c("L1")
cutpoints <- NULL
results <- prodByLinearRegression(effort1, transactionFiles1, cutpoints, weights)
print(results)
