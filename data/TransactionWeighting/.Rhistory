commits <- commits[order(as.Date(commits$commit.committer.date)), ]
commits
}
getActiveContributors <- function(url, user, pw) {
# Gets a list of all active/inactive contributors every 30 active days for a project.
#
# Args:
#   url: The project's github URL
#   user: Your github username
#   pw: Your github password
#
# Returns:
#   A list of active/inactive users every 30 active days.
active <- list()
commits <- getAllCommits(url, user, pw)
currentMonthActiveDays <- c()
currentMonthCommitCounts <- c()
lifetimeCommitsCounts <- c()
for (i in seq(1:nrow(commits))) {
commitAuthor <- if (is.na(commits[i, "author.login"])) commits[i, "commit.committer.name"] else commits[i, "author.login"]
if (length(currentMonthActiveDays) >= 30) {
# Record the active/inactive contributors for this month
activeThisMonth <- names(currentMonthCommitCounts[currentMonthCommitCounts / 30 >= 1])
activeCurrentLifetime <- names(lifetimeCommitsCounts[lifetimeCommitsCounts >= mean(lifetimeCommitsCounts)])
activeUsers = intersect(activeThisMonth, activeCurrentLifetime)
inactiveUsers = setdiff(names(currentMonthCommitCounts), activeUsers)
active[[length(active) + 1]] <- list(active = activeUsers, inactive = inactiveUsers,  days = as.Date(currentMonthActiveDays, origin = "1970-01-01"))
# Reset data for next month
currentMonthActiveDays <- c()
currentMonthCommitCounts <- c()
}
# Updating current month commit counts
if (commitAuthor %in% names(currentMonthCommitCounts)) {
currentMonthCommitCounts[commitAuthor] <-
currentMonthCommitCounts[commitAuthor] + 1
}
else {
currentMonthCommitCounts[commitAuthor] <- 1
}
# Updating current lifetime commit counts
if (commitAuthor %in% names(lifetimeCommitsCounts)) {
lifetimeCommitsCounts[commitAuthor] <-
lifetimeCommitsCounts[commitAuthor] + 1
}
else {
lifetimeCommitsCounts[commitAuthor] <- 1
}
# Updating active days
if (!dateInActiveDays(as.Date(commits[i, "commit.committer.date"]), currentMonthActiveDays)) {
currentMonthActiveDays <-
c(currentMonthActiveDays, as.Date(commits[i, "commit.committer.date"]))
}
}
active
}
simEffort <- function(url, user, pw) {
# Simulates effort of given GitHUb repository based on active and inactive
# contributors.
#
# Args:
#   url: the repo's github api url to simulate
#   user: your github username
#   pw: your github pw
#
# Returns:
#   Effort in person-hours
activeContributors <- getActiveContributors(url, user, pw)
effort <- 0
for (i in 1:length(activeContributors)) {
effort <- effort + (length(activeContributors[[i]]$active)*152) + (length(activeContributors[[i]]$inactive)*51)
}
effort
}
simEffort("https://api.github.com/repos/apache/carbondata", "flyqk", "qk@github/910304")
knitr::opts_chunk$set(echo = TRUE)
source("transaction_regression_calibration.R")
knitr::opts_chunk$set(echo = TRUE)
source("transaction_regression_calibration.R")
library(tidyverse)
combined <- combineData("./Transaction Data")
effort <- read.csv("effortValues.csv")
rownames(effort) <- effort$Project
effort$Project <- NULL
SWTIIresults <- performSearch(6, "./Transaction Data", effort, c("TL, TD, DETs"))
knitr::opts_chunk$set(echo = TRUE)
source("transaction_regression_calibration.R")
library(tidyverse)
combined <- combineData("./Transaction Data")
effort <- read.csv("effortValues.csv")
rownames(effort) <- effort$Project
effort$Project <- NULL
SWTIIresults <- performSearch(6, ".\Transaction Data", effort, c("TL, TD, DETs"))
knitr::opts_chunk$set(echo = TRUE)
source("transaction_regression_calibration.R")
library(tidyverse)
combined <- combineData("./Transaction Data")
effort <- read.csv("effortValues.csv")
rownames(effort) <- effort$Project
effort$Project <- NULL
SWTIIresults <- performSearch(6, "./Transaction Data", effort, c("TL, TD, DETs"))
knitr::opts_chunk$set(echo = TRUE)
source("transaction_regression_calibration.R")
library(tidyverse)
combined <- combineData("./Transaction Data")
effort <- read.csv("effortValues.csv")
rownames(effort) <- effort$Project
effort$Project <- NULL
SWTIIresults <- performSearch("./Transaction Data", effort, c("TL, TD, DETs"))
source('~/Google Drive/ResearchSpace/Research Projects/UMLx/data/TransactionWeighting/transaction_regression_calibration.R')
source('~/Google Drive/ResearchSpace/Research Projects/UMLx/data/TransactionWeighting/transaction_regression_calibration.R')
source('~/Google Drive/ResearchSpace/Research Projects/UMLx/data/TransactionWeighting/transaction_regression_calibration.R')
regressionData <- matrix(nrow = numFiles, ncol = length(parameters) + 1)
knitr::opts_chunk$set(echo = TRUE)
source("transaction_regression_calibration.R")
library(tidyverse)
combined <- combineData("./Transaction Data")
effort <- read.csv("effortValues.csv")
rownames(effort) <- effort$Project
effort$Project <- NULL
SWTIIresults <- performSearch("./Transaction Data", effort, c("TL, TD, DETs"))
knitr::opts_chunk$set(echo = TRUE)
source("transaction_regression_calibration.R")
library(tidyverse)
combined <- combineData("./Transaction Data")
effort <- read.csv("effortValues.csv")
rownames(effort) <- effort$Project
effort$Project <- NULL
SWTIIresults <- performSearch("./Transaction Data", effort, c("TL, TD, DETs"))
fileData <- read.csv(paste(folder, file, sep = "/"))
knitr::opts_chunk$set(echo = TRUE)
source("transaction_regression_calibration.R")
library(tidyverse)
combined <- combineData("./Transaction Data")
effort <- read.csv("effortValues.csv")
rownames(effort) <- effort$Project
effort$Project <- NULL
SWTIIresults <- performSearch("./Transaction Data", effort, c("TL, TD, DETs"))
knitr::opts_chunk$set(echo = TRUE)
source("transaction_regression_calibration.R")
library(tidyverse)
combined <- combineData("./Transaction Data")
effort <- read.csv("effortValues.csv")
rownames(effort) <- effort$Project
effort$Project <- NULL
SWTIIresults <- performSearch("./Transaction Data", effort, c("TL, TD, DETs"))
knitr::opts_chunk$set(echo = TRUE)
source("transaction_regression_calibration.R")
library(tidyverse)
combined <- combineData("./Transaction Data")
effort <- read.csv("effortValues.csv")
rownames(effort) <- effort$Project
effort$Project <- NULL
SWTIIresults <- performSearch("./Transaction Data", effort, c("TL, TD, DETs"))
source('~/Google Drive/ResearchSpace/Research Projects/UMLx/data/TransactionWeighting/transaction_regression_calibration.R')
knitr::opts_chunk$set(echo = TRUE)
source("transaction_regression_calibration.R")
library(tidyverse)
combined <- combineData("./Transaction Data")
effort <- read.csv("effortValues.csv")
rownames(effort) <- effort$Project
effort$Project <- NULL
SWTIIresults <- performSearch("./Transaction Data", effort, c("TL, TD, DETs"))
knitr::opts_chunk$set(echo = TRUE)
source("transaction_regression_calibration.R")
library(tidyverse)
combined <- combineData("./Transaction Data")
effort <- read.csv("effortValues.csv")
rownames(effort) <- effort$Project
effort$Project <- NULL
SWTIIresults <- performSearch("./Transaction Data", effort, c("TL, TD, DETs"))
source('~/Google Drive/ResearchSpace/Research Projects/UMLx/data/TransactionWeighting/transaction_regression_calibration.R')
knitr::opts_chunk$set(echo = TRUE)
source("transaction_regression_calibration.R")
library(tidyverse)
combined <- combineData("./Transaction Data")
effort <- read.csv("effortValues.csv")
rownames(effort) <- effort$Project
effort$Project <- NULL
SWTIIresults <- performSearch("./Transaction Data", effort, c("TL, TD, DETs"))
source('~/Google Drive/ResearchSpace/Research Projects/UMLx/data/TransactionWeighting/transaction_regression_calibration.R')
knitr::opts_chunk$set(echo = TRUE)
source("transaction_regression_calibration.R")
library(tidyverse)
combined <- combineData("./Transaction Data")
effort <- read.csv("effortValues.csv")
rownames(effort) <- effort$Project
effort$Project <- NULL
SWTIIresults <- performSearch("./Transaction Data", effort, c("TL, TD, DETs"))
knitr::opts_chunk$set(echo = TRUE)
source("transaction_weights_calibration.R")
library(tidyverse)
cutsAsVec <- function(x) {
ret <- c("Cut Points:")
for (row in rownames(x)) {
cutPoints <- round(x[row, ], digits = 1)
ret <- c(ret, paste(row,":", paste(cutPoints, collapse = ", ")))
}
ret
}
combined <- combineData("./Transaction Data")
effort <- read.csv("effortValues.csv")
rownames(effort) <- effort$Project
effort$Project <- NULL
ggplot(combined, aes(x=TL)) +
geom_histogram(aes(y = ..density..), binwidth=1, colour="black", fill="white") +
stat_function(fun = dnorm, args = list(mean = mean(combined$TL), sd(combined$TL))) +
xlab("TL") + ggtitle("Combined TL Data Summary")
ggplot(combined, aes(x=TD)) +
geom_histogram(aes(y = ..density..), binwidth=1, colour="black", fill="white") +
stat_function(fun = dnorm, args = list(mean = mean(combined$TD), sd(combined$TD))) +
xlab("TD") + ggtitle("Combined TD Data Summary")
ggplot(combined, aes(x=DETs)) +
geom_histogram(aes(y = ..density..), binwidth=1, colour="black", fill="white") +
stat_function(fun = dnorm, args = list(mean = mean(combined$DETs), sd(combined$DETs))) +
xlab("DETs") + ggtitle("Combined DETs Data Summary")
SWTIresults <- performSearch(6, "./Transaction Data", effort, c("TL"))
# Plot classification results
for (i in 1:length(SWTIresults)) {
result <- SWTIresults[[i]]
df <- as.data.frame(t(subset(result$data, select = -c(Effort))))
g <- ggplot(data = df, aes(x = rownames(df), y = Aggregate)) +
geom_bar(stat = "identity") +
xlab("Category") +
ggtitle(paste("Classification Results:", i, "bins"))
cutsVec <- cutsAsVec(result$cuts)
g <- g + geom_text(data = data.frame(cutsVec), aes(label=cutsVec, col=cutsVec), alpha=0, x=1, y=1) +
theme(legend.key=element_blank(), legend.title = element_blank()) +
guides(colour=guide_legend(override.aes=list(size=0)), reverse = TRUE)
print(g)
}
# Plot predicted vs. actual effort values
predictedValues <- sapply(1:length(SWTIresults), function(i) {
predicted <- apply(SWTIresults[[i]]$data, 1, function(x) {
predict.blm(SWTIresults[[i]]$model, newdata = as.data.frame(t(x)))
})
})
colnames(predictedValues) <- paste(1:length(SWTIresults), "Bins")
predictedValues <- subset(predictedValues, rownames(predictedValues) != "Aggregate")
predictedValues <- merge(as.data.frame(predictedValues), effort, by='row.names', all=TRUE)
rownames(predictedValues) <- predictedValues$Row.names
predictedValues$Row.names <- NULL
r2Vals <- apply(subset(predictedValues, select = -Effort), 2, function (x) {
dat <- data.frame(Predicted = x, Effort = predictedValues$Effort)
model <- lm(Effort ~ ., data = dat)
summary(model)$r.squared
})
r2Vals <- round(r2Vals, digits = 5)
r2Vals <- paste("r2:", r2Vals, sep = "")
predictedValues <- gather(predictedValues, numBins, Predicted, -Effort)
r2data_txt <- data.frame(label = as.character(r2Vals), numBins = paste(1:length(SWTIresults), "Bins"))
ggplot(predictedValues, aes(x = Predicted, y = Effort)) +
geom_point(shape = 1) + stat_smooth(method = "lm",  se = FALSE, fullrange = TRUE) +
facet_grid(. ~ numBins) + xlab("Predicted Effort") +
ylab("Actual Effort") + ggtitle("Model Accuracy") +
theme(panel.spacing = unit(1, "lines")) +
geom_text(data = r2data_txt, size = 3, mapping = aes(x = -Inf, y = -Inf, label = label),
hjust = -0.1, vjust = -1)
# Plot cross validation results
MSEdata <- data.frame(NumBins = 1:length(SWTIresults), MSE = sapply(SWTIresults, function(x) { x$MSE }))
MMREdata <- data.frame(NumBins = 1:length(SWTIresults), MMRE = sapply(SWTIresults, function(x) { x$MMRE }))
PREDdata <- data.frame(NumBins = 1:length(SWTIresults), PRED = sapply(SWTIresults, function(x) { x$PRED }))
ggplot(data = MSEdata, aes(x = NumBins, y = log(MSE))) + geom_point(shape = 1) + geom_line() + ggtitle("MSE Results")
ggplot(data = MMREdata, aes(x = NumBins, y = MMRE)) + geom_point(shape = 1) + geom_line() + ggtitle("MMRE Results")
ggplot(data = PREDdata, aes(x = NumBins, y = PRED)) + geom_point(shape = 1) + geom_line() + ylab("PRED(0.25)") + ggtitle("PRED(0.25) Results")
# Plot marginal posteriors for each parameter
for (i in 1:length(SWTIresults)) {
marginalData <- SWTIresults[[i]]$model[, !names(SWTIresults[[i]]$model) %in% c("(Intercept)", "sigma")]
if (is.vector(marginalData)) {
marginalData <- data.frame(l1 = marginalData)
}
for (col in names(marginalData)) {
mean <- mean(marginalData[, col])
sd <- sd(marginalData[, col])
peakDensity <- dnorm(mean, mean, sd)
g <- ggplot(marginalData, aes(x=marginalData[, col])) +
geom_histogram(aes(y = ..density..), binwidth = 1, colour="black", fill="white") +
stat_function(fun = dnorm, args = list(mean = mean(mean), sd = sd)) +
xlab(col) + ggtitle("Posterior Weight", paste(col, i, "bins")) +
annotate("text", x = mean, y = peakDensity * ((sd/3 *.1) + 1), label = paste("mean:", round(mean,2),",", "sd:", round(sd,2)))
print(g)
}
}
SWTIIresults <- performSearch(5, "./Transaction Data", effort, c("TL", "TD"))
# Plot classification results
for (i in 1:length(SWTIIresults)) {
result <- SWTIIresults[[i]]
df <- as.data.frame(t(subset(result$data, select = -c(Effort))))
g <- ggplot(data = df, aes(x = rownames(df), y = Aggregate)) +
geom_bar(stat = "identity") +
xlab("Category") +
ggtitle(paste("Classification Results:", i, "bins")) +
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
cutsVec <- cutsAsVec(result$cuts)
g <- g + geom_text(data = data.frame(cutsVec), aes(label=cutsVec, col=cutsVec), alpha=0, x=1, y=1) +
theme(legend.key=element_blank(), legend.title = element_blank()) +
guides(colour=guide_legend(override.aes=list(size=0)), reverse = TRUE)
print(g)
}
# Plot predicted vs. actual effort values
predictedValues <- sapply(1:length(SWTIIresults), function(i) {
predicted <- apply(SWTIIresults[[i]]$data, 1, function(x) {
predict.blm(SWTIIresults[[i]]$model, newdata = as.data.frame(t(x)))
})
})
colnames(predictedValues) <- paste(1:length(SWTIIresults), "Bins")
predictedValues <- subset(predictedValues, rownames(predictedValues) != "Aggregate")
predictedValues <- merge(as.data.frame(predictedValues), effort, by='row.names', all=TRUE)
rownames(predictedValues) <- predictedValues$Row.names
predictedValues$Row.names <- NULL
r2Vals <- apply(subset(predictedValues, select = -Effort), 2, function (x) {
dat <- data.frame(Predicted = x, Effort = predictedValues$Effort)
model <- lm(Effort ~ ., data = dat)
summary(model)$r.squared
})
r2Vals <- round(r2Vals, digits = 5)
r2Vals <- paste("r2:", r2Vals, sep = "")
predictedValues <- gather(predictedValues, numBins, Predicted, -Effort)
r2data_txt <- data.frame(label = as.character(r2Vals), numBins = paste(1:length(SWTIIresults), "Bins"))
ggplot(predictedValues, aes(x = Predicted, y = Effort)) +
geom_point(shape = 1) + stat_smooth(method = "lm",  se = FALSE, fullrange = TRUE) +
facet_grid(. ~ numBins) + xlab("Predicted Effort") +
ylab("Actual Effort") + ggtitle("Model Accuracy") +
theme(panel.spacing = unit(1, "lines")) +
geom_text(data = r2data_txt, size = 3, mapping = aes(x = -Inf, y = -Inf, label = label),
hjust = -0.1, vjust = -1)
# Plots cross validation results
MSEdata <- data.frame(NumBins = 1:length(SWTIIresults), MSE = sapply(SWTIIresults, function(x) { x$MSE }))
MMREdata <- data.frame(NumBins = 1:length(SWTIIresults), MMRE = sapply(SWTIIresults, function(x) { x$MMRE }))
PREDdata <- data.frame(NumBins = 1:length(SWTIIresults), PRED = sapply(SWTIIresults, function(x) { x$PRED }))
ggplot(data = MSEdata, aes(x = NumBins, y = log(MSE))) + geom_point(shape = 1) + geom_line() + ggtitle("MSE Results")
ggplot(data = MMREdata, aes(x = NumBins, y = MMRE)) + geom_point(shape = 1) + geom_line() + ggtitle("MMRE Results")
ggplot(data = PREDdata, aes(x = NumBins, y = PRED)) + geom_point(shape = 1) + geom_line() + ylab("PRED(0.25)") + ggtitle("PRED(0.25) Results")
# Plot marginal posteriors for each parameter
for (i in 1:length(SWTIIresults)) {
marginalData <- SWTIIresults[[i]]$model[, !names(SWTIIresults[[i]]$model) %in% c("(Intercept)", "sigma")]
if (is.vector(marginalData)) {
marginalData <- data.frame(l1 = marginalData)
}
for (col in names(marginalData)) {
mean <- mean(marginalData[, col])
sd <- sd(marginalData[, col])
peakDensity <- dnorm(mean, mean, sd)
g <- ggplot(marginalData, aes(x=marginalData[, col])) +
geom_histogram(aes(y = ..density..), binwidth = 1, colour="black", fill="white") +
stat_function(fun = dnorm, args = list(mean = mean(mean), sd = sd)) +
xlab(col) + ggtitle("Posterior Weight", paste(col, i, "bins")) +
annotate("text", x = mean, y = peakDensity * ((sd/3 *.1) + 1), label = paste("mean:", round(mean,2),",", "sd:", round(sd,2)))
print(g)
}
}
source('~/Google Drive/ResearchSpace/Research Projects/UMLx/data/TransactionWeighting/transaction_regression_calibration.R')
knitr::opts_chunk$set(echo = TRUE)
source("transaction_regression_calibration.R")
library(tidyverse)
combined <- combineData("./Transaction Data")
effort <- read.csv("effortValues.csv")
rownames(effort) <- effort$Project
effort$Project <- NULL
SWTIIresults <- performSearch("./Transaction Data", effort, c("TL", "TD", "DETs"))
source('~/Google Drive/ResearchSpace/Research Projects/UMLx/data/TransactionWeighting/transaction_regression_calibration.R')
knitr::opts_chunk$set(echo = TRUE)
source("transaction_regression_calibration.R")
library(tidyverse)
combined <- combineData("./Transaction Data")
effort <- read.csv("effortValues.csv")
rownames(effort) <- effort$Project
effort$Project <- NULL
SWTIIresults <- performSearch("./Transaction Data", effort, c("TL", "TD", "DETs"))
knitr::opts_chunk$set(echo = TRUE)
source("transaction_regression_calibration.R")
library(tidyverse)
combined <- combineData("./Transaction Data")
effort <- read.csv("effortValues.csv")
rownames(effort) <- effort$Project
effort$Project <- NULL
SWTIIresults <- performSearch("./Transaction Data", effort, c("TL", "TD", "DETs"))
knitr::opts_chunk$set(echo = TRUE)
source("transaction_regression_calibration.R")
library(tidyverse)
combined <- combineData("./Transaction Data")
effort <- read.csv("effortValues.csv")
rownames(effort) <- effort$Project
effort$Project <- NULL
SWTIIresults <- performSearch("./Transaction Data", effort, c("TL", "TD", "DETs"))
knitr::opts_chunk$set(echo = TRUE)
source("transaction_regression_calibration.R")
library(tidyverse)
combined <- combineData("./Transaction Data")
effort <- read.csv("effortValues.csv")
rownames(effort) <- effort$Project
effort$Project <- NULL
SWTIIresults <- performSearch("./Transaction Data", effort, c("TL", "TD", "DETs"))
knitr::opts_chunk$set(echo = TRUE)
source("transaction_regression_calibration.R")
library(tidyverse)
combined <- combineData("./Transaction Data")
effort <- read.csv("effortValues.csv")
rownames(effort) <- effort$Project
effort$Project <- NULL
print(effort)
SWTIIresults <- performSearch("./Transaction Data", effort, c("TL", "TD", "DETs"))
source('~/Google Drive/ResearchSpace/Research Projects/UMLx/data/TransactionWeighting/transaction_regression_calibration.R')
source('~/Google Drive/ResearchSpace/Research Projects/UMLx/data/TransactionWeighting/transaction_regression_calibration.R')
knitr::opts_chunk$set(echo = TRUE)
source("transaction_regression_calibration.R")
library(tidyverse)
combined <- combineData("./Transaction Data")
effort <- read.csv("effortValues.csv")
rownames(effort) <- effort$Project
effort$Project <- NULL
print(effort)
SWTIIresults <- performSearch("./Transaction Data", effort, c("TL", "TD", "DETs"))
knitr::opts_chunk$set(echo = TRUE)
source("transaction_regression_calibration.R")
library(tidyverse)
combined <- combineData("./Transaction Data")
effort <- read.csv("effortValues.csv")
rownames(effort) <- effort$Project
effort$Project <- NULL
print(effort)
SWTIIresults <- performSearch("./Transaction Data", effort, c("TL", "TD", "DETs"))
knitr::opts_chunk$set(echo = TRUE)
source("transaction_regression_calibration.R")
library(tidyverse)
combined <- combineData("./Transaction Data")
effort <- read.csv("effortValues.csv")
rownames(effort) <- effort$Project
effort$Project <- NULL
print(effort)
SWTIIresults <- performSearch("./Transaction Data", effort, c("TL", "TD", "DETs"))
knitr::opts_chunk$set(echo = TRUE)
source("transaction_regression_calibration.R")
library(tidyverse)
combined <- combineData("./Transaction Data")
effort <- read.csv("effortValues.csv")
rownames(effort) <- effort$Project
effort$Project <- NULL
print(effort)
SWTIIresults <- performSearch("./Transaction Data", effort, c("TL", "TD", "DETs"))
knitr::opts_chunk$set(echo = TRUE)
source("transaction_regression_calibration.R")
library(tidyverse)
combined <- combineData("./Transaction Data")
effort <- read.csv("effortValues.csv")
rownames(effort) <- effort$Project
effort$Project <- NULL
print(effort)
SWTIIresults <- performSearch("./Transaction Data", effort, c("TL", "TD", "DETs"))
source('~/Google Drive/ResearchSpace/Research Projects/UMLx/data/TransactionWeighting/transaction_regression_calibration.R')
knitr::opts_chunk$set(echo = TRUE)
source("transaction_regression_calibration.R")
library(tidyverse)
combined <- combineData("./Transaction Data")
effort <- read.csv("effortValues.csv")
rownames(effort) <- effort$Project
effort$Project <- NULL
print(effort)
SWTIIresults <- performSearch("./Transaction Data", effort, c("TL", "TD", "DETs"))
knitr::opts_chunk$set(echo = TRUE)
source("transaction_regression_calibration.R")
library(tidyverse)
combined <- combineData("./Transaction Data")
effort <- read.csv("effortValues.csv")
rownames(effort) <- effort$Project
effort$Project <- NULL
print(effort)
SWTIIresults <- performSearch("./Transaction Data", effort, c("TL", "TD", "DETs"))
knitr::opts_chunk$set(echo = TRUE)
source("transaction_regression_calibration.R")
library(tidyverse)
combined <- combineData("./Transaction Data")
effort <- read.csv("effortValues.csv")
rownames(effort) <- effort$Project
effort$Project <- NULL
print(effort)
SWTIIresults <- performSearch("./Transaction Data", effort, c("TL", "TD", "DETs"))
knitr::opts_chunk$set(echo = TRUE)
source("transaction_regression_calibration.R")
library(tidyverse)
#combined <- combineData("./Transaction Data")
effort <- read.csv("effortValues.csv")
rownames(effort) <- effort$Project
effort$Project <- NULL
print(effort)
SWTIIresults <- performSearch("./Transaction Data", effort, c("TL", "TD", "DETs"))
knitr::opts_chunk$set(echo = TRUE)
source("transaction_regression_calibration.R")
library(tidyverse)
#combined <- combineData("./Transaction Data")
effort <- read.csv("effortValues.csv")
rownames(effort) <- effort$Project
effort$Project <- NULL
print(effort)
SWTIIresults <- performSearch("./Transaction Data", effort, c("TL", "TD", "DETs"))
knitr::opts_chunk$set(echo = TRUE)
source("transaction_regression_calibration.R")
library(tidyverse)
#combined <- combineData("./Transaction Data")
effort <- read.csv("effortValues.csv")
rownames(effort) <- effort$Project
effort$Project <- NULL
print(effort)
SWTIIresults <- performSearch("./Transaction Data", effort, c("TL", "TD", "DETs"))
knitr::opts_chunk$set(echo = TRUE)
source("transaction_regression_calibration.R")
library(tidyverse)
#combined <- combineData("./Transaction Data")
effort <- read.csv("effortValues.csv")
rownames(effort) <- effort$Project
effort$Project <- NULL
print(effort)
SWTIIresults <- performSearch("./Transaction Data", effort, c("TL", "TD", "DETs"))
