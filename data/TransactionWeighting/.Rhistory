sd <- apply(marginalData, 2, sd)
labels <- paste(colnames(marginalData), ":", round(means,2),",", round(sd,2))
print(labels)
colnames(marginalData) <- labels
gatheredData <- gather(marginalData, level, value)
normaldens <- ddply(gatheredData, "level", function(df) {
values <- seq(min(df$value), max(df$value), length = 100)
data.frame(
value = values,
density = dnorm(values, mean(df$value), sd(df$value))
)
})
ggplot(gatheredData, aes(value))  +
geom_histogram(aes(y = ..density..), binwidth = 1, colour="black", fill="white") +
geom_line(aes(y = density), data = normaldens, colour = "red") +
facet_wrap(~ level, scales = "free", nrow=2) + xlab("Posterior Estimates") +ylab("Density")
marginalData <- as.data.frame(SWTIIIresults[[SWTIIIModelSelector]]$model[, "normFactor"])
colnames(marginalData) <- c("Effort Adj.")
#print(marginalData)
#for (col in names(marginalData)) {
means <- apply(marginalData, 2, mean)
sd <- apply(marginalData, 2, sd)
labels <- paste(colnames(marginalData), ":", round(means,2),",", round(sd,2))
print(labels)
colnames(marginalData) <- labels
gatheredData <- gather(marginalData, level, value)
normaldens <- ddply(gatheredData, "level", function(df) {
values <- seq(min(df$value), max(df$value), length = 100)
data.frame(
value = values,
density = dnorm(values, mean(df$value), sd(df$value))
)
})
ggplot(gatheredData, aes(value))  +
geom_histogram(aes(y = ..density..), colour="black", fill="white") +
geom_line(aes(y = density), data = normaldens, colour = "red") +
facet_wrap(~ level, scales = "free", nrow=2) + xlab("Posterior Estimates") +ylab("Density")
marginalData <- SWTIIIresults[[SWTIIIModelSelector]]$model[, !names(SWTIIIresults[[SWTIIIModelSelector]]$model) %in% c("(Intercept)", "sigma", "normFactor", "sd")]
#for (col in names(marginalData)) {
means <- apply(marginalData, 2, mean)
sd <- apply(marginalData, 2, sd)
labels <- paste(colnames(marginalData), ":", round(means,2),",", round(sd,2))
print(labels)
colnames(marginalData) <- labels
gatheredData <- gather(marginalData, level, value)
normaldens <- ddply(gatheredData, "level", function(df) {
values <- seq(min(df$value), max(df$value), length = 100)
data.frame(
value = values,
density = dnorm(values, mean(df$value), sd(df$value))
)
})
ggplot(gatheredData, aes(value))  +
geom_histogram(aes(y = ..density..), colour="black", fill="white") +
geom_line(aes(y = density), data = normaldens, colour = "red") +
facet_wrap(~ level, scales = "free", nrow=2) + xlab("Posterior Estimates") +ylab("Density")
#geom_text(
#data    = dat_text,
#mapping = aes(x = 0, y = 0, label = label),
#hjust   = -0.1,
#vjust   = -1
#)
#draw example of norm factor
marginalData <- as.data.frame(SWTIIIresults[[SWTIIIModelSelector]]$model[, "normFactor"])
colnames(marginalData) <- c("Effort Adj.")
#print(marginalData)
#for (col in names(marginalData)) {
means <- apply(marginalData, 2, mean)
sd <- apply(marginalData, 2, sd)
labels <- paste(colnames(marginalData), ":", round(means,2),",", round(sd,2))
print(labels)
colnames(marginalData) <- labels
gatheredData <- gather(marginalData, level, value)
normaldens <- ddply(gatheredData, "level", function(df) {
values <- seq(min(df$value), max(df$value), length = 100)
data.frame(
value = values,
density = dnorm(values, mean(df$value), sd(df$value))
)
})
ggplot(gatheredData, aes(value))  +
geom_histogram(aes(y = ..density..), colour="black", fill="white") +
geom_line(aes(y = density), data = normaldens, colour = "red") +
facet_wrap(~ level, scales = "free", nrow=2) + xlab("Posterior Estimates") +ylab("Density")
#draw example of posterior estimates
marginalData <- SWTIIIresults[[SWTIIIModelSelector]]$model[, !names(SWTIIIresults[[SWTIIIModelSelector]]$model) %in% c("(Intercept)", "sigma", "sd")]
#for (col in names(marginalData)) {
means <- apply(marginalData, 2, mean)
sd <- apply(marginalData, 2, sd)
labels <- paste(colnames(marginalData), ":", round(means,2),",", round(sd,2))
print(labels)
colnames(marginalData) <- labels
gatheredData <- gather(marginalData, level, value)
normaldens <- ddply(gatheredData, "level", function(df) {
values <- seq(min(df$value), max(df$value), length = 100)
data.frame(
value = values,
density = dnorm(values, mean(df$value), sd(df$value))
)
})
ggplot(gatheredData, aes(value))  +
geom_histogram(aes(y = ..density..), colour="black", fill="white") +
geom_line(aes(y = density), data = normaldens, colour = "red") +
facet_wrap(~ level, scales = "free", nrow=2) + xlab("Posterior Estimates") +ylab("Density")
#draw example of posterior estimates
marginalData <- SWTIIIresults[[SWTIIIModelSelector]]$model[, !names(SWTIIIresults[[SWTIIIModelSelector]]$model) %in% c("(Intercept)", "sigma", "sd")]
View(marginalData)
View(marginalData)
marginalData <- SWTIIIresults[[SWTIIIModelSelector]]$model[, !names(SWTIIIresults[[SWTIIIModelSelector]]$model) %in% c("(Intercept)", "sigma", "sd")]
colnames(marginalData) <- c(paste("l", 1:7, sep=""), "Effort Adj.")
#for (col in names(marginalData)) {
means <- apply(marginalData, 2, mean)
sd <- apply(marginalData, 2, sd)
labels <- paste(colnames(marginalData), ":", round(means,2),",", round(sd,2))
print(labels)
colnames(marginalData) <- labels
gatheredData <- gather(marginalData, level, value)
normaldens <- ddply(gatheredData, "level", function(df) {
values <- seq(min(df$value), max(df$value), length = 100)
data.frame(
value = values,
density = dnorm(values, mean(df$value), sd(df$value))
)
})
ggplot(gatheredData, aes(value))  +
geom_histogram(aes(y = ..density..), colour="black", fill="white") +
geom_line(aes(y = density), data = normaldens, colour = "red") +
facet_wrap(~ level, scales = "free", nrow=2) + xlab("Posterior Estimates") +ylab("Density")
#geom_text(
#data    = dat_text,
#mapping = aes(x = 0, y = 0, label = label),
#hjust   = -0.1,
#vjust   = -1
#)
#draw example of posterior estimates
marginalData <- SWTIIIresults[[SWTIIIModelSelector]]$model[, !names(SWTIIIresults[[SWTIIIModelSelector]]$model) %in% c("(Intercept)", "sigma", "sd")]
colnames(marginalData) <- c(paste("l", 1:7, sep=""), "Effort Adj.")
#for (col in names(marginalData)) {
means <- apply(marginalData, 2, mean)
sd <- apply(marginalData, 2, sd)
labels <- paste(colnames(marginalData), ":", round(means,2),",", round(sd,2))
print(labels)
colnames(marginalData) <- labels
gatheredData <- gather(marginalData, level, value)
normaldens <- ddply(gatheredData, "level", function(df) {
values <- seq(min(df$value), max(df$value), length = 100)
data.frame(
value = values,
density = dnorm(values, mean(df$value), sd(df$value))
)
})
ggplot(gatheredData, aes(value))  +
geom_histogram(aes(y = ..density..), colour="black", fill="white") +
geom_line(aes(y = density), data = normaldens, colour = "red") +
facet_wrap(~ level, scales = "free", nrow=3) + xlab("Posterior Estimates") +ylab("Density")
#geom_text(
#data    = dat_text,
#mapping = aes(x = 0, y = 0, label = label),
#hjust   = -0.1,
#vjust   = -1
#)
ggplot(modelData, aes(x=UseCase_Num)) +
geom_histogram(binwidth=5, colour="black", fill="gray") +
xlab("Number of Use Case") + ylab("Number of Projects") + ggtitle("Project Distribution - Use Case")+
theme_bw(base_size=20)
ggplot(modelData, aes(x=KSLOC)) +
geom_histogram(binwidth=0.5, colour="black", fill="gray") +
xlab("KSLOC") + ylab("Number of Projects") + ggtitle("Project Distribution - SLOC") +
theme_bw(base_size=20)
ggplot(modelData, aes(x=Personnel)) +
geom_histogram(binwidth=1, colour="black", fill="gray") +
xlab("Personnel") + ylab("Number of Projects") + ggtitle("Project Distribution - Personnel") +
theme_bw(base_size=20)
ggplot(modelData, aes(x=Effort)) +
geom_histogram(binwidth=300, colour="black", fill="gray") +
xlab("Effort") + ylab("Number of Projects") + ggtitle("Project Distribution - Effort") +
theme_bw(base_size=20)
unique.levels <- sort(unique(modelData$Type))
count <- table(modelData$Type)
count.modelData <- data.frame(unique.levels, count)
ggplot(count.modelData, aes(unique.levels, count)) +
geom_bar(stat="identity", colour="black", fill="gray") +
xlab("Project Type") + ylab("Number of Projects") + ggtitle("Project Distribution - Type") +
theme_bw(base_size=20)
#effort$Project <- NULL
ggplot(combined, aes(x=TL)) +
geom_histogram(aes(y = ..density..), binwidth=1, colour="black", fill="white") +
#stat_function(fun = dnorm, args = list(mean = mean(combined$TL), sd(combined$TL))) +
stat_function(fun = dgamma, args = list(shape=6.543586, rate=1.160249)) +
xlab("TL") + ggtitle("Combined TL Data Summary") +
annotate("text", x=14, y=0.25, label= "Gamma: shape=6.54, rate=1.16; KS: p-value < 0.01")+
theme_bw()
ggplot(combined, aes(x=TD)) +
geom_histogram(aes(y = ..density..), binwidth=0.5, colour="black", fill="white") +
#stat_function(fun = dnorm, args = list(mean = mean(combined$TD), sd(combined$TD))) +
stat_function(fun = dgamma, args = list(shape=3.6492150, rate=0.6985361 )) +
annotate("text", x=16, y=0.18, label= "Gamma: shape=3.65, rate=0.70; KS: p-value < 0.01")+
xlab("TD") + ggtitle("Combined TD Data Summary") +
theme_bw()
ggplot(combined, aes(x=DETs)) +
geom_histogram(aes(y = ..density..), binwidth=1, colour="black", fill="white") +
#stat_function(fun = dnorm, args = list(mean = mean(combined$DETs), sd(combined$DETs))) +
stat_function(fun = dgamma, args = list(shape=1.6647412, rate=0.1691911)) +
annotate("text", x=57, y=0.15, label= "Gamma: shape=1.66, rate=0.17; KS: p-value < 0.01")+
xlab("DETs") + ggtitle("Combined DETs Data Summary") +
theme_bw()
ggplot(combined, aes(x=TL)) +
geom_histogram(aes(y = ..density..), binwidth=1, colour="black", fill="white") +
#stat_function(fun = dnorm, args = list(mean = mean(combined$TL), sd(combined$TL))) +
stat_function(fun = dgamma, args = list(shape=6.543586, rate=1.160249)) +
xlab("TL") + ggtitle("Combined TL Data Summary") +
annotate("text", x=14, y=0.25, label= "Gamma: shape=6.54, rate=1.16; KS: p-value < 0.01")+
theme_bw(base_size=20)
ggplot(combined, aes(x=TL)) +
geom_histogram(aes(y = ..density..), binwidth=1, colour="black", fill="white") +
#stat_function(fun = dnorm, args = list(mean = mean(combined$TL), sd(combined$TL))) +
stat_function(fun = dgamma, args = list(shape=6.543586, rate=1.160249)) +
xlab("TL") + ggtitle("Combined TL Data Summary") +
annotate("text", x=14, y=0.25, label= "Gamma: shape=6.54, rate=1.16; KS: p-value < 0.01")+
theme_bw(base_size=15)
ggplot(combined, aes(x=TL)) +
geom_histogram(aes(y = ..density..), binwidth=1, colour="black", fill="white") +
#stat_function(fun = dnorm, args = list(mean = mean(combined$TL), sd(combined$TL))) +
stat_function(fun = dgamma, args = list(shape=6.543586, rate=1.160249)) +
xlab("TL") + ylab("Density")+ ggtitle("Combined TL Data Summary") +
annotate("text", x=14, y=0.25, label= "Gamma: shape=6.54, rate=1.16; KS: p-value < 0.01")+
theme_bw(base_size=18)
ggplot(combined, aes(x=TL)) +
geom_histogram(aes(y = ..density..), binwidth=1, colour="black", fill="white") +
#stat_function(fun = dnorm, args = list(mean = mean(combined$TL), sd(combined$TL))) +
stat_function(fun = dgamma, args = list(shape=6.543586, rate=1.160249)) +
xlab("TL") + ylab("Density")+ ggtitle("Combined TL Data Summary") +
annotate("text", x=14, y=0.25, label= "Gamma: shape=6.54, rate=1.16; KS: p-value < 0.01")+
theme_bw(base_size=16)
ggplot(combined, aes(x=TL)) +
geom_histogram(aes(y = ..density..), binwidth=1, colour="black", fill="white") +
#stat_function(fun = dnorm, args = list(mean = mean(combined$TL), sd(combined$TL))) +
stat_function(fun = dgamma, args = list(shape=6.543586, rate=1.160249)) +
xlab("TL") + ylab("Density")+ ggtitle("Combined TL Data Summary") +
annotate("text", x=14, y=0.25, label= "Gamma: shape=6.54, rate=1.16; KS: p-value < 0.01")+
theme_bw(base_size=15)
projects <- rownames(effortData)
View(effort)
#n = 6
effortData = effort
projects <- rownames(effortData)
for (project in projects) {
filePath <- transactionFiles[project, "transaction_file"]
if (!file.exists(filePath)) {
print("file doesn't exist")
next
}
fileData <- read.csv(filePath)
fileData <- data.frame(apply(subset(fileData, select = c("TL", "TD", "DETs")), 2, function(x) as.numeric(x)))
fileData <- na.omit(fileData)
if(nrow(fileData) < 1){
next
}
numofTrans = nrow(fileData)
classifiedData <- classify(fileData, cutPoints)
regressionData[project, ] <- c(classifiedData, effortData[project, "Effort"])
}
View(transactionFiles)
View(transactionFiles)
projects <- rownames(effortData)
print(projects)
projects <- rownames(effortData)
for (project in projects) {
filePath <- transactionFiles[project, "transaction_file"]
if (!file.exists(filePath)) {
print("file doesn't exist")
next
}
fileData <- read.csv(filePath)
fileData <- data.frame(apply(subset(fileData, select = c("TL", "TD", "DETs")), 2, function(x) as.numeric(x)))
fileData <- na.omit(fileData)
if(nrow(fileData) < 1){
next
}
numofTrans = nrow(fileData)
classifiedData <- classify(fileData, cutPoints)
regressionData[project, ] <- c(classifiedData, effortData[project, "Effort"])
}
for (project in projects) {
filePath <- transactionFiles[project, "transaction_file"]
print(filePath)
if (!file.exists(filePath)) {
print("file doesn't exist")
next
}
fileData <- read.csv(filePath)
fileData <- data.frame(apply(subset(fileData, select = c("TL", "TD", "DETs")), 2, function(x) as.numeric(x)))
fileData <- na.omit(fileData)
if(nrow(fileData) < 1){
next
}
numofTrans = nrow(fileData)
classifiedData <- classify(fileData, cutPoints)
regressionData[project, ] <- c(classifiedData, effortData[project, "Effort"])
}
knitr::opts_chunk$set(echo = TRUE)
source("transaction_weights_calibration4.R")
source("comparison_between_size_metrics.R")
library(jsonlite)
library(reshape)
library(tidyverse)
library(fitdistrplus)
library(egg)
library(gridExtra)
library(plyr)
cutsAsVec <- function(x) {
ret <- c("Cut Points:")
for (row in rownames(x)) {
cutPoints <- round(x[row, ], digits = 1)
ret <- c(ret, paste(row,":", paste(cutPoints, collapse = ", ")))
}
ret
}
modelData <- read.csv("modelEvaluations-9-13-1.csv")
modelData$Project <- as.character(modelData$Project)
modelData$transaction_file <- as.character(modelData$transaction_file)
effort <- subset(modelData, select=c("Effort"))
transactionFiles <- subset(modelData, select=c("transaction_file"))
rownames(effort) <- modelData$Project
rownames(transactionFiles) <- modelData$Project
combined <- combineData(transactionFiles)
modelData <- read.csv("modelEvaluations-9-13-1.csv")
modelData$Project <- as.character(modelData$Project)
modelData$transaction_file <- as.character(modelData$transaction_file)
effort <- subset(modelData, select=c("Effort"))
transactionFiles <- subset(modelData, select=c("transaction_file"))
rownames(effort) <- modelData$Project
rownames(transactionFiles) <- modelData$Project
combined <- combineData(transactionFiles)
modelData <- read.csv("modelEvaluations-9-13-1.csv")
modelData$Project <- as.character(modelData$Project)
modelData$transaction_file <- as.character(modelData$transaction_file)
effort <- subset(modelData, select=c("Effort"))
transactionFiles <- subset(modelData, select=c("transaction_file"))
rownames(effort) <- modelData$Project
rownames(transactionFiles) <- modelData$Project
combined <- combineData(transactionFiles)
#n = 6
effortData = effort
for (project in projects) {
filePath <- transactionFiles[project, "transaction_file"]
print(filePath)
if (!file.exists(filePath)) {
print("file doesn't exist")
next
}
fileData <- read.csv(filePath)
fileData <- data.frame(apply(subset(fileData, select = c("TL", "TD", "DETs")), 2, function(x) as.numeric(x)))
fileData <- na.omit(fileData)
if(nrow(fileData) < 1){
next
}
numofTrans = nrow(fileData)
classifiedData <- classify(fileData, cutPoints)
regressionData[project, ] <- c(classifiedData, effortData[project, "Effort"])
}
print(numofTrans)
numOfTrans <- 0
for (project in projects) {
filePath <- transactionFiles[project, "transaction_file"]
print(filePath)
if (!file.exists(filePath)) {
print("file doesn't exist")
next
}
fileData <- read.csv(filePath)
fileData <- data.frame(apply(subset(fileData, select = c("TL", "TD", "DETs")), 2, function(x) as.numeric(x)))
fileData <- na.omit(fileData)
if(nrow(fileData) < 1){
next
}
numofTrans = nrow(fileData)
classifiedData <- classify(fileData, cutPoints)
regressionData[project, ] <- c(classifiedData, effortData[project, "Effort"])
}
print(numofTrans)
numOfTrans <- 0
for (project in projects) {
filePath <- transactionFiles[project, "transaction_file"]
print(filePath)
if (!file.exists(filePath)) {
print("file doesn't exist")
next
}
fileData <- read.csv(filePath)
fileData <- data.frame(apply(subset(fileData, select = c("TL", "TD", "DETs")), 2, function(x) as.numeric(x)))
fileData <- na.omit(fileData)
if(nrow(fileData) < 1){
next
}
numOfTrans = nrow(fileData)
classifiedData <- classify(fileData, cutPoints)
regressionData[project, ] <- c(classifiedData, effortData[project, "Effort"])
}
print(numofTrans)
numOfTrans <- 0
for (project in projects) {
filePath <- transactionFiles[project, "transaction_file"]
print(filePath)
if (!file.exists(filePath)) {
print("file doesn't exist")
next
}
fileData <- read.csv(filePath)
fileData <- data.frame(apply(subset(fileData, select = c("TL", "TD", "DETs")), 2, function(x) as.numeric(x)))
fileData <- na.omit(fileData)
if(nrow(fileData) < 1){
next
}
numOfTrans = nrow(fileData)
classifiedData <- classify(fileData, cutPoints)
regressionData[project, ] <- c(classifiedData, effortData[project, "Effort"])
}
print(numOfTrans)
numOfTrans <- 0
for (project in projects) {
filePath <- transactionFiles[project, "transaction_file"]
print(filePath)
if (!file.exists(filePath)) {
print("file doesn't exist")
next
}
fileData <- read.csv(filePath)
fileData <- data.frame(apply(subset(fileData, select = c("TL", "TD", "DETs")), 2, function(x) as.numeric(x)))
fileData <- na.omit(fileData)
if(nrow(fileData) < 1){
next
}
numOfTrans = numOfTrans + nrow(fileData)
classifiedData <- classify(fileData, cutPoints)
regressionData[project, ] <- c(classifiedData, effortData[project, "Effort"])
}
print(numOfTrans)
filePath <- transactionFiles[project, "transaction_file"]
print(filePath)
if (!file.exists(filePath)) {
print("file doesn't exist")
next
}
fileData <- read.csv(filePath)
fileData <- data.frame(apply(subset(fileData, select = c("TL", "TD", "DETs")), 2, function(x) as.numeric(x)))
fileData <- na.omit(fileData)
if(nrow(fileData) < 1){
next
}
View(fileData)
View(fileData)
numOfTrans <- 0
for (project in projects) {
filePath <- transactionFiles[project, "transaction_file"]
print(filePath)
if (!file.exists(filePath)) {
print("file doesn't exist")
next
}
fileData <- read.csv(filePath)
fileData <- data.frame(apply(subset(fileData, select = c("TL", "TD", "DETs")), 2, function(x) as.numeric(x)))
fileData <- na.omit(fileData)
print(nrow(fileData))
if(nrow(fileData) < 1){
next
}
numOfTrans = numOfTrans + nrow(fileData)
classifiedData <- classify(fileData, cutPoints)
regressionData[project, ] <- c(classifiedData, effortData[project, "Effort"])
}
print(numOfTrans)
numOfTrans <- 0
for (project in projects) {
filePath <- transactionFiles[project, "transaction_file"]
print(filePath)
if (!file.exists(filePath)) {
print("file doesn't exist")
next
}
fileData <- read.csv(filePath)
fileData <- data.frame(apply(subset(fileData, select = c("TL", "TD", "DETs")), 2, function(x) as.numeric(x)))
fileData <- na.omit(fileData)
print(fileData)
if(nrow(fileData) < 1){
next
}
numOfTrans = numOfTrans + nrow(fileData)
classifiedData <- classify(fileData, cutPoints)
regressionData[project, ] <- c(classifiedData, effortData[project, "Effort"])
}
print(numOfTrans)
numOfTrans <- 0
for (project in projects) {
filePath <- transactionFiles[project, "transaction_file"]
print(filePath)
if (!file.exists(filePath)) {
print("file doesn't exist")
next
}
fileData <- read.csv(filePath)
fileData <- data.frame(apply(subset(fileData, select = c("TL", "TD", "DETs")), 2, function(x) as.numeric(x)))
#fileData <- na.omit(fileData)
print(fileData)
if(nrow(fileData) < 1){
next
}
numOfTrans = numOfTrans + nrow(fileData)
#classifiedData <- classify(fileData, cutPoints)
#regressionData[project, ] <- c(classifiedData, effortData[project, "Effort"])
}
print(numOfTrans)
