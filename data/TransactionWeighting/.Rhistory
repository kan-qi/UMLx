result = ks.test(vec, y)
print("gamma goodness of fit")
print(result)
parametric-test <- pparametricKStest(vec, shape, rate, result[["statistic"]])
print("parametric test")
print(parametric-test)
cutPoints <- qgamma(quantiles, shape, rate, lower.tail = TRUE)
cutPoints <- c(-Inf, cutPoints, Inf)
#print(cutPoints)
#par(mar = rep(2, 4))
#plot(fit.gamma)
}
knitr::opts_chunk$set(echo = TRUE)
source("transaction_weights_calibration4.R")
source("comparison_between_size_metrics.R")
library(jsonlite)
library(reshape)
library(tidyverse)
library(fitdistrplus)
library(egg)
library(gridExtra)
library(plyr)
cutsAsVec <- function(x) {
ret <- c("Cut Points:")
for (row in rownames(x)) {
cutPoints <- round(x[row, ], digits = 1)
ret <- c(ret, paste(row,":", paste(cutPoints, collapse = ", ")))
}
ret
}
modelData <- read.csv("modelEvaluations-9-13-1.csv")
>>>>>>> f98318d8abf4bdfd4a0e02cac1ce966d2d1c13b7
modelData$Project <- as.character(modelData$Project)
modelData$transaction_file <- as.character(modelData$transaction_file)
effort <- subset(modelData, select=c("Effort"))
transactionFiles <- subset(modelData, select=c("transaction_file"))
rownames(effort) <- modelData$Project
rownames(transactionFiles) <- modelData$Project
combined <- combineData(transactionFiles)
<<<<<<< HEAD
save.image("~/Research Projects/UMLx/data/TransactionWeighting/10-2.RData")
ist <- combined[, "TD"]
x.gam.cut<-cut(dist,breaks=c(0,3,6,9,12,Inf)) ##binning data
table(x.gam.cut) ## binned data table
dist <- combined[, "TD"]
x.gam.cut<-cut(dist,breaks=c(0,3,6,9,12,Inf)) ##binning data
table(x.gam.cut) ## binned data table
fit.gamma <- fitdist(dist, distr = "gamma", method = "mle", lower = c(0, 0))
# Check result
a.est = coefficients(fit.gamma)["shape"]
l.est = coefficients(fit.gamma)["rate"]
num_of_samples = length(dist)
(pgamma(3,shape=a.est,rate=l.est)-pgamma(0,shape=a.est,rate=l.est))*num_of_samples
(pgamma(6,shape=a.est,rate=l.est)-pgamma(3,shape=a.est,rate=l.est))*num_of_samples
(pgamma(9,shape=a.est,rate=l.est)-pgamma(6,shape=a.est,rate=l.est))*num_of_samples
(pgamma(12,shape=a.est,rate=l.est)-pgamma(9,shape=a.est,rate=l.est))*num_of_samples
(pgamma(Inf,shape=a.est,rate=l.est)-pgamma(12,shape=a.est,rate=l.est))*num_of_samples
p1 = (pgamma(3,shape=a.est,rate=l.est)-pgamma(0,shape=a.est,rate=l.est))*num_of_samples
p2 = (pgamma(6,shape=a.est,rate=l.est)-pgamma(3,shape=a.est,rate=l.est))*num_of_samples
p3 = (pgamma(9,shape=a.est,rate=l.est)-pgamma(6,shape=a.est,rate=l.est))*num_of_samples
p4 = (pgamma(12,shape=a.est,rate=l.est)-pgamma(9,shape=a.est,rate=l.est))*num_of_samples
p5 = (pgamma(Inf,shape=a.est,rate=l.est)-pgamma(12,shape=a.est,rate=l.est))*num_of_samples
f.ex<-c(p1, p2, p3, p4, p5) ## expected
f.os<-vector()
for(i in 1:5) f.os[i]<- table(x.gam.cut)[[i]] ## empirical frequencies
X2<-sum(((f.os-f.ex)^2)/f.ex) ## chi-square statistic
gdl<-5-2-1 ## degrees of freedom
1-pchisq(X2,gdl) ## p-value
f.ex<-c(p1, p2, p3, p4, p5) ## expected frequencies vector
f.os<-vector()
for(i in 1:5) f.os[i]<- table(x.gam.cut)[[i]] ## empirical frequencies
dist <- combined[, "TD"]
x.gam.cut<-cut(dist,breaks=c(0,3,6,9,12,Inf)) ##binning data
table(x.gam.cut) ## binned data table
fit.gamma <- fitdist(dist, distr = "gamma", method = "mme", lower = c(0, 0))
# Check result
a.est = coefficients(fit.gamma)["shape"]
l.est = coefficients(fit.gamma)["rate"]
num_of_samples = length(dist)
#x.gam.cut
## computing expected frequencies
p1 = (pgamma(3,shape=a.est,rate=l.est)-pgamma(0,shape=a.est,rate=l.est))*num_of_samples
p2 = (pgamma(6,shape=a.est,rate=l.est)-pgamma(3,shape=a.est,rate=l.est))*num_of_samples
p3 = (pgamma(9,shape=a.est,rate=l.est)-pgamma(6,shape=a.est,rate=l.est))*num_of_samples
p4 = (pgamma(12,shape=a.est,rate=l.est)-pgamma(9,shape=a.est,rate=l.est))*num_of_samples
p5 = (pgamma(Inf,shape=a.est,rate=l.est)-pgamma(12,shape=a.est,rate=l.est))*num_of_samples
f.ex<-c(p1, p2, p3, p4, p5) ## expected frequencies vector
f.os<-vector()
for(i in 1:5) f.os[i]<- table(x.gam.cut)[[i]] ## empirical frequencies
X2<-sum(((f.os-f.ex)^2)/f.ex) ## chi-square statistic
gdl<-5-2-1 ## degrees of freedom
1-pchisq(X2,gdl) ## p-value
dist <- combined[, "TD"]
x.gam.cut<-cut(dist,breaks=c(0,3,6,9,12,Inf)) ##binning data
table(x.gam.cut) ## binned data table
fit.gamma <- fitdist(dist, distr = "gamma", method = "mge", lower = c(0, 0))
# Check result
a.est = coefficients(fit.gamma)["shape"]
l.est = coefficients(fit.gamma)["rate"]
num_of_samples = length(dist)
#x.gam.cut
## computing expected frequencies
p1 = (pgamma(3,shape=a.est,rate=l.est)-pgamma(0,shape=a.est,rate=l.est))*num_of_samples
p2 = (pgamma(6,shape=a.est,rate=l.est)-pgamma(3,shape=a.est,rate=l.est))*num_of_samples
p3 = (pgamma(9,shape=a.est,rate=l.est)-pgamma(6,shape=a.est,rate=l.est))*num_of_samples
p4 = (pgamma(12,shape=a.est,rate=l.est)-pgamma(9,shape=a.est,rate=l.est))*num_of_samples
p5 = (pgamma(Inf,shape=a.est,rate=l.est)-pgamma(12,shape=a.est,rate=l.est))*num_of_samples
f.ex<-c(p1, p2, p3, p4, p5) ## expected frequencies vector
f.os<-vector()
for(i in 1:5) f.os[i]<- table(x.gam.cut)[[i]] ## empirical frequencies
X2<-sum(((f.os-f.ex)^2)/f.ex) ## chi-square statistic
gdl<-5-2-1 ## degrees of freedom
1-pchisq(X2,gdl) ## p-value
dist <- combined[, "TD"]
x.gam.cut<-cut(dist,breaks=c(0,3,6,9,12,Inf)) ##binning data
table(x.gam.cut) ## binned data table
fit.gamma <- fitdist(dist, distr = "gamma", method = "qge", lower = c(0, 0))
# Check result
a.est = coefficients(fit.gamma)["shape"]
l.est = coefficients(fit.gamma)["rate"]
num_of_samples = length(dist)
#x.gam.cut
## computing expected frequencies
p1 = (pgamma(3,shape=a.est,rate=l.est)-pgamma(0,shape=a.est,rate=l.est))*num_of_samples
p2 = (pgamma(6,shape=a.est,rate=l.est)-pgamma(3,shape=a.est,rate=l.est))*num_of_samples
p3 = (pgamma(9,shape=a.est,rate=l.est)-pgamma(6,shape=a.est,rate=l.est))*num_of_samples
p4 = (pgamma(12,shape=a.est,rate=l.est)-pgamma(9,shape=a.est,rate=l.est))*num_of_samples
p5 = (pgamma(Inf,shape=a.est,rate=l.est)-pgamma(12,shape=a.est,rate=l.est))*num_of_samples
f.ex<-c(p1, p2, p3, p4, p5) ## expected frequencies vector
f.os<-vector()
for(i in 1:5) f.os[i]<- table(x.gam.cut)[[i]] ## empirical frequencies
X2<-sum(((f.os-f.ex)^2)/f.ex) ## chi-square statistic
gdl<-5-2-1 ## degrees of freedom
1-pchisq(X2,gdl) ## p-value
dist <- combined[, "TD"]
x.gam.cut<-cut(dist,breaks=c(0,3,6,9,12,Inf)) ##binning data
table(x.gam.cut) ## binned data table
fit.gamma <- fitdist(dist, distr = "gamma", method = "qme", lower = c(0, 0))
# Check result
a.est = coefficients(fit.gamma)["shape"]
l.est = coefficients(fit.gamma)["rate"]
num_of_samples = length(dist)
#x.gam.cut
## computing expected frequencies
p1 = (pgamma(3,shape=a.est,rate=l.est)-pgamma(0,shape=a.est,rate=l.est))*num_of_samples
p2 = (pgamma(6,shape=a.est,rate=l.est)-pgamma(3,shape=a.est,rate=l.est))*num_of_samples
p3 = (pgamma(9,shape=a.est,rate=l.est)-pgamma(6,shape=a.est,rate=l.est))*num_of_samples
p4 = (pgamma(12,shape=a.est,rate=l.est)-pgamma(9,shape=a.est,rate=l.est))*num_of_samples
p5 = (pgamma(Inf,shape=a.est,rate=l.est)-pgamma(12,shape=a.est,rate=l.est))*num_of_samples
f.ex<-c(p1, p2, p3, p4, p5) ## expected frequencies vector
f.os<-vector()
for(i in 1:5) f.os[i]<- table(x.gam.cut)[[i]] ## empirical frequencies
X2<-sum(((f.os-f.ex)^2)/f.ex) ## chi-square statistic
gdl<-5-2-1 ## degrees of freedom
1-pchisq(X2,gdl) ## p-value
=======
View(model1)
View(model1)
View(SWTIresults_II)
View(SWTIresults_II)
View(SWTIIModelParameters)
View(SWTIIModelParameters)
load("D:/Research Projects/UMLx/data/TransactionWeighting/10-2.RData")
<<<<<<< HEAD
>>>>>>> f98318d8abf4bdfd4a0e02cac1ce966d2d1c13b7
=======
load("D:/Research Projects/UMLx/data/TransactionWeighting/9-4.RData")
source('D:/Research Projects/UMLx/data/TransactionWeighting/transaction_weights_calibration4.R')
testData = effort
mmre <- abs(testData - pred)/testData
mean_value <- mean(mmre)
mean_value
>>>>>>> 1fe44868607a8dc76e3327a35b3a002751dfc82b
fit.weibull <- fitdist(dist, "weibull")
library(jsonlite)
library(reshape)
library(tidyverse)
library(fitdistrplus)
library(egg)
library(gridExtra)
library(plyr)
dist <- combined[, "TD"]
fit.weibull <- fitdist(dist, "weibull")
print(fit.weibull)
plot(fit.weibull)
plot(fit.gamma)
fit.gamma <- fitdist(dist, distr = "gamma", method = "mle", lower = c(0, 0))
plot(fit.gamma)
plot(fit.weibull)
plot(fit.gamma)
dist <- combined[, "TL"]
fit.gamma <- fitdist(dist, distr = "gamma", method = "mle", lower = c(0, 0))
fit.weibull <- fitdist(dist, "weibull")
plot(fit.weibull)
plot(fit.gamma)
View(combined)
View(combined)
dist <- combined[, "DETs"]
fit.gamma <- fitdist(dist, distr = "gamma", method = "mle", lower = c(0, 0))
fit.weibull <- fitdist(dist, "weibull")
plot(fit.weibull)
plot(fit.gamma)
plot(fit.weibull)
plot(fit.gamma)
View(combined)
View(combined)
dist <- combined[, "DETs"]
fit.lognormal <- fitdist(dist, "lognormal")
plot(fit.lognormal)
#dist <- rep(as.numeric(names(tableValues)), as.integer(tableValues/10))
dist <- rep(as.numeric(names(tableValues)), as.integer(tableValues/100))
fit.lognormal <- fitdist(dist, "lognormal")
library(fitdistrplus)
fit.lognormal <- fitdist(dist, "lognormal")
fit.lognormal <- fitdist(dist, "lognormal")
fit.weibull <- fitdist(dist, "weibull")
plot(fit.weibull)
fit.lognormal <- fitdist(dist, "lognormal")
fit.exponential <- fitdist(dist, "exponential")
require(MASS)
fit.exponential <- fitdist(dist, "exponential")
fit.exponential <- fitdistr(dist, "exponential")
plot(fit.exponential)
fit.lognormal <- fitdistr(dist, "lognormal")
plot(fit.lognormal)
fit.lognormal <- fitdistr(dist, "lnormal")
fit.lognormal <- fitdist(dist, "lnormal")
plot(fit.lognormal)
fit.lognormal <- fitdist(dist, "lnorm")
plot(fit.lognormal)
fit.gamma <- fitdist(dist, distr = "gamma", method = "mle", lower = c(0, 0))
plot(fit.gamma)
fit.gamma <- fitdist(dist, distr = "gamma", method = "mle", lower = c(0, 0))
plot(fit.gamma)
fit.weibull <- fitdist(dist, "weibull")
plot(fit.weibull)
dist <- combined[, "DETs"]
fit.gamma <- fitdist(dist, distr = "gamma", method = "mle", lower = c(0, 0))
plot(fit.gamma)
fit.weibull <- fitdist(dist, "weibull")
plot(fit.weibull)
fit.lognormal <- fitdist(dist, "lnorm")
plot(fit.lognormal)
dist <- combined[, "DETs"]
fit.gamma <- fitdist(dist, distr = "gamma", method = "mle", lower = c(0, 0))
#dist <- rep(as.numeric(names(tableValues)), as.integer(tableValues/10))
dist <- rep(as.numeric(names(tableValues)), as.integer(tableValues/100))
fit.gamma <- fitdist(dist, distr = "gamma", method = "mle", lower = c(0, 0))
plot(fit.gamma)
fit.weibull <- fitdist(dist, "weibull")
plot(fit.weibull)
fit.lognormal <- fitdist(dist, "lnorm")
plot(fit.lognormal)
fit.gamma <- fitdist(dist, distr = "gamma", method = "mle", lower = c(0, 0))
plot(fit.gamma)
fit.lognormal <- fitdist(dist, "lnorm")
plot(fit.lognormal)
fit.gamma <- fitdist(dist, distr = "gamma", method = "mle", lower = c(0, 0))
plot(fit.gamma)
fit.lognormal <- fitdist(dist, "lnorm")
plot(fit.lognormal)
fit.lognormal <- fitdist(dist, "lnorm")
plot(fit.lognormal)
fit.exponential <- fitdist(dist, "exponential")
#dist <- combined[, "DETs"]
dist <- combined[, "TL"]
fit.weibull <- fitdist(dist, "weibull")
plot(fit.weibull)
fit.lognormal <- fitdist(dist, "lnorm")
plot(fit.lognormal)
fit.gamma <- fitdist(dist, distr = "gamma", method = "mle", lower = c(0, 0))
plot(fit.gamma)
fit.lognormal <- fitdist(dist, "lnorm")
plot(fit.lognormal)
fit.lognormal <- fitdist(dist, "lnorm")
plot(fit.lognormal)
fit.gamma <- fitdist(dist, distr = "gamma", method = "mle", lower = c(0, 0))
plot(fit.gamma)
fit.lognormal <- fitdist(dist, "lnorm")
plot(fit.lognormal)
fit.gamma <- fitdist(dist, distr = "gamma", method = "mle", lower = c(0, 0))
plot(fit.gamma)
fit.lognormal <- fitdist(dist, "lnorm")
plot(fit.lognormal)
fit.weibull <- fitdist(dist, "weibull")
plot(fit.weibull)
fit.gamma <- fitdist(dist, distr = "gamma", method = "mle", lower = c(0, 0))
plot(fit.gamma)
fit.lognormal <- fitdist(dist, "lnorm")
plot(fit.lognormal)
#dist <- combined[, "DETs"]
dist <- combined[, "TL"]
dist <- combined[, "DETs"]
#dist <- rep(as.numeric(names(tableValues)), as.integer(tableValues/10))
dist <- rep(as.numeric(names(tableValues)), as.integer(tableValues/100))
fit.gamma <- fitdist(dist, distr = "gamma", method = "mle", lower = c(0, 0))
plot(fit.gamma)
dist <- combined[, "DETs"]
fit.gamma <- fitdist(dist, distr = "gamma", method = "mle", lower = c(0, 0))
fit.weibull <- fitdist(dist, "weibull")
plot(fit.weibull)
#fit.gamma <- fitdist(dist, distr = "gamma", method = "mle", lower = c(0, 0))
fit.gamma <- fitdist(dist, distr = "gamma")
plot(fit.gamma)
#fit.gamma <- fitdist(dist, distr = "gamma", method = "mle", lower = c(0, 0))
fit.gamma <- fitdist(dist, distr = "gamma")
plot(fit.gamma)
fit.weibull <- fitdist(dist, "weibull")
plot(fit.weibull)
fit.lognormal <- fitdist(dist, "lnorm")
plot(fit.lognormal)
fit.lognormal <- fitdist(dist, "lnorm")
plot(fit.lognormal)
fit.weibull <- fitdist(dist, "weibull")
plot(fit.weibull)
fit.lognormal <- fitdist(dist, "lnorm")
plot(fit.lognormal)
#fit.gamma <- fitdist(dist, distr = "gamma", method = "mle", lower = c(0, 0))
fit.gamma <- fitdist(dist, distr = "gamma")
plot(fit.gamma)
#dist <- combined[, "DETs"]
#dist <- combined[, "TL"]
dist <- combined[, "TD"]
#fit.gamma <- fitdist(dist, distr = "gamma", method = "mle", lower = c(0, 0))
fit.gamma <- fitdist(dist, distr = "gamma")
plot(fit.gamma)
fit.weibull <- fitdist(dist, "weibull")
plot(fit.weibull)
fit.lognormal <- fitdist(dist, "lnorm")
plot(fit.lognormal)
#fit.gamma <- fitdist(dist, distr = "gamma", method = "mle", lower = c(0, 0))
fit.gamma <- fitdist(dist, distr = "gamma")
plot(fit.gamma)
View(regressionData)
View(regressionData)
#n = 6
effortData = effort
View(combined)
View(combined)
combinedData <- combined
View(transactionFiles)
View(transactionFiles)
View(transactionFiles1)
View(transactionFiles1)
View(regressionData)
View(regressionData)
View(modelData)
View(modelData)
View(effortData)
View(effortData)
View(fileData)
View(fileData)
View(effort)
View(effort)
View(effortData)
View(effortData)
View(fileData)
View(fileData)
View(transactionFiles)
View(transactionFiles)
View(transactionFiles)
View(transactionFiles)
View(transactionFiles)
---
title: "BenchMark_Analysis"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
## R Markdown
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r cars}
summary(cars)
```
## Including Plots
You can also embed plots, for example:
```{r pressure, echo=FALSE}
plot(pressure)
library(ggplot2)
```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
#ucp_data <- UCP_Dataset
ucp_data <- UCP_Dataset_OnlineV1.1
uc_num <- ucp_data[,"Simple.UC"] + ucp_data[,"Average.UC"]+ucp_data[,"Complex.UC"]
cor(uc_num, ucp_data$Real_Effort_Person_Hours)
ucp_data$uc_num <- uc_num
print(uc_num)
lm(Real_Effort_Person_Hours~uc_num, data=ucp_data)
ucp <- (ucp_data[,"UAW"] + ucp_data[,"UUCW"])*ucp_data[,"ECF"]*ucp_data[,"TCF"]
ucp_data$UCP <- ucp
ggplot(ucp_data, aes(x = UCP, y = Real_P20)) +
geom_point(shape = 1) + stat_smooth(method = "lm",  se = FALSE, fullrange = TRUE)
knitr::opts_chunk$set(echo = TRUE)
ucp_data <- read.csv("UCP_Dataset_OnlineV1.1.csv")
uc_num <- ucp_data[,"Simple.UC"] + ucp_data[,"Average.UC"]+ucp_data[,"Complex.UC"]
View(ucp_data)
View(ucp_data)
uc_num <- ucp_data[,"Simple_UC"] + ucp_data[,"Average_UC"]+ucp_data[,"Complex_UC"]
cor(uc_num, ucp_data$Real_Effort_Person_Hours)
ucp_data$uc_num <- uc_num
print(uc_num)
lm(Real_Effort_Person_Hours~uc_num, data=ucp_data)
ucp <- (ucp_data[,"UAW"] + ucp_data[,"UUCW"])*ucp_data[,"ECF"]*ucp_data[,"TCF"]
ucp <- (ucp_data[,"UAW"] + ucp_data[,"UUCW"])*ucp_data[,"EF"]*ucp_data[,"TCF"]
ucp_data$UCP <- ucp
ggplot(ucp_data, aes(x = UCP, y = Real_P20)) +
geom_point(shape = 1) + stat_smooth(method = "lm",  se = FALSE, fullrange = TRUE)
transaction_data <- read.csv('correlation-benchmark-11-11')
transaction_data <- read.csv('correlation-benchmark-11-11.csv')
print(transaction_data)
transaction_data <- read.csv('correlation-benchmark-11-11.csv')
rownames(transaction_data) <- transaction_data$Project
transaction_data$Project <- NULL
print(transaction_data)
transaction_data <- read.csv('correlation-benchmark-11-11.csv')
rownames(transaction_data) <- transaction_data$Project
transaction_data$Project <- NULL
print(cor(transaction_data)
transaction_data <- read.csv('correlation-benchmark-11-11.csv')
transaction_data <- read.csv('correlation-benchmark-11-11.csv')
rownames(transaction_data) <- transaction_data$Project
transaction_data$Project <- NULL
print(cor(transaction_data))
transaction_data <- read.csv('correlation-benchmark-11-11.csv')
rownames(transaction_data) <- transaction_data$Project
transaction_data$Project <- NULL
print(cor(transaction_data))
transaction_data <- read.csv('correlation-benchmark-11-11.csv')
rownames(transaction_data) <- transaction_data$Project
transaction_data$Project <- NULL
print(cor(transaction_data))
uc_num <- ucp_data[,"Simple_UC"] + ucp_data[,"Average_UC"]+ucp_data[,"Complex_UC"]
cor(uc_num, ucp_data$Real_Effort_Person_Hours)
ucp_data$uc_num <- uc_num
print(uc_num)
corr(ucp_data$uc_num, ucp_data$Real_Effort_Person_Hours)
uc_num <- ucp_data[,"Simple_UC"] + ucp_data[,"Average_UC"]+ucp_data[,"Complex_UC"]
cor(uc_num, ucp_data$Real_Effort_Person_Hours)
ucp_data$uc_num <- uc_num
cor(ucp_data$uc_num, ucp_data$Real_Effort_Person_Hours)
lm(Real_Effort_Person_Hours~uc_num, data=ucp_data)
uc_num <- ucp_data[,"Simple_UC"] + ucp_data[,"Average_UC"]+ucp_data[,"Complex_UC"]
cor(uc_num, ucp_data$Real_Effort_Person_Hours)
ucp_data$uc_num <- uc_num
print(cor(ucp_data$uc_num, ucp_data$Real_Effort_Person_Hours))
lm(Real_Effort_Person_Hours~uc_num, data=ucp_data)
"] + ucp_data[,"UUCW"])*ucp_data[,"EF"]*ucp_data[,"TCF"]
ort_Person_Hours~uc_num, data=ucp_data)
lm(Real_Effort_Person_Hours~uc_num, data=ucp_data)
ucp <- (ucp_data[,"UAW"] + ucp_data[,"UUCW"])*ucp_data[,"EF"]*ucp_data[,"TCF"]
ucp_data$UCP <- ucp
print(cor(ucp_data$UCP, ucp_data$Real_Effort_Person_Hours))
ggplot(ucp_data, aes(x = UCP, y = Real_P20)) +
geom_point(shape = 1) + stat_smooth(method = "lm",  se = FALSE, fullrange = TRUE)
fp_data <- read.csv("china.csv")
fp_num <- fp_data[,"Input"]+fp_data[,"Output"]+fp_data[,"Enquiry"];
fp_data$fp_num <- fp_num
cor(fp_data$fp_num, fp_data$Effort)
ucp_data <- read.csv("UCP_Dataset_OnlineV1.1.csv")
uc_num <- ucp_data[,"Simple_UC"] + ucp_data[,"Average_UC"]+ucp_data[,"Complex_UC"]
cor(uc_num, ucp_data$Real_Effort_Person_Hours)
ucp_data$uc_num <- uc_num
print(cor(ucp_data$uc_num, ucp_data$Real_Effort_Person_Hours))
lm(Real_Effort_Person_Hours~uc_num, data=ucp_data)
ucp <- (ucp_data[,"UAW"] + ucp_data[,"UUCW"])*ucp_data[,"EF"]*ucp_data[,"TCF"]
ucp_data$UCP <- ucp
print(cor(ucp_data$UCP, ucp_data$Real_Effort_Person_Hours))
ggplot(ucp_data, aes(x = UCP, y = Real_P20)) +
geom_point(shape = 1) + stat_smooth(method = "lm",  se = FALSE, fullrange = TRUE)
fp_data <- read.csv("china.csv")
fp_num <- fp_data[,"Input"]+fp_data[,"Output"]+fp_data[,"Enquiry"];
fp_data$fp_num <- fp_num
cor(fp_data$fp_num, fp_data$Effort)
library(corrplot)
corrplot(transaction_data, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
tran_cor <- cor(transaction_data)
print(tran_cor)
library(corrplot)
corrplot(tran_cor, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
transaction_data <- read.csv('correlation-benchmark-11-11.csv')
rownames(transaction_data) <- transaction_data$Project
transaction_data$Project <- NULL
tran_cor <- cor(transaction_data)
print(tran_cor)
library(corrplot)
corrplot(tran_cor, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
transaction_data <- read.csv('correlation-benchmark-11-11.csv')
rownames(transaction_data) <- transaction_data$Project
transaction_data$Project <- NULL
tran_cor <- cor(transaction_data)
print(tran_cor)
library(corrplot)
corrplot(tran_cor, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
tran_cor <- cor(transaction_data)
tran_cor['KSLOC', 'Effort'] = 0.647
tran_cor['Effort', 'KSLOC'] = 0.647
print(tran_cor)
tran_cor <- cor(transaction_data)
tran_cor['KSLOC', 'Effort'] = 0.647
tran_cor['Effort', 'KSLOC'] = 0.647
tran_cor['Component', 'Effort'] = 0.626
tran_cor['Effort', 'Component'] = 0.626
print(tran_cor)
library(corrplot)
corrplot(tran_cor, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
