<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="d:\AndroidAnalysis\RunDroid-master\UMLxExperiment\AnExplorer\app\src\main\java\dev\dworks\apps\anexplorer\misc\ProviderExecutor.java"><comment type="block">/*
 * Copyright (C) 2013 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>dev</name><operator>.</operator><name>dworks</name><operator>.</operator><name>apps</name><operator>.</operator><name>anexplorer</name><operator>.</operator><name>misc</name></name>;</package>

<import>import <name><name>androidx</name><operator>.</operator><name>collection</name><operator>.</operator><name>ArrayMap</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>ref</name><operator>.</operator><name>WeakReference</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Executor</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>LinkedBlockingQueue</name></name>;</import>

<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>GuardedBy</name></name>;</import>

<class><specifier>public</specifier> class <name>ProviderExecutor</name> <super><extends>extends <name>Thread</name></extends> <implements>implements <name>Executor</name></implements></super> <block>{

    <decl_stmt><decl><annotation>@<name>GuardedBy</name><argument_list>(<argument><expr><literal type="string">"sExecutors"</literal></expr></argument>)</argument_list></annotation>
    <specifier>private</specifier> <specifier>static</specifier> <type><name><name>ArrayMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>ProviderExecutor</name></argument>&gt;</argument_list></name></type> <name>sExecutors</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>ProviderExecutor</name></type> <name>forAuthority</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>authority</name></decl></parameter>)</parameter_list> <block>{
        <synchronized>synchronized <init>(<expr><name>sExecutors</name></expr>)</init> <block>{
            <decl_stmt><decl><type><name>ProviderExecutor</name></type> <name>executor</name> <init>= <expr><call><name><name>sExecutors</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>authority</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>executor</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>executor</name> <operator>=</operator> <operator>new</operator> <call><name>ProviderExecutor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>executor</name><operator>.</operator><name>setName</name></name><argument_list>(<argument><expr><literal type="string">"ProviderExecutor: "</literal> <operator>+</operator> <name>authority</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>executor</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>sExecutors</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>authority</name></expr></argument>, <argument><expr><name>executor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <return>return <expr><name>executor</name></expr>;</return>
        }</block></synchronized>
    }</block></function>

    <interface><specifier>public</specifier> interface <name>Preemptable</name> <block>{
        <function_decl><type><name>void</name></type> <name>preempt</name><parameter_list>()</parameter_list>;</function_decl>
    }</block></interface>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>LinkedBlockingQueue</name><argument_list type="generic">&lt;<argument><name>Runnable</name></argument>&gt;</argument_list></name></type> <name>mQueue</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedBlockingQueue</name><argument_list type="generic">&lt;<argument><name>Runnable</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>WeakReference</name><argument_list type="generic">&lt;<argument><name>Preemptable</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>mPreemptable</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unused"</literal></expr></argument>)</argument_list></annotation>
	<specifier>private</specifier> <type><name>void</name></type> <name>preempt</name><parameter_list>()</parameter_list> <block>{
        <synchronized>synchronized <init>(<expr><name>mPreemptable</name></expr>)</init> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name><name>WeakReference</name><argument_list type="generic">&lt;<argument><name>Preemptable</name></argument>&gt;</argument_list></name></type> <name>ref</name> <range>: <expr><name>mPreemptable</name></expr></range></decl></init>)</control> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>Preemptable</name></type> <name>p</name> <init>= <expr><call><name><name>ref</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>p</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>preempt</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></for>
            <expr_stmt><expr><call><name><name>mPreemptable</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></synchronized>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Execute the given task. If given task is not {@link Preemptable}, it will
     * preempt all outstanding preemptable tasks.
     */</comment>
    <function><specifier>public</specifier> <parameter_list type="generic">&lt;<parameter><name>P</name></parameter>&gt;</parameter_list> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name><name>AsyncTask</name><argument_list type="generic">&lt;<argument><name>P</name></argument>, <argument><name>?</name></argument>, <argument><name>?</name></argument>&gt;</argument_list></name></type> <name>task</name></decl></parameter>, <parameter><decl><type><name>P</name><modifier>...</modifier></type> <name>params</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>task</name> <operator>instanceof</operator> <name>Preemptable</name></expr>)</condition><then> <block>{
            <synchronized>synchronized <init>(<expr><name>mPreemptable</name></expr>)</init> <block>{
                <expr_stmt><expr><call><name><name>mPreemptable</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>WeakReference</name><argument_list type="generic">&lt;<argument><name>Preemptable</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>(</operator><name>Preemptable</name><operator>)</operator> <name>task</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></synchronized>
            <expr_stmt><expr><call><name><name>task</name><operator>.</operator><name>executeOnExecutor</name></name><argument_list>(<argument><expr><name>mNonPreemptingExecutor</name></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>task</name><operator>.</operator><name>executeOnExecutor</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <type><name>Executor</name></type> <name>mNonPreemptingExecutor</name> <init>= <expr><operator>new</operator> <class><super><name>Executor</name></super><argument_list>()</argument_list> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Runnable</name></type> <name>command</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>Preconditions</name><operator>.</operator><name>checkNotNull</name></name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mQueue</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Runnable</name></type> <name>command</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>preempt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Preconditions</name><operator>.</operator><name>checkNotNull</name></name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mQueue</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
        <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{
            <try>try <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>Runnable</name></type> <name>command</name> <init>= <expr><call><name><name>mQueue</name><operator>.</operator><name>take</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
                <comment type="line">// That was weird; let's go look for more tasks.</comment>
            }</block></catch></try>
        }</block></while>
    }</block></function>
}</block></class>
</unit>
