<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="d:\AndroidAnalysis\RunDroid-master\UMLxExperiment\AnExplorer\app\src\main\java\dev\dworks\apps\anexplorer\common\RecyclerFragment.java"><package>package <name><name>dev</name><operator>.</operator><name>dworks</name><operator>.</operator><name>apps</name><operator>.</operator><name>anexplorer</name><operator>.</operator><name>common</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Fragment</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Handler</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>recyclerview</name><operator>.</operator><name>widget</name><operator>.</operator><name>DefaultItemAnimator</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>recyclerview</name><operator>.</operator><name>widget</name><operator>.</operator><name>LinearLayoutManager</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>recyclerview</name><operator>.</operator><name>widget</name><operator>.</operator><name>RecyclerView</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>recyclerview</name><operator>.</operator><name>widget</name><operator>.</operator><name>RecyclerView</name><operator>.</operator><name>Adapter</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>recyclerview</name><operator>.</operator><name>widget</name><operator>.</operator><name>RecyclerView</name><operator>.</operator><name>ItemAnimator</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>recyclerview</name><operator>.</operator><name>widget</name><operator>.</operator><name>RecyclerView</name><operator>.</operator><name>LayoutManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>GestureDetector</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MotionEvent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>animation</name><operator>.</operator><name>AnimationUtils</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>

<import>import <name><name>dev</name><operator>.</operator><name>dworks</name><operator>.</operator><name>apps</name><operator>.</operator><name>anexplorer</name><operator>.</operator><name>R</name></name>;</import>


<class><specifier>public</specifier> class <name>RecyclerFragment</name> <super><extends>extends <name>Fragment</name></extends></super> <block>{
	<decl_stmt><decl><specifier>private</specifier> <type><name><name>Adapter</name><argument_list type="generic">&lt;<argument><name><name>RecyclerView</name><operator>.</operator><name>ViewHolder</name></name></argument>&gt;</argument_list></name></type> <name>mAdapter</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>LayoutManager</name></type> <name>mLayoutManager</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>CharSequence</name></type> <name>mEmptyText</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <specifier>private</specifier> <name>Handler</name></type> <name>mHandler</name> <init>= <expr><operator>new</operator> <call><name>Handler</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>RecyclerView</name></type> <name>mList</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>View</name></type> <name>mListContainer</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>mListShown</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>mLoadingText</name></decl>;</decl_stmt>

    <interface><specifier>public</specifier> interface <name>onDataChangeListener</name> <block>{
        <function_decl><type><name>void</name></type> <name>onDataChanged</name><parameter_list>()</parameter_list>;</function_decl>
        <function_decl><type><name>void</name></type> <name>onCancelled</name><parameter_list>()</parameter_list>;</function_decl>
    }</block></interface>

    <class><specifier>public</specifier> class <name>RecyclerViewHolder</name> <super><extends>extends <name><name>RecyclerView</name><operator>.</operator><name>ViewHolder</name></name></extends> <implements>implements <name><name>View</name><operator>.</operator><name>OnClickListener</name></name></implements></super><block>{

    	<constructor><specifier>private</specifier> <name>RecyclerViewHolder</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>itemView</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>itemView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>itemView</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{
        	<expr_stmt><expr><call><name>onListItemClick</name><argument_list>(<argument><expr><name>view</name></expr></argument>, <argument><expr><call><name>getLayoutPosition</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getItemId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>

    <decl_stmt><decl><type><specifier>final</specifier> <specifier>private</specifier> <name><name>RecyclerItemClickListener</name><operator>.</operator><name>OnItemClickListener</name></name></type> <name>mOnItemClickListener</name> <init>= <expr><operator>new</operator> <class><super><name><name>RecyclerItemClickListener</name><operator>.</operator><name>OnItemClickListener</name></name></super><argument_list>()</argument_list><block>{
        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>onItemClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>onListItemClick</name><argument_list>(<argument><expr><name>view</name></expr></argument>, <argument><expr><name>position</name></expr></argument>, <argument><expr><call><name><name>view</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>onItemLongClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{

        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>onItemViewClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{

        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>View</name></type> <name>mProgressContainer</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <specifier>private</specifier> <name>Runnable</name></type> <name>mRequestFocus</name> <init>= <expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>mList</name><operator>.</operator><name>focusableViewAvailable</name></name><argument_list>(<argument><expr><name>mList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>TextView</name></type> <name>mStandardEmptyView</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>TextView</name></type> <name>mLoadingView</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>ItemAnimator</name></type> <name>mItemAnimator</name></decl>;</decl_stmt>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>ensureList</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>mList</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>View</name></type> <name>root</name> <init>= <expr><call><name>getView</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>root</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name>root</name> <operator>instanceof</operator> <name>RecyclerView</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>mList</name> <operator>=</operator> <operator>(</operator><name>RecyclerView</name><operator>)</operator> <name>root</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>mStandardEmptyView</name> <operator>=</operator> <operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>root</name>
                    <operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>empty</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>mProgressContainer</name> <operator>=</operator> <call><name><name>root</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>progressContainer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>mLoadingView</name> <operator>=</operator> <operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>root</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>loading</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>mListContainer</name> <operator>=</operator> <call><name><name>root</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>listContainer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>View</name></type> <name>rawListView</name> <init>= <expr><call><name><name>root</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>recyclerview</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>rawListView</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(
                        <argument><expr><literal type="string">"Your content must have a ListView whose id attribute is "</literal>
                                <operator>+</operator> <literal type="string">"'android.R.id.list'"</literal></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then>
            <else>else<block>{
            	<try>try <block>{
                	<decl_stmt><decl><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unused"</literal></expr></argument>)</argument_list></annotation>
                    <type><name>RecyclerView</name></type> <name>list</name> <init>= <expr><operator>(</operator><name>RecyclerView</name><operator>)</operator> <name>rawListView</name></expr></init></decl>;</decl_stmt>
				}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
		               <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(
		                        <argument><expr><literal type="string">"Content has view with id attribute 'android.R.id.list' "</literal>
		                                <operator>+</operator> <literal type="string">"that is not a ListView class"</literal></expr></argument>)</argument_list></call></expr>;</throw>
				}</block></catch></try>
            }</block></else></if>
            <expr_stmt><expr><name>mList</name> <operator>=</operator> <operator>(</operator><name>RecyclerView</name><operator>)</operator> <name>rawListView</name></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>mStandardEmptyView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>mEmptyText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name>mListShown</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <if>if<condition>(<expr><literal type="null">null</literal> <operator>!=</operator> <name>mLayoutManager</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>mList</name><operator>.</operator><name>setLayoutManager</name></name><argument_list>(<argument><expr><name>mLayoutManager</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>mList</name><operator>.</operator><name>setItemAnimator</name></name><argument_list>(<argument><expr><name>mItemAnimator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mList</name><operator>.</operator><name>setHasFixedSize</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mList</name><operator>.</operator><name>addOnItemTouchListener</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>RecyclerItemClickListener</name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>mOnItemClickListener</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>mAdapter</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name><name>Adapter</name><argument_list type="generic">&lt;<argument><name><name>RecyclerView</name><operator>.</operator><name>ViewHolder</name></name></argument>&gt;</argument_list></name></type> <name>adapter</name> <init>= <expr><name>mAdapter</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>mAdapter</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>setListAdapter</name><argument_list>(<argument><expr><name>adapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <if>if <condition>(<expr><name>mProgressContainer</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>setListShown</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></else></if>
        <expr_stmt><expr><call><name><name>mHandler</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><name>mRequestFocus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>protected</specifier> <type><name>TextView</name></type> <name>getEmptyView</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>mStandardEmptyView</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name><name>Adapter</name><argument_list type="generic">&lt;<argument><name><name>RecyclerView</name><operator>.</operator><name>ViewHolder</name></name></argument>&gt;</argument_list></name></type> <name>getListAdapter</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>mAdapter</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>RecyclerView</name></type> <name>getListView</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>ensureList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>mList</name></expr>;</return>
    }</block></function>

<comment type="block">/*    public long getSelectedItemId() {
        ensureList();
        return mList.getSelectedItemId();
    }

    public int getSelectedItemPosition() {
        ensureList();
        return mList.getSelectedItemPosition();
    }*/</comment>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>View</name></type> <name>onCreateView</name><parameter_list>(<parameter><decl><type><name>LayoutInflater</name></type> <name>inflater</name></decl></parameter>, <parameter><decl><type><name>ViewGroup</name></type> <name>container</name></decl></parameter>,
            <parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>mLayoutManager</name> <operator>=</operator> <operator>new</operator> <call><name>LinearLayoutManager</name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>mItemAnimator</name> <operator>=</operator> <operator>new</operator> <call><name>DefaultItemAnimator</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>mLoadingText</name> <operator>=</operator> <call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>loading</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>fragment_recycler_content</name></name></expr></argument>, <argument><expr><name>container</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onDestroyView</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>mHandler</name><operator>.</operator><name>removeCallbacks</name></name><argument_list>(<argument><expr><name>mRequestFocus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>mList</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>mListShown</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>mProgressContainer</name> <operator>=</operator> <name>mListContainer</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>mStandardEmptyView</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>mLayoutManager</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onDestroyView</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>onListItemClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{
    }</block></function>
    
    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onViewCreated</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
    	<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onViewCreated</name></name><argument_list>(<argument><expr><name>view</name></expr></argument>, <argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    	<expr_stmt><expr><call><name>ensureList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setEmptyText</name><parameter_list>(<parameter><decl><type><name>CharSequence</name></type> <name>text</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>ensureList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>mStandardEmptyView</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>mStandardEmptyView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>mEmptyText</name> <operator>=</operator> <name>text</name></expr>;</expr_stmt>
    }</block></function>
    
    <function><specifier>private</specifier> <type><name>void</name></type> <name>setLoadingText</name><parameter_list>(<parameter><decl><type><name>CharSequence</name></type> <name>text</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>ensureList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>mLoadingView</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>mLoadingView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <function><specifier>public</specifier> <type><name>void</name></type> <name>setHasFixedSize</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>fixedSize</name></decl></parameter>)</parameter_list><block>{
        <if>if <condition>(<expr><name>mList</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>mList</name><operator>.</operator><name>setHasFixedSize</name></name><argument_list>(<argument><expr><name>fixedSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>
    
    <function><specifier>public</specifier> <type><name>void</name></type> <name>setItemAnimator</name><parameter_list>(<parameter><decl><type><name>ItemAnimator</name></type> <name>animator</name></decl></parameter>)</parameter_list><block>{
        <expr_stmt><expr><name>mItemAnimator</name> <operator>=</operator> <name>animator</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>mList</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>mList</name><operator>.</operator><name>setItemAnimator</name></name><argument_list>(<argument><expr><name>mItemAnimator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setLayoutManager</name><parameter_list>(<parameter><decl><type><name>LayoutManager</name></type> <name>layoutManager</name></decl></parameter>)</parameter_list><block>{
    	<expr_stmt><expr><name>mLayoutManager</name> <operator>=</operator> <name>layoutManager</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>mList</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>mList</name><operator>.</operator><name>setLayoutManager</name></name><argument_list>(<argument><expr><name>mLayoutManager</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>addItemDecoration</name><parameter_list>(<parameter><decl><type><name><name>RecyclerView</name><operator>.</operator><name>ItemDecoration</name></name></type> <name>itemDecoration</name></decl></parameter>)</parameter_list><block>{
        <decl_stmt><decl><type><name><name>RecyclerView</name><operator>.</operator><name>ItemDecoration</name></name></type> <name>mItemDecoration</name> <init>= <expr><name>itemDecoration</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>mList</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>mList</name><operator>.</operator><name>addItemDecoration</name></name><argument_list>(<argument><expr><name>mItemDecoration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setListAdapter</name><parameter_list>(<parameter><decl><type><name>Adapter</name></type> <name>adapter</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>boolean</name></type> <name>hadAdapter</name> <init>= <expr><name>mAdapter</name> <operator>!=</operator> <literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>mAdapter</name> <operator>=</operator> <name>adapter</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>mList</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>mList</name><operator>.</operator><name>setAdapter</name></name><argument_list>(<argument><expr><name>adapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><operator>!</operator><name>mListShown</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>hadAdapter</name></expr>)</condition><then> <block>{
                <comment type="line">// The list was hidden, and previously didn't have an</comment>
                <comment type="line">// adapter. It is now time to show it.</comment>
                <expr_stmt><expr><call><name>setListShown</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><call><name>getView</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getWindowToken</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
    }</block></function>
    
    <function><specifier>public</specifier> <type><name>void</name></type> <name>setListShown</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>shown</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>loading</name></decl></parameter>)</parameter_list> <block>{
    	<expr_stmt><expr><call><name>setLoadingText</name><argument_list>(<argument><expr><name>loading</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setListShown</name><argument_list>(<argument><expr><name>shown</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setListShown</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>shown</name></decl></parameter>)</parameter_list> <block>{
    	<expr_stmt><expr><call><name>setLoadingText</name><argument_list>(<argument><expr><name>mLoadingText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setListShown</name><argument_list>(<argument><expr><name>shown</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>setListShown</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>shown</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>animate</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>ensureList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>mProgressContainer</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name>mListShown</name> <operator>==</operator> <name>shown</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <expr_stmt><expr><name>mListShown</name> <operator>=</operator> <name>shown</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>shown</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>animate</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>mProgressContainer</name><operator>.</operator><name>startAnimation</name></name><argument_list>(<argument><expr><call><name><name>AnimationUtils</name><operator>.</operator><name>loadAnimation</name></name><argument_list>(
                        <argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>anim</name><operator>.</operator><name>fade_out</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>mListContainer</name><operator>.</operator><name>startAnimation</name></name><argument_list>(<argument><expr><call><name><name>AnimationUtils</name><operator>.</operator><name>loadAnimation</name></name><argument_list>(
                        <argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>anim</name><operator>.</operator><name>fade_in</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>mProgressContainer</name><operator>.</operator><name>clearAnimation</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>mListContainer</name><operator>.</operator><name>clearAnimation</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><call><name><name>mProgressContainer</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mListContainer</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
        	<if>if<condition>(<expr><literal type="null">null</literal> <operator>!=</operator> <name>mStandardEmptyView</name></expr>)</condition><then><block>{
        		<expr_stmt><expr><call><name><name>mStandardEmptyView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        	}</block></then></if>
            <if>if <condition>(<expr><name>animate</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>mProgressContainer</name><operator>.</operator><name>startAnimation</name></name><argument_list>(<argument><expr><call><name><name>AnimationUtils</name><operator>.</operator><name>loadAnimation</name></name><argument_list>(
                        <argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>anim</name><operator>.</operator><name>fade_in</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>mListContainer</name><operator>.</operator><name>startAnimation</name></name><argument_list>(<argument><expr><call><name><name>AnimationUtils</name><operator>.</operator><name>loadAnimation</name></name><argument_list>(
                        <argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>anim</name><operator>.</operator><name>fade_out</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>mProgressContainer</name><operator>.</operator><name>clearAnimation</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>mListContainer</name><operator>.</operator><name>clearAnimation</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><call><name><name>mProgressContainer</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mListContainer</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setListShownNoAnimation</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>shown</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setListShown</name><argument_list>(<argument><expr><name>shown</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setSelection</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>ensureList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <comment type="line">//mList.setSelection(position);</comment>
        <expr_stmt><expr><call><name><name>mList</name><operator>.</operator><name>getLayoutManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>scrollToPosition</name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>RecyclerItemClickListener</name> <super><implements>implements <name><name>RecyclerView</name><operator>.</operator><name>OnItemTouchListener</name></name></implements></super> <block>{
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>OnItemClickListener</name></type> <name>mListener</name></decl>;</decl_stmt>

        <interface><specifier>public</specifier> interface <name>OnItemClickListener</name> <block>{
            <comment type="block" format="javadoc">/**
             * Fires when recycler view receives a single tap event on any item
             *
             * @param view     tapped view
             * @param position item position in the list
             */</comment>
            <function_decl><type><name>void</name></type> <name>onItemClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list>;</function_decl>

            <comment type="block" format="javadoc">/**
             * Fires when recycler view receives a long tap event on item
             *
             * @param view     long tapped view
             * @param position item position in the list
             */</comment>
            <function_decl><type><name>void</name></type> <name>onItemLongClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list>;</function_decl>

            <comment type="block" format="javadoc">/**
             * Fires when recycler view receives a single tap event on any item
             *
             * @param view     tapped view
             * @param position item position in the list
             */</comment>
            <function_decl><type><name>void</name></type> <name>onItemViewClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list>;</function_decl>

        }</block></interface>

        <decl_stmt><decl><type><specifier>final</specifier> <name>GestureDetector</name></type> <name>mGestureDetector</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>ExtendedGestureListener</name></type> <name>mGestureListener</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>RecyclerItemClickListener</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>OnItemClickListener</name></type> <name>listener</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><name>mListener</name> <operator>=</operator> <name>listener</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>mGestureListener</name> <operator>=</operator> <operator>new</operator> <call><name>ExtendedGestureListener</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>mGestureDetector</name> <operator>=</operator> <operator>new</operator> <call><name>GestureDetector</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>mGestureListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>boolean</name></type> <name>onInterceptTouchEvent</name><parameter_list>(<parameter><decl><type><name>RecyclerView</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><name>MotionEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <decl_stmt><decl><type><name>View</name></type> <name>childView</name> <init>= <expr><call><name><name>view</name><operator>.</operator><name>findChildViewUnder</name></name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>getY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>childView</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>mListener</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>mGestureListener</name><operator>.</operator><name>setHelpers</name></name><argument_list>(<argument><expr><name>childView</name></expr></argument>, <argument><expr><call><name><name>view</name><operator>.</operator><name>getChildAdapterPosition</name></name><argument_list>(<argument><expr><name>childView</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>mGestureDetector</name><operator>.</operator><name>onTouchEvent</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>onTouchEvent</name><parameter_list>(<parameter><decl><type><name>RecyclerView</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><name>MotionEvent</name></type> <name>motionEvent</name></decl></parameter>)</parameter_list> <block>{
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>onRequestDisallowInterceptTouchEvent</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>disallowIntercept</name></decl></parameter>)</parameter_list> <block>{
        }</block></function>

        <comment type="block" format="javadoc">/**
         * Extended Gesture listener react for both item clicks and item long clicks
         */</comment>
        <class><specifier>private</specifier> class <name>ExtendedGestureListener</name> <super><extends>extends <name><name>GestureDetector</name><operator>.</operator><name>SimpleOnGestureListener</name></name></extends></super> <block>{
            <decl_stmt><decl><specifier>private</specifier> <type><name>View</name></type> <name>view</name></decl>;</decl_stmt>
            <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>position</name></decl>;</decl_stmt>

            <function><specifier>public</specifier> <type><name>void</name></type> <name>setHelpers</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><name><name>this</name><operator>.</operator><name>view</name></name> <operator>=</operator> <name>view</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>this</name><operator>.</operator><name>position</name></name> <operator>=</operator> <name>position</name></expr>;</expr_stmt>
            }</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>boolean</name></type> <name>onSingleTapUp</name><parameter_list>(<parameter><decl><type><name>MotionEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>mListener</name><operator>.</operator><name>onItemClick</name></name><argument_list>(<argument><expr><name>view</name></expr></argument>, <argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            }</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onLongPress</name><parameter_list>(<parameter><decl><type><name>MotionEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>mListener</name><operator>.</operator><name>onItemLongClick</name></name><argument_list>(<argument><expr><name>view</name></expr></argument>, <argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class>
    }</block></class>
}</block></class>
</unit>
