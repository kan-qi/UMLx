<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="d:\AndroidAnalysis\RunDroid-master\UMLxExperiment\AnExplorer\app\src\main\java\dev\dworks\apps\anexplorer\provider\DocumentsProvider.java"><comment type="block">/*
 * Copyright (C) 2014 Hari Krishna Dulipudi
 * Copyright (C) 2013 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>dev</name><operator>.</operator><name>dworks</name><operator>.</operator><name>apps</name><operator>.</operator><name>anexplorer</name><operator>.</operator><name>provider</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>annotation</name><operator>.</operator><name>TargetApi</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>AppOpsManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>ClipDescription</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>ContentResolver</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>ContentValues</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>UriMatcher</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>pm</name><operator>.</operator><name>PackageManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>pm</name><operator>.</operator><name>ProviderInfo</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>res</name><operator>.</operator><name>AssetFileDescriptor</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>database</name><operator>.</operator><name>Cursor</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Point</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>CancellationSignal</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>IBinder</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>ParcelFileDescriptor</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>CallSuper</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileNotFoundException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>

<import>import <name><name>dev</name><operator>.</operator><name>dworks</name><operator>.</operator><name>apps</name><operator>.</operator><name>anexplorer</name><operator>.</operator><name>libcore</name><operator>.</operator><name>io</name><operator>.</operator><name>IoUtils</name></name>;</import>
<import>import <name><name>dev</name><operator>.</operator><name>dworks</name><operator>.</operator><name>apps</name><operator>.</operator><name>anexplorer</name><operator>.</operator><name>libcore</name><operator>.</operator><name>util</name><operator>.</operator><name>Objects</name></name>;</import>
<import>import <name><name>dev</name><operator>.</operator><name>dworks</name><operator>.</operator><name>apps</name><operator>.</operator><name>anexplorer</name><operator>.</operator><name>misc</name><operator>.</operator><name>Utils</name></name>;</import>
<import>import <name><name>dev</name><operator>.</operator><name>dworks</name><operator>.</operator><name>apps</name><operator>.</operator><name>anexplorer</name><operator>.</operator><name>model</name><operator>.</operator><name>DocumentsContract</name></name>;</import>
<import>import <name><name>dev</name><operator>.</operator><name>dworks</name><operator>.</operator><name>apps</name><operator>.</operator><name>anexplorer</name><operator>.</operator><name>model</name><operator>.</operator><name>DocumentsContract</name><operator>.</operator><name>Document</name></name>;</import>
<import>import <name><name>dev</name><operator>.</operator><name>dworks</name><operator>.</operator><name>apps</name><operator>.</operator><name>anexplorer</name><operator>.</operator><name>model</name><operator>.</operator><name>DocumentsContract</name><operator>.</operator><name>Root</name></name>;</import>

<import>import static <name><name>androidx</name><operator>.</operator><name>core</name><operator>.</operator><name>app</name><operator>.</operator><name>AppOpsManagerCompat</name><operator>.</operator><name>MODE_ALLOWED</name></name>;</import>
<import>import static <name><name>dev</name><operator>.</operator><name>dworks</name><operator>.</operator><name>apps</name><operator>.</operator><name>anexplorer</name><operator>.</operator><name>model</name><operator>.</operator><name>DocumentsContract</name><operator>.</operator><name>EXTRA_INFO</name></name>;</import>
<import>import static <name><name>dev</name><operator>.</operator><name>dworks</name><operator>.</operator><name>apps</name><operator>.</operator><name>anexplorer</name><operator>.</operator><name>model</name><operator>.</operator><name>DocumentsContract</name><operator>.</operator><name>METHOD_COMPRESS_DOCUMENT</name></name>;</import>
<import>import static <name><name>dev</name><operator>.</operator><name>dworks</name><operator>.</operator><name>apps</name><operator>.</operator><name>anexplorer</name><operator>.</operator><name>model</name><operator>.</operator><name>DocumentsContract</name><operator>.</operator><name>METHOD_COPY_DOCUMENT</name></name>;</import>
<import>import static <name><name>dev</name><operator>.</operator><name>dworks</name><operator>.</operator><name>apps</name><operator>.</operator><name>anexplorer</name><operator>.</operator><name>model</name><operator>.</operator><name>DocumentsContract</name><operator>.</operator><name>METHOD_CREATE_DOCUMENT</name></name>;</import>
<import>import static <name><name>dev</name><operator>.</operator><name>dworks</name><operator>.</operator><name>apps</name><operator>.</operator><name>anexplorer</name><operator>.</operator><name>model</name><operator>.</operator><name>DocumentsContract</name><operator>.</operator><name>METHOD_DELETE_DOCUMENT</name></name>;</import>
<import>import static <name><name>dev</name><operator>.</operator><name>dworks</name><operator>.</operator><name>apps</name><operator>.</operator><name>anexplorer</name><operator>.</operator><name>model</name><operator>.</operator><name>DocumentsContract</name><operator>.</operator><name>METHOD_IS_CHILD_DOCUMENT</name></name>;</import>
<import>import static <name><name>dev</name><operator>.</operator><name>dworks</name><operator>.</operator><name>apps</name><operator>.</operator><name>anexplorer</name><operator>.</operator><name>model</name><operator>.</operator><name>DocumentsContract</name><operator>.</operator><name>METHOD_MOVE_DOCUMENT</name></name>;</import>
<import>import static <name><name>dev</name><operator>.</operator><name>dworks</name><operator>.</operator><name>apps</name><operator>.</operator><name>anexplorer</name><operator>.</operator><name>model</name><operator>.</operator><name>DocumentsContract</name><operator>.</operator><name>METHOD_REMOVE_DOCUMENT</name></name>;</import>
<import>import static <name><name>dev</name><operator>.</operator><name>dworks</name><operator>.</operator><name>apps</name><operator>.</operator><name>anexplorer</name><operator>.</operator><name>model</name><operator>.</operator><name>DocumentsContract</name><operator>.</operator><name>METHOD_RENAME_DOCUMENT</name></name>;</import>
<import>import static <name><name>dev</name><operator>.</operator><name>dworks</name><operator>.</operator><name>apps</name><operator>.</operator><name>anexplorer</name><operator>.</operator><name>model</name><operator>.</operator><name>DocumentsContract</name><operator>.</operator><name>METHOD_UNCOMPRESS_DOCUMENT</name></name>;</import>
<import>import static <name><name>dev</name><operator>.</operator><name>dworks</name><operator>.</operator><name>apps</name><operator>.</operator><name>anexplorer</name><operator>.</operator><name>model</name><operator>.</operator><name>DocumentsContract</name><operator>.</operator><name>METHOD_UPLOAD_DOCUMENT</name></name>;</import>
<import>import static <name><name>dev</name><operator>.</operator><name>dworks</name><operator>.</operator><name>apps</name><operator>.</operator><name>anexplorer</name><operator>.</operator><name>model</name><operator>.</operator><name>DocumentsContract</name><operator>.</operator><name>buildDocumentUri</name></name>;</import>
<import>import static <name><name>dev</name><operator>.</operator><name>dworks</name><operator>.</operator><name>apps</name><operator>.</operator><name>anexplorer</name><operator>.</operator><name>model</name><operator>.</operator><name>DocumentsContract</name><operator>.</operator><name>buildDocumentUriMaybeUsingTree</name></name>;</import>
<import>import static <name><name>dev</name><operator>.</operator><name>dworks</name><operator>.</operator><name>apps</name><operator>.</operator><name>anexplorer</name><operator>.</operator><name>model</name><operator>.</operator><name>DocumentsContract</name><operator>.</operator><name>buildTreeDocumentUri</name></name>;</import>
<import>import static <name><name>dev</name><operator>.</operator><name>dworks</name><operator>.</operator><name>apps</name><operator>.</operator><name>anexplorer</name><operator>.</operator><name>model</name><operator>.</operator><name>DocumentsContract</name><operator>.</operator><name>getDocumentId</name></name>;</import>
<import>import static <name><name>dev</name><operator>.</operator><name>dworks</name><operator>.</operator><name>apps</name><operator>.</operator><name>anexplorer</name><operator>.</operator><name>model</name><operator>.</operator><name>DocumentsContract</name><operator>.</operator><name>getRootId</name></name>;</import>
<import>import static <name><name>dev</name><operator>.</operator><name>dworks</name><operator>.</operator><name>apps</name><operator>.</operator><name>anexplorer</name><operator>.</operator><name>model</name><operator>.</operator><name>DocumentsContract</name><operator>.</operator><name>getSearchDocumentsQuery</name></name>;</import>
<import>import static <name><name>dev</name><operator>.</operator><name>dworks</name><operator>.</operator><name>apps</name><operator>.</operator><name>anexplorer</name><operator>.</operator><name>model</name><operator>.</operator><name>DocumentsContract</name><operator>.</operator><name>getTreeDocumentId</name></name>;</import>
<import>import static <name><name>dev</name><operator>.</operator><name>dworks</name><operator>.</operator><name>apps</name><operator>.</operator><name>anexplorer</name><operator>.</operator><name>model</name><operator>.</operator><name>DocumentsContract</name><operator>.</operator><name>isTreeUri</name></name>;</import>
<import>import static <name><name>dev</name><operator>.</operator><name>dworks</name><operator>.</operator><name>apps</name><operator>.</operator><name>anexplorer</name><operator>.</operator><name>model</name><operator>.</operator><name>DocumentsContract</name><operator>.</operator><name>uploadDocument</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Base class for a document provider. A document provider offers read and write
 * access to durable files, such as files stored on a local disk, or files in a
 * cloud storage service. To create a document provider, extend this class,
 * implement the abstract methods, and add it to your manifest like this:
 *
 * &lt;pre class="prettyprint"&gt;&amp;lt;manifest&amp;gt;
 *    ...
 *    &amp;lt;application&amp;gt;
 *        ...
 *        &amp;lt;provider
 *            android:name="com.example.MyCloudProvider"
 *            android:authorities="com.example.mycloudprovider"
 *            android:exported="true"
 *            android:grantUriPermissions="true"
 *            android:permission="android.permission.MANAGE_DOCUMENTS"
 *            android:enabled="@bool/isAtLeastKitKat"&amp;gt;
 *            &amp;lt;intent-filter&amp;gt;
 *                &amp;lt;action android:name="android.content.action.DOCUMENTS_PROVIDER" /&amp;gt;
 *            &amp;lt;/intent-filter&amp;gt;
 *        &amp;lt;/provider&amp;gt;
 *        ...
 *    &amp;lt;/application&amp;gt;
 *&amp;lt;/manifest&amp;gt;&lt;/pre&gt;
 * &lt;p&gt;
 * When defining your provider, you must protect it with
 * {@link android.Manifest.permission#MANAGE_DOCUMENTS}, which is a permission
 * only the system can obtain. Applications cannot use a documents provider
 * directly; they must go through {@link android.content.Intent#ACTION_OPEN_DOCUMENT} or
 * {@link android.content.Intent#ACTION_CREATE_DOCUMENT} which requires a user to actively
 * navigate and select documents. When a user selects documents through that UI,
 * the system issues narrow URI permission grants to the requesting application.
 * &lt;/p&gt;
 * &lt;h3&gt;Documents&lt;/h3&gt;
 * &lt;p&gt;
 * A document can be either an openable stream (with a specific MIME type), or a
 * directory containing additional documents (with the
 * {@link android.provider.DocumentsContract.Document#MIME_TYPE_DIR} MIME type). Each directory represents the top
 * of a subtree containing zero or more documents, which can recursively contain
 * even more documents and directories.
 * &lt;/p&gt;
 * &lt;p&gt;
 * Each document can have different capabilities, as described by
 * {@link android.provider.DocumentsContract.Document#COLUMN_FLAGS}. For example, if a document can be represented
 * as a thumbnail, your provider can set
 * {@link android.provider.DocumentsContract.Document#FLAG_SUPPORTS_THUMBNAIL} and implement
 * that thumbnail.
 * &lt;/p&gt;
 * &lt;p&gt;
 * Each document under a provider is uniquely referenced by its
 * {@link android.provider.DocumentsContract.Document#COLUMN_DOCUMENT_ID}, which must not change once returned. A
 * single document can be included in multiple directories when responding to
 * {@link #queryChildDocuments(String, String[], String)}. For example, a
 * provider might surface a single photo in multiple locations: once in a
 * directory of geographic locations, and again in a directory of dates.
 * &lt;/p&gt;
 * &lt;h3&gt;Roots&lt;/h3&gt;
 * &lt;p&gt;
 * All documents are surfaced through one or more "roots." Each root represents
 * the top of a document tree that a user can navigate. For example, a root
 * could represent an account or a physical storage device. Similar to
 * documents, each root can have capabilities expressed through
 * {@link android.provider.DocumentsContract.Root#COLUMN_FLAGS}.
 * &lt;/p&gt;
 *
 * @see android.content.Intent#ACTION_OPEN_DOCUMENT
 * @see android.content.Intent#ACTION_OPEN_DOCUMENT_TREE
 * @see android.content.Intent#ACTION_CREATE_DOCUMENT
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>DocumentsProvider</name> <super><extends>extends <name>ContentProvider</name></extends></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><literal type="string">"DocumentsProvider"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>DIRECTORY_SEPERATOR</name> <init>= <expr><literal type="string">"/"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>ROOT_SEPERATOR</name> <init>= <expr><literal type="string">":"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>MATCH_ROOTS</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>MATCH_ROOT</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>MATCH_RECENT</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>MATCH_SEARCH</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>MATCH_DOCUMENT</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>MATCH_CHILDREN</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>MATCH_DOCUMENT_TREE</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>MATCH_CHILDREN_TREE</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>mAuthority</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>UriMatcher</name></type> <name>mMatcher</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Implementation is provided by the parent class.
     */</comment>
    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>attachInfo</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>ProviderInfo</name></type> <name>info</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>mAuthority</name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>authority</name></name></expr>;</expr_stmt>

        <expr_stmt><expr><name>mMatcher</name> <operator>=</operator> <operator>new</operator> <call><name>UriMatcher</name><argument_list>(<argument><expr><name><name>UriMatcher</name><operator>.</operator><name>NO_MATCH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mMatcher</name><operator>.</operator><name>addURI</name></name><argument_list>(<argument><expr><name>mAuthority</name></expr></argument>, <argument><expr><literal type="string">"root"</literal></expr></argument>, <argument><expr><name>MATCH_ROOTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mMatcher</name><operator>.</operator><name>addURI</name></name><argument_list>(<argument><expr><name>mAuthority</name></expr></argument>, <argument><expr><literal type="string">"root/*"</literal></expr></argument>, <argument><expr><name>MATCH_ROOT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mMatcher</name><operator>.</operator><name>addURI</name></name><argument_list>(<argument><expr><name>mAuthority</name></expr></argument>, <argument><expr><literal type="string">"root/*/recent"</literal></expr></argument>, <argument><expr><name>MATCH_RECENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mMatcher</name><operator>.</operator><name>addURI</name></name><argument_list>(<argument><expr><name>mAuthority</name></expr></argument>, <argument><expr><literal type="string">"root/*/search"</literal></expr></argument>, <argument><expr><name>MATCH_SEARCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mMatcher</name><operator>.</operator><name>addURI</name></name><argument_list>(<argument><expr><name>mAuthority</name></expr></argument>, <argument><expr><literal type="string">"document/*"</literal></expr></argument>, <argument><expr><name>MATCH_DOCUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mMatcher</name><operator>.</operator><name>addURI</name></name><argument_list>(<argument><expr><name>mAuthority</name></expr></argument>, <argument><expr><literal type="string">"document/*/children"</literal></expr></argument>, <argument><expr><name>MATCH_CHILDREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mMatcher</name><operator>.</operator><name>addURI</name></name><argument_list>(<argument><expr><name>mAuthority</name></expr></argument>, <argument><expr><literal type="string">"tree/*/document/*"</literal></expr></argument>, <argument><expr><name>MATCH_DOCUMENT_TREE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mMatcher</name><operator>.</operator><name>addURI</name></name><argument_list>(<argument><expr><name>mAuthority</name></expr></argument>, <argument><expr><literal type="string">"tree/*/document/*/children"</literal></expr></argument>, <argument><expr><name>MATCH_CHILDREN_TREE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Sanity check our setup</comment>
        <if>if <condition>(<expr><operator>!</operator><name><name>info</name><operator>.</operator><name>exported</name></name></expr>)</condition><then> <block>{
            <throw>throw <expr><operator>new</operator> <call><name>SecurityException</name><argument_list>(<argument><expr><literal type="string">"Provider must be exported"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><operator>!</operator><name><name>info</name><operator>.</operator><name>grantUriPermissions</name></name></expr>)</condition><then> <block>{
            <throw>throw <expr><operator>new</operator> <call><name>SecurityException</name><argument_list>(<argument><expr><literal type="string">"Provider must grantUriPermissions"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
<comment type="block">/*        if (!android.Manifest.permission.MANAGE_DOCUMENTS.equals(info.readPermission)
                || !android.Manifest.permission.MANAGE_DOCUMENTS.equals(info.writePermission)) {
            throw new SecurityException("Provider must be protected by MANAGE_DOCUMENTS");
        }
*/</comment>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>attachInfo</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Test if a document is descendant (child, grandchild, etc) from the given
     * parent. For example, providers must implement this to support
     * {@link android.content.Intent#ACTION_OPEN_DOCUMENT_TREE}. You should avoid making network
     * requests to keep this request fast.
     *
     * @param parentDocumentId parent to verify against.
     * @param documentId child to verify.
     * @return if given document is a descendant of the given parent.
     * @see android.provider.DocumentsContract.Root#FLAG_SUPPORTS_IS_CHILD
     */</comment>
    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isChildDocument</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>parentDocumentId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>documentId</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/** {@hide} */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>enforceTree</name><parameter_list>(<parameter><decl><type><name>Uri</name></type> <name>documentUri</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isTreeUri</name><argument_list>(<argument><expr><name>documentUri</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>parent</name> <init>= <expr><call><name>getTreeDocumentId</name><argument_list>(<argument><expr><name>documentUri</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>child</name> <init>= <expr><call><name>getDocumentId</name><argument_list>(<argument><expr><name>documentUri</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return;</return>
            }</block></then></if>
            <if>if <condition>(<expr><operator>!</operator><call><name>isChildDocument</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <throw>throw <expr><operator>new</operator> <call><name>SecurityException</name><argument_list>(
                        <argument><expr><literal type="string">"Document "</literal> <operator>+</operator> <name>child</name> <operator>+</operator> <literal type="string">" is not a descendant of "</literal> <operator>+</operator> <name>parent</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
        }</block></then></if>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Create a new document and return its newly generated
     * {@link Document#COLUMN_DOCUMENT_ID}. A provider must allocate a new
     * {@link Document#COLUMN_DOCUMENT_ID} to represent the document, which must
     * not change once returned.
     *
     * @param parentDocumentId the parent directory to create the new document
     *            under.
     * @param mimeType the concrete MIME type associated with the new document.
     *            If the MIME type is not supported, the provider must throw.
     * @param displayName the display name of the new document. The provider may
     *            alter this name to meet any internal constraints, such as
     *            conflicting names.
     */</comment>
    <function><specifier>public</specifier> <type><name>String</name></type> <name>createDocument</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>parentDocumentId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>mimeType</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>displayName</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>FileNotFoundException</name></expr></argument></throws> <block>{
        <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>(<argument><expr><literal type="string">"Create not supported"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Rename an existing document.
     * &lt;p&gt;
     * If a different {@link android.provider.DocumentsContract.Document#COLUMN_DOCUMENT_ID} must be used to
     * represent the renamed document, generate and return it. Any outstanding
     * URI permission grants will be updated to point at the new document. If
     * the original {@link android.provider.DocumentsContract.Document#COLUMN_DOCUMENT_ID} is still valid after the
     * rename, return {@code null}.
     *
     * @param documentId the document to rename.
     * @param displayName the updated display name of the document. The provider
     *            may alter this name to meet any internal constraints, such as
     *            avoiding conflicting names.
     */</comment>
    <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unused"</literal></expr></argument>)</argument_list></annotation>
    <specifier>public</specifier> <type><name>String</name></type> <name>renameDocument</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>documentId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>displayName</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>FileNotFoundException</name></expr></argument></throws> <block>{
        <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>(<argument><expr><literal type="string">"Rename not supported"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Delete the requested document.
     * &lt;p&gt;
     * Upon returning, any URI permission grants for the given document will be
     * revoked. If additional documents were deleted as a side effect of this
     * call (such as documents inside a directory) the implementor is
     * responsible for revoking those permissions using
     * {@link #revokeDocumentPermission(String)}.
     *
     * @param documentId the document to delete.
     */</comment>
    <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unused"</literal></expr></argument>)</argument_list></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>deleteDocument</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>documentId</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>FileNotFoundException</name></expr></argument></throws> <block>{
        <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>(<argument><expr><literal type="string">"Delete not supported"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Copy the requested document or a document tree.
     * &lt;p&gt;
     * Copies a document including all child documents to another location within
     * the same document provider. Upon completion returns the document id of
     * the copied document at the target destination. {@code null} must never
     * be returned.
     *
     * @param sourceDocumentId the document to copy.
     * @param targetParentDocumentId the target document to be copied into as a child.
     */</comment>
    <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unused"</literal></expr></argument>)</argument_list></annotation>
    <specifier>public</specifier> <type><name>String</name></type> <name>copyDocument</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>sourceDocumentId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>targetParentDocumentId</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>FileNotFoundException</name></expr></argument></throws> <block>{
        <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>(<argument><expr><literal type="string">"Copy not supported"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Move the requested document or a document tree.
     *
     * &lt;p&gt;Moves a document including all child documents to another location within
     * the same document provider. Upon completion returns the document id of
     * the copied document at the target destination. {@code null} must never
     * be returned.
     *
     * &lt;p&gt;It's the responsibility of the provider to revoke grants if the document
     * is no longer accessible using &lt;code&gt;sourceDocumentId&lt;/code&gt;.
     *
     * @param sourceDocumentId the document to move.
     * @param sourceParentDocumentId the parent of the document to move.
     * @param targetParentDocumentId the target document to be a new parent of the
     *     source document.
     */</comment>
    <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unused"</literal></expr></argument>)</argument_list></annotation>
    <specifier>public</specifier> <type><name>String</name></type> <name>moveDocument</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>sourceDocumentId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>sourceParentDocumentId</name></decl></parameter>,
            <parameter><decl><type><name>String</name></type> <name>targetParentDocumentId</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>FileNotFoundException</name></expr></argument></throws> <block>{
        <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>(<argument><expr><literal type="string">"Move not supported"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Removes the requested document or a document tree.
     *
     * &lt;p&gt;In contrast to {@link #deleteDocument} it requires specifying the parent.
     * This method is especially useful if the document can be in multiple parents.
     *
     * &lt;p&gt;It's the responsibility of the provider to revoke grants if the document is
     * removed from the last parent, and effectively the document is deleted.
     *
     * @param documentId the document to remove.
     * @param parentDocumentId the parent of the document to move.
     */</comment>
    <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unused"</literal></expr></argument>)</argument_list></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>removeDocument</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>documentId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>parentDocumentId</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>FileNotFoundException</name></expr></argument></throws> <block>{
        <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>(<argument><expr><literal type="string">"Remove not supported"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></function>

    <function><specifier>public</specifier> <type><name>String</name></type> <name>compressDocument</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>parentDocumentId</name></decl></parameter>, <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>documentIds</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>FileNotFoundException</name></expr></argument></throws> <block>{
        <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>(<argument><expr><literal type="string">"Move not supported"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></function>

    <function><specifier>public</specifier> <type><name>String</name></type> <name>uncompressDocument</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>parentDocumentId</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>FileNotFoundException</name></expr></argument></throws> <block>{
        <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>(<argument><expr><literal type="string">"Move not supported"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></function>

    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>uploadDocument</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>parentDocumentId</name></decl></parameter>, <parameter><decl><type><name>Uri</name></type> <name>uploadDocumentUri</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>mimeType</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>displayName</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>FileNotFoundException</name></expr></argument></throws> <block>{
        <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>(<argument><expr><literal type="string">"Upload not supported"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Return all roots currently provided. A provider must define at least one
     * root to display to users, and it should avoid making network requests to
     * keep this request fast.
     * &lt;p&gt;
     * Each root is defined by the metadata columns described in {@link Root},
     * including {@link Root#COLUMN_DOCUMENT_ID} which points to a directory
     * representing a tree of documents to display under that root.
     * &lt;p&gt;
     * If this set of roots changes, you must call {@link ContentResolver#notifyChange(Uri,
     * android.database.ContentObserver)} to notify the system.
     *
     * @param projection list of {@link Root} columns to put into the cursor. If
     *            {@code null} all supported columns should be included.
     */</comment>
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Cursor</name></type> <name>queryRoots</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>projection</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>FileNotFoundException</name></expr></argument></throws>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Return recently modified documents under the requested root. This will
     * only be called for roots that advertise
     * {@link Root#FLAG_SUPPORTS_RECENTS}. The returned documents should be
     * sorted by {@link Document#COLUMN_LAST_MODIFIED} in descending order, and
     * limited to only return the 64 most recently modified documents.
     * &lt;p&gt;
     * Recent documents do not support change notifications.
     *
     * @param projection list of {@link Document} columns to put into the
     *            cursor. If {@code null} all supported columns should be
     *            included.
     * @see DocumentsContract#EXTRA_LOADING
     */</comment>
    <function><specifier>public</specifier> <type><name>Cursor</name></type> <name>queryRecentDocuments</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>rootId</name></decl></parameter>, <parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>projection</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>FileNotFoundException</name></expr></argument></throws> <block>{
        <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>(<argument><expr><literal type="string">"Recent not supported"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Return metadata for the single requested document. You should avoid
     * making network requests to keep this request fast.
     *
     * @param documentId the document to return.
     * @param projection list of {@link Document} columns to put into the
     *            cursor. If {@code null} all supported columns should be
     *            included.
     */</comment>
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Cursor</name></type> <name>queryDocument</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>documentId</name></decl></parameter>, <parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>projection</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>FileNotFoundException</name></expr></argument></throws>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Return the children documents contained in the requested directory. This
     * must only return immediate descendants, as additional queries will be
     * issued to recursively explore the tree.
     * &lt;p&gt;
     * If your provider is cloud-based, and you have some data cached or pinned
     * locally, you may return the local data immediately, setting
     * {@link DocumentsContract#EXTRA_LOADING} on the Cursor to indicate that
     * your provider is still fetching additional data. Then, when the network
     * data is available, you can call {@link ContentResolver#notifyChange(Uri,
     * android.database.ContentObserver)} to trigger a requery and return the
     * complete contents.
     *
     * @param parentDocumentId the directory to return children for.
     * @param projection list of {@link Document} columns to put into the
     *            cursor. If {@code null} all supported columns should be
     *            included.
     * @param sortOrder how to order the rows, formatted as an SQL
     *            {@code ORDER BY} clause (excluding the ORDER BY itself).
     *            Passing {@code null} will use the default sort order, which
     *            may be unordered. This ordering is a hint that can be used to
     *            prioritize how data is fetched from the network, but UI may
     *            always enforce a specific ordering.
     * @see DocumentsContract#EXTRA_LOADING
     * @see DocumentsContract#EXTRA_INFO
     * @see DocumentsContract#EXTRA_ERROR
     */</comment>
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Cursor</name></type> <name>queryChildDocuments</name><parameter_list>(
            <parameter><decl><type><name>String</name></type> <name>parentDocumentId</name></decl></parameter>, <parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>projection</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>sortOrder</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>FileNotFoundException</name></expr></argument></throws>;</function_decl>

    <comment type="block" format="javadoc">/** {@hide} */</comment>
    <function><specifier>public</specifier> <type><name>Cursor</name></type> <name>queryChildDocumentsForManage</name><parameter_list>(
            <parameter><decl><type><name>String</name></type> <name>parentDocumentId</name></decl></parameter>, <parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>projection</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>sortOrder</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>FileNotFoundException</name></expr></argument></throws> <block>{
        <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>(<argument><expr><literal type="string">"Manage not supported"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Return documents that match the given query under the requested
     * root. The returned documents should be sorted by relevance in descending
     * order. How documents are matched against the query string is an
     * implementation detail left to each provider, but it's suggested that at
     * least {@link Document#COLUMN_DISPLAY_NAME} be matched in a
     * case-insensitive fashion.
     * &lt;p&gt;
     * Only documents may be returned; directories are not supported in search
     * results.
     * &lt;p&gt;
     * If your provider is cloud-based, and you have some data cached or pinned
     * locally, you may return the local data immediately, setting
     * {@link android.provider.DocumentsContract#EXTRA_LOADING} on the Cursor to indicate that
     * you are still fetching additional data. Then, when the network data is
     * available, you can send a change notification to trigger a requery and
     * return the complete contents.
     * &lt;p&gt;
     * To support change notifications, you must
     * {@link android.database.Cursor#setNotificationUri(android.content.ContentResolver, android.net.Uri)} with a relevant
     * Uri, such as {@link android.provider.DocumentsContract#buildSearchDocumentsUri(String,
     * String, String)}. Then you can call {@link android.content.ContentResolver#notifyChange(android.net.Uri,
     * android.database.ContentObserver, boolean)} with that Uri to send change
     * notifications.
     *
     * @param rootId the root to search under.
     * @param query string to match documents against.
     * @param projection list of {@link Document} columns to put into the
     *            cursor. If {@code null} all supported columns should be
     *            included.
     * @see DocumentsContract#EXTRA_LOADING
     * @see DocumentsContract#EXTRA_INFO
     * @see DocumentsContract#EXTRA_ERROR
     */</comment>
    <function><specifier>public</specifier> <type><name>Cursor</name></type> <name>querySearchDocuments</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>rootId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>query</name></decl></parameter>, <parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>projection</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>FileNotFoundException</name></expr></argument></throws> <block>{
        <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>(<argument><expr><literal type="string">"Search not supported"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Return concrete MIME type of the requested document. Must match the value
     * of {@link Document#COLUMN_MIME_TYPE} for this document. The default
     * implementation queries {@link #queryDocument(String, String[])}, so
     * providers may choose to override this as an optimization.
     */</comment>
    <function><specifier>public</specifier> <type><name>String</name></type> <name>getDocumentType</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>documentId</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>FileNotFoundException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Cursor</name></type> <name>cursor</name> <init>= <expr><call><name>queryDocument</name><argument_list>(<argument><expr><name>documentId</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <if>if <condition>(<expr><call><name><name>cursor</name><operator>.</operator><name>moveToFirst</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>Document</name><operator>.</operator><name>COLUMN_MIME_TYPE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then> <else>else <block>{
                <return>return <expr><literal type="null">null</literal></expr>;</return>
            }</block></else></if>
        }</block> <finally>finally <block>{
            <expr_stmt><expr><call><name><name>IoUtils</name><operator>.</operator><name>closeQuietly</name></name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Open and return the requested document.
     * &lt;p&gt;
     * Your provider should return a reliable {@link ParcelFileDescriptor} to
     * detect when the remote caller has finished reading or writing the
     * document. You may return a pipe or socket pair if the mode is exclusively
     * "r" or "w", but complex modes like "rw" imply a normal file on disk that
     * supports seeking.
     * &lt;p&gt;
     * If you block while downloading content, you should periodically check
     * {@link CancellationSignal#isCanceled()} to abort abandoned open requests.
     *
     * @param documentId the document to return.
     * @param mode the mode to open with, such as 'r', 'w', or 'rw'.
     * @param signal used by the caller to signal if the request should be
     *            cancelled. May be null.
     * @see ParcelFileDescriptor#open(java.io.File, int, android.os.Handler,
     *      OnCloseListener)
     * @see ParcelFileDescriptor#createReliablePipe()
     * @see ParcelFileDescriptor#createReliableSocketPair()
     * @see ParcelFileDescriptor#parseMode(String)
     */</comment>
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>ParcelFileDescriptor</name></type> <name>openDocument</name><parameter_list>(
            <parameter><decl><type><name>String</name></type> <name>documentId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>CancellationSignal</name></type> <name>signal</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>FileNotFoundException</name></expr></argument></throws>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Open and return a thumbnail of the requested document.
     * &lt;p&gt;
     * A provider should return a thumbnail closely matching the hinted size,
     * attempting to serve from a local cache if possible. A provider should
     * never return images more than double the hinted size.
     * &lt;p&gt;
     * If a provider performs expensive operations to download or generate a
     * thumbnail, it should periodically check
     * {@link CancellationSignal#isCanceled()} to abort abandoned thumbnail
     * requests.
     *
     * @param documentId the document to return.
     * @param sizeHint hint of the optimal thumbnail dimensions.
     * @param signal used by the caller to signal if the request should be
     *            cancelled.
     * @see Document#FLAG_SUPPORTS_THUMBNAIL
     */</comment>
    <function><specifier>public</specifier> <type><name>AssetFileDescriptor</name></type> <name>openDocumentThumbnail</name><parameter_list>(
            <parameter><decl><type><name>String</name></type> <name>documentId</name></decl></parameter>, <parameter><decl><type><name>Point</name></type> <name>sizeHint</name></decl></parameter>, <parameter><decl><type><name>CancellationSignal</name></type> <name>signal</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>FileNotFoundException</name></expr></argument></throws> <block>{
        <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>(<argument><expr><literal type="string">"Thumbnails not supported"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Open and return the document in a format matching the specified MIME
     * type filter.
     * &lt;p&gt;
     * A provider may perform a conversion if the documents's MIME type is not
     * matching the specified MIME type filter.
     *
     * @param documentId the document to return.
     * @param mimeTypeFilter the MIME type filter for the requested format. May
     *            be *\/*, which matches any MIME type.
     * @param opts extra options from the client. Specific to the content
     *            provider.
     * @param signal used by the caller to signal if the request should be
     *            cancelled. May be null.
     * @see #getDocumentStreamTypes(String, String)
     */</comment>
    <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unused"</literal></expr></argument>)</argument_list></annotation>
    <specifier>public</specifier> <type><name>AssetFileDescriptor</name></type> <name>openTypedDocument</name><parameter_list>(
            <parameter><decl><type><name>String</name></type> <name>documentId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>mimeTypeFilter</name></decl></parameter>, <parameter><decl><type><name>Bundle</name></type> <name>opts</name></decl></parameter>, <parameter><decl><type><name>CancellationSignal</name></type> <name>signal</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>FileNotFoundException</name></expr></argument></throws> <block>{
        <throw>throw <expr><operator>new</operator> <call><name>FileNotFoundException</name><argument_list>(<argument><expr><literal type="string">"The requested MIME type is not supported."</literal></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Implementation is provided by the parent class. Cannot be overriden.
     *
     * @see #queryRoots(String[])
     * @see #queryRecentDocuments(String, String[])
     * @see #queryDocument(String, String[])
     * @see #queryChildDocuments(String, String[], String)
     * @see #querySearchDocuments(String, String, String[])
     */</comment>
    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <type><name>Cursor</name></type> <name>query</name><parameter_list>(<parameter><decl><type><name>Uri</name></type> <name>uri</name></decl></parameter>, <parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>projection</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>selection</name></decl></parameter>,
            <parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>selectionArgs</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>sortOrder</name></decl></parameter>)</parameter_list> <block>{
        <try>try <block>{
            <switch>switch <condition>(<expr><call><name><name>mMatcher</name><operator>.</operator><name>match</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
                <case>case <expr><name>MATCH_ROOTS</name></expr>:</case>
                    <return>return <expr><call><name>queryRoots</name><argument_list>(<argument><expr><name>projection</name></expr></argument>)</argument_list></call></expr>;</return>
                <case>case <expr><name>MATCH_RECENT</name></expr>:</case>
                    <return>return <expr><call><name>queryRecentDocuments</name><argument_list>(<argument><expr><call><name>getRootId</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>projection</name></expr></argument>)</argument_list></call></expr>;</return>
                <case>case <expr><name>MATCH_SEARCH</name></expr>:</case>
                    <return>return <expr><call><name>querySearchDocuments</name><argument_list>(
                            <argument><expr><call><name>getRootId</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>getSearchDocumentsQuery</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>projection</name></expr></argument>)</argument_list></call></expr>;</return>
                <case>case <expr><name>MATCH_DOCUMENT</name></expr>:</case>
                <case>case <expr><name>MATCH_DOCUMENT_TREE</name></expr>:</case>
                    <expr_stmt><expr><call><name>enforceTree</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><call><name>queryDocument</name><argument_list>(<argument><expr><call><name>getDocumentId</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>projection</name></expr></argument>)</argument_list></call></expr>;</return>
                <case>case <expr><name>MATCH_CHILDREN</name></expr>:</case>
                <case>case <expr><name>MATCH_CHILDREN_TREE</name></expr>:</case>
                    <expr_stmt><expr><call><name>enforceTree</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><call><name><name>DocumentsContract</name><operator>.</operator><name>isManageMode</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <return>return <expr><call><name>queryChildDocumentsForManage</name><argument_list>(
                                <argument><expr><call><name>getDocumentId</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>projection</name></expr></argument>, <argument><expr><name>sortOrder</name></expr></argument>)</argument_list></call></expr>;</return>
                    }</block></then> <else>else <block>{
                        <return>return <expr><call><name>queryChildDocuments</name><argument_list>(<argument><expr><call><name>getDocumentId</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>projection</name></expr></argument>, <argument><expr><name>sortOrder</name></expr></argument>)</argument_list></call></expr>;</return>
                    }</block></else></if>
                <default>default:</default>
                    <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>(<argument><expr><literal type="string">"Unsupported Uri "</literal> <operator>+</operator> <name>uri</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></switch>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>FileNotFoundException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Failed during query"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        }</block></catch></try>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Implementation is provided by the parent class. Cannot be overriden.
     *
     * @see #getDocumentType(String)
     */</comment>
    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <type><name>String</name></type> <name>getType</name><parameter_list>(<parameter><decl><type><name>Uri</name></type> <name>uri</name></decl></parameter>)</parameter_list> <block>{
        <try>try <block>{
            <switch>switch <condition>(<expr><call><name><name>mMatcher</name><operator>.</operator><name>match</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
                <case>case <expr><name>MATCH_ROOT</name></expr>:</case>
                    <return>return <expr><name><name>DocumentsContract</name><operator>.</operator><name>Root</name><operator>.</operator><name>MIME_TYPE_ITEM</name></name></expr>;</return>
                <case>case <expr><name>MATCH_DOCUMENT</name></expr>:</case>
                <case>case <expr><name>MATCH_DOCUMENT_TREE</name></expr>:</case>
                    <expr_stmt><expr><call><name>enforceTree</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><call><name>getDocumentType</name><argument_list>(<argument><expr><call><name>getDocumentId</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
                <default>default:</default>
                    <return>return <expr><literal type="null">null</literal></expr>;</return>
            }</block></switch>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>FileNotFoundException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Failed during getType"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        }</block></catch></try>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Implementation is provided by the parent class. Can be overridden to
     * provide additional functionality, but subclasses &lt;em&gt;must&lt;/em&gt; always
     * call the superclass. If the superclass returns {@code null}, the subclass
     * may implement custom behavior.
     * &lt;p&gt;
     * This is typically used to resolve a subtree URI into a concrete document
     * reference, issuing a narrower single-document URI permission grant along
     * the way.
     *
     * @see android.provider.DocumentsContract#buildDocumentUriUsingTree(android.net.Uri, String)
     */</comment>
    <function><annotation>@<name>TargetApi</name><argument_list>(<argument><expr><name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>KITKAT</name></name></expr></argument>)</argument_list></annotation>
    <annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>Uri</name></type> <name>canonicalize</name><parameter_list>(<parameter><decl><type><name>Uri</name></type> <name>uri</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name> <init>= <expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <switch>switch <condition>(<expr><call><name><name>mMatcher</name><operator>.</operator><name>match</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
            <case>case <expr><name>MATCH_DOCUMENT_TREE</name></expr>:</case>
                <expr_stmt><expr><call><name>enforceTree</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><specifier>final</specifier> <name>Uri</name></type> <name>narrowUri</name> <init>= <expr><call><name>buildDocumentUri</name><argument_list>(<argument><expr><call><name><name>uri</name><operator>.</operator><name>getAuthority</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getDocumentId</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <comment type="line">// Caller may only have prefix grant, so extend them a grant to</comment>
                <comment type="line">// the narrow URI.</comment>
                <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>modeFlags</name> <init>= <expr><call><name>getCallingOrSelfUriPermissionModeFlags</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if<condition>(<expr><call><name><name>Utils</name><operator>.</operator><name>hasKitKat</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>context</name><operator>.</operator><name>grantUriPermission</name></name><argument_list>(<argument><expr><call><name>getCallingPackage</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>narrowUri</name></expr></argument>, <argument><expr><name>modeFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <return>return <expr><name>narrowUri</name></expr>;</return>
        }</block></switch>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>getCallingOrSelfUriPermissionModeFlags</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>Uri</name></type> <name>uri</name></decl></parameter>)</parameter_list> <block>{
        <comment type="line">// TODO: move this to a direct AMS call</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>modeFlags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>context</name><operator>.</operator><name>checkCallingOrSelfUriPermission</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name><name>Intent</name><operator>.</operator><name>FLAG_GRANT_READ_URI_PERMISSION</name></name></expr></argument>)</argument_list></call>
                <operator>==</operator> <name><name>PackageManager</name><operator>.</operator><name>PERMISSION_GRANTED</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>modeFlags</name> <operator>|=</operator> <name><name>Intent</name><operator>.</operator><name>FLAG_GRANT_READ_URI_PERMISSION</name></name></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><call><name><name>context</name><operator>.</operator><name>checkCallingOrSelfUriPermission</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name><name>Intent</name><operator>.</operator><name>FLAG_GRANT_WRITE_URI_PERMISSION</name></name></expr></argument>)</argument_list></call>
                <operator>==</operator> <name><name>PackageManager</name><operator>.</operator><name>PERMISSION_GRANTED</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>modeFlags</name> <operator>|=</operator> <name><name>Intent</name><operator>.</operator><name>FLAG_GRANT_WRITE_URI_PERMISSION</name></name></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><call><name><name>context</name><operator>.</operator><name>checkCallingOrSelfUriPermission</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name><name>Intent</name><operator>.</operator><name>FLAG_GRANT_READ_URI_PERMISSION</name></name>
                <operator>|</operator> <name><name>Intent</name><operator>.</operator><name>FLAG_GRANT_PERSISTABLE_URI_PERMISSION</name></name></expr></argument>)</argument_list></call>
                <operator>==</operator> <name><name>PackageManager</name><operator>.</operator><name>PERMISSION_GRANTED</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>modeFlags</name> <operator>|=</operator> <name><name>Intent</name><operator>.</operator><name>FLAG_GRANT_PERSISTABLE_URI_PERMISSION</name></name></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>modeFlags</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Implementation is provided by the parent class. Throws by default, and
     * cannot be overriden.
     *
     * @see #createDocument(String, String, String)
     */</comment>
    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <type><name>Uri</name></type> <name>insert</name><parameter_list>(<parameter><decl><type><name>Uri</name></type> <name>uri</name></decl></parameter>, <parameter><decl><type><name>ContentValues</name></type> <name>values</name></decl></parameter>)</parameter_list> <block>{
        <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>(<argument><expr><literal type="string">"Insert not supported"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Implementation is provided by the parent class. Throws by default, and
     * cannot be overriden.
     *
     * @see #deleteDocument(String)
     */</comment>
    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <type><name>int</name></type> <name>delete</name><parameter_list>(<parameter><decl><type><name>Uri</name></type> <name>uri</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>selection</name></decl></parameter>, <parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>selectionArgs</name></decl></parameter>)</parameter_list> <block>{
        <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>(<argument><expr><literal type="string">"Delete not supported"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Implementation is provided by the parent class. Throws by default, and
     * cannot be overriden.
     */</comment>
    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <type><name>int</name></type> <name>update</name><parameter_list>(
            <parameter><decl><type><name>Uri</name></type> <name>uri</name></decl></parameter>, <parameter><decl><type><name>ContentValues</name></type> <name>values</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>selection</name></decl></parameter>, <parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>selectionArgs</name></decl></parameter>)</parameter_list> <block>{
        <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>(<argument><expr><literal type="string">"Update not supported"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Implementation is provided by the parent class. Can be overridden to
     * provide additional functionality, but subclasses &lt;em&gt;must&lt;/em&gt; always
     * call the superclass. If the superclass returns {@code null}, the subclass
     * may implement custom behavior.
     */</comment>
    <function><annotation>@<name>CallSuper</name></annotation>
    <annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>Bundle</name></type> <name>call</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>method</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>Bundle</name></type> <name>extras</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><operator>!</operator><call><name><name>method</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">"android:"</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <comment type="line">// Ignore non-platform methods</comment>
            <return>return <expr><call><name><name>super</name><operator>.</operator><name>call</name></name><argument_list>(<argument><expr><name>method</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>extras</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>

        <try>try <block>{
            <return>return <expr><call><name>callUnchecked</name><argument_list>(<argument><expr><name>method</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>extras</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>FileNotFoundException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Failed call "</literal> <operator>+</operator> <name>method</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <function><specifier>private</specifier> <type><name>Bundle</name></type> <name>callUnchecked</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>method</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>Bundle</name></type> <name>extras</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>FileNotFoundException</name></expr></argument></throws> <block>{

        <decl_stmt><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name> <init>= <expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Uri</name></type> <name>documentUri</name> <init>= <expr><call><name><name>extras</name><operator>.</operator><name>getParcelable</name></name><argument_list>(<argument><expr><name><name>DocumentsContract</name><operator>.</operator><name>EXTRA_URI</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>authority</name> <init>= <expr><call><name><name>documentUri</name><operator>.</operator><name>getAuthority</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>documentId</name> <init>= <expr><call><name><name>DocumentsContract</name><operator>.</operator><name>getDocumentId</name></name><argument_list>(<argument><expr><name>documentUri</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">//final String documentId = extras.getString(Document.COLUMN_DOCUMENT_ID);</comment>
        <comment type="line">//final Uri documentUri = DocumentsContract.buildDocumentUri(mAuthority, documentId);</comment>

        <if>if <condition>(<expr><operator>!</operator><call><name><name>mAuthority</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>authority</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr><operator>new</operator> <call><name>SecurityException</name><argument_list>(
                    <argument><expr><literal type="string">"Requested authority "</literal> <operator>+</operator> <name>authority</name> <operator>+</operator> <literal type="string">" doesn't match provider "</literal> <operator>+</operator> <name>mAuthority</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>out</name> <init>= <expr><operator>new</operator> <call><name>Bundle</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// If the URI is a tree URI performs some validation.</comment>
        <expr_stmt><expr><call><name>enforceTree</name><argument_list>(<argument><expr><name>documentUri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><call><name><name>METHOD_IS_CHILD_DOCUMENT</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>method</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>enforceReadPermissionInner</name><argument_list>(<argument><expr><name>documentUri</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><specifier>final</specifier> <name>Uri</name></type> <name>childUri</name> <init>= <expr><call><name><name>extras</name><operator>.</operator><name>getParcelable</name></name><argument_list>(<argument><expr><name><name>DocumentsContract</name><operator>.</operator><name>EXTRA_TARGET_URI</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>childAuthority</name> <init>= <expr><call><name><name>childUri</name><operator>.</operator><name>getAuthority</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>childId</name> <init>= <expr><call><name><name>DocumentsContract</name><operator>.</operator><name>getDocumentId</name></name><argument_list>(<argument><expr><name>childUri</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>putBoolean</name></name><argument_list>(<argument><expr><name><name>DocumentsContract</name><operator>.</operator><name>EXTRA_RESULT</name></name></expr></argument>,
                    <argument><expr><call><name><name>mAuthority</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>childAuthority</name></expr></argument>)</argument_list></call>
                            <operator>&amp;&amp;</operator> <call><name>isChildDocument</name><argument_list>(<argument><expr><name>documentId</name></expr></argument>, <argument><expr><name>childId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        }</block></then> <elseif>else <if>if <condition>(<expr><call><name><name>METHOD_CREATE_DOCUMENT</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>method</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>enforceWritePermissionInner</name><argument_list>(<argument><expr><name>documentUri</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>mimeType</name> <init>= <expr><call><name><name>extras</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>Document</name><operator>.</operator><name>COLUMN_MIME_TYPE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>displayName</name> <init>= <expr><call><name><name>extras</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>Document</name><operator>.</operator><name>COLUMN_DISPLAY_NAME</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>newDocumentId</name> <init>= <expr><call><name>createDocument</name><argument_list>(<argument><expr><name>documentId</name></expr></argument>, <argument><expr><name>mimeType</name></expr></argument>, <argument><expr><name>displayName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// No need to issue new grants here, since caller either has</comment>
            <comment type="line">// manage permission or a prefix grant. We might generate a</comment>
            <comment type="line">// tree style URI if that's how they called us.</comment>
            <decl_stmt><decl><type><specifier>final</specifier> <name>Uri</name></type> <name>newDocumentUri</name> <init>= <expr><call><name>buildDocumentUriMaybeUsingTree</name><argument_list>(<argument><expr><name>documentUri</name></expr></argument>,
                    <argument><expr><name>newDocumentId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>putParcelable</name></name><argument_list>(<argument><expr><name><name>DocumentsContract</name><operator>.</operator><name>EXTRA_URI</name></name></expr></argument>, <argument><expr><name>newDocumentUri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name><name>METHOD_RENAME_DOCUMENT</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>method</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>enforceWritePermissionInner</name><argument_list>(<argument><expr><name>documentUri</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>displayName</name> <init>= <expr><call><name><name>extras</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>Document</name><operator>.</operator><name>COLUMN_DISPLAY_NAME</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>newDocumentId</name> <init>= <expr><call><name>renameDocument</name><argument_list>(<argument><expr><name>documentId</name></expr></argument>, <argument><expr><name>displayName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name>newDocumentId</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>Uri</name></type> <name>newDocumentUri</name> <init>= <expr><call><name>buildDocumentUriMaybeUsingTree</name><argument_list>(<argument><expr><name>documentUri</name></expr></argument>,
                        <argument><expr><name>newDocumentId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <comment type="line">// If caller came in with a narrow grant, issue them a</comment>
                <comment type="line">// narrow grant for the newly renamed document.</comment>
                <if>if <condition>(<expr><operator>!</operator><call><name>isTreeUri</name><argument_list>(<argument><expr><name>newDocumentUri</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>modeFlags</name> <init>= <expr><call><name>getCallingOrSelfUriPermissionModeFlags</name><argument_list>(<argument><expr><name>context</name></expr></argument>,
                            <argument><expr><name>documentUri</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><call><name><name>Utils</name><operator>.</operator><name>hasKitKat</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>context</name><operator>.</operator><name>grantUriPermission</name></name><argument_list>(<argument><expr><call><name>getCallingPackage</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>newDocumentUri</name></expr></argument>, <argument><expr><name>modeFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then></if>

                <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>putParcelable</name></name><argument_list>(<argument><expr><name><name>DocumentsContract</name><operator>.</operator><name>EXTRA_URI</name></name></expr></argument>, <argument><expr><name>newDocumentUri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Original document no longer exists, clean up any grants.</comment>
                <expr_stmt><expr><call><name>revokeDocumentPermission</name><argument_list>(<argument><expr><name>documentId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

        }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name><name>METHOD_DELETE_DOCUMENT</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>method</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>enforceWritePermissionInner</name><argument_list>(<argument><expr><name>documentUri</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>deleteDocument</name><argument_list>(<argument><expr><name>documentId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Document no longer exists, clean up any grants.</comment>
            <expr_stmt><expr><call><name>revokeDocumentPermission</name><argument_list>(<argument><expr><name>documentId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name><name>METHOD_COPY_DOCUMENT</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>method</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>Uri</name></type> <name>targetUri</name> <init>= <expr><call><name><name>extras</name><operator>.</operator><name>getParcelable</name></name><argument_list>(<argument><expr><name><name>DocumentsContract</name><operator>.</operator><name>EXTRA_TARGET_URI</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>targetId</name> <init>= <expr><call><name><name>DocumentsContract</name><operator>.</operator><name>getDocumentId</name></name><argument_list>(<argument><expr><name>targetUri</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>enforceReadPermissionInner</name><argument_list>(<argument><expr><name>documentUri</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>enforceWritePermissionInner</name><argument_list>(<argument><expr><name>targetUri</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>newDocumentId</name> <init>= <expr><call><name>copyDocument</name><argument_list>(<argument><expr><name>documentId</name></expr></argument>, <argument><expr><name>targetId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name>newDocumentId</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>Uri</name></type> <name>newDocumentUri</name> <init>= <expr><call><name>buildDocumentUriMaybeUsingTree</name><argument_list>(<argument><expr><name>documentUri</name></expr></argument>,
                        <argument><expr><name>newDocumentId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if>if <condition>(<expr><operator>!</operator><call><name>isTreeUri</name><argument_list>(<argument><expr><name>newDocumentUri</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>modeFlags</name> <init>= <expr><call><name>getCallingOrSelfUriPermissionModeFlags</name><argument_list>(<argument><expr><name>context</name></expr></argument>,
                            <argument><expr><name>documentUri</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><call><name><name>Utils</name><operator>.</operator><name>hasKitKat</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>context</name><operator>.</operator><name>grantUriPermission</name></name><argument_list>(<argument><expr><call><name>getCallingPackage</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>newDocumentUri</name></expr></argument>, <argument><expr><name>modeFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then></if>

                <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>putParcelable</name></name><argument_list>(<argument><expr><name><name>DocumentsContract</name><operator>.</operator><name>EXTRA_URI</name></name></expr></argument>, <argument><expr><name>newDocumentUri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

        }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name><name>METHOD_MOVE_DOCUMENT</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>method</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>Uri</name></type> <name>parentSourceUri</name> <init>= <expr><call><name><name>extras</name><operator>.</operator><name>getParcelable</name></name><argument_list>(<argument><expr><name><name>DocumentsContract</name><operator>.</operator><name>EXTRA_PARENT_URI</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>parentSourceId</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><literal type="null">null</literal> <operator>!=</operator> <name>parentSourceUri</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>parentSourceId</name> <operator>=</operator> <call><name><name>DocumentsContract</name><operator>.</operator><name>getDocumentId</name></name><argument_list>(<argument><expr><name>parentSourceUri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <decl_stmt><decl><type><specifier>final</specifier> <name>Uri</name></type> <name>targetUri</name> <init>= <expr><call><name><name>extras</name><operator>.</operator><name>getParcelable</name></name><argument_list>(<argument><expr><name><name>DocumentsContract</name><operator>.</operator><name>EXTRA_TARGET_URI</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>targetId</name> <init>= <expr><call><name><name>DocumentsContract</name><operator>.</operator><name>getDocumentId</name></name><argument_list>(<argument><expr><name>targetUri</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>enforceWritePermissionInner</name><argument_list>(<argument><expr><name>documentUri</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>enforceReadPermissionInner</name><argument_list>(<argument><expr><name>parentSourceUri</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>enforceWritePermissionInner</name><argument_list>(<argument><expr><name>targetUri</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>newDocumentId</name> <init>= <expr><call><name>moveDocument</name><argument_list>(<argument><expr><name>documentId</name></expr></argument>, <argument><expr><name>parentSourceId</name></expr></argument>, <argument><expr><name>targetId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name>newDocumentId</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>Uri</name></type> <name>newDocumentUri</name> <init>= <expr><call><name>buildDocumentUriMaybeUsingTree</name><argument_list>(<argument><expr><name>documentUri</name></expr></argument>,
                        <argument><expr><name>newDocumentId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if>if <condition>(<expr><operator>!</operator><call><name>isTreeUri</name><argument_list>(<argument><expr><name>newDocumentUri</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>modeFlags</name> <init>= <expr><call><name>getCallingOrSelfUriPermissionModeFlags</name><argument_list>(<argument><expr><name>context</name></expr></argument>,
                            <argument><expr><name>documentUri</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><call><name><name>Utils</name><operator>.</operator><name>hasKitKat</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>context</name><operator>.</operator><name>grantUriPermission</name></name><argument_list>(<argument><expr><call><name>getCallingPackage</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>newDocumentUri</name></expr></argument>, <argument><expr><name>modeFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then></if>

                <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>putParcelable</name></name><argument_list>(<argument><expr><name><name>DocumentsContract</name><operator>.</operator><name>EXTRA_URI</name></name></expr></argument>, <argument><expr><name>newDocumentUri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name><name>METHOD_REMOVE_DOCUMENT</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>method</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>Uri</name></type> <name>parentSourceUri</name> <init>= <expr><call><name><name>extras</name><operator>.</operator><name>getParcelable</name></name><argument_list>(<argument><expr><name><name>DocumentsContract</name><operator>.</operator><name>EXTRA_PARENT_URI</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>parentSourceId</name> <init>= <expr><call><name><name>DocumentsContract</name><operator>.</operator><name>getDocumentId</name></name><argument_list>(<argument><expr><name>parentSourceUri</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>enforceReadPermissionInner</name><argument_list>(<argument><expr><name>parentSourceUri</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>enforceWritePermissionInner</name><argument_list>(<argument><expr><name>documentUri</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>removeDocument</name><argument_list>(<argument><expr><name>documentId</name></expr></argument>, <argument><expr><name>parentSourceId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// It's responsibility of the provider to revoke any grants, as the document may be</comment>
            <comment type="line">// still attached to another parents.</comment>

        }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name><name>METHOD_COMPRESS_DOCUMENT</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>method</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>enforceWritePermissionInner</name><argument_list>(<argument><expr><name>documentUri</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>documentIdTo</name> <init>= <expr><call><name><name>extras</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>DocumentsContract</name><operator>.</operator><name>EXTRA_DOCUMENT_TO</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>documentIdToCompress</name> <init>= <expr><call><name><name>extras</name><operator>.</operator><name>getStringArrayList</name></name><argument_list>(<argument><expr><name><name>DocumentsContract</name><operator>.</operator><name>EXTRA_DOCUMENTS_COMPRESS</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>compressDocument</name><argument_list>(<argument><expr><name>documentId</name></expr></argument>, <argument><expr><name>documentIdToCompress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Document no longer exists, clean up any grants</comment>
                <comment type="block">/*context.revokeUriPermission(documentUri, Intent.FLAG_GRANT_READ_URI_PERMISSION
                        | Intent.FLAG_GRANT_WRITE_URI_PERMISSION);*/</comment>
            <expr_stmt><expr><call><name>revokeDocumentPermission</name><argument_list>(<argument><expr><name>documentId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name><name>METHOD_UNCOMPRESS_DOCUMENT</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>method</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>enforceWritePermissionInner</name><argument_list>(<argument><expr><name>documentUri</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>documentIdTo</name> <init>= <expr><call><name><name>extras</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>DocumentsContract</name><operator>.</operator><name>EXTRA_DOCUMENT_TO</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>documentIdToCompress</name> <init>= <expr><call><name><name>extras</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>DocumentsContract</name><operator>.</operator><name>EXTRA_DOCUMENTS_COMPRESS</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>uncompressDocument</name><argument_list>(<argument><expr><name>documentId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Document no longer exists, clean up any grants</comment>
            <expr_stmt><expr><call><name>revokeDocumentPermission</name><argument_list>(<argument><expr><name>documentId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name><name>METHOD_UPLOAD_DOCUMENT</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>method</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>enforceWritePermissionInner</name><argument_list>(<argument><expr><name>documentUri</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>Uri</name></type> <name>uploadDocumentUri</name> <init>= <expr><call><name><name>extras</name><operator>.</operator><name>getParcelable</name></name><argument_list>(<argument><expr><name><name>DocumentsContract</name><operator>.</operator><name>EXTRA_UPLOAD_URI</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>mimeType</name> <init>= <expr><call><name><name>extras</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>Document</name><operator>.</operator><name>COLUMN_MIME_TYPE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>displayName</name> <init>= <expr><call><name><name>extras</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>Document</name><operator>.</operator><name>COLUMN_DISPLAY_NAME</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>success</name> <init>= <expr><call><name>uploadDocument</name><argument_list>(<argument><expr><name>documentId</name></expr></argument>, <argument><expr><name>uploadDocumentUri</name></expr></argument>, <argument><expr><name>mimeType</name></expr></argument>, <argument><expr><name>displayName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>putBoolean</name></name><argument_list>(<argument><expr><name><name>DocumentsContract</name><operator>.</operator><name>EXTRA_RESULT</name></name></expr></argument>, <argument><expr><name>success</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></elseif> <else>else <block>{
            <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>(<argument><expr><literal type="string">"Method not supported "</literal> <operator>+</operator> <name>method</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></else></if>
        <return>return <expr><name>out</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Revoke any active permission grants for the given
     * {@link DocumentsContract.Document#COLUMN_DOCUMENT_ID}, usually called when a document
     * becomes invalid. Follows the same semantics as
     * {@link android.content.Context#revokeUriPermission(android.net.Uri, int)}.
     */</comment>
    <function><specifier>public</specifier> <specifier>final</specifier> <type><name>void</name></type> <name>revokeDocumentPermission</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>documentId</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name> <init>= <expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>context</name><operator>.</operator><name>revokeUriPermission</name></name><argument_list>(<argument><expr><call><name>buildDocumentUri</name><argument_list>(<argument><expr><name>mAuthority</name></expr></argument>, <argument><expr><name>documentId</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>~</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>context</name><operator>.</operator><name>revokeUriPermission</name></name><argument_list>(<argument><expr><call><name>buildTreeDocumentUri</name><argument_list>(<argument><expr><name>mAuthority</name></expr></argument>, <argument><expr><name>documentId</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>~</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Implementation is provided by the parent class. Cannot be overriden.
     *
     * @see #openDocument(String, String, CancellationSignal)
     */</comment>
    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <type><name>ParcelFileDescriptor</name></type> <name>openFile</name><parameter_list>(<parameter><decl><type><name>Uri</name></type> <name>uri</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>mode</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>FileNotFoundException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>enforceTree</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>openDocument</name><argument_list>(<argument><expr><call><name>getDocumentId</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Implementation is provided by the parent class. Cannot be overriden.
     *
     * @see #openDocument(String, String, CancellationSignal)
     */</comment>
    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <type><name>ParcelFileDescriptor</name></type> <name>openFile</name><parameter_list>(<parameter><decl><type><name>Uri</name></type> <name>uri</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>CancellationSignal</name></type> <name>signal</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>FileNotFoundException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>enforceTree</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>openDocument</name><argument_list>(<argument><expr><call><name>getDocumentId</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>signal</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Implementation is provided by the parent class. Cannot be overriden.
     *
     * @see #openDocumentThumbnail(String, Point, CancellationSignal)
     */</comment>
    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <type><name>AssetFileDescriptor</name></type> <name>openAssetFile</name><parameter_list>(<parameter><decl><type><name>Uri</name></type> <name>uri</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>mode</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>FileNotFoundException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>enforceTree</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>ParcelFileDescriptor</name></type> <name>fd</name> <init>= <expr><call><name>openDocument</name><argument_list>(<argument><expr><call><name>getDocumentId</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><ternary><condition><expr><name>fd</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><operator>new</operator> <call><name>AssetFileDescriptor</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Implementation is provided by the parent class. Cannot be overriden.
     *
     * @see #openDocument(String, String, CancellationSignal)
     */</comment>
    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <type><name>AssetFileDescriptor</name></type> <name>openAssetFile</name><parameter_list>(<parameter><decl><type><name>Uri</name></type> <name>uri</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>CancellationSignal</name></type> <name>signal</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>FileNotFoundException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>enforceTree</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>ParcelFileDescriptor</name></type> <name>fd</name> <init>= <expr><call><name>openDocument</name><argument_list>(<argument><expr><call><name>getDocumentId</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>signal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><ternary><condition><expr><name>fd</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><operator>new</operator> <call><name>AssetFileDescriptor</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Implementation is provided by the parent class. Cannot be overriden.
     *
     * @see #openDocumentThumbnail(String, Point, CancellationSignal)
     * @see #openTypedDocument(String, String, Bundle, CancellationSignal)
     * @see #getDocumentStreamTypes(String, String)
     */</comment>
    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <type><name>AssetFileDescriptor</name></type> <name>openTypedAssetFile</name><parameter_list>(<parameter><decl><type><name>Uri</name></type> <name>uri</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>mimeTypeFilter</name></decl></parameter>, <parameter><decl><type><name>Bundle</name></type> <name>opts</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>FileNotFoundException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name>openTypedAssetFileImpl</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>mimeTypeFilter</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Implementation is provided by the parent class. Cannot be overriden.
     *
     * @see #openDocumentThumbnail(String, Point, CancellationSignal)
     * @see #openTypedDocument(String, String, Bundle, CancellationSignal)
     * @see #getDocumentStreamTypes(String, String)
     */</comment>
    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <type><name>AssetFileDescriptor</name></type> <name>openTypedAssetFile</name><parameter_list>(
            <parameter><decl><type><name>Uri</name></type> <name>uri</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>mimeTypeFilter</name></decl></parameter>, <parameter><decl><type><name>Bundle</name></type> <name>opts</name></decl></parameter>, <parameter><decl><type><name>CancellationSignal</name></type> <name>signal</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>FileNotFoundException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name>openTypedAssetFileImpl</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>mimeTypeFilter</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>, <argument><expr><name>signal</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Return a list of streamable MIME types matching the filter, which can be passed to
     * {@link #openTypedDocument(String, String, Bundle, CancellationSignal)}.
     *
     * &lt;p&gt;The default implementation returns a MIME type provided by
     * {@link #queryDocument(String, String[])} as long as it matches the filter and the document
     * does not have the {@link Document#FLAG_VIRTUAL_DOCUMENT} flag set.
     *
     * @see #getStreamTypes(Uri, String)
     * @see #openTypedDocument(String, String, Bundle, CancellationSignal)
     */</comment>
    <function><specifier>public</specifier> <type><name><name>String</name><index>[]</index></name></type> <name>getDocumentStreamTypes</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>documentId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>mimeTypeFilter</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Cursor</name></type> <name>cursor</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>cursor</name> <operator>=</operator> <call><name>queryDocument</name><argument_list>(<argument><expr><name>documentId</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name><name>cursor</name><operator>.</operator><name>moveToFirst</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>mimeType</name> <init>=
                    <expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>Document</name><operator>.</operator><name>COLUMN_MIME_TYPE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>flags</name> <init>=
                    <expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>Document</name><operator>.</operator><name>COLUMN_FLAGS</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name><name>Document</name><operator>.</operator><name>FLAG_VIRTUAL_DOCUMENT</name></name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>mimeType</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator>
                        <call><name>mimeTypeMatches</name><argument_list>(<argument><expr><name>mimeTypeFilter</name></expr></argument>, <argument><expr><name>mimeType</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <return>return <expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><name>mimeType</name></expr> }</block></expr>;</return>
                }</block></then></if>
            }</block></then></if>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>FileNotFoundException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        }</block></catch> <finally>finally <block>{
            <expr_stmt><expr><call><name><name>IoUtils</name><operator>.</operator><name>closeQuietly</name></name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>

        <comment type="line">// No streamable MIME types.</comment>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Called by a client to determine the types of data streams that this content provider
     * support for the given URI.
     *
     * &lt;p&gt;Overriding this method is deprecated. Override {@link #openTypedDocument} instead.
     *
     * @see #getDocumentStreamTypes(String, String)
     */</comment>
    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name><name>String</name><index>[]</index></name></type> <name>getStreamTypes</name><parameter_list>(<parameter><decl><type><name>Uri</name></type> <name>uri</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>mimeTypeFilter</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>enforceTree</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>getDocumentStreamTypes</name><argument_list>(<argument><expr><call><name>getDocumentId</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mimeTypeFilter</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <specifier>final</specifier> <type><name>AssetFileDescriptor</name></type> <name>openTypedAssetFileImpl</name><parameter_list>(
            <parameter><decl><type><name>Uri</name></type> <name>uri</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>mimeTypeFilter</name></decl></parameter>, <parameter><decl><type><name>Bundle</name></type> <name>opts</name></decl></parameter>, <parameter><decl><type><name>CancellationSignal</name></type> <name>signal</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>FileNotFoundException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>enforceTree</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>documentId</name> <init>= <expr><call><name>getDocumentId</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>opts</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>opts</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name><name>ContentResolver</name><operator>.</operator><name>EXTRA_SIZE</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>Point</name></type> <name>sizeHint</name> <init>= <expr><call><name><name>opts</name><operator>.</operator><name>getParcelable</name></name><argument_list>(<argument><expr><name><name>ContentResolver</name><operator>.</operator><name>EXTRA_SIZE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name>openDocumentThumbnail</name><argument_list>(<argument><expr><name>documentId</name></expr></argument>, <argument><expr><name>sizeHint</name></expr></argument>, <argument><expr><name>signal</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><literal type="string">"*/*"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>mimeTypeFilter</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
             <comment type="line">// If they can take anything, the untyped open call is good enough.</comment>
             <return>return <expr><call><name>openAssetFile</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>baseType</name> <init>= <expr><call><name>getType</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>baseType</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>ClipDescription</name><operator>.</operator><name>compareMimeTypes</name></name><argument_list>(<argument><expr><name>baseType</name></expr></argument>, <argument><expr><name>mimeTypeFilter</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <comment type="line">// Use old untyped open call if this provider has a type for this</comment>
            <comment type="line">// URI and it matches the request.</comment>
            <return>return <expr><call><name>openAssetFile</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
        <comment type="line">// For any other yet unhandled case, let the provider subclass handle it.</comment>
        <return>return <expr><call><name>openTypedDocument</name><argument_list>(<argument><expr><name>documentId</name></expr></argument>, <argument><expr><name>mimeTypeFilter</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>, <argument><expr><name>signal</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>mimeTypeMatches</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>filter</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>test</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>test</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        }</block></then> <elseif>else <if>if <condition>(<expr><name>filter</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <literal type="string">"*/*"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name><name>filter</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>test</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name><name>filter</name><operator>.</operator><name>endsWith</name></name><argument_list>(<argument><expr><literal type="string">"/*"</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>filter</name><operator>.</operator><name>regionMatches</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>test</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>filter</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if></elseif> <else>else <block>{
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        }</block></else></if>
    }</block></function>

    <function><specifier>private</specifier> <type><name>int</name></type> <name>enforceReadPermission</name><parameter_list>(<parameter><decl><type><name>Uri</name></type> <name>uri</name></decl></parameter>, <parameter><decl><type><name>IBinder</name></type> <name>callerToken</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>SecurityException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>mode</name> <init>= <expr><call><name>enforceReadPermissionInner</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>callerToken</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>mode</name> <operator>!=</operator> <name>MODE_ALLOWED</name></expr>)</condition><then> <block>{
            <return>return <expr><name>mode</name></expr>;</return>
        }</block></then></if>

        <return>return <expr><name><name>AppOpsManager</name><operator>.</operator><name>MODE_ALLOWED</name></name></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <type><name>int</name></type> <name>enforceWritePermission</name><parameter_list>(<parameter><decl><type><name>Uri</name></type> <name>uri</name></decl></parameter>, <parameter><decl><type><name>IBinder</name></type> <name>callerToken</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>SecurityException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>mode</name> <init>= <expr><call><name>enforceWritePermissionInner</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>callerToken</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>mode</name> <operator>!=</operator> <name>MODE_ALLOWED</name></expr>)</condition><then> <block>{
            <return>return <expr><name>mode</name></expr>;</return>
        }</block></then></if>

        <return>return <expr><name><name>AppOpsManager</name><operator>.</operator><name>MODE_ALLOWED</name></name></expr>;</return>
    }</block></function>

    <function><specifier>protected</specifier> <type><name>int</name></type> <name>enforceReadPermissionInner</name><parameter_list>(<parameter><decl><type><name>Uri</name></type> <name>uri</name></decl></parameter>, <parameter><decl><type><name>IBinder</name></type> <name>callerToken</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>SecurityException</name></expr></argument></throws> <block>{
        <return>return <expr><name>MODE_ALLOWED</name></expr>;</return>
    }</block></function>

    <function><specifier>protected</specifier> <type><name>int</name></type> <name>enforceWritePermissionInner</name><parameter_list>(<parameter><decl><type><name>Uri</name></type> <name>uri</name></decl></parameter>, <parameter><decl><type><name>IBinder</name></type> <name>callerToken</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>SecurityException</name></expr></argument></throws> <block>{
        <return>return <expr><name>MODE_ALLOWED</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>updateRoots</name><parameter_list>()</parameter_list><block>{

    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>getParentRootIdForDocId</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>docId</name></decl></parameter>)</parameter_list><block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>splitIndex</name> <init>= <expr><call><name><name>docId</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="char">':'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>rootId</name> <init>= <expr><call><name><name>docId</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>splitIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>path</name> <init>= <expr><call><name><name>docId</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><name>splitIndex</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>pathSplitIndex</name> <init>= <expr><call><name><name>path</name><operator>.</operator><name>lastIndexOf</name></name><argument_list>(<argument><expr><name>DIRECTORY_SEPERATOR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>parentPath</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>pathSplitIndex</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>parentPath</name> <operator>=</operator> <call><name><name>path</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pathSplitIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>rootId</name> <operator>+</operator> <name>ROOT_SEPERATOR</name> <operator>+</operator> <name>parentPath</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>getRootIdForDocId</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>docId</name></decl></parameter>)</parameter_list><block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>splitIndex</name> <init>= <expr><call><name><name>docId</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="char">':'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>rootId</name> <init>= <expr><call><name><name>docId</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>splitIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>rootId</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
