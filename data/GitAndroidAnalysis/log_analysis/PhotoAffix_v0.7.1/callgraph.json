{"<androidx.collection.ArrayMap$1: int colIndexOfKey(java.lang.Object)>":["<androidx.collection.SimpleArrayMap: int indexOfKey(java.lang.Object)>"],"<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: boolean setState(int[])>":["<androidx.vectordrawable.graphics.drawable.VectorDrawableCommon: boolean setState(int[])>"],"<com.afollestad.photoaffix.utilities.ext.IoExtKt: void closeQuietely(java.io.Closeable)>":["<java.io.FileInputStream: void close()>"],"<androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: android.animation.PropertyValuesHolder[] loadValues(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)>":["<androidx.core.content.res.TypedArrayUtils: int getNamedInt(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int,int)>","<androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: android.animation.PropertyValuesHolder loadPvh(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser,java.lang.String,int)>","<androidx.core.content.res.TypedArrayUtils: android.content.res.TypedArray obtainAttributes(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,int[])>","<java.lang.String: boolean equals(java.lang.Object)>","<androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: android.animation.PropertyValuesHolder getPVH(android.content.res.TypedArray,int,int,int,java.lang.String)>","<androidx.vectordrawable.graphics.drawable.AndroidResources: void <clinit>()>","<java.util.ArrayList: void <init>()>","<java.util.ArrayList: boolean add(java.lang.Object)>","<java.util.ArrayList: int size()>","<java.util.ArrayList: java.lang.Object get(int)>","<androidx.core.content.res.TypedArrayUtils: java.lang.String getNamedString(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int)>"],"<androidx.fragment.app.FragmentManagerImpl: void dispatchOnFragmentSaveInstanceState(androidx.fragment.app.Fragment,android.os.Bundle,boolean)>":["<java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>"],"<androidx.core.content.res.FontResourcesParserCompat: androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry readFont(org.xmlpull.v1.XmlPullParser,android.content.res.Resources)>":["<androidx.core.content.res.FontResourcesParserCompat: void skip(org.xmlpull.v1.XmlPullParser)>","<androidx.core.R$styleable: void <clinit>()>","<androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry: void <init>(java.lang.String,int,boolean,java.lang.String,int,int)>","<android.util.Xml: android.util.AttributeSet asAttributeSet(org.xmlpull.v1.XmlPullParser)>","<android.util.Xml: void <clinit>()>","<android.content.res.Resources: android.content.res.TypedArray obtainAttributes(android.util.AttributeSet,int[])>"],"<androidx.appcompat.content.res.AppCompatResources: void addColorStateListToCache(android.content.Context,int,android.content.res.ColorStateList)>":["<androidx.appcompat.app.AppCompatActivity: android.content.res.Resources getResources()>","<android.util.SparseArray: void <init>()>","<android.content.res.Resources: android.content.res.Configuration getConfiguration()>","<androidx.appcompat.content.res.AppCompatResources: void <clinit>()>","<android.util.SparseArray: void append(int,java.lang.Object)>","<java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>","<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>","<androidx.appcompat.content.res.AppCompatResources$ColorStateListCacheEntry: void <init>(android.content.res.ColorStateList,android.content.res.Configuration)>"],"<androidx.core.graphics.drawable.WrappedDrawableApi14$DrawableWrapperState: int getChangingConfigurations()>":["<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: int getChangingConfigurations()>","<androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState: int getChangingConfigurations()>","<androidx.core.graphics.drawable.WrappedDrawableApi14$DrawableWrapperState: int getChangingConfigurations()>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableDelegateState: int getChangingConfigurations()>","<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat$AnimatedVectorDrawableDelegateState: int getChangingConfigurations()>"],"<kotlin.ranges.IntProgression$Companion: kotlin.ranges.IntProgression fromClosedRange(int,int,int)>":["<kotlin.ranges.IntProgression: void <init>(int,int,int)>","<kotlin.ranges.IntProgression: void <clinit>()>"],"<kotlinx.coroutines.ResumeAwaitOnCompletion: void invoke(java.lang.Throwable)>":["<java.lang.IllegalStateException: void <init>(java.lang.String)>","<kotlinx.coroutines.AbstractContinuation: void resumeWithExceptionMode$kotlinx_coroutines_core(java.lang.Throwable,int)>","<kotlin.Result: void <clinit>()>","<kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>","<kotlinx.coroutines.JobSupport: java.lang.Object getState$kotlinx_coroutines_core()>","<kotlinx.coroutines.AbstractContinuation: void resumeWith(java.lang.Object)>","<java.lang.String: java.lang.String toString()>"],"<com.afollestad.assent.internal.ExtensionsKt: void transact(androidx.fragment.app.FragmentActivity,kotlin.jvm.functions.Function1)>":["<androidx.fragment.app.FragmentManagerImpl: androidx.fragment.app.FragmentTransaction beginTransaction()>","<androidx.fragment.app.FragmentManagerImpl: boolean executePendingTransactions()>","<androidx.fragment.app.FragmentActivity: androidx.fragment.app.FragmentManager getSupportFragmentManager()>","<androidx.fragment.app.BackStackRecord: int commit()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<kotlin.jvm.internal.Intrinsics: void checkExpressionValueIsNotNull(java.lang.Object,java.lang.String)>","<com.afollestad.assent.internal.Data$Companion$assureFragment$1$1: java.lang.Object invoke(java.lang.Object)>"],"<androidx.appcompat.app.AppCompatDelegateImpl: void onCreate(android.os.Bundle)>":["<androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.app.ActionBar peekSupportActionBar()>","<androidx.appcompat.app.WindowDecorActionBar: void setDefaultDisplayHomeAsUpEnabled(boolean)>","<androidx.core.app.NavUtils: java.lang.String getParentActivityName(android.app.Activity)>"],"<androidx.fragment.app.FragmentManagerImpl: void dispatchPause()>":["<androidx.fragment.app.FragmentManagerImpl: void dispatchStateChange(int)>"],"<androidx.appcompat.view.menu.MenuBuilder: void startDispatchingItemsChanged()>":["<androidx.appcompat.view.menu.MenuBuilder: void onItemsChanged(boolean)>"],"<kotlin.coroutines.AbstractCoroutineContextElement: java.lang.Object fold(java.lang.Object,kotlin.jvm.functions.Function2)>":["<kotlin.coroutines.CoroutineContext$Element$DefaultImpls: java.lang.Object fold(kotlin.coroutines.CoroutineContext$Element,java.lang.Object,kotlin.jvm.functions.Function2)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<kotlinx.coroutines.InvokeOnCancelling: void <init>(kotlinx.coroutines.Job,kotlin.jvm.functions.Function1)>":["<kotlinx.coroutines.JobCancellingNode: void <init>(kotlinx.coroutines.Job)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<androidx.fragment.app.FragmentManagerImpl: java.util.List getFragments()>":["<java.util.ArrayList: boolean isEmpty()>","<java.util.ArrayList: java.lang.Object clone()>","<java.util.Collections: void <clinit>()>","<java.util.Collections: java.util.List emptyList()>"],"<androidx.fragment.app.FragmentManagerImpl: void forcePostponedTransactions()>":["<java.util.ArrayList: boolean isEmpty()>","<java.util.ArrayList: java.lang.Object remove(int)>"],"<kotlin.coroutines.CombinedContext: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext)>":["<kotlin.coroutines.CoroutineContext$DefaultImpls: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext,kotlin.coroutines.CoroutineContext)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<com.afollestad.dragselectrecyclerview.DragSelectTouchListener$Companion: void <init>()>":["<java.lang.Object: void <init>()>"],"<kotlin.jvm.internal.Intrinsics: void throwParameterIsNullException(java.lang.String)>":["<java.lang.StringBuilder: java.lang.String toString()>","<java.lang.IllegalArgumentException: void <init>(java.lang.String)>","<kotlin.jvm.internal.Intrinsics: java.lang.Throwable sanitizeStackTrace(java.lang.Throwable)>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<java.lang.Thread: java.lang.Thread currentThread()>","<java.lang.StringBuilder: void <init>()>","<java.lang.Thread: java.lang.StackTraceElement[] getStackTrace()>"],"<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: void <init>(androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup,androidx.collection.ArrayMap)>":["<java.lang.IllegalStateException: void <init>(java.lang.String)>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: void <init>(androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup,androidx.collection.ArrayMap)>","<android.graphics.Matrix: void <init>()>","<java.util.ArrayList: void <init>()>","<androidx.collection.SimpleArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>","<android.graphics.Matrix: void set(android.graphics.Matrix)>","<java.util.ArrayList: boolean add(java.lang.Object)>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VObject: void <init>(androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$1)>","<java.util.ArrayList: int size()>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: void <init>(androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath)>","<java.util.ArrayList: java.lang.Object get(int)>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VClipPath: void <init>(androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VClipPath)>"],"<kotlinx.coroutines.CoroutineId: java.lang.String updateThreadContext(kotlin.coroutines.CoroutineContext)>":["<kotlin.coroutines.CombinedContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>","<java.lang.Thread: java.lang.String getName()>","<java.lang.Thread: void setName(java.lang.String)>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<java.lang.String: int length()>","<java.lang.StringBuilder: java.lang.StringBuilder append(long)>","<kotlinx.coroutines.JobSupport: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>","<kotlin.coroutines.EmptyCoroutineContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>","<java.lang.StringBuilder: java.lang.String toString()>","<kotlinx.coroutines.CoroutineId: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>","<java.lang.StringBuilder: java.lang.StringBuilder append(char)>","<java.lang.Thread: java.lang.Thread currentThread()>","<kotlinx.coroutines.CoroutineDispatcher: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>","<kotlinx.coroutines.CoroutineName: void <clinit>()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<java.lang.StringBuilder: void <init>(int)>","<kotlin.text.StringsKt__StringsKt: int lastIndexOf$default(java.lang.CharSequence,java.lang.String,int,boolean,int,java.lang.Object)>","<kotlin.jvm.internal.Intrinsics: void checkExpressionValueIsNotNull(java.lang.Object,java.lang.String)>"],"<com.afollestad.photoaffix.adapters.PhotoGridAdapter: void onSelection(kotlin.jvm.functions.Function2)>":["<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<io.reactivex.internal.util.ErrorMode: void <clinit>()>":["<io.reactivex.internal.util.ErrorMode: void <clinit>()>","<io.reactivex.internal.util.ErrorMode: void <init>(java.lang.String,int)>"],"<kotlin.coroutines.jvm.internal.ContinuationImpl: kotlin.coroutines.Continuation intercepted()>":["<kotlin.coroutines.CombinedContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>","<kotlinx.coroutines.CoroutineId: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>","<kotlin.coroutines.jvm.internal.ContinuationImpl: kotlin.coroutines.CoroutineContext getContext()>","<kotlinx.coroutines.CoroutineDispatcher: kotlin.coroutines.Continuation interceptContinuation(kotlin.coroutines.Continuation)>","<kotlinx.coroutines.CoroutineDispatcher: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>","<kotlin.coroutines.ContinuationInterceptor: void <clinit>()>","<kotlin.coroutines.EmptyCoroutineContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>","<kotlinx.coroutines.JobSupport: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>"],"<kotlin.ranges.IntProgression: void <clinit>()>":["<kotlin.ranges.IntProgression: void <clinit>()>","<kotlin.ranges.IntProgression$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>"],"<androidx.fragment.app.FragmentTransition: void replaceHide(androidx.fragment.app.FragmentTransitionImpl,java.lang.Object,androidx.fragment.app.Fragment,java.util.ArrayList)>":["<androidx.fragment.app.FragmentTransitionCompat21: void scheduleHideFragmentView(java.lang.Object,android.view.View,java.util.ArrayList)>","<androidx.fragment.app.FragmentTransition$1: void <init>(java.util.ArrayList)>","<androidx.fragment.app.OneShotPreDrawListener: androidx.fragment.app.OneShotPreDrawListener add(android.view.View,java.lang.Runnable)>"],"<kotlinx.coroutines.JobSupport: boolean isCancelling(kotlinx.coroutines.Incomplete)>":["<kotlinx.coroutines.JobSupport$Finishing: boolean isCancelling()>"],"<com.afollestad.photoaffix.utilities.RealDpConverter_Factory: com.afollestad.photoaffix.utilities.RealDpConverter_Factory create(javax.inject.Provider)>":["<com.afollestad.photoaffix.utilities.RealDpConverter_Factory: void <init>(javax.inject.Provider)>"],"<java.lang.Exception: void <init>()>":["<java.lang.RuntimeException: void <init>(java.lang.String)>","<java.lang.Throwable: void <init>()>"],"<com.afollestad.rxkprefs.RealRxkPrefs: com.afollestad.rxkprefs.Pref integer(java.lang.String,int)>":["<java.lang.Integer: void <clinit>()>","<com.afollestad.rxkprefs.adapters.IntAdapter$Companion: com.afollestad.rxkprefs.adapters.IntAdapter getINSTANCE()>","<com.afollestad.rxkprefs.RealPref: void <init>(android.content.SharedPreferences,java.lang.String,java.lang.Object,io.reactivex.Observable,com.afollestad.rxkprefs.adapters.PrefAdapter)>","<java.lang.Integer: java.lang.Integer valueOf(int)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<com.afollestad.rxkprefs.adapters.IntAdapter: void <clinit>()>"],"<com.afollestad.materialdialogs.Theme: void <init>(java.lang.String,int,int)>":["<java.lang.Enum: void <init>(java.lang.String,int)>"],"<androidx.vectordrawable.graphics.drawable.PathInterpolatorCompat: void initPath(android.graphics.Path)>":["<android.graphics.PathMeasure: boolean nextContour()>","<java.lang.StringBuilder: java.lang.StringBuilder append(float)>","<java.lang.StringBuilder: java.lang.String toString()>","<java.lang.IllegalArgumentException: void <init>(java.lang.String)>","<java.lang.Math: int min(int,int)>","<android.graphics.PathMeasure: void <init>(android.graphics.Path,boolean)>","<android.graphics.PathMeasure: boolean getPosTan(float,float[],float[])>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<java.lang.StringBuilder: void <init>()>","<java.lang.Math: float abs(float)>","<android.graphics.PathMeasure: float getLength()>"],"<androidx.appcompat.view.menu.MenuBuilder: void addMenuPresenter(androidx.appcompat.view.menu.MenuPresenter)>":["<androidx.appcompat.view.menu.MenuBuilder: void addMenuPresenter(androidx.appcompat.view.menu.MenuPresenter,android.content.Context)>"],"<kotlinx.coroutines.internal.AtomicOp: void <init>()>":["<kotlinx.coroutines.internal.OpDescriptor: void <init>()>","<kotlinx.coroutines.internal.AtomicKt: void <clinit>()>","<kotlinx.coroutines.internal.AtomicKt: java.lang.Object access$getNO_DECISION$p()>"],"<androidx.fragment.app.BackStackRecord: void dump(java.lang.String,java.io.PrintWriter,boolean)>":["<java.io.PrintWriter: void print(java.lang.String)>","<java.io.PrintWriter: void println(boolean)>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<java.lang.StringBuilder: void <init>()>","<java.lang.StringBuilder: java.lang.StringBuilder append(int)>","<java.lang.StringBuilder: java.lang.String toString()>","<java.util.ArrayList: boolean isEmpty()>","<java.lang.Integer: java.lang.String toHexString(int)>","<java.io.PrintWriter: void println(java.lang.Object)>","<java.io.PrintWriter: void println(java.lang.String)>","<java.lang.Integer: void <clinit>()>","<java.io.PrintWriter: void print(int)>","<java.util.ArrayList: int size()>","<java.util.ArrayList: java.lang.Object get(int)>"],"<androidx.appcompat.app.TwilightManager: boolean isNight()>":["<androidx.appcompat.app.TwilightManager: boolean isStateValid()>","<android.util.Log: int i(java.lang.String,java.lang.String)>","<androidx.appcompat.app.TwilightManager: android.location.Location getLastKnownLocation()>","<java.util.Calendar: java.util.Calendar getInstance()>","<androidx.appcompat.app.TwilightManager: void updateState(android.location.Location)>"],"<androidx.core.graphics.drawable.WrappedDrawableApi14: androidx.core.graphics.drawable.WrappedDrawableApi14$DrawableWrapperState mutateConstantState()>":["<androidx.core.graphics.drawable.WrappedDrawableApi14$DrawableWrapperStateBase: void <init>(androidx.core.graphics.drawable.WrappedDrawableApi14$DrawableWrapperState,android.content.res.Resources)>"],"<java.lang.Thread: void setDefaultUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)>":["<java.lang.RuntimeException: void <init>(java.lang.String)>"],"<com.afollestad.photoaffix.engine.subengines.RealDimensionsEngine_Factory: void <init>(javax.inject.Provider,javax.inject.Provider,javax.inject.Provider,javax.inject.Provider,javax.inject.Provider)>":["<java.lang.Object: void <init>()>"],"<com.afollestad.photoaffix.engine.RealAffixEngine: void <init>(com.afollestad.photoaffix.utilities.IoManager,com.afollestad.photoaffix.engine.bitmaps.BitmapManipulator,com.afollestad.photoaffix.engine.subengines.DimensionsEngine,com.afollestad.photoaffix.engine.subengines.StitchEngine)>":["<java.lang.Object: void <init>()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<io.reactivex.internal.functions.Functions$EmptyRunnable: void <init>()>":["<java.lang.Object: void <init>()>"],"<androidx.recyclerview.widget.GridLayoutManager$SpanSizeLookup: void invalidateSpanIndexCache()>":["<android.util.SparseIntArray: void clear()>"],"<io.reactivex.Scheduler$Worker: void <init>()>":["<java.lang.Object: void <init>()>"],"<io.reactivex.plugins.RxJavaPlugins: io.reactivex.Scheduler initSingleScheduler(java.util.concurrent.Callable)>":["<io.reactivex.internal.functions.ObjectHelper: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>","<io.reactivex.plugins.RxJavaPlugins: io.reactivex.Scheduler applyRequireNonNull(io.reactivex.functions.Function,java.util.concurrent.Callable)>","<io.reactivex.internal.functions.ObjectHelper: void <clinit>()>","<io.reactivex.plugins.RxJavaPlugins: io.reactivex.Scheduler callRequireNonNull(java.util.concurrent.Callable)>"],"<com.afollestad.photoaffix.engine.bitmaps.RealBitmapManipulator: android.graphics.BitmapFactory$Options createOptions(boolean)>":["<android.graphics.BitmapFactory$Options: void <init>()>"],"<androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: android.animation.ValueAnimator loadAnimator(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,android.animation.ValueAnimator,float,org.xmlpull.v1.XmlPullParser)>":["<android.animation.ValueAnimator: void setInterpolator(android.animation.TimeInterpolator)>","<androidx.vectordrawable.graphics.drawable.AnimationUtilsCompat: android.view.animation.Interpolator loadInterpolator(android.content.Context,int)>","<androidx.core.content.res.TypedArrayUtils: android.content.res.TypedArray obtainAttributes(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,int[])>","<androidx.vectordrawable.graphics.drawable.AndroidResources: void <clinit>()>","<androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: void parseAnimatorFromTypeArray(android.animation.ValueAnimator,android.content.res.TypedArray,android.content.res.TypedArray,float,org.xmlpull.v1.XmlPullParser)>","<android.animation.ValueAnimator: void <init>()>","<androidx.core.content.res.TypedArrayUtils: int getNamedResourceId(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int,int)>"],"<com.afollestad.photoaffix.utilities.RealMediaScanner_Factory: com.afollestad.photoaffix.utilities.RealMediaScanner_Factory create(javax.inject.Provider)>":["<com.afollestad.photoaffix.utilities.RealMediaScanner_Factory: void <init>(javax.inject.Provider)>"],"<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatedStateListState: boolean isTransitionReversed(int,int)>":["<androidx.collection.LongSparseArray: java.lang.Object get(long,java.lang.Object)>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatedStateListState: long generateTransitionKey(int,int)>","<java.lang.Long: java.lang.Long valueOf(long)>","<java.lang.Long: void <clinit>()>"],"<kotlinx.coroutines.JobSupport: java.lang.String stateString(java.lang.Object)>":["<kotlinx.coroutines.Empty: boolean isActive()>"],"<kotlin.text.StringsKt__StringNumberConversionsKt: java.lang.Integer toIntOrNull(java.lang.String)>":["<kotlin.text.StringsKt__StringNumberConversionsKt: java.lang.Integer toIntOrNull(java.lang.String,int)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<com.afollestad.photoaffix.engine.subengines.RealDimensionsEngine_Factory: java.lang.Object get()>":["<com.afollestad.photoaffix.engine.subengines.RealDimensionsEngine_Factory: com.afollestad.photoaffix.engine.subengines.RealDimensionsEngine get()>"],"<androidx.appcompat.app.AppCompatDelegateImpl$1: void <init>(java.lang.Thread$UncaughtExceptionHandler)>":["<java.lang.Object: void <init>()>"],"<io.reactivex.internal.schedulers.SingleScheduler: java.util.concurrent.ScheduledExecutorService createExecutor(java.util.concurrent.ThreadFactory)>":["<io.reactivex.internal.schedulers.SchedulerPoolFactory: void <clinit>()>","<io.reactivex.internal.schedulers.SchedulerPoolFactory: java.util.concurrent.ScheduledExecutorService create(java.util.concurrent.ThreadFactory)>"],"<kotlinx.coroutines.JobSupport: void handleJobException(java.lang.Throwable)>":["<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<kotlinx.coroutines.JobSupport$Finishing: java.util.ArrayList allocateList()>":["<java.util.ArrayList: void <init>(int)>"],"<kotlin.text.StringsKt__StringsJVMKt: boolean isBlank(java.lang.CharSequence)>":["<kotlin.ranges.IntProgressionIterator: boolean hasNext()>","<kotlin.text.CharsKt__CharJVMKt: boolean isWhitespace(char)>","<kotlin.ranges.IntProgression: java.util.Iterator iterator()>","<kotlin.ranges.IntProgressionIterator: int nextInt()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<kotlin.text.StringsKt__StringsKt: kotlin.ranges.IntRange getIndices(java.lang.CharSequence)>"],"<androidx.core.graphics.TypefaceCompatBaseImpl: android.graphics.Typeface createFromFontInfo(android.content.Context,android.os.CancellationSignal,androidx.core.provider.FontsContractCompat$FontInfo[],int)>":["<android.content.ContextWrapper: android.content.ContentResolver getContentResolver()>","<androidx.core.graphics.TypefaceCompatBaseImpl: androidx.core.provider.FontsContractCompat$FontInfo findBestInfo(androidx.core.provider.FontsContractCompat$FontInfo[],int)>","<androidx.core.graphics.TypefaceCompatBaseImpl: android.graphics.Typeface createFromInputStream(android.content.Context,java.io.InputStream)>","<androidx.core.graphics.TypefaceCompatUtil: void closeQuietly(java.io.Closeable)>"],"<kotlin.KotlinNullPointerException: void <init>()>":["<java.lang.NullPointerException: void <init>()>"],"<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimationDrawableTransition: void <init>(android.graphics.drawable.AnimationDrawable,boolean,boolean)>":["<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$FrameInterpolator: int getTotalDuration()>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$Transition: void <init>(androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$1)>","<android.os.Build$VERSION: void <clinit>()>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$FrameInterpolator: void <init>(android.graphics.drawable.AnimationDrawable,boolean)>","<android.animation.ObjectAnimator: android.animation.ObjectAnimator ofInt(java.lang.Object,java.lang.String,int[])>"],"<com.afollestad.photoaffix.di.AppProvideModule_ProvideAppNameFactory: java.lang.String provideInstance(com.afollestad.photoaffix.di.AppProvideModule,javax.inject.Provider)>":["<com.afollestad.photoaffix.engine.subengines.RealStitchEngine_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideScalePriorityPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.utilities.RealDpConverter_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.engine.RealAffixEngine_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideStackHorizontallyPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.engine.photos.RealPhotoLoader_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.engine.bitmaps.RealBitmapManipulator_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.utilities.RealMediaScanner_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.utilities.RealIoManager_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.di.AppProvideModule_ProvideAppNameFactory: java.lang.String proxyProvideAppName(com.afollestad.photoaffix.di.AppProvideModule,android.app.Application)>","<com.afollestad.photoaffix.di.AppProvideModule_ProvideAppNameFactory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideImageSpacingVerticalPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideImageSpacingHorizontalPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideBgFillColorPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.presenters.RealMainPresenter_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideRxkPrefsFactory: java.lang.Object get()>","<dagger.internal.DoubleCheck: java.lang.Object get()>","<com.afollestad.photoaffix.engine.subengines.RealDimensionsEngine_Factory: java.lang.Object get()>","<dagger.internal.InstanceFactory: java.lang.Object get()>"],"<androidx.fragment.app.FragmentManagerImpl: void noteStateNotSaved()>":["<java.util.ArrayList: int size()>","<java.util.ArrayList: java.lang.Object get(int)>"],"<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: void setColorFilter(android.graphics.ColorFilter)>":["<androidx.appcompat.graphics.drawable.DrawableContainer: void setColorFilter(android.graphics.ColorFilter)>"],"<androidx.fragment.app.FragmentManagerImpl: void moveFragmentToExpectedState(androidx.fragment.app.Fragment)>":["<androidx.fragment.app.FragmentManagerImpl: androidx.fragment.app.Fragment findFragmentUnder(androidx.fragment.app.Fragment)>","<androidx.fragment.app.FragmentManagerImpl: void setHWLayerAnimListenerIfAlpha(android.view.View,androidx.fragment.app.FragmentManagerImpl$AnimationOrAnimator)>","<java.lang.Math: int min(int,int)>","<androidx.fragment.app.FragmentManagerImpl: void <clinit>()>","<androidx.fragment.app.FragmentManagerImpl: androidx.fragment.app.FragmentManagerImpl$AnimationOrAnimator loadAnimation(androidx.fragment.app.Fragment,int,boolean,int)>","<androidx.fragment.app.FragmentManagerImpl: void completeShowHideFragment(androidx.fragment.app.Fragment)>","<androidx.fragment.app.FragmentManagerImpl: void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean)>"],"<com.afollestad.photoaffix.engine.photos.PhotoKt$defaultUriParser$1: void <init>()>":["<kotlin.jvm.internal.Lambda: void <init>(int)>"],"<io.reactivex.schedulers.Schedulers$ComputationTask: io.reactivex.Scheduler call()>":["<io.reactivex.schedulers.Schedulers$ComputationHolder: void <clinit>()>"],"<androidx.appcompat.app.AppCompatDelegateImpl: void ensureAutoNightModeManager()>":["<androidx.appcompat.app.TwilightManager: androidx.appcompat.app.TwilightManager getInstance(android.content.Context)>","<androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager: void <init>(androidx.appcompat.app.AppCompatDelegateImpl,androidx.appcompat.app.TwilightManager)>"],"<androidx.fragment.app.BackStackRecord: androidx.fragment.app.FragmentTransaction add(androidx.fragment.app.Fragment,java.lang.String)>":["<androidx.fragment.app.BackStackRecord: void doAddOp(int,androidx.fragment.app.Fragment,java.lang.String,int)>"],"<androidx.appcompat.app.TwilightManager: boolean isStateValid()>":["<java.lang.System: long currentTimeMillis()>","<java.lang.System: void <clinit>()>"],"<kotlinx.coroutines.DefaultExecutor: void <clinit>()>":["<java.util.concurrent.TimeUnit: void <clinit>()>","<kotlinx.coroutines.EventLoopBase: void <clinit>()>","<kotlinx.coroutines.DefaultExecutor: void <clinit>()>","<kotlinx.coroutines.DefaultExecutor: void <init>()>","<java.lang.Long: java.lang.Long valueOf(long)>","<java.lang.Long: void <clinit>()>","<kotlin.jvm.internal.Intrinsics: void checkExpressionValueIsNotNull(java.lang.Object,java.lang.String)>","<java.lang.Long: java.lang.Long getLong(java.lang.String,long)>"],"<androidx.fragment.app.FragmentActivity: void onCreate(android.os.Bundle)>":["<androidx.core.app.ComponentActivity: void onCreate(android.os.Bundle)>","<android.util.Log: int w(java.lang.String,java.lang.String)>","<androidx.fragment.app.FragmentController: void restoreAllState(android.os.Parcelable,androidx.fragment.app.FragmentManagerNonConfig)>","<androidx.collection.SparseArrayCompat: void <clinit>()>","<androidx.collection.SparseArrayCompat: void put(int,java.lang.Object)>","<androidx.collection.SparseArrayCompat: void <init>(int)>","<androidx.fragment.app.FragmentController: void attachHost(androidx.fragment.app.Fragment)>","<androidx.fragment.app.FragmentController: void dispatchCreate()>","<android.app.Activity: java.lang.Object getLastNonConfigurationInstance()>","<androidx.collection.SparseArrayCompat: void <init>()>"],"<androidx.fragment.app.FragmentManagerImpl$EndViewTransitionAnimator: void <init>(android.view.animation.Animation,android.view.ViewGroup,android.view.View)>":["<android.view.animation.AnimationSet: void <init>(boolean)>","<androidx.fragment.app.FragmentManagerImpl$EndViewTransitionAnimator: void run()>","<android.view.animation.AnimationSet: void addAnimation(android.view.animation.Animation)>"],"<kotlinx.coroutines.internal.ThreadContextKt$restoreState$1: kotlinx.coroutines.internal.ThreadState invoke(kotlinx.coroutines.internal.ThreadState,kotlin.coroutines.CoroutineContext$Element)>":["<kotlinx.coroutines.internal.ThreadState: java.lang.Object take()>","<kotlinx.coroutines.internal.ThreadState: kotlin.coroutines.CoroutineContext getContext()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<kotlinx.coroutines.CoroutineId: void restoreThreadContext(kotlin.coroutines.CoroutineContext,java.lang.Object)>"],"<androidx.core.content.res.ComplexColorCompat: androidx.core.content.res.ComplexColorCompat 'from'(android.graphics.Shader)>":["<androidx.core.content.res.ComplexColorCompat: void <init>(android.graphics.Shader,android.content.res.ColorStateList,int)>"],"<androidx.appcompat.view.menu.MenuBuilder: void restoreActionViewStates(android.os.Bundle)>":["<androidx.appcompat.view.menu.MenuBuilder: android.view.MenuItem findItem(int)>","<android.os.BaseBundle: int getInt(java.lang.String)>","<androidx.appcompat.view.menu.MenuBuilder: android.view.MenuItem getItem(int)>","<androidx.appcompat.view.menu.MenuBuilder: int size()>","<android.os.Bundle: android.util.SparseArray getSparseParcelableArray(java.lang.String)>","<androidx.appcompat.view.menu.MenuBuilder: java.lang.String getActionViewStatesKey()>"],"<com.afollestad.photoaffix.prefs.PrefsModule_ProvideBgFillColorPrefFactory: void <init>(com.afollestad.photoaffix.prefs.PrefsModule,javax.inject.Provider)>":["<java.lang.Object: void <init>()>"],"<androidx.core.content.res.GradientColorInflaterCompat$ColorStops: void <init>(int,int,int)>":["<java.lang.Object: void <init>()>"],"<com.afollestad.photoaffix.views.MainActivity: void performAffix(java.util.List)>":["<com.afollestad.photoaffix.views.MainActivity: android.view.View _$_findCachedViewById(int)>","<com.afollestad.photoaffix.utilities.ext.ViewExtKt: void show(android.view.View)>","<com.afollestad.photoaffix.views.ActivityExtKt: void lockOrientation(android.app.Activity)>","<kotlinx.coroutines.Dispatchers: kotlinx.coroutines.MainCoroutineDispatcher getMain()>","<com.afollestad.photoaffix.utilities.ext.CoroutineExtKt: void scopeWhileAttached(android.view.View,kotlin.coroutines.CoroutineContext,kotlin.jvm.functions.Function1)>","<kotlinx.coroutines.Dispatchers: void <clinit>()>","<com.afollestad.photoaffix.views.MainActivity$performAffix$1: void <init>(com.afollestad.photoaffix.views.MainActivity,java.util.List)>","<kotlin.jvm.internal.Intrinsics: void checkExpressionValueIsNotNull(java.lang.Object,java.lang.String)>"],"<kotlinx.coroutines.CompletedExceptionallyKt: java.lang.Object toState(java.lang.Object)>":["<kotlin.Result: java.lang.Throwable exceptionOrNull-impl(java.lang.Object)>","<kotlin.Result: void <clinit>()>","<kotlin.jvm.internal.Intrinsics: void throwNpe()>","<kotlin.Result: boolean isSuccess-impl(java.lang.Object)>","<kotlin.ResultKt: void throwOnFailure(java.lang.Object)>","<kotlinx.coroutines.CompletedExceptionally: void <init>(java.lang.Throwable)>"],"<com.afollestad.photoaffix.views.MainActivity: android.view.View _$_findCachedViewById(int)>":["<java.lang.Integer: void <clinit>()>","<java.util.HashMap: void <init>()>","<androidx.appcompat.app.AppCompatActivity: android.view.View findViewById(int)>","<java.util.HashMap: java.lang.Object get(java.lang.Object)>","<java.lang.Integer: java.lang.Integer valueOf(int)>","<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>"],"<kotlin.coroutines.jvm.internal.CompletedContinuation: void resumeWith(java.lang.Object)>":["<java.lang.IllegalStateException: void <init>(java.lang.String)>","<java.lang.String: java.lang.String toString()>"],"<kotlinx.coroutines.internal.ThreadContextKt$countAll$1: void <clinit>()>":["<kotlinx.coroutines.internal.ThreadContextKt$countAll$1: void <clinit>()>","<kotlinx.coroutines.internal.ThreadContextKt$countAll$1: void <init>()>"],"<com.afollestad.materialdialogs.WhichButton$Companion: void <init>()>":["<java.lang.Object: void <init>()>"],"<com.afollestad.dragselectrecyclerview.ExtensionsKt: int dimen(android.content.Context,int)>":["<androidx.appcompat.app.AppCompatActivity: android.content.res.Resources getResources()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<android.content.res.Resources: int getDimensionPixelSize(int)>"],"<kotlin.coroutines.CoroutineContext$plus$1: java.lang.Object invoke(java.lang.Object,java.lang.Object)>":["<kotlin.coroutines.CoroutineContext$plus$1: kotlin.coroutines.CoroutineContext invoke(kotlin.coroutines.CoroutineContext,kotlin.coroutines.CoroutineContext$Element)>"],"<com.afollestad.photoaffix.utilities.RealMediaScanner_Factory: java.lang.Object get()>":["<com.afollestad.photoaffix.utilities.RealMediaScanner_Factory: com.afollestad.photoaffix.utilities.RealMediaScanner get()>"],"<kotlinx.coroutines.StandaloneCoroutine: void <init>(kotlin.coroutines.CoroutineContext,boolean)>":["<kotlinx.coroutines.AbstractCoroutine: void <init>(kotlin.coroutines.CoroutineContext,boolean)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void idleReset(kotlinx.coroutines.scheduling.TaskMode)>":["<java.lang.AssertionError: void <init>(java.lang.Object)>","<kotlinx.coroutines.scheduling.CoroutineScheduler: int access$getMIN_PARK_TIME_NS$cp()>","<kotlinx.coroutines.scheduling.TaskMode: void <clinit>()>","<kotlin._Assertions: void <clinit>()>","<kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: void <clinit>()>","<kotlinx.coroutines.scheduling.CoroutineScheduler: void <clinit>()>"],"<androidx.core.content.res.TypedArrayUtils: androidx.core.content.res.ComplexColorCompat getNamedComplexColor(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,android.content.res.Resources$Theme,java.lang.String,int,int)>":["<android.util.TypedValue: void <init>()>","<androidx.core.content.res.ComplexColorCompat: androidx.core.content.res.ComplexColorCompat 'from'(int)>","<androidx.core.content.res.ComplexColorCompat: androidx.core.content.res.ComplexColorCompat inflate(android.content.res.Resources,int,android.content.res.Resources$Theme)>","<androidx.core.content.res.TypedArrayUtils: boolean hasAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>"],"<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: boolean tryAcquireCpuPermit()>":["<java.util.concurrent.Semaphore: boolean tryAcquire()>","<kotlinx.coroutines.scheduling.CoroutineScheduler: java.util.concurrent.Semaphore access$getCpuPermits$p(kotlinx.coroutines.scheduling.CoroutineScheduler)>","<kotlinx.coroutines.scheduling.CoroutineScheduler: void <clinit>()>","<kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: void <clinit>()>"],"<androidx.lifecycle.Lifecycle: void <init>()>":["<java.lang.Object: void <init>()>"],"<kotlinx.coroutines.MainDispatcherLoader: void <clinit>()>":["<kotlin.collections.EmptyIterator: java.lang.Object next()>","<kotlin.collections.EmptyList: java.util.Iterator iterator()>","<kotlin.collections.EmptyIterator: boolean hasNext()>","<java.util.ArrayList: java.util.Iterator iterator()>","<kotlinx.coroutines.MainDispatcherLoader: void <init>()>","<java.lang.Class: java.lang.ClassLoader getClassLoader()>","<kotlinx.coroutines.MainDispatcherLoader: kotlinx.coroutines.MainCoroutineDispatcher tryCreateDispatcher(kotlinx.coroutines.internal.MainDispatcherFactory)>","<kotlinx.coroutines.MainDispatcherLoader: void <clinit>()>","<kotlinx.coroutines.MissingMainCoroutineDispatcher: void <init>(java.lang.Throwable)>","<kotlin.jvm.internal.Intrinsics: void checkExpressionValueIsNotNull(java.lang.Object,java.lang.String)>","<kotlin.collections.CollectionsKt___CollectionsKt: java.util.List toList(java.lang.Iterable)>","<java.util.ServiceLoader: java.util.ServiceLoader load(java.lang.Class,java.lang.ClassLoader)>"],"<androidx.lifecycle.Lifecycle$State: void <init>(java.lang.String,int)>":["<java.lang.Enum: void <init>(java.lang.String,int)>"],"<java.lang.Character: void <clinit>()>":["<java.lang.Character: void <clinit>()>"],"<kotlinx.coroutines.NonDisposableHandle: boolean childCancelled(java.lang.Throwable)>":["<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<kotlinx.coroutines.JobSupport: boolean isActive()>":["<kotlinx.coroutines.JobSupport: java.lang.Object getState$kotlinx_coroutines_core()>","<kotlinx.coroutines.Empty: boolean isActive()>"],"<kotlinx.coroutines.AbstractContinuation: java.lang.Object getResult()>":["<kotlinx.coroutines.CancellableContinuationImpl: java.lang.Object getSuccessfulResult(java.lang.Object)>","<kotlinx.coroutines.AbstractContinuation: boolean trySuspend()>","<kotlinx.coroutines.AbstractContinuation: java.lang.Object getState$kotlinx_coroutines_core()>","<kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>"],"<com.afollestad.photoaffix.App: void <init>()>":["<android.app.Application: void <init>()>"],"<androidx.appcompat.app.ResourcesFlusher: void flushLollipops(android.content.res.Resources)>":["<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>","<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>"],"<androidx.appcompat.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable loadDrawableFromDelegates(android.content.Context,int)>":["<android.util.TypedValue: void <init>()>","<androidx.appcompat.widget.AppCompatDrawableManager$AsldcInflateDelegate: android.graphics.drawable.Drawable createFromXmlInner(android.content.Context,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>","<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>","<androidx.appcompat.widget.AppCompatDrawableManager: long createCacheKey(android.util.TypedValue)>","<androidx.appcompat.widget.AppCompatDrawableManager: boolean addDrawableToCache(android.content.Context,long,android.graphics.drawable.Drawable)>","<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: void setChangingConfigurations(int)>","<androidx.appcompat.widget.AppCompatDrawableManager$AvdcInflateDelegate: android.graphics.drawable.Drawable createFromXmlInner(android.content.Context,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>","<androidx.collection.SimpleArrayMap: java.lang.Object get(java.lang.Object)>","<android.content.res.Resources: void getValue(int,android.util.TypedValue,boolean)>","<androidx.appcompat.widget.AppCompatDrawableManager: void <clinit>()>","<androidx.appcompat.widget.AppCompatDrawableManager$VdcInflateDelegate: android.graphics.drawable.Drawable createFromXmlInner(android.content.Context,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>","<androidx.appcompat.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable getCachedDrawable(android.content.Context,long)>","<androidx.collection.SparseArrayCompat: void <init>()>","<android.graphics.drawable.Drawable: void setChangingConfigurations(int)>","<androidx.collection.SparseArrayCompat: void <clinit>()>","<java.lang.String: boolean equals(java.lang.Object)>","<androidx.collection.SparseArrayCompat: void append(int,java.lang.Object)>","<androidx.collection.SimpleArrayMap: boolean isEmpty()>","<android.view.ContextThemeWrapper: android.content.res.Resources$Theme getTheme()>","<android.content.res.Resources: android.content.res.XmlResourceParser getXml(int)>","<androidx.collection.SparseArrayCompat: java.lang.Object get(int)>","<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>","<androidx.appcompat.app.AppCompatActivity: android.content.res.Resources getResources()>","<android.util.Xml: android.util.AttributeSet asAttributeSet(org.xmlpull.v1.XmlPullParser)>","<android.util.Xml: void <clinit>()>","<java.lang.String: boolean endsWith(java.lang.String)>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void setChangingConfigurations(int)>"],"<io.reactivex.schedulers.Schedulers$NewThreadTask: void <init>()>":["<java.lang.Object: void <init>()>"],"<androidx.fragment.app.BackStackState$1: void <init>()>":["<java.lang.Object: void <init>()>"],"<kotlinx.coroutines.internal.LockFreeTaskQueue: java.lang.Object removeFirstOrNull()>":["<kotlinx.coroutines.internal.LockFreeTaskQueueCore: int access$getMask$p(kotlinx.coroutines.internal.LockFreeTaskQueueCore)>","<kotlinx.coroutines.internal.LockFreeTaskQueue: void <clinit>()>","<kotlinx.coroutines.internal.LockFreeTaskQueueCore$Companion: long updateHead(long,int)>","<kotlinx.coroutines.internal.LockFreeTaskQueueCore: void <clinit>()>","<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>","<kotlinx.coroutines.internal.LockFreeTaskQueueCore: kotlinx.coroutines.internal.LockFreeTaskQueueCore next()>","<kotlinx.coroutines.internal.LockFreeTaskQueueCore: java.util.concurrent.atomic.AtomicReferenceArray access$getArray$p(kotlinx.coroutines.internal.LockFreeTaskQueueCore)>","<java.util.concurrent.atomic.AtomicReferenceArray: void set(int,java.lang.Object)>","<kotlinx.coroutines.internal.LockFreeTaskQueueCore: kotlinx.coroutines.internal.LockFreeTaskQueueCore access$removeSlowPath(kotlinx.coroutines.internal.LockFreeTaskQueueCore,int,int)>","<kotlinx.coroutines.internal.LockFreeTaskQueueCore: boolean access$getSingleConsumer$p(kotlinx.coroutines.internal.LockFreeTaskQueueCore)>"],"<kotlin.collections.CollectionsKt__CollectionsKt: java.util.List emptyList()>":["<kotlin.collections.EmptyList: void <clinit>()>"],"<kotlinx.coroutines.scheduling.NonBlockingContext: void <init>()>":["<java.lang.Object: void <init>()>"],"<androidx.core.view.ViewCompat: void <clinit>()>":["<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>","<androidx.core.view.ViewCompat: void <clinit>()>"],"<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: void updateStateFromTypedArray(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,android.content.res.Resources$Theme)>":["<androidx.core.content.res.TypedArrayUtils: int getNamedInt(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int,int)>","<androidx.core.graphics.PathParser: androidx.core.graphics.PathParser$PathDataNode[] createNodesFromPathData(java.lang.String)>","<androidx.core.content.res.TypedArrayUtils: androidx.core.content.res.ComplexColorCompat getNamedComplexColor(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,android.content.res.Resources$Theme,java.lang.String,int,int)>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: android.graphics.Paint$Cap getStrokeLineCap(int,android.graphics.Paint$Cap)>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: android.graphics.Paint$Join getStrokeLineJoin(int,android.graphics.Paint$Join)>","<androidx.core.content.res.TypedArrayUtils: float getNamedFloat(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int,float)>","<androidx.core.content.res.TypedArrayUtils: boolean hasAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>"],"<androidx.fragment.app.FragmentActivity$HostCallbacks: int onGetWindowAnimations()>":["<android.app.Activity: android.view.Window getWindow()>"],"<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: void start()>":["<android.graphics.drawable.Drawable: void invalidateSelf()>","<android.animation.AnimatorSet: void start()>","<android.animation.AnimatorSet: boolean isStarted()>"],"<androidx.arch.core.internal.FastSafeIterableMap: void <init>()>":["<androidx.arch.core.internal.SafeIterableMap: void <init>()>","<java.util.HashMap: void <init>()>"],"<androidx.appcompat.graphics.drawable.DrawableContainer: void updateDensity(android.content.res.Resources)>":["<androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState: void updateDensity(android.content.res.Resources)>"],"<com.afollestad.photoaffix.engine.subengines.RealStitchEngine$canvasCreator$1: void <init>()>":["<kotlin.jvm.internal.Lambda: void <init>(int)>"],"<com.afollestad.materialdialogs.utils.MDUtil: void <init>()>":["<java.lang.Object: void <init>()>"],"<androidx.collection.SimpleArrayMap: java.lang.Object removeAt(int)>":["<java.util.ConcurrentModificationException: void <init>()>","<androidx.collection.SimpleArrayMap: void allocArrays(int)>","<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>","<java.lang.System: void <clinit>()>","<androidx.collection.ContainerHelpers: void <clinit>()>","<androidx.collection.SimpleArrayMap: void freeArrays(int[],java.lang.Object[],int)>"],"<kotlin.jvm.internal.TypeIntrinsics: int getFunctionArity(java.lang.Object)>":["<kotlin.coroutines.jvm.internal.SuspendLambda: int getArity()>"],"<com.afollestad.photoaffix.utilities.ext.ViewExtKt: void show(android.view.View)>":["<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<kotlinx.coroutines.JobSupport: boolean cancelImpl(java.lang.Object)>":["<kotlinx.coroutines.JobImpl: boolean getOnCancelComplete$kotlinx_coroutines_core()>","<kotlinx.coroutines.JobSupport: boolean cancelMakeCompleting(java.lang.Object)>","<kotlinx.coroutines.JobSupport: boolean getOnCancelComplete$kotlinx_coroutines_core()>","<kotlinx.coroutines.JobSupport: boolean makeCancelling(java.lang.Object)>"],"<dagger.internal.InstanceFactory: void <init>(java.lang.Object)>":["<java.lang.Object: void <init>()>"],"<androidx.recyclerview.widget.ViewBoundsCheck: void <init>(androidx.recyclerview.widget.ViewBoundsCheck$Callback)>":["<androidx.recyclerview.widget.ViewBoundsCheck$BoundFlags: void <init>()>","<java.lang.Object: void <init>()>"],"<java.lang.Object: void finalize()>":["<java.lang.RuntimeException: void <init>(java.lang.String)>"],"<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatableTransition: void start()>":["<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: void start()>"],"<kotlin.Result$Companion: void <init>()>":["<java.lang.Object: void <init>()>"],"<kotlinx.coroutines.AbstractContinuation: java.lang.Object takeState()>":["<kotlinx.coroutines.AbstractContinuation: java.lang.Object getState$kotlinx_coroutines_core()>"],"<androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: android.animation.Animator createAnimatorFromXml(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.animation.AnimatorSet,int,float)>":["<androidx.core.content.res.TypedArrayUtils: int getNamedInt(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int,int)>","<androidx.core.content.res.TypedArrayUtils: android.content.res.TypedArray obtainAttributes(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,int[])>","<androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: android.animation.ValueAnimator loadAnimator(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,android.animation.ValueAnimator,float,org.xmlpull.v1.XmlPullParser)>","<java.lang.RuntimeException: void <init>(java.lang.String)>","<android.animation.AnimatorSet: void <init>()>","<android.animation.AnimatorSet: void playSequentially(android.animation.Animator[])>","<androidx.vectordrawable.graphics.drawable.AndroidResources: void <clinit>()>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: android.animation.PropertyValuesHolder[] loadValues(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)>","<java.lang.StringBuilder: void <init>()>","<android.animation.AnimatorSet: void playTogether(android.animation.Animator[])>","<java.util.ArrayList: boolean add(java.lang.Object)>","<androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: android.animation.ObjectAnimator loadObjectAnimator(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,float,org.xmlpull.v1.XmlPullParser)>","<androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: android.animation.Animator createAnimatorFromXml(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.animation.AnimatorSet,int,float)>","<java.lang.StringBuilder: java.lang.String toString()>","<java.util.ArrayList: java.util.Iterator iterator()>","<java.util.ArrayList: void <init>()>","<java.util.ArrayList: int size()>","<android.util.Xml: android.util.AttributeSet asAttributeSet(org.xmlpull.v1.XmlPullParser)>","<android.util.Xml: void <clinit>()>","<android.animation.ValueAnimator: void setValues(android.animation.PropertyValuesHolder[])>"],"<io.reactivex.internal.functions.Functions$MaxRequestSubscription: void <init>()>":["<java.lang.Object: void <init>()>"],"<com.afollestad.photoaffix.engine.bitmaps.BitmapIterator: void <init>(java.util.List,com.afollestad.photoaffix.engine.bitmaps.BitmapManipulator)>":["<java.lang.Object: void <init>()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<kotlin.coroutines.CoroutineContext$plus$1: void <clinit>()>":["<kotlin.coroutines.CoroutineContext$plus$1: void <init>()>","<kotlin.coroutines.CoroutineContext$plus$1: void <clinit>()>"],"<kotlinx.coroutines.ThreadContextElement$DefaultImpls: kotlin.coroutines.CoroutineContext plus(kotlinx.coroutines.ThreadContextElement,kotlin.coroutines.CoroutineContext)>":["<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<kotlin.coroutines.CoroutineContext$Element$DefaultImpls: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext$Element,kotlin.coroutines.CoroutineContext)>"],"<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>":["<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void <init>()>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void <clinit>()>"],"<androidx.appcompat.app.AppCompatDelegateImpl: void setContentView(int)>":["<androidx.appcompat.app.AppCompatDelegateImpl: void ensureSubDecor()>","<android.view.LayoutInflater: android.view.LayoutInflater 'from'(android.content.Context)>","<androidx.appcompat.app.AppCompatDelegateImpl$AppCompatWindowCallback: void onContentChanged()>"],"<androidx.recyclerview.widget.LinearLayoutManager$LayoutChunkResult: void <init>()>":["<java.lang.Object: void <init>()>"],"<com.afollestad.materialdialogs.utils.ColorExtKt: int resolveColor(com.afollestad.materialdialogs.MaterialDialog,java.lang.Integer,java.lang.Integer)>":["<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<com.afollestad.materialdialogs.utils.MDUtil: int resolveColor(android.content.Context,java.lang.Integer,java.lang.Integer)>","<com.afollestad.materialdialogs.utils.MDUtil: void <clinit>()>","<com.afollestad.materialdialogs.MaterialDialog: android.content.Context getWindowContext()>"],"<kotlinx.coroutines.Dispatchers: void <clinit>()>":["<kotlinx.coroutines.CoroutineContextKt: void <clinit>()>","<kotlinx.coroutines.scheduling.DefaultScheduler: void <clinit>()>","<kotlinx.coroutines.scheduling.DefaultScheduler: kotlinx.coroutines.CoroutineDispatcher getIO()>","<kotlinx.coroutines.Dispatchers: void <clinit>()>","<kotlinx.coroutines.Dispatchers: void <init>()>","<kotlinx.coroutines.CoroutineContextKt: kotlinx.coroutines.CoroutineDispatcher createDefaultDispatcher()>","<kotlinx.coroutines.Unconfined: void <clinit>()>"],"<androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState: void createAllFutures()>":["<android.util.SparseArray: int size()>","<android.util.SparseArray: int keyAt(int)>","<android.util.SparseArray: java.lang.Object valueAt(int)>","<androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState: android.graphics.drawable.Drawable prepareDrawable(android.graphics.drawable.Drawable)>"],"<androidx.core.graphics.drawable.DrawableCompat: void inflate(android.graphics.drawable.Drawable,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>":["<android.graphics.drawable.LayerDrawable: void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>","<android.os.Build$VERSION: void <clinit>()>","<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>","<android.graphics.drawable.Drawable: void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>","<android.graphics.drawable.Drawable: void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>","<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)>"],"<androidx.core.content.res.FontResourcesParserCompat: androidx.core.content.res.FontResourcesParserCompat$FamilyResourceEntry readFamilies(org.xmlpull.v1.XmlPullParser,android.content.res.Resources)>":["<androidx.core.content.res.FontResourcesParserCompat: void skip(org.xmlpull.v1.XmlPullParser)>","<androidx.core.content.res.FontResourcesParserCompat: androidx.core.content.res.FontResourcesParserCompat$FamilyResourceEntry readFamily(org.xmlpull.v1.XmlPullParser,android.content.res.Resources)>"],"<kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt: kotlin.coroutines.Continuation intercepted(kotlin.coroutines.Continuation)>":["<kotlin.coroutines.jvm.internal.ContinuationImpl: kotlin.coroutines.Continuation intercepted()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<io.reactivex.internal.util.ErrorMode: void <init>(java.lang.String,int)>":["<java.lang.Enum: void <init>(java.lang.String,int)>"],"<io.reactivex.Observable: io.reactivex.observables.ConnectableObservable publish()>":["<io.reactivex.internal.operators.observable.ObservablePublish: io.reactivex.observables.ConnectableObservable create(io.reactivex.ObservableSource)>"],"<androidx.core.graphics.drawable.WrappedDrawableApi14$DrawableWrapperState: void <init>(androidx.core.graphics.drawable.WrappedDrawableApi14$DrawableWrapperState,android.content.res.Resources)>":["<androidx.core.graphics.drawable.WrappedDrawableApi14: void <clinit>()>","<android.graphics.drawable.Drawable$ConstantState: void <init>()>"],"<kotlin.coroutines.CombinedContext: kotlin.coroutines.CoroutineContext minusKey(kotlin.coroutines.CoroutineContext$Key)>":["<kotlin.coroutines.EmptyCoroutineContext: kotlin.coroutines.CoroutineContext minusKey(kotlin.coroutines.CoroutineContext$Key)>","<kotlin.coroutines.EmptyCoroutineContext: void <clinit>()>","<kotlin.coroutines.CombinedContext: void <init>(kotlin.coroutines.CoroutineContext,kotlin.coroutines.CoroutineContext$Element)>","<kotlinx.coroutines.CoroutineId: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>","<kotlinx.coroutines.CoroutineId: kotlin.coroutines.CoroutineContext minusKey(kotlin.coroutines.CoroutineContext$Key)>","<kotlin.coroutines.CombinedContext: kotlin.coroutines.CoroutineContext minusKey(kotlin.coroutines.CoroutineContext$Key)>","<kotlinx.coroutines.CoroutineDispatcher: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<kotlinx.coroutines.JobSupport: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>","<kotlinx.coroutines.JobSupport: kotlin.coroutines.CoroutineContext minusKey(kotlin.coroutines.CoroutineContext$Key)>","<kotlinx.coroutines.CoroutineDispatcher: kotlin.coroutines.CoroutineContext minusKey(kotlin.coroutines.CoroutineContext$Key)>"],"<kotlin.jvm.internal.Intrinsics: void throwUninitializedPropertyAccessException(java.lang.String)>":["<java.lang.StringBuilder: java.lang.String toString()>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<java.lang.StringBuilder: void <init>()>","<kotlin.jvm.internal.Intrinsics: void throwUninitializedProperty(java.lang.String)>"],"<kotlin.text.StringsKt__StringsJVMKt: boolean regionMatches(java.lang.String,int,java.lang.String,int,int,boolean)>":["<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<java.lang.String: boolean regionMatches(int,java.lang.String,int,int)>"],"<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: void stop()>":["<android.animation.AnimatorSet: void end()>"],"<kotlin.collections.CollectionsKt__CollectionsKt: java.util.Collection asCollection(java.lang.Object[])>":["<kotlin.collections.ArrayAsCollection: void <init>(java.lang.Object[],boolean)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<kotlin.ranges.IntProgression$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>":["<kotlin.ranges.IntProgression$Companion: void <init>()>"],"<io.reactivex.internal.schedulers.SingleScheduler: void <init>()>":["<io.reactivex.Scheduler: void <clinit>()>","<io.reactivex.internal.schedulers.SingleScheduler: void <init>(java.util.concurrent.ThreadFactory)>","<io.reactivex.internal.schedulers.SingleScheduler: void <clinit>()>"],"<kotlinx.coroutines.internal.ThreadState: void <init>(kotlin.coroutines.CoroutineContext,int)>":["<java.lang.Object: void <init>()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<androidx.collection.ArrayMap: java.util.Collection values()>":["<androidx.collection.MapCollections: java.util.Collection getValues()>","<androidx.collection.ArrayMap: androidx.collection.MapCollections getCollection()>"],"<androidx.core.content.res.FontResourcesParserCompat$ProviderResourceEntry: void <init>(androidx.core.provider.FontRequest,int,int)>":["<java.lang.Object: void <init>()>"],"<kotlin.ranges.IntProgression: void <init>(int,int,int)>":["<java.lang.IllegalArgumentException: void <init>(java.lang.String)>","<java.lang.Object: void <init>()>","<kotlin.internal.ProgressionUtilKt: int getProgressionLastElement(int,int,int)>"],"<kotlin.collections.IntIterator: void <init>()>":["<java.lang.Object: void <init>()>"],"<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatedVectorDrawableTransition: void stop()>":["<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: void stop()>"],"<androidx.core.graphics.drawable.WrappedDrawableApi14: void <init>(androidx.core.graphics.drawable.WrappedDrawableApi14$DrawableWrapperState,android.content.res.Resources)>":["<androidx.core.graphics.drawable.WrappedDrawableApi14: void updateLocalState(android.content.res.Resources)>","<android.graphics.drawable.Drawable: void <init>()>"],"<kotlinx.coroutines.JobSupport: void continueCompleting(kotlinx.coroutines.JobSupport$Finishing,kotlinx.coroutines.ChildHandleNode,java.lang.Object)>":["<java.lang.IllegalArgumentException: void <init>(java.lang.String)>","<kotlinx.coroutines.JobSupport: boolean tryWaitForChild(kotlinx.coroutines.JobSupport$Finishing,kotlinx.coroutines.ChildHandleNode,java.lang.Object)>","<kotlinx.coroutines.JobSupport: java.lang.Object getState$kotlinx_coroutines_core()>","<java.lang.String: java.lang.String toString()>","<kotlinx.coroutines.JobSupport: boolean tryFinalizeFinishingState(kotlinx.coroutines.JobSupport$Finishing,java.lang.Object,int)>","<kotlinx.coroutines.JobSupport: kotlinx.coroutines.ChildHandleNode nextChild(kotlinx.coroutines.internal.LockFreeLinkedListNode)>"],"<kotlinx.coroutines.DispatchedKt: kotlinx.coroutines.internal.Symbol access$getUNDEFINED$p()>":["<kotlinx.coroutines.DispatchedKt: void <clinit>()>"],"<androidx.appcompat.graphics.drawable.StateListDrawable$StateListState: int indexOfStateSet(int[])>":["<android.util.StateSet: boolean stateSetMatches(int[],int[])>","<android.util.StateSet: void <clinit>()>","<androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState: int getChildCount()>"],"<androidx.collection.SimpleArrayMap: java.lang.Object get(java.lang.Object)>":["<androidx.collection.SimpleArrayMap: int indexOfKey(java.lang.Object)>"],"<androidx.collection.LruCache: java.lang.Object put(java.lang.Object,java.lang.Object)>":["<java.lang.NullPointerException: void <init>(java.lang.String)>","<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>","<androidx.collection.LruCache: void trimToSize(int)>","<androidx.collection.LruCache: void entryRemoved(boolean,java.lang.Object,java.lang.Object,java.lang.Object)>","<androidx.collection.LruCache: int safeSizeOf(java.lang.Object,java.lang.Object)>"],"<androidx.core.content.res.FontResourcesParserCompat: java.util.List readCerts(android.content.res.Resources,int)>":["<androidx.core.content.res.FontResourcesParserCompat: int getType(android.content.res.TypedArray,int)>","<android.content.res.Resources: android.content.res.TypedArray obtainTypedArray(int)>","<java.util.ArrayList: void <init>()>","<androidx.core.content.res.FontResourcesParserCompat: java.util.List toByteArrayList(java.lang.String[])>","<android.content.res.Resources: java.lang.String[] getStringArray(int)>","<java.util.Collections: void <clinit>()>","<java.util.ArrayList: boolean add(java.lang.Object)>","<java.util.Collections: java.util.List emptyList()>"],"<com.afollestad.photoaffix.engine.subengines.RealDimensionsEngine: com.afollestad.photoaffix.engine.subengines.SizingResult calculateHorizontalSize(com.afollestad.photoaffix.engine.bitmaps.BitmapIterator)>":["<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>","<com.afollestad.photoaffix.engine.bitmaps.BitmapIterator: int size()>","<com.afollestad.photoaffix.engine.subengines.SizingResult: void <init>(com.afollestad.photoaffix.engine.subengines.Size,java.lang.Exception,int,kotlin.jvm.internal.DefaultConstructorMarker)>","<com.afollestad.photoaffix.engine.subengines.Size$Companion: com.afollestad.photoaffix.engine.subengines.Size fromOptions(android.graphics.BitmapFactory$Options)>","<com.afollestad.photoaffix.engine.subengines.Size: void <clinit>()>","<com.afollestad.photoaffix.engine.subengines.Size: int getHeight()>","<com.afollestad.photoaffix.engine.subengines.Size: int getWidth()>","<com.afollestad.photoaffix.engine.bitmaps.BitmapIterator: void reset()>","<com.afollestad.photoaffix.engine.bitmaps.BitmapIterator: java.lang.Object next()>","<com.afollestad.photoaffix.engine.bitmaps.BitmapIterator: boolean hasNext()>","<com.afollestad.photoaffix.engine.subengines.Size: void <init>(int,int)>","<com.afollestad.rxkprefs.RealPref: java.lang.Object get()>","<com.afollestad.photoaffix.engine.subengines.RealDimensionsEngine: int dp(int)>","<com.afollestad.photoaffix.utilities.ext.NumberExtKt: int toRoundedInt(float)>"],"<io.reactivex.internal.schedulers.SchedulerPoolFactory$ScheduledTask: void <init>()>":["<java.lang.Object: void <init>()>"],"<androidx.fragment.app.FragmentManagerImpl: void <init>()>":["<androidx.fragment.app.FragmentManager: void <init>()>","<java.util.concurrent.CopyOnWriteArrayList: void <init>()>","<java.util.ArrayList: void <init>()>","<androidx.fragment.app.FragmentManagerImpl$1: void <init>(androidx.fragment.app.FragmentManagerImpl)>"],"<androidx.fragment.app.FragmentTransitionImpl$3: void <init>(androidx.fragment.app.FragmentTransitionImpl,java.util.ArrayList,java.util.Map)>":["<java.lang.Object: void <init>()>"],"<androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat$PathDataEvaluator: void <init>()>":["<java.lang.Object: void <init>()>"],"<androidx.appcompat.view.ContextThemeWrapper: android.content.res.Resources getResources()>":["<androidx.appcompat.view.ContextThemeWrapper: android.content.res.Resources getResourcesInternal()>"],"<kotlinx.coroutines.BuildersKt__Builders_commonKt: kotlinx.coroutines.Job launch(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.CoroutineContext,kotlinx.coroutines.CoroutineStart,kotlin.jvm.functions.Function2)>":["<kotlinx.coroutines.CoroutineContextKt: void <clinit>()>","<kotlinx.coroutines.StandaloneCoroutine: void <init>(kotlin.coroutines.CoroutineContext,boolean)>","<kotlinx.coroutines.CoroutineContextKt: kotlin.coroutines.CoroutineContext newCoroutineContext(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.CoroutineContext)>","<kotlinx.coroutines.AbstractCoroutine: void start(kotlinx.coroutines.CoroutineStart,java.lang.Object,kotlin.jvm.functions.Function2)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<kotlinx.coroutines.CoroutineStart: boolean isLazy()>","<kotlinx.coroutines.LazyStandaloneCoroutine: void <init>(kotlin.coroutines.CoroutineContext,kotlin.jvm.functions.Function2)>"],"<com.afollestad.rxkprefs.adapters.IntAdapter: java.lang.Object get(java.lang.String,android.content.SharedPreferences)>":["<com.afollestad.rxkprefs.adapters.IntAdapter: java.lang.Integer get(java.lang.String,android.content.SharedPreferences)>"],"<kotlin.coroutines.jvm.internal.BaseContinuationImpl: void <init>(kotlin.coroutines.Continuation)>":["<java.lang.Object: void <init>()>"],"<androidx.core.graphics.TypefaceCompatBaseImpl: android.graphics.Typeface createFromInputStream(android.content.Context,java.io.InputStream)>":["<java.io.File: boolean delete()>","<androidx.core.graphics.TypefaceCompatUtil: boolean copyToFile(java.io.File,java.io.InputStream)>","<android.graphics.Typeface: void <clinit>()>","<java.io.File: java.lang.String getPath()>","<android.graphics.Typeface: android.graphics.Typeface createFromFile(java.lang.String)>","<androidx.core.graphics.TypefaceCompatUtil: java.io.File getTempFile(android.content.Context)>"],"<androidx.lifecycle.LifecycleRegistry: boolean isSynced()>":["<androidx.arch.core.internal.SafeIterableMap: int size()>","<androidx.arch.core.internal.SafeIterableMap: java.util.Map$Entry newest()>","<androidx.arch.core.internal.SafeIterableMap: java.util.Map$Entry eldest()>"],"<androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: void setupObjectAnimator(android.animation.ValueAnimator,android.content.res.TypedArray,int,float,org.xmlpull.v1.XmlPullParser)>":["<android.view.InflateException: void <init>(java.lang.String)>","<java.lang.StringBuilder: java.lang.String toString()>","<androidx.core.graphics.PathParser: android.graphics.Path createPathFromPathData(java.lang.String)>","<android.animation.ObjectAnimator: void setPropertyName(java.lang.String)>","<androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: void setupPathMotion(android.graphics.Path,android.animation.ObjectAnimator,float,java.lang.String,java.lang.String)>","<java.lang.StringBuilder: void <init>()>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<androidx.core.content.res.TypedArrayUtils: java.lang.String getNamedString(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int)>"],"<kotlinx.coroutines.Job$DefaultImpls: kotlinx.coroutines.DisposableHandle invokeOnCompletion$default(kotlinx.coroutines.Job,boolean,boolean,kotlin.jvm.functions.Function1,int,java.lang.Object)>":["<kotlinx.coroutines.JobSupport: kotlinx.coroutines.DisposableHandle invokeOnCompletion(boolean,boolean,kotlin.jvm.functions.Function1)>","<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>"],"<androidx.collection.MapCollections$KeySet: boolean contains(java.lang.Object)>":["<androidx.collection.ArrayMap$1: int colIndexOfKey(java.lang.Object)>"],"<kotlinx.coroutines.JobSupport: boolean tryMakeCancelling(kotlinx.coroutines.Incomplete,java.lang.Throwable)>":["<java.lang.IllegalStateException: void <init>(java.lang.String)>","<kotlinx.coroutines.JobSupport$Finishing: void <init>(kotlinx.coroutines.NodeList,boolean,java.lang.Throwable)>","<java.lang.String: java.lang.String toString()>","<kotlinx.coroutines.JobSupport: void notifyCancelling(kotlinx.coroutines.NodeList,java.lang.Throwable)>","<kotlinx.coroutines.JobSupport: kotlinx.coroutines.NodeList getOrPromoteCancellingList(kotlinx.coroutines.Incomplete)>","<kotlinx.coroutines.JobSupport: void <clinit>()>","<kotlinx.coroutines.Empty: boolean isActive()>"],"<kotlin.internal.PlatformImplementations: void addSuppressed(java.lang.Throwable,java.lang.Throwable)>":["<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<kotlinx.coroutines.JobSupport: kotlinx.coroutines.JobCancellationException createJobCancellationException()>":["<kotlinx.coroutines.JobCancellationException: void <init>(java.lang.String,java.lang.Throwable,kotlinx.coroutines.Job)>"],"<kotlinx.coroutines.JobSupport$Finishing: java.util.List sealLocked(java.lang.Throwable)>":["<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>","<java.lang.IllegalStateException: void <init>(java.lang.String)>","<kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>","<java.lang.StringBuilder: java.lang.String toString()>","<java.util.ArrayList: void add(int,java.lang.Object)>","<kotlinx.coroutines.JobSupportKt: void <clinit>()>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<java.lang.StringBuilder: void <init>()>","<kotlinx.coroutines.JobSupportKt: kotlinx.coroutines.internal.Symbol access$getSEALED$p()>","<kotlin.TypeCastException: void <init>(java.lang.String)>","<java.util.ArrayList: boolean add(java.lang.Object)>","<kotlinx.coroutines.JobSupport$Finishing: java.util.ArrayList allocateList()>"],"<androidx.core.provider.SelfDestructiveThread$2: void <init>(androidx.core.provider.SelfDestructiveThread,java.util.concurrent.Callable,android.os.Handler,androidx.core.provider.SelfDestructiveThread$ReplyCallback)>":["<java.lang.Object: void <init>()>"],"<androidx.fragment.app.FragmentActivity: void onPostResume()>":["<androidx.fragment.app.FragmentActivity: void onResumeFragments()>","<android.os.Handler: void removeMessages(int)>","<android.app.Activity: void onPostResume()>","<androidx.fragment.app.FragmentController: boolean execPendingActions()>"],"<kotlin.coroutines.CombinedContext: void <init>(kotlin.coroutines.CoroutineContext,kotlin.coroutines.CoroutineContext$Element)>":["<java.lang.Object: void <init>()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatedStateListState: int getKeyframeIdAt(int)>":["<java.lang.Integer: void <clinit>()>","<androidx.collection.SparseArrayCompat: java.lang.Object get(int,java.lang.Object)>","<java.lang.Integer: java.lang.Integer valueOf(int)>"],"<androidx.interpolator.view.animation.FastOutLinearInInterpolator: void <init>()>":["<androidx.interpolator.view.animation.FastOutLinearInInterpolator: void <clinit>()>","<androidx.interpolator.view.animation.LookupTableInterpolator: void <init>(float[])>"],"<com.afollestad.photoaffix.prefs.PrefsModule_ProvideImageSpacingVerticalPrefFactory: com.afollestad.photoaffix.prefs.PrefsModule_ProvideImageSpacingVerticalPrefFactory create(com.afollestad.photoaffix.prefs.PrefsModule,javax.inject.Provider)>":["<com.afollestad.photoaffix.prefs.PrefsModule_ProvideImageSpacingVerticalPrefFactory: void <init>(com.afollestad.photoaffix.prefs.PrefsModule,javax.inject.Provider)>"],"<com.afollestad.photoaffix.prefs.PrefsModule: com.afollestad.rxkprefs.Pref provideStackHorizontallyPref(com.afollestad.rxkprefs.RxkPrefs)>":["<com.afollestad.rxkprefs.RealRxkPrefs: com.afollestad.rxkprefs.Pref 'boolean'(java.lang.String,boolean)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<com.afollestad.photoaffix.views.MainActivity$refresh$1: void <init>(com.afollestad.photoaffix.views.MainActivity,boolean)>":["<kotlin.jvm.internal.Lambda: void <init>(int)>"],"<androidx.fragment.app.FragmentManagerImpl: boolean modifiesAlpha(android.animation.Animator)>":["<androidx.fragment.app.FragmentManagerImpl: boolean modifiesAlpha(android.animation.Animator)>","<java.lang.String: boolean equals(java.lang.Object)>","<androidx.fragment.app.FragmentManagerImpl: void <clinit>()>"],"<androidx.fragment.app.FragmentManagerImpl: void doPendingDeferredStart()>":["<androidx.fragment.app.FragmentManagerImpl: void startPendingDeferredFragments()>"],"<io.reactivex.Observable: void <init>()>":["<java.lang.Object: void <init>()>"],"<kotlinx.coroutines.Dispatchers: kotlinx.coroutines.CoroutineDispatcher getIO()>":["<kotlinx.coroutines.Dispatchers: void <clinit>()>"],"<com.afollestad.rxkprefs.RealPref$values$1: void <init>(com.afollestad.rxkprefs.RealPref)>":["<java.lang.Object: void <init>()>"],"<kotlinx.coroutines.CoroutineExceptionHandlerImplKt: void handleCoroutineExceptionImpl(kotlin.coroutines.CoroutineContext,java.lang.Throwable)>":["<kotlin.collections.EmptyIterator: java.lang.Object next()>","<kotlin.collections.EmptyList: java.util.Iterator iterator()>","<java.util.ArrayList: java.util.Iterator iterator()>","<kotlin.collections.EmptyIterator: boolean hasNext()>","<kotlinx.coroutines.CoroutineExceptionHandlerKt: java.lang.Throwable handlerException(java.lang.Throwable,java.lang.Throwable)>","<java.lang.Thread: java.lang.Thread currentThread()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<kotlinx.coroutines.CoroutineExceptionHandlerImplKt: void <clinit>()>","<java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler getUncaughtExceptionHandler()>","<kotlin.jvm.internal.Intrinsics: void checkExpressionValueIsNotNull(java.lang.Object,java.lang.String)>"],"<androidx.fragment.app.FragmentTransition: void setOutEpicenter(androidx.fragment.app.FragmentTransitionImpl,java.lang.Object,java.lang.Object,androidx.collection.ArrayMap,boolean,androidx.fragment.app.BackStackRecord)>":["<androidx.fragment.app.FragmentTransitionCompat21: void setEpicenter(java.lang.Object,android.view.View)>","<androidx.collection.SimpleArrayMap: java.lang.Object get(java.lang.Object)>"],"<com.afollestad.materialdialogs.MaterialDialogKt: void assertOneSet(java.lang.String,java.lang.Object,java.lang.Integer)>":["<java.lang.StringBuilder: java.lang.String toString()>","<java.lang.IllegalArgumentException: void <init>(java.lang.String)>","<java.lang.StringBuilder: void <init>()>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<androidx.fragment.app.FragmentManagerImpl: boolean execPendingActions()>":["<androidx.fragment.app.FragmentManagerImpl: void doPendingDeferredStart()>","<androidx.fragment.app.FragmentManagerImpl: void cleanupExec()>","<androidx.fragment.app.FragmentManagerImpl: boolean generateOpsForPendingActions(java.util.ArrayList,java.util.ArrayList)>","<androidx.fragment.app.FragmentManagerImpl: void removeRedundantOperationsAndExecute(java.util.ArrayList,java.util.ArrayList)>","<androidx.fragment.app.FragmentManagerImpl: void burpActive()>","<androidx.fragment.app.FragmentManagerImpl: void ensureExecReady(boolean)>"],"<kotlinx.coroutines.internal.LockFreeLinkedListNode: kotlinx.coroutines.internal.LockFreeLinkedListNode markPrev()>":["<kotlinx.coroutines.internal.LockFreeLinkedListNode: kotlinx.coroutines.internal.Removed removed()>","<kotlinx.coroutines.internal.LockFreeLinkedListNode: kotlinx.coroutines.internal.LockFreeLinkedListNode findHead()>","<kotlin.TypeCastException: void <init>(java.lang.String)>","<kotlinx.coroutines.internal.LockFreeLinkedListNode: void <clinit>()>"],"<java.lang.Integer: java.lang.String toHexString(int)>":["<java.lang.RuntimeException: void <init>(java.lang.String)>"],"<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatedStateListState: android.graphics.drawable.Drawable newDrawable()>":["<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: void <init>(androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatedStateListState,android.content.res.Resources)>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: void <clinit>()>"],"<io.reactivex.schedulers.Schedulers$NewThreadTask: java.lang.Object call()>":["<io.reactivex.schedulers.Schedulers$NewThreadTask: io.reactivex.Scheduler call()>"],"<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void run()>":["<kotlinx.coroutines.scheduling.CoroutineScheduler: boolean access$isTerminated$p(kotlinx.coroutines.scheduling.CoroutineScheduler)>","<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void idleReset(kotlinx.coroutines.scheduling.TaskMode)>","<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void cpuWorkerIdle()>","<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void beforeTask(kotlinx.coroutines.scheduling.TaskMode,long)>","<kotlinx.coroutines.scheduling.CoroutineScheduler: void access$runSafely(kotlinx.coroutines.scheduling.CoroutineScheduler,kotlinx.coroutines.scheduling.Task)>","<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void blockingWorkerIdle()>","<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.Task findTask$kotlinx_coroutines_core()>","<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void afterTask(kotlinx.coroutines.scheduling.TaskMode)>","<kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: void <clinit>()>","<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: boolean tryReleaseCpu$kotlinx_coroutines_core(kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState)>","<kotlinx.coroutines.scheduling.CoroutineScheduler: void <clinit>()>"],"<androidx.core.graphics.TypefaceCompatBaseImpl: void <init>()>":["<java.lang.Object: void <init>()>"],"<kotlinx.coroutines.CancellableContinuationImpl: void initCancellability()>":["<kotlin.coroutines.CombinedContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>","<kotlin.coroutines.jvm.internal.RestrictedContinuationImpl: kotlin.coroutines.CoroutineContext getContext()>","<kotlinx.coroutines.AbstractContinuation: void initParentJobInternal$kotlinx_coroutines_core(kotlinx.coroutines.Job)>","<kotlinx.coroutines.DispatchedContinuation: kotlin.coroutines.CoroutineContext getContext()>","<kotlinx.coroutines.AbstractContinuation: kotlin.coroutines.Continuation getDelegate()>","<kotlinx.coroutines.AbstractCoroutine: kotlin.coroutines.CoroutineContext getContext()>","<kotlin.coroutines.EmptyCoroutineContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>","<kotlinx.coroutines.JobSupport: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>","<kotlin.coroutines.jvm.internal.CompletedContinuation: kotlin.coroutines.CoroutineContext getContext()>","<kotlinx.coroutines.CoroutineId: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>","<kotlin.coroutines.jvm.internal.ContinuationImpl: kotlin.coroutines.CoroutineContext getContext()>","<kotlinx.coroutines.CoroutineDispatcher: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>","<kotlinx.coroutines.Job: void <clinit>()>"],"<androidx.fragment.app.FragmentManagerImpl: void dispatchOnFragmentAttached(androidx.fragment.app.Fragment,android.content.Context,boolean)>":["<java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>"],"<androidx.collection.ArraySet: void freeArrays(int[],java.lang.Object[],int)>":["<androidx.collection.ArraySet: void <clinit>()>"],"<com.afollestad.photoaffix.prefs.PrefsModule_ProvideImageSpacingHorizontalPrefFactory: com.afollestad.rxkprefs.Pref proxyProvideImageSpacingHorizontalPref(com.afollestad.photoaffix.prefs.PrefsModule,com.afollestad.rxkprefs.RxkPrefs)>":["<com.afollestad.photoaffix.prefs.PrefsModule: com.afollestad.rxkprefs.Pref provideImageSpacingHorizontalPref(com.afollestad.rxkprefs.RxkPrefs)>","<dagger.internal.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>"],"<androidx.appcompat.app.AppCompatActivity: void setContentView(int)>":["<androidx.appcompat.app.AppCompatActivity: androidx.appcompat.app.AppCompatDelegate getDelegate()>","<androidx.appcompat.app.AppCompatDelegateImpl: void setContentView(int)>"],"<com.afollestad.materialdialogs.utils.MDUtil: int resolveColor(android.content.Context,java.lang.Integer,java.lang.Integer)>":["<androidx.core.content.ContextCompat: void <clinit>()>","<android.view.ContextThemeWrapper: android.content.res.Resources$Theme getTheme()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<androidx.core.content.ContextCompat: int getColor(android.content.Context,int)>"],"<androidx.lifecycle.LiveData: void <clinit>()>":["<androidx.lifecycle.LiveData: void <clinit>()>","<java.lang.Object: void <init>()>"],"<androidx.collection.SparseArrayCompat: java.lang.Object get(int)>":["<androidx.collection.SparseArrayCompat: java.lang.Object get(int,java.lang.Object)>"],"<com.afollestad.photoaffix.views.MainActivity: void refresh$default(com.afollestad.photoaffix.views.MainActivity,boolean,int,java.lang.Object)>":["<com.afollestad.photoaffix.views.MainActivity: void refresh(boolean)>"],"<java.lang.Float: void <clinit>()>":["<java.lang.Float: void <clinit>()>"],"<com.afollestad.photoaffix.di.DaggerAppComponent$Builder: com.afollestad.photoaffix.di.DaggerAppComponent$Builder application(android.app.Application)>":["<dagger.internal.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>"],"<com.afollestad.photoaffix.prefs.PrefsModule_ProvideStackHorizontallyPrefFactory: void <init>(com.afollestad.photoaffix.prefs.PrefsModule,javax.inject.Provider)>":["<java.lang.Object: void <init>()>"],"<kotlinx.coroutines.AbstractContinuation: boolean isCompleted()>":["<kotlinx.coroutines.AbstractContinuation: java.lang.Object getState$kotlinx_coroutines_core()>"],"<kotlinx.coroutines.CoroutineId: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext)>":["<kotlinx.coroutines.ThreadContextElement$DefaultImpls: kotlin.coroutines.CoroutineContext plus(kotlinx.coroutines.ThreadContextElement,kotlin.coroutines.CoroutineContext)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<kotlinx.coroutines.internal.SystemPropsKt: long systemProp(java.lang.String,long,long,long)>":["<java.lang.IllegalStateException: void <init>(java.lang.String)>","<java.lang.StringBuilder: java.lang.String toString()>","<java.lang.StringBuilder: java.lang.StringBuilder append(char)>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<java.lang.StringBuilder: void <init>()>","<java.lang.String: java.lang.String toString()>","<kotlinx.coroutines.internal.SystemPropsKt: java.lang.String systemProp(java.lang.String)>","<kotlinx.coroutines.internal.SystemPropsKt: void <clinit>()>","<java.lang.StringBuilder: java.lang.StringBuilder append(long)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<kotlin.text.StringsKt__StringNumberConversionsKt: java.lang.Long toLongOrNull(java.lang.String)>"],"<androidx.fragment.app.FragmentTransitionImpl: void setNameOverridesOrdered(android.view.View,java.util.ArrayList,java.util.Map)>":["<androidx.fragment.app.FragmentTransitionImpl$2: void <init>(androidx.fragment.app.FragmentTransitionImpl,java.util.ArrayList,java.util.Map)>","<androidx.fragment.app.OneShotPreDrawListener: androidx.fragment.app.OneShotPreDrawListener add(android.view.View,java.lang.Runnable)>"],"<kotlin.UninitializedPropertyAccessException: void <init>(java.lang.String)>":["<java.lang.RuntimeException: void <init>(java.lang.String)>"],"<kotlinx.coroutines.CoroutineId: java.lang.Object fold(java.lang.Object,kotlin.jvm.functions.Function2)>":["<kotlinx.coroutines.ThreadContextElement$DefaultImpls: java.lang.Object fold(kotlinx.coroutines.ThreadContextElement,java.lang.Object,kotlin.jvm.functions.Function2)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<kotlin.math.MathKt__MathJVMKt: int roundToInt(float)>":["<java.lang.Math: int round(float)>","<java.lang.IllegalArgumentException: void <init>(java.lang.String)>","<java.lang.Float: void <clinit>()>","<java.lang.Float: boolean isNaN(float)>"],"<kotlinx.coroutines.scheduling.TaskMode: void <clinit>()>":["<kotlinx.coroutines.scheduling.TaskMode: void <clinit>()>","<kotlinx.coroutines.scheduling.TaskMode: void <init>(java.lang.String,int)>"],"<java.lang.ClassCastException: void <init>(java.lang.String)>":["<java.lang.RuntimeException: void <init>(java.lang.String)>","<java.lang.RuntimeException: void <init>()>"],"<kotlinx.coroutines.JobSupport: boolean tryWaitForChild(kotlinx.coroutines.JobSupport$Finishing,kotlinx.coroutines.ChildHandleNode,java.lang.Object)>":["<kotlinx.coroutines.NonDisposableHandle: void <clinit>()>","<kotlinx.coroutines.Job$DefaultImpls: kotlinx.coroutines.DisposableHandle invokeOnCompletion$default(kotlinx.coroutines.Job,boolean,boolean,kotlin.jvm.functions.Function1,int,java.lang.Object)>","<kotlinx.coroutines.JobSupport$ChildCompletion: void <init>(kotlinx.coroutines.JobSupport,kotlinx.coroutines.JobSupport$Finishing,kotlinx.coroutines.ChildHandleNode,java.lang.Object)>","<kotlinx.coroutines.JobSupport: kotlinx.coroutines.ChildHandleNode nextChild(kotlinx.coroutines.internal.LockFreeLinkedListNode)>"],"<androidx.core.graphics.TypefaceCompatBaseImpl$2: int getWeight(java.lang.Object)>":["<androidx.core.graphics.TypefaceCompatBaseImpl$2: int getWeight(androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry)>"],"<androidx.appcompat.app.AppCompatDelegateImpl: int getNightMode()>":["<androidx.appcompat.app.AppCompatDelegate: int getDefaultNightMode()>","<androidx.appcompat.app.AppCompatDelegate: void <clinit>()>","<androidx.appcompat.app.AppCompatDelegateImpl: void <clinit>()>"],"<androidx.collection.ContainerHelpers: void <clinit>()>":["<androidx.collection.ContainerHelpers: void <clinit>()>"],"<kotlinx.coroutines.EventLoopKt: kotlinx.coroutines.internal.Symbol access$getCLOSED_EMPTY$p()>":["<kotlinx.coroutines.EventLoopKt: void <clinit>()>"],"<io.reactivex.schedulers.Schedulers$NewThreadHolder: void <clinit>()>":["<io.reactivex.Scheduler: void <clinit>()>","<io.reactivex.internal.schedulers.NewThreadScheduler: void <init>()>","<io.reactivex.schedulers.Schedulers$NewThreadHolder: void <clinit>()>","<io.reactivex.internal.schedulers.NewThreadScheduler: void <clinit>()>"],"<androidx.arch.core.internal.SafeIterableMap$ListIterator: java.util.Map$Entry next()>":["<androidx.arch.core.internal.SafeIterableMap$ListIterator: androidx.arch.core.internal.SafeIterableMap$Entry nextNode()>"],"<kotlinx.coroutines.scheduling.CoroutineScheduler: void runSafely(kotlinx.coroutines.scheduling.Task)>":["<kotlinx.coroutines.TimeSourceKt: void <clinit>()>","<kotlinx.coroutines.TimeSourceKt: kotlinx.coroutines.TimeSource getTimeSource()>","<kotlinx.coroutines.DefaultTimeSource: void unTrackTask()>","<java.lang.Thread: java.lang.Thread currentThread()>","<java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler getUncaughtExceptionHandler()>","<kotlin.jvm.internal.Intrinsics: void checkExpressionValueIsNotNull(java.lang.Object,java.lang.String)>"],"<kotlin.Result$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>":["<kotlin.Result$Companion: void <init>()>"],"<kotlin.coroutines.EmptyCoroutineContext: void <clinit>()>":["<kotlin.coroutines.EmptyCoroutineContext: void <clinit>()>","<kotlin.coroutines.EmptyCoroutineContext: void <init>()>"],"<java.lang.Class: boolean desiredAssertionStatus()>":["<java.lang.RuntimeException: void <init>(java.lang.String)>"],"<kotlinx.coroutines.CoroutineId$Key: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>":["<kotlinx.coroutines.CoroutineId$Key: void <init>()>"],"<kotlin.collections.EmptyList: int size()>":["<kotlin.collections.EmptyList: int getSize()>"],"<androidx.appcompat.app.WindowDecorActionBar: void setElevation(float)>":["<androidx.core.view.ViewCompat: void setElevation(android.view.View,float)>","<androidx.core.view.ViewCompat: void <clinit>()>"],"<androidx.core.graphics.PathParser$PathDataNode: void <init>(androidx.core.graphics.PathParser$PathDataNode)>":["<java.lang.Object: void <init>()>","<androidx.core.graphics.PathParser: float[] copyOfRange(float[],int,int)>"],"<androidx.appcompat.app.TwilightCalculator: androidx.appcompat.app.TwilightCalculator getInstance()>":["<androidx.appcompat.app.TwilightCalculator: void <init>()>"],"<com.afollestad.rxkprefs.adapters.IntAdapter: void <clinit>()>":["<com.afollestad.rxkprefs.adapters.IntAdapter: void <init>()>","<com.afollestad.rxkprefs.adapters.IntAdapter$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>","<com.afollestad.rxkprefs.adapters.IntAdapter: void <clinit>()>"],"<com.afollestad.photoaffix.engine.subengines.RealDimensionsEngine_Factory: com.afollestad.photoaffix.engine.subengines.RealDimensionsEngine_Factory create(javax.inject.Provider,javax.inject.Provider,javax.inject.Provider,javax.inject.Provider,javax.inject.Provider)>":["<com.afollestad.photoaffix.engine.subengines.RealDimensionsEngine_Factory: void <init>(javax.inject.Provider,javax.inject.Provider,javax.inject.Provider,javax.inject.Provider,javax.inject.Provider)>"],"<com.afollestad.photoaffix.utilities.RealDpConverter: float toDp(int)>":["<android.content.ContextWrapper: android.content.res.Resources getResources()>","<kotlin.jvm.internal.Intrinsics: void checkExpressionValueIsNotNull(java.lang.Object,java.lang.String)>","<android.util.TypedValue: float applyDimension(int,float,android.util.DisplayMetrics)>"],"<androidx.core.content.res.TypedArrayUtils: android.content.res.TypedArray obtainAttributes(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,int[])>":["<android.content.res.Resources: android.content.res.TypedArray obtainAttributes(android.util.AttributeSet,int[])>"],"<com.afollestad.photoaffix.engine.photos.PhotoKt$defaultUriParser$1: java.lang.Object invoke(java.lang.Object)>":["<com.afollestad.photoaffix.engine.photos.PhotoKt$defaultUriParser$1: android.net.Uri invoke(java.lang.String)>"],"<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: void setupColorAnimator(android.animation.Animator)>":["<java.lang.String: boolean equals(java.lang.Object)>","<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: void setupColorAnimator(android.animation.Animator)>","<android.animation.ValueAnimator: void setEvaluator(android.animation.TypeEvaluator)>","<android.animation.ObjectAnimator: java.lang.String getPropertyName()>","<android.animation.ArgbEvaluator: void <init>()>","<android.animation.AnimatorSet: java.util.ArrayList getChildAnimations()>"],"<kotlinx.coroutines.JobSupport: java.lang.Object awaitSuspend(kotlin.coroutines.Continuation)>":["<kotlinx.coroutines.JobSupport: kotlinx.coroutines.DisposableHandle invokeOnCompletion(kotlin.jvm.functions.Function1)>","<kotlin.coroutines.jvm.internal.DebugProbesKt: void probeCoroutineSuspended(kotlin.coroutines.Continuation)>","<kotlinx.coroutines.ResumeAwaitOnCompletion: void <init>(kotlinx.coroutines.JobSupport,kotlinx.coroutines.AbstractContinuation)>","<kotlinx.coroutines.JobSupport$AwaitContinuation: void <init>(kotlin.coroutines.Continuation,kotlinx.coroutines.JobSupport)>","<kotlinx.coroutines.CancellableContinuationImpl: void initCancellability()>","<kotlinx.coroutines.AbstractContinuation: java.lang.Object getResult()>","<kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt: kotlin.coroutines.Continuation intercepted(kotlin.coroutines.Continuation)>","<kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>"],"<androidx.lifecycle.ViewModelProvider: void <init>(androidx.lifecycle.ViewModelStore,androidx.lifecycle.ViewModelProvider$Factory)>":["<java.lang.Object: void <init>()>"],"<androidx.appcompat.app.AppCompatDelegateImpl: boolean preparePanel(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,android.view.KeyEvent)>":["<androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.app.ActionBar peekSupportActionBar()>","<androidx.appcompat.app.AppCompatDelegateImpl: android.view.Window$Callback getWindowCallback()>","<androidx.appcompat.view.menu.MenuBuilder: void setQwertyMode(boolean)>","<androidx.appcompat.view.menu.MenuBuilder: void startDispatchingItemsChanged()>","<androidx.appcompat.app.AppCompatDelegateImpl$ActionMenuPresenterCallback: void <init>(androidx.appcompat.app.AppCompatDelegateImpl)>","<android.view.KeyCharacterMap: android.view.KeyCharacterMap load(int)>","<android.view.KeyCharacterMap: void <clinit>()>","<androidx.appcompat.view.menu.MenuBuilder: void stopDispatchingItemsChanged()>","<androidx.appcompat.app.AppCompatDelegateImpl: void closePanel(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,boolean)>","<androidx.appcompat.view.menu.MenuBuilder: void restoreActionViewStates(android.os.Bundle)>","<androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState: void setMenu(androidx.appcompat.view.menu.MenuBuilder)>","<androidx.appcompat.app.AppCompatDelegateImpl: boolean initializePanelMenu(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState)>"],"<androidx.fragment.app.FragmentActivity: void <init>()>":["<androidx.fragment.app.FragmentController: androidx.fragment.app.FragmentController createController(androidx.fragment.app.FragmentHostCallback)>","<androidx.core.app.ComponentActivity: void <init>()>","<androidx.fragment.app.FragmentActivity$HostCallbacks: void <init>(androidx.fragment.app.FragmentActivity)>","<androidx.fragment.app.FragmentActivity$1: void <init>(androidx.fragment.app.FragmentActivity)>"],"<io.reactivex.schedulers.Schedulers: void <clinit>()>":["<io.reactivex.schedulers.Schedulers$NewThreadTask: void <init>()>","<io.reactivex.Scheduler: void <clinit>()>","<io.reactivex.internal.schedulers.TrampolineScheduler: void <clinit>()>","<io.reactivex.internal.schedulers.TrampolineScheduler: io.reactivex.internal.schedulers.TrampolineScheduler instance()>","<io.reactivex.plugins.RxJavaPlugins: io.reactivex.Scheduler initComputationScheduler(java.util.concurrent.Callable)>","<io.reactivex.schedulers.Schedulers: void <clinit>()>","<io.reactivex.schedulers.Schedulers$IOTask: void <init>()>","<io.reactivex.plugins.RxJavaPlugins: io.reactivex.Scheduler initIoScheduler(java.util.concurrent.Callable)>","<io.reactivex.schedulers.Schedulers$ComputationTask: void <init>()>","<io.reactivex.plugins.RxJavaPlugins: io.reactivex.Scheduler initSingleScheduler(java.util.concurrent.Callable)>","<io.reactivex.plugins.RxJavaPlugins: io.reactivex.Scheduler initNewThreadScheduler(java.util.concurrent.Callable)>","<io.reactivex.schedulers.Schedulers$SingleTask: void <init>()>"],"<com.afollestad.photoaffix.engine.subengines.Size$Companion: com.afollestad.photoaffix.engine.subengines.Size fromOptions(android.graphics.BitmapFactory$Options)>":["<com.afollestad.photoaffix.engine.subengines.Size: void <init>(int,int)>","<com.afollestad.photoaffix.engine.subengines.Size: void <clinit>()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<kotlinx.coroutines.AbstractContinuation: void resumeImpl(java.lang.Object,int)>":["<kotlinx.coroutines.AbstractContinuation: void handleException(java.lang.Throwable)>","<java.lang.IllegalStateException: void <init>(java.lang.String)>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>","<java.lang.StringBuilder: java.lang.String toString()>","<kotlinx.coroutines.AbstractContinuation: boolean updateStateToFinal(kotlinx.coroutines.NotCompleted,java.lang.Object,int)>","<java.lang.StringBuilder: void <init>()>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<kotlinx.coroutines.AbstractContinuation: java.lang.Object getState$kotlinx_coroutines_core()>"],"<com.afollestad.photoaffix.utilities.RealIoManager_Factory: java.lang.Object get()>":["<com.afollestad.photoaffix.utilities.RealIoManager_Factory: com.afollestad.photoaffix.utilities.RealIoManager get()>"],"<kotlinx.coroutines.CoroutineExceptionHandler: void <clinit>()>":["<kotlinx.coroutines.CoroutineExceptionHandler$Key: void <clinit>()>","<kotlinx.coroutines.CoroutineExceptionHandler: void <clinit>()>"],"<kotlin.jvm.internal.TypeIntrinsics: java.lang.Object beforeCheckcastToFunctionOfArity(java.lang.Object,int)>":["<kotlin.jvm.internal.TypeIntrinsics: void throwCce(java.lang.Object,java.lang.String)>","<java.lang.StringBuilder: java.lang.String toString()>","<java.lang.StringBuilder: void <init>()>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<java.lang.StringBuilder: java.lang.StringBuilder append(int)>","<kotlin.jvm.internal.TypeIntrinsics: boolean isFunctionOfArity(java.lang.Object,int)>"],"<androidx.core.graphics.drawable.DrawableCompat: void jumpToCurrentState(android.graphics.drawable.Drawable)>":["<androidx.core.graphics.drawable.WrappedDrawableApi14: void jumpToCurrentState()>","<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: void jumpToCurrentState()>","<android.graphics.drawable.LayerDrawable: void jumpToCurrentState()>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void jumpToCurrentState()>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: void jumpToCurrentState()>"],"<androidx.arch.core.internal.SafeIterableMap: androidx.arch.core.internal.SafeIterableMap$IteratorWithAdditions iteratorWithAdditions()>":["<java.lang.Boolean: void <clinit>()>","<java.lang.Boolean: java.lang.Boolean valueOf(boolean)>","<androidx.arch.core.internal.SafeIterableMap$IteratorWithAdditions: void <init>(androidx.arch.core.internal.SafeIterableMap)>","<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>"],"<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>":["<java.lang.RuntimeException: void <init>(java.lang.String)>"],"<kotlin.Unit: void <clinit>()>":["<kotlin.Unit: void <clinit>()>","<kotlin.Unit: void <init>()>"],"<androidx.fragment.app.FragmentActivity: void onSaveInstanceState(android.os.Bundle)>":["<androidx.collection.SparseArrayCompat: java.lang.Object valueAt(int)>","<androidx.fragment.app.FragmentActivity: void markFragmentsCreated()>","<java.lang.String: void <clinit>()>","<androidx.fragment.app.FragmentController: android.os.Parcelable saveAllState()>","<androidx.collection.SparseArrayCompat: int keyAt(int)>","<androidx.collection.SparseArrayCompat: int size()>","<androidx.core.app.ComponentActivity: void onSaveInstanceState(android.os.Bundle)>"],"<com.afollestad.photoaffix.views.MainActivity$performAffix$1$1$sizingResult$1: java.lang.Object invoke(java.lang.Object,java.lang.Object)>":["<com.afollestad.photoaffix.views.MainActivity$performAffix$1$1$sizingResult$1: java.lang.Object invokeSuspend(java.lang.Object)>","<kotlin.Unit: void <clinit>()>","<com.afollestad.photoaffix.views.MainActivity$performAffix$1$1$sizingResult$1: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)>"],"<kotlin.jvm.internal.Lambda: void <init>(int)>":["<java.lang.Object: void <init>()>"],"<androidx.core.graphics.TypefaceCompat: void <clinit>()>":["<androidx.core.graphics.TypefaceCompatApi24Impl: boolean isUsable()>","<androidx.core.graphics.TypefaceCompatApi21Impl: void <init>()>","<androidx.core.graphics.TypefaceCompatApi24Impl: void <clinit>()>","<androidx.core.graphics.TypefaceCompatApi28Impl: void <init>()>","<android.os.Build$VERSION: void <clinit>()>","<androidx.collection.LruCache: void <init>(int)>","<androidx.core.graphics.TypefaceCompatBaseImpl: void <init>()>","<androidx.core.graphics.TypefaceCompatApi26Impl: void <init>()>","<androidx.core.graphics.TypefaceCompat: void <clinit>()>","<androidx.core.graphics.TypefaceCompatApi24Impl: void <init>()>"],"<kotlinx.coroutines.internal.ThreadContextKt: void restoreThreadContext(kotlin.coroutines.CoroutineContext,java.lang.Object)>":["<kotlinx.coroutines.CoroutineId: java.lang.Object fold(java.lang.Object,kotlin.jvm.functions.Function2)>","<kotlinx.coroutines.internal.ThreadContextKt: void <clinit>()>","<kotlin.coroutines.EmptyCoroutineContext: java.lang.Object fold(java.lang.Object,kotlin.jvm.functions.Function2)>","<kotlinx.coroutines.JobSupport: java.lang.Object fold(java.lang.Object,kotlin.jvm.functions.Function2)>","<kotlin.coroutines.AbstractCoroutineContextElement: java.lang.Object fold(java.lang.Object,kotlin.jvm.functions.Function2)>","<kotlin.TypeCastException: void <init>(java.lang.String)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<kotlinx.coroutines.CoroutineId: void restoreThreadContext(kotlin.coroutines.CoroutineContext,java.lang.Object)>","<kotlin.coroutines.CombinedContext: java.lang.Object fold(java.lang.Object,kotlin.jvm.functions.Function2)>","<kotlinx.coroutines.internal.ThreadState: void start()>"],"<androidx.fragment.app.FragmentHostCallback: void <init>(android.app.Activity,android.content.Context,android.os.Handler,int)>":["<androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>","<androidx.fragment.app.FragmentManagerImpl: void <init>()>","<androidx.fragment.app.FragmentManagerImpl: void <clinit>()>","<androidx.fragment.app.FragmentContainer: void <init>()>"],"<kotlinx.coroutines.AbstractContinuation: boolean cancelImpl(java.lang.Throwable)>":["<kotlinx.coroutines.AbstractContinuation: boolean updateStateToFinal(kotlinx.coroutines.NotCompleted,java.lang.Object,int)>","<kotlinx.coroutines.CancelledContinuation: void <init>(kotlin.coroutines.Continuation,java.lang.Throwable)>","<kotlinx.coroutines.AbstractContinuation: java.lang.Object getState$kotlinx_coroutines_core()>"],"<kotlinx.coroutines.JobSupport$ChildCompletion: java.lang.Object invoke(java.lang.Object)>":["<kotlin.Unit: void <clinit>()>","<kotlinx.coroutines.JobSupport$ChildCompletion: void invoke(java.lang.Throwable)>"],"<kotlin.text.StringsKt__StringsJVMKt: boolean equals(java.lang.String,java.lang.String,boolean)>":["<java.lang.String: boolean equals(java.lang.Object)>","<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>"],"<androidx.appcompat.widget.AppCompatDrawableManager: boolean tintDrawableUsingColorFilter(android.content.Context,int,android.graphics.drawable.Drawable)>":["<androidx.appcompat.widget.AppCompatDrawableManager: android.graphics.PorterDuffColorFilter getPorterDuffColorFilter(int,android.graphics.PorterDuff$Mode)>","<androidx.appcompat.widget.ThemeUtils: int getThemeAttrColor(android.content.Context,int)>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: android.graphics.drawable.Drawable mutate()>","<androidx.core.graphics.drawable.WrappedDrawableApi14: void setColorFilter(android.graphics.ColorFilter)>","<java.lang.Math: int round(float)>","<android.graphics.PorterDuff$Mode: void <clinit>()>","<androidx.appcompat.widget.AppCompatDrawableManager: boolean arrayContains(int[],int)>","<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: android.graphics.drawable.Drawable mutate()>","<android.graphics.drawable.LayerDrawable: void setColorFilter(android.graphics.ColorFilter)>","<androidx.core.graphics.drawable.WrappedDrawableApi14: void setAlpha(int)>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: void setColorFilter(android.graphics.ColorFilter)>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: void setAlpha(int)>","<androidx.appcompat.widget.ThemeUtils: void <clinit>()>","<androidx.appcompat.widget.DrawableUtils: boolean canSafelyMutateDrawable(android.graphics.drawable.Drawable)>","<android.graphics.drawable.LayerDrawable: android.graphics.drawable.Drawable mutate()>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mutate()>","<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: void setAlpha(int)>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void setColorFilter(android.graphics.ColorFilter)>","<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: void setColorFilter(android.graphics.ColorFilter)>","<androidx.core.graphics.drawable.WrappedDrawableApi14: android.graphics.drawable.Drawable mutate()>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void setAlpha(int)>","<android.graphics.drawable.LayerDrawable: void setAlpha(int)>","<androidx.appcompat.widget.AppCompatDrawableManager: void <clinit>()>","<androidx.appcompat.widget.DrawableUtils: void <clinit>()>"],"<io.reactivex.schedulers.Schedulers$SingleHolder: void <clinit>()>":["<io.reactivex.Scheduler: void <clinit>()>","<io.reactivex.schedulers.Schedulers$SingleHolder: void <clinit>()>","<io.reactivex.internal.schedulers.SingleScheduler: void <init>()>","<io.reactivex.internal.schedulers.SingleScheduler: void <clinit>()>"],"<com.afollestad.materialdialogs.Theme$Companion: com.afollestad.materialdialogs.Theme inferTheme(android.content.Context)>":["<java.lang.Integer: void <clinit>()>","<com.afollestad.materialdialogs.utils.MDUtil: boolean isColorDark$default(com.afollestad.materialdialogs.utils.MDUtil,int,double,int,java.lang.Object)>","<com.afollestad.materialdialogs.Theme: void <clinit>()>","<java.lang.Integer: java.lang.Integer valueOf(int)>","<com.afollestad.materialdialogs.utils.MDUtil: int resolveColor$default(com.afollestad.materialdialogs.utils.MDUtil,android.content.Context,java.lang.Integer,java.lang.Integer,int,java.lang.Object)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<com.afollestad.materialdialogs.utils.MDUtil: void <clinit>()>"],"<androidx.core.graphics.ColorUtils: int compositeColors(int,int)>":["<android.graphics.Color: int green(int)>","<android.graphics.Color: int alpha(int)>","<android.graphics.Color: int argb(int,int,int,int)>","<android.graphics.Color: int blue(int)>","<android.graphics.Color: int red(int)>","<androidx.core.graphics.ColorUtils: int compositeComponent(int,int,int,int,int)>","<androidx.core.graphics.ColorUtils: int compositeAlpha(int,int)>","<androidx.core.graphics.ColorUtils: void <clinit>()>"],"<androidx.fragment.app.FragmentTransitionCompat21: void setSharedElementTargets(java.lang.Object,android.view.View,java.util.ArrayList)>":["<androidx.fragment.app.FragmentTransitionImpl: void bfsAddViewChildren(java.util.List,android.view.View)>","<java.util.ArrayList: int size()>","<java.util.ArrayList: boolean add(java.lang.Object)>","<java.util.ArrayList: java.lang.Object get(int)>","<androidx.fragment.app.FragmentTransitionCompat21: void addTargets(java.lang.Object,java.util.ArrayList)>","<android.transition.Transition: java.util.List getTargets()>"],"<kotlinx.coroutines.internal.LockFreeLinkedListNode: kotlinx.coroutines.internal.LockFreeLinkedListNode findHead()>":["<java.lang.IllegalStateException: void <init>(java.lang.String)>","<kotlinx.coroutines.internal.LockFreeLinkedListNode: kotlinx.coroutines.internal.LockFreeLinkedListNode getNextNode()>","<java.lang.String: java.lang.String toString()>"],"<kotlinx.coroutines.scheduling.WorkQueue: void <init>()>":["<java.lang.Object: void <init>()>","<java.util.concurrent.atomic.AtomicReferenceArray: void <init>(int)>"],"<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: java.lang.Object getTargetByName(java.lang.String)>":["<androidx.collection.SimpleArrayMap: java.lang.Object get(java.lang.Object)>"],"<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatedStateListState cloneConstantState()>":["<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatedStateListState: void <init>(androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatedStateListState,androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat,android.content.res.Resources)>"],"<io.reactivex.plugins.RxJavaPlugins: io.reactivex.Observable onAssembly(io.reactivex.Observable)>":["<io.reactivex.plugins.RxJavaPlugins: java.lang.Object apply(io.reactivex.functions.Function,java.lang.Object)>"],"<io.reactivex.Observable: io.reactivex.Observable share()>":["<io.reactivex.Observable: io.reactivex.observables.ConnectableObservable publish()>","<io.reactivex.observables.ConnectableObservable: io.reactivex.Observable refCount()>"],"<androidx.appcompat.graphics.drawable.DrawableContainer$1: void <init>(androidx.appcompat.graphics.drawable.DrawableContainer)>":["<java.lang.Object: void <init>()>"],"<kotlinx.coroutines.Unconfined: void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)>":["<java.lang.UnsupportedOperationException: void <init>()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<kotlin.ranges.IntProgression: kotlin.collections.IntIterator iterator()>":["<kotlin.ranges.IntProgressionIterator: void <init>(int,int,int)>"],"<androidx.fragment.app.FragmentManagerImpl: boolean modifiesAlpha(androidx.fragment.app.FragmentManagerImpl$AnimationOrAnimator)>":["<androidx.fragment.app.FragmentManagerImpl: boolean modifiesAlpha(android.animation.Animator)>","<android.view.animation.AnimationSet: java.util.List getAnimations()>","<androidx.fragment.app.FragmentManagerImpl: void <clinit>()>"],"<androidx.appcompat.app.TwilightManager: void <init>(android.content.Context,android.location.LocationManager)>":["<java.lang.Object: void <init>()>","<androidx.appcompat.app.TwilightManager$TwilightState: void <init>()>"],"<com.afollestad.photoaffix.engine.subengines.RealStitchEngine: void <init>(com.afollestad.photoaffix.utilities.DpConverter,com.afollestad.photoaffix.engine.bitmaps.BitmapManipulator,com.afollestad.rxkprefs.Pref,com.afollestad.rxkprefs.Pref,com.afollestad.rxkprefs.Pref,com.afollestad.rxkprefs.Pref,com.afollestad.rxkprefs.Pref)>":["<java.lang.Object: void <init>()>","<com.afollestad.photoaffix.engine.subengines.RealStitchEngine$paintCreator$1: void <clinit>()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<com.afollestad.photoaffix.engine.subengines.RealStitchEngine$canvasCreator$1: void <clinit>()>","<com.afollestad.photoaffix.engine.subengines.RealStitchEngine$rectCreator$1: void <clinit>()>"],"<kotlinx.coroutines.intrinsics.UndispatchedKt: void startCoroutineUndispatched(kotlin.jvm.functions.Function2,java.lang.Object,kotlin.coroutines.Continuation)>":["<kotlinx.coroutines.internal.ThreadContextKt: void restoreThreadContext(kotlin.coroutines.CoroutineContext,java.lang.Object)>","<kotlinx.coroutines.AbstractCoroutine: kotlin.coroutines.CoroutineContext getContext()>","<com.afollestad.photoaffix.views.MainActivity$performAffix$1$1: java.lang.Object invoke(java.lang.Object,java.lang.Object)>","<kotlin.jvm.internal.TypeIntrinsics: java.lang.Object beforeCheckcastToFunctionOfArity(java.lang.Object,int)>","<kotlin.ResultKt: java.lang.Object createFailure(java.lang.Throwable)>","<kotlinx.coroutines.internal.ThreadContextKt: void <clinit>()>","<kotlin.Result: void <clinit>()>","<kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>","<com.afollestad.photoaffix.views.MainActivity$performAffix$1$1$sizingResult$1: java.lang.Object invoke(java.lang.Object,java.lang.Object)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<kotlinx.coroutines.AbstractCoroutine: void resumeWith(java.lang.Object)>","<kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>","<kotlinx.coroutines.internal.ThreadContextKt: java.lang.Object updateThreadContext(kotlin.coroutines.CoroutineContext,java.lang.Object)>"],"<kotlinx.coroutines.DefaultExecutor: void unpark()>":["<kotlinx.coroutines.DefaultExecutor: java.lang.Thread thread()>","<kotlinx.coroutines.TimeSourceKt: void <clinit>()>","<kotlinx.coroutines.TimeSourceKt: kotlinx.coroutines.TimeSource getTimeSource()>","<kotlinx.coroutines.DefaultTimeSource: void unpark(java.lang.Thread)>"],"<androidx.core.graphics.TypefaceCompat: java.lang.String createResourceUid(android.content.res.Resources,int,int)>":["<java.lang.StringBuilder: java.lang.String toString()>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<android.content.res.Resources: java.lang.String getResourcePackageName(int)>","<java.lang.StringBuilder: void <init>()>","<java.lang.StringBuilder: java.lang.StringBuilder append(int)>"],"<androidx.fragment.app.FragmentTransition: boolean canHandleAll(androidx.fragment.app.FragmentTransitionImpl,java.util.List)>":["<androidx.fragment.app.FragmentTransitionCompat21: boolean canHandle(java.lang.Object)>","<java.util.ArrayList: int size()>","<java.util.ArrayList: java.lang.Object get(int)>"],"<androidx.fragment.app.FragmentManagerImpl: void burpActive()>":["<android.util.SparseArray: int size()>","<android.util.SparseArray: int keyAt(int)>","<android.util.SparseArray: java.lang.Object valueAt(int)>","<android.util.SparseArray: void delete(int)>"],"<java.lang.String: void <clinit>()>":["<java.lang.String: void <clinit>()>"],"<com.afollestad.materialdialogs.Theme: void <clinit>()>":["<com.afollestad.materialdialogs.Theme: void <init>(java.lang.String,int,int)>","<com.afollestad.materialdialogs.Theme: void <clinit>()>","<com.afollestad.materialdialogs.Theme$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>"],"<kotlinx.coroutines.JobSupport: kotlinx.coroutines.NodeList getOrPromoteCancellingList(kotlinx.coroutines.Incomplete)>":["<kotlinx.coroutines.JobSupport: void promoteSingleToNodeList(kotlinx.coroutines.JobNode)>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>","<java.lang.IllegalStateException: void <init>(java.lang.String)>","<java.lang.StringBuilder: java.lang.String toString()>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<java.lang.StringBuilder: void <init>()>","<kotlinx.coroutines.NodeList: void <init>()>","<kotlinx.coroutines.Empty: kotlinx.coroutines.NodeList getList()>"],"<io.reactivex.internal.functions.ObjectHelper: void <clinit>()>":["<io.reactivex.internal.functions.ObjectHelper$BiObjectPredicate: void <init>()>","<io.reactivex.internal.functions.ObjectHelper: void <clinit>()>"],"<kotlin.coroutines.CoroutineContext$Element$DefaultImpls: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext$Element,kotlin.coroutines.CoroutineContext)>":["<kotlin.coroutines.CoroutineContext$DefaultImpls: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext,kotlin.coroutines.CoroutineContext)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<androidx.core.graphics.TypefaceCompatApi26Impl: java.lang.reflect.Method obtainCreateFromFamiliesWithDefaultMethod(java.lang.Class)>":["<java.lang.Integer: void <clinit>()>","<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>","<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>"],"<io.reactivex.internal.functions.Functions$EmptyAction: void <init>()>":["<java.lang.Object: void <init>()>"],"<androidx.recyclerview.widget.OrientationHelper: void <init>(androidx.recyclerview.widget.RecyclerView$LayoutManager,androidx.recyclerview.widget.OrientationHelper$1)>":["<androidx.recyclerview.widget.OrientationHelper: void <init>(androidx.recyclerview.widget.RecyclerView$LayoutManager)>"],"<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: void <init>(androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState)>":["<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: void <clinit>()>","<android.graphics.drawable.Drawable$ConstantState: void <init>()>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: void <init>(androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer)>","<android.graphics.Paint: void <init>(android.graphics.Paint)>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void <clinit>()>"],"<androidx.core.provider.FontsContractCompat: void <clinit>()>":["<androidx.core.provider.FontsContractCompat$5: void <init>()>","<java.lang.Object: void <init>()>","<androidx.core.provider.FontsContractCompat: void <clinit>()>","<androidx.core.provider.SelfDestructiveThread: void <init>(java.lang.String,int,int)>","<androidx.collection.SimpleArrayMap: void <init>()>","<androidx.collection.LruCache: void <init>(int)>"],"<androidx.collection.MapCollections$ArrayIterator: java.lang.Object next()>":["<androidx.collection.ArrayMap$1: java.lang.Object colGetEntry(int,int)>","<java.util.NoSuchElementException: void <init>()>","<androidx.collection.MapCollections$ArrayIterator: boolean hasNext()>"],"<androidx.interpolator.view.animation.LinearOutSlowInInterpolator: void <init>()>":["<androidx.interpolator.view.animation.LinearOutSlowInInterpolator: void <clinit>()>","<androidx.interpolator.view.animation.LookupTableInterpolator: void <init>(float[])>"],"<kotlinx.coroutines.ResumeModeKt: void resumeMode(kotlin.coroutines.Continuation,java.lang.Object,int)>":["<kotlinx.coroutines.DispatchedKt: void <clinit>()>","<kotlinx.coroutines.internal.ThreadContextKt: void restoreThreadContext(kotlin.coroutines.CoroutineContext,java.lang.Object)>","<kotlin.coroutines.jvm.internal.CompletedContinuation: void resumeWith(java.lang.Object)>","<kotlinx.coroutines.DispatchedContinuation: void resumeWith(java.lang.Object)>","<kotlinx.coroutines.DispatchedKt: void resumeDirect(kotlin.coroutines.Continuation,java.lang.Object)>","<kotlinx.coroutines.DispatchedContinuation: kotlin.coroutines.CoroutineContext getContext()>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<java.lang.StringBuilder: void <init>()>","<java.lang.StringBuilder: java.lang.StringBuilder append(int)>","<java.lang.IllegalStateException: void <init>(java.lang.String)>","<java.lang.StringBuilder: java.lang.String toString()>","<kotlinx.coroutines.internal.ThreadContextKt: void <clinit>()>","<kotlin.coroutines.jvm.internal.BaseContinuationImpl: void resumeWith(java.lang.Object)>","<kotlin.Result: void <clinit>()>","<kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>","<kotlin.Unit: void <clinit>()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<kotlinx.coroutines.internal.ThreadContextKt: java.lang.Object updateThreadContext(kotlin.coroutines.CoroutineContext,java.lang.Object)>","<kotlinx.coroutines.AbstractCoroutine: void resumeWith(java.lang.Object)>","<kotlinx.coroutines.DispatchedKt: void resumeCancellable(kotlin.coroutines.Continuation,java.lang.Object)>"],"<androidx.fragment.app.FragmentTransitionCompat21$3: void <init>(androidx.fragment.app.FragmentTransitionCompat21,java.lang.Object,java.util.ArrayList,java.lang.Object,java.util.ArrayList,java.lang.Object,java.util.ArrayList)>":["<java.lang.Object: void <init>()>"],"<androidx.core.content.res.GradientColorInflaterCompat: android.graphics.Shader$TileMode parseTileMode(int)>":["<android.graphics.Shader$TileMode: void <clinit>()>"],"<androidx.core.content.res.FontResourcesParserCompat: java.util.List toByteArrayList(java.lang.String[])>":["<java.util.ArrayList: void <init>()>","<android.util.Base64: byte[] decode(java.lang.String,int)>","<java.util.ArrayList: boolean add(java.lang.Object)>"],"<com.afollestad.photoaffix.engine.subengines.SizingResult: void <init>(com.afollestad.photoaffix.engine.subengines.Size,java.lang.Exception)>":["<java.lang.Object: void <init>()>"],"<kotlinx.coroutines.internal.SystemPropsKt: java.lang.String systemProp(java.lang.String)>":["<java.lang.System: java.lang.String getProperty(java.lang.String)>","<java.lang.System: void <clinit>()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<androidx.core.view.LayoutInflaterCompat: void setFactory2(android.view.LayoutInflater,android.view.LayoutInflater$Factory2)>":["<androidx.core.view.LayoutInflaterCompat: void forceSetFactory2(android.view.LayoutInflater,android.view.LayoutInflater$Factory2)>","<android.os.Build$VERSION: void <clinit>()>"],"<kotlinx.coroutines.DeferredCoroutine: java.lang.Object await$suspendImpl(kotlinx.coroutines.DeferredCoroutine,kotlin.coroutines.Continuation)>":["<java.lang.IllegalStateException: void <init>(java.lang.String)>","<kotlinx.coroutines.DeferredCoroutine$await$1: void <init>(kotlinx.coroutines.DeferredCoroutine,kotlin.coroutines.Continuation)>","<kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>","<kotlinx.coroutines.JobSupport: java.lang.Object awaitInternal$kotlinx_coroutines_core(kotlin.coroutines.Continuation)>"],"<io.reactivex.internal.schedulers.TrampolineScheduler: io.reactivex.internal.schedulers.TrampolineScheduler instance()>":["<io.reactivex.internal.schedulers.TrampolineScheduler: void <clinit>()>","<io.reactivex.Scheduler: void <clinit>()>"],"<com.afollestad.photoaffix.prefs.PrefsModule_ProvideRxkPrefsFactory: com.afollestad.photoaffix.prefs.PrefsModule_ProvideRxkPrefsFactory create(com.afollestad.photoaffix.prefs.PrefsModule,javax.inject.Provider)>":["<com.afollestad.photoaffix.prefs.PrefsModule_ProvideRxkPrefsFactory: void <init>(com.afollestad.photoaffix.prefs.PrefsModule,javax.inject.Provider)>"],"<kotlin.coroutines.jvm.internal.BaseContinuationImpl: void resumeWith(java.lang.Object)>":["<kotlin.coroutines.jvm.internal.CompletedContinuation: void resumeWith(java.lang.Object)>","<kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt$createCoroutineUnintercepted$$inlined$createCoroutineFromSuspendFunction$IntrinsicsKt__IntrinsicsJvmKt$3: java.lang.Object invokeSuspend(java.lang.Object)>","<kotlinx.coroutines.DispatchedContinuation: void resumeWith(java.lang.Object)>","<com.afollestad.photoaffix.views.MainActivity$performAffix$1$1$sizingResult$1: java.lang.Object invokeSuspend(java.lang.Object)>","<kotlin.jvm.internal.Intrinsics: void throwNpe()>","<kotlin.coroutines.jvm.internal.BaseContinuationImpl: void releaseIntercepted()>","<kotlin.ResultKt: java.lang.Object createFailure(java.lang.Throwable)>","<com.afollestad.photoaffix.views.MainActivity$performAffix$1$1: java.lang.Object invokeSuspend(java.lang.Object)>","<kotlin.coroutines.jvm.internal.ContinuationImpl: void releaseIntercepted()>","<kotlin.coroutines.jvm.internal.BaseContinuationImpl: void resumeWith(java.lang.Object)>","<kotlin.Result: void <clinit>()>","<kotlin.coroutines.jvm.internal.DebugProbesKt: void probeCoroutineResumed(kotlin.coroutines.Continuation)>","<kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>","<kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt$createCoroutineUnintercepted$$inlined$createCoroutineFromSuspendFunction$IntrinsicsKt__IntrinsicsJvmKt$4: java.lang.Object invokeSuspend(java.lang.Object)>","<kotlinx.coroutines.AbstractCoroutine: void resumeWith(java.lang.Object)>","<kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>","<kotlinx.coroutines.DeferredCoroutine$await$1: java.lang.Object invokeSuspend(java.lang.Object)>"],"<androidx.appcompat.view.menu.MenuBuilder: void <init>(android.content.Context)>":["<java.lang.Object: void <init>()>","<java.util.concurrent.CopyOnWriteArrayList: void <init>()>","<androidx.appcompat.app.AppCompatActivity: android.content.res.Resources getResources()>","<java.util.ArrayList: void <init>()>","<androidx.appcompat.view.menu.MenuBuilder: void setShortcutsVisibleInner(boolean)>","<androidx.appcompat.view.ContextThemeWrapper: android.content.res.Resources getResources()>"],"<java.lang.Integer: void <clinit>()>":["<java.lang.Integer: void <clinit>()>"],"<androidx.collection.ArrayMap: androidx.collection.MapCollections getCollection()>":["<androidx.collection.ArrayMap$1: void <init>(androidx.collection.ArrayMap)>"],"<kotlin.collections.ArraysKt___ArraysKt: java.util.List toMutableList(java.lang.Object[])>":["<java.util.ArrayList: void <init>(java.util.Collection)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<kotlin.collections.CollectionsKt__CollectionsKt: java.util.Collection asCollection(java.lang.Object[])>"],"<kotlinx.coroutines.scheduling.WorkQueue: void offloadWork(kotlinx.coroutines.scheduling.GlobalQueue)>":["<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object getAndSet(int,java.lang.Object)>","<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>","<kotlinx.coroutines.scheduling.WorkQueue: void <clinit>()>","<kotlin.ranges.RangesKt___RangesKt: int coerceAtLeast(int,int)>","<kotlinx.coroutines.scheduling.WorkQueue: int getBufferSize$kotlinx_coroutines_core()>","<kotlinx.coroutines.scheduling.WorkQueue: java.util.concurrent.atomic.AtomicReferenceArray access$getBuffer$p(kotlinx.coroutines.scheduling.WorkQueue)>","<kotlinx.coroutines.scheduling.WorkQueue: void addToGlobalQueue(kotlinx.coroutines.scheduling.GlobalQueue,kotlinx.coroutines.scheduling.Task)>"],"<androidx.loader.app.LoaderManagerImpl$LoaderViewModel: void <init>()>":["<androidx.collection.SparseArrayCompat: void <clinit>()>","<androidx.lifecycle.ViewModel: void <init>()>","<androidx.collection.SparseArrayCompat: void <init>()>"],"<androidx.fragment.app.FragmentTransition: java.lang.Object getEnterTransition(androidx.fragment.app.FragmentTransitionImpl,androidx.fragment.app.Fragment,boolean)>":["<androidx.fragment.app.FragmentTransitionCompat21: java.lang.Object cloneTransition(java.lang.Object)>"],"<kotlinx.coroutines.EventLoopKt: void <clinit>()>":["<kotlinx.coroutines.internal.Symbol: void <init>(java.lang.String)>","<kotlinx.coroutines.EventLoopKt: void <clinit>()>"],"<java.lang.Class: java.lang.String getCanonicalName()>":["<java.lang.RuntimeException: void <init>(java.lang.String)>"],"<kotlin.ranges.IntProgression: java.util.Iterator iterator()>":["<kotlin.ranges.IntProgression: kotlin.collections.IntIterator iterator()>"],"<com.afollestad.assent.internal.PermissionFragment: void <init>()>":["<androidx.fragment.app.Fragment: void <init>()>"],"<androidx.appcompat.app.WindowDecorActionBar: void <init>(android.app.Activity,boolean)>":["<androidx.appcompat.app.WindowDecorActionBar$2: void <init>(androidx.appcompat.app.WindowDecorActionBar)>","<androidx.appcompat.app.WindowDecorActionBar$3: void <init>(androidx.appcompat.app.WindowDecorActionBar)>","<java.util.ArrayList: void <init>()>","<androidx.appcompat.app.WindowDecorActionBar$1: void <init>(androidx.appcompat.app.WindowDecorActionBar)>","<androidx.appcompat.app.WindowDecorActionBar: void init(android.view.View)>","<androidx.appcompat.app.ActionBar: void <init>()>"],"<androidx.core.content.FileProvider: void <clinit>()>":["<java.lang.String: void <clinit>()>","<androidx.core.content.FileProvider: void <clinit>()>","<java.util.HashMap: void <init>()>","<java.io.File: void <clinit>()>","<java.io.File: void <init>(java.lang.String)>"],"<androidx.core.provider.FontsContractCompat: java.util.List getCertificates(androidx.core.provider.FontRequest,android.content.res.Resources)>":["<androidx.core.provider.FontRequest: java.util.List getCertificates()>","<androidx.core.provider.FontRequest: int getCertificatesArrayResId()>","<androidx.core.content.res.FontResourcesParserCompat: java.util.List readCerts(android.content.res.Resources,int)>"],"<com.afollestad.rxkprefs.adapters.IntAdapter: void <init>()>":["<java.lang.Object: void <init>()>"],"<io.reactivex.internal.schedulers.ComputationScheduler: void <init>()>":["<io.reactivex.Scheduler: void <clinit>()>","<io.reactivex.internal.schedulers.ComputationScheduler: void <init>(java.util.concurrent.ThreadFactory)>","<io.reactivex.internal.schedulers.ComputationScheduler: void <clinit>()>"],"<kotlin.collections.CollectionsKt__CollectionsJVMKt: java.util.List listOf(java.lang.Object)>":["<java.util.Collections: void <clinit>()>","<java.util.Collections: java.util.List singletonList(java.lang.Object)>","<kotlin.jvm.internal.Intrinsics: void checkExpressionValueIsNotNull(java.lang.Object,java.lang.String)>"],"<kotlinx.coroutines.JobSupport: java.lang.Throwable getFinalRootCause(kotlinx.coroutines.JobSupport$Finishing,java.util.List)>":["<java.util.ArrayList: java.util.Iterator iterator()>","<java.util.ArrayList: boolean isEmpty()>","<kotlinx.coroutines.JobSupport$Finishing: boolean isCancelling()>","<java.util.ArrayList: java.lang.Object get(int)>","<kotlinx.coroutines.JobSupport: kotlinx.coroutines.JobCancellationException createJobCancellationException()>"],"<androidx.appcompat.app.AppCompatDelegateImpl: void ensureSubDecor()>":["<androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.app.ActionBar peekSupportActionBar()>","<androidx.appcompat.app.AppCompatDelegateImpl: android.view.ViewGroup createSubDecor()>","<androidx.appcompat.app.AppCompatDelegateImpl: void applyFixedSizeWindow()>","<androidx.appcompat.app.AppCompatDelegateImpl: void onSubDecorInstalled(android.view.ViewGroup)>","<androidx.appcompat.app.AppCompatDelegateImpl: void invalidatePanelMenu(int)>","<androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState getPanelState(int,boolean)>","<androidx.appcompat.app.WindowDecorActionBar: void setWindowTitle(java.lang.CharSequence)>","<androidx.appcompat.app.AppCompatDelegateImpl: java.lang.CharSequence getTitle()>","<android.text.TextUtils: void <clinit>()>","<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>"],"<com.afollestad.photoaffix.prefs.PrefsModule$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>":["<com.afollestad.photoaffix.prefs.PrefsModule$Companion: void <init>()>"],"<androidx.appcompat.app.AppCompatActivity: void onPostResume()>":["<androidx.fragment.app.FragmentActivity: void onPostResume()>","<androidx.appcompat.app.AppCompatActivity: androidx.appcompat.app.AppCompatDelegate getDelegate()>","<androidx.appcompat.app.AppCompatDelegateImpl: void onPostResume()>"],"<androidx.fragment.app.FragmentContainer: void <init>()>":["<java.lang.Object: void <init>()>"],"<com.afollestad.assent.internal.Queue: void plusAssign(java.lang.Object)>":["<com.afollestad.assent.internal.Queue: boolean push(java.lang.Object)>"],"<androidx.fragment.app.FragmentActivity: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>":["<android.app.Activity: android.app.Application getApplication()>","<java.io.PrintWriter: void print(java.lang.String)>","<androidx.loader.app.LoaderManager: androidx.loader.app.LoaderManager getInstance(androidx.lifecycle.LifecycleOwner)>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<java.lang.StringBuilder: void <init>()>","<androidx.fragment.app.FragmentManagerImpl: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>","<androidx.fragment.app.FragmentController: androidx.fragment.app.FragmentManager getSupportFragmentManager()>","<java.lang.StringBuilder: java.lang.String toString()>","<java.lang.Integer: java.lang.String toHexString(int)>","<java.io.PrintWriter: void println(java.lang.String)>","<java.lang.Integer: void <clinit>()>","<java.lang.System: void <clinit>()>","<java.lang.System: int identityHashCode(java.lang.Object)>","<java.io.PrintWriter: void print(boolean)>","<android.app.Activity: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>","<androidx.loader.app.LoaderManagerImpl: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>"],"<androidx.core.content.FileProvider: void <init>()>":["<android.content.ContentProvider: void <init>()>"],"<androidx.collection.SparseArrayCompat: java.lang.Object get(int,java.lang.Object)>":["<androidx.collection.SparseArrayCompat: void <clinit>()>","<androidx.collection.ContainerHelpers: void <clinit>()>","<androidx.collection.ContainerHelpers: int binarySearch(int[],int,int)>"],"<java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)>":["<java.lang.Object: void <init>()>","<java.lang.RuntimeException: void <init>(java.lang.String)>"],"<com.afollestad.rxkprefs.adapters.BooleanAdapter: void <init>()>":["<java.lang.Object: void <init>()>"],"<androidx.appcompat.app.AppCompatDelegateImpl: void closePanel(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,boolean)>":["<android.app.Activity: java.lang.Object getSystemService(java.lang.String)>","<androidx.appcompat.app.AppCompatDelegateImpl: void callOnPanelClosed(int,androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,android.view.Menu)>","<androidx.appcompat.app.AppCompatDelegateImpl: void checkCloseActionMenu(androidx.appcompat.view.menu.MenuBuilder)>"],"<androidx.fragment.app.FragmentManagerImpl$1: void run()>":["<androidx.fragment.app.FragmentManagerImpl: boolean execPendingActions()>"],"<io.reactivex.internal.functions.Functions$OnErrorMissingConsumer: void <init>()>":["<java.lang.Object: void <init>()>"],"<io.reactivex.internal.schedulers.NewThreadScheduler: void <init>(java.util.concurrent.ThreadFactory)>":["<io.reactivex.Scheduler: void <init>()>"],"<androidx.fragment.app.FragmentManagerImpl: void throwException(java.lang.RuntimeException)>":["<java.io.PrintWriter: void <init>(java.io.Writer)>","<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>","<java.lang.String: void <clinit>()>","<java.lang.Throwable: java.lang.String getMessage()>","<androidx.fragment.app.FragmentActivity$HostCallbacks: void onDump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>","<androidx.fragment.app.FragmentManagerImpl: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>","<android.util.Log: int e(java.lang.String,java.lang.String)>","<androidx.core.util.LogWriter: void <init>(java.lang.String)>"],"<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: void jumpToCurrentState()>":["<androidx.vectordrawable.graphics.drawable.VectorDrawableCommon: void jumpToCurrentState()>"],"<com.afollestad.photoaffix.prefs.PrefsModule_ProvideStackHorizontallyPrefFactory: com.afollestad.rxkprefs.Pref proxyProvideStackHorizontallyPref(com.afollestad.photoaffix.prefs.PrefsModule,com.afollestad.rxkprefs.RxkPrefs)>":["<dagger.internal.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>","<com.afollestad.photoaffix.prefs.PrefsModule: com.afollestad.rxkprefs.Pref provideStackHorizontallyPref(com.afollestad.rxkprefs.RxkPrefs)>"],"<androidx.appcompat.app.ResourcesFlusher: void flushNougats(android.content.res.Resources)>":["<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>","<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>","<androidx.appcompat.app.ResourcesFlusher: void flushThemedResourcesCache(java.lang.Object)>"],"<kotlinx.coroutines.BuildersKt: kotlinx.coroutines.Job launch$default(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.CoroutineContext,kotlinx.coroutines.CoroutineStart,kotlin.jvm.functions.Function2,int,java.lang.Object)>":["<kotlinx.coroutines.BuildersKt__Builders_commonKt: kotlinx.coroutines.Job launch$default(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.CoroutineContext,kotlinx.coroutines.CoroutineStart,kotlin.jvm.functions.Function2,int,java.lang.Object)>"],"<java.lang.String: java.lang.String toString()>":["<java.lang.RuntimeException: void <init>(java.lang.String)>"],"<io.reactivex.internal.util.ExceptionHelper: java.lang.RuntimeException wrapOrThrow(java.lang.Throwable)>":["<java.lang.RuntimeException: void <init>(java.lang.Throwable)>"],"<androidx.appcompat.content.res.AppCompatResources: android.content.res.ColorStateList inflateColorStateList(android.content.Context,int)>":["<android.content.res.Resources: android.content.res.XmlResourceParser getXml(int)>","<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>","<androidx.appcompat.app.AppCompatActivity: android.content.res.Resources getResources()>","<androidx.core.content.res.ColorStateListInflaterCompat: android.content.res.ColorStateList createFromXml(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.content.res.Resources$Theme)>","<android.view.ContextThemeWrapper: android.content.res.Resources$Theme getTheme()>","<androidx.appcompat.content.res.AppCompatResources: void <clinit>()>","<androidx.appcompat.content.res.AppCompatResources: boolean isColorInt(android.content.Context,int)>"],"<androidx.collection.ContainerHelpers: int idealLongArraySize(int)>":["<androidx.collection.ContainerHelpers: int idealByteArraySize(int)>","<androidx.collection.ContainerHelpers: void <clinit>()>"],"<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>":["<dagger.internal.DoubleCheck: void <init>(javax.inject.Provider)>","<dagger.internal.DoubleCheck: void <clinit>()>","<dagger.internal.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>"],"<androidx.appcompat.content.res.AppCompatResources: void <clinit>()>":["<java.util.WeakHashMap: void <init>(int)>","<java.lang.Object: void <init>()>","<java.lang.ThreadLocal: void <init>()>","<androidx.appcompat.content.res.AppCompatResources: void <clinit>()>"],"<androidx.collection.SimpleArrayMap: int binarySearchHashes(int[],int,int)>":["<java.util.ConcurrentModificationException: void <init>()>","<androidx.collection.ContainerHelpers: void <clinit>()>","<androidx.collection.ContainerHelpers: int binarySearch(int[],int,int)>"],"<kotlinx.coroutines.scheduling.GlobalQueue: kotlinx.coroutines.scheduling.Task removeFirstBlockingModeOrNull()>":["<kotlinx.coroutines.internal.LockFreeTaskQueueCore: int access$getMask$p(kotlinx.coroutines.internal.LockFreeTaskQueueCore)>","<kotlinx.coroutines.internal.LockFreeTaskQueue: void <clinit>()>","<kotlinx.coroutines.internal.LockFreeTaskQueueCore$Companion: long updateHead(long,int)>","<kotlinx.coroutines.scheduling.TaskMode: void <clinit>()>","<kotlinx.coroutines.internal.LockFreeTaskQueueCore: void <clinit>()>","<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>","<kotlinx.coroutines.internal.LockFreeTaskQueueCore: kotlinx.coroutines.internal.LockFreeTaskQueueCore next()>","<kotlinx.coroutines.internal.LockFreeTaskQueueCore: java.util.concurrent.atomic.AtomicReferenceArray access$getArray$p(kotlinx.coroutines.internal.LockFreeTaskQueueCore)>","<java.util.concurrent.atomic.AtomicReferenceArray: void set(int,java.lang.Object)>","<kotlinx.coroutines.internal.LockFreeTaskQueueCore: kotlinx.coroutines.internal.LockFreeTaskQueueCore access$removeSlowPath(kotlinx.coroutines.internal.LockFreeTaskQueueCore,int,int)>","<kotlinx.coroutines.internal.LockFreeTaskQueueCore: boolean access$getSingleConsumer$p(kotlinx.coroutines.internal.LockFreeTaskQueueCore)>"],"<io.reactivex.schedulers.Schedulers$ComputationHolder: void <clinit>()>":["<io.reactivex.schedulers.Schedulers$ComputationHolder: void <clinit>()>","<io.reactivex.Scheduler: void <clinit>()>","<io.reactivex.internal.schedulers.ComputationScheduler: void <init>()>","<io.reactivex.internal.schedulers.ComputationScheduler: void <clinit>()>"],"<androidx.collection.SparseArrayCompat: void <clinit>()>":["<androidx.collection.SparseArrayCompat: void <clinit>()>","<java.lang.Object: void <init>()>"],"<androidx.fragment.app.FragmentManagerImpl: android.os.Bundle saveFragmentBasicState(androidx.fragment.app.Fragment)>":["<android.os.BaseBundle: boolean isEmpty()>","<android.os.Bundle: void <init>()>","<android.os.Bundle: void putSparseParcelableArray(java.lang.String,android.util.SparseArray)>","<android.os.BaseBundle: void putBoolean(java.lang.String,boolean)>","<androidx.fragment.app.FragmentManagerImpl: void dispatchOnFragmentSaveInstanceState(androidx.fragment.app.Fragment,android.os.Bundle,boolean)>","<android.os.Bundle: void <clinit>()>","<androidx.fragment.app.FragmentManagerImpl: void saveFragmentViewState(androidx.fragment.app.Fragment)>"],"<com.afollestad.materialdialogs.MaterialDialog: com.afollestad.materialdialogs.MaterialDialog message(java.lang.Integer,java.lang.CharSequence,boolean,float)>":["<com.afollestad.materialdialogs.MaterialDialogKt: void assertOneSet(java.lang.String,java.lang.Object,java.lang.Integer)>"],"<kotlinx.coroutines.EventLoopBase: boolean enqueueImpl(java.lang.Runnable)>":["<kotlinx.coroutines.DefaultExecutor: boolean isCompleted()>","<kotlinx.coroutines.EventLoopKt: void <clinit>()>","<kotlinx.coroutines.EventLoopBase: void <clinit>()>","<kotlinx.coroutines.internal.LockFreeTaskQueueCore: int addLast(java.lang.Object)>","<kotlinx.coroutines.internal.LockFreeTaskQueueCore: void <clinit>()>","<kotlinx.coroutines.internal.LockFreeTaskQueueCore: kotlinx.coroutines.internal.LockFreeTaskQueueCore next()>","<kotlinx.coroutines.internal.LockFreeTaskQueueCore: void <init>(int,boolean)>","<kotlin.TypeCastException: void <init>(java.lang.String)>","<kotlinx.coroutines.EventLoopKt: kotlinx.coroutines.internal.Symbol access$getCLOSED_EMPTY$p()>"],"<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.PorterDuff$Mode parseTintModeCompat(int,android.graphics.PorterDuff$Mode)>":["<android.graphics.PorterDuff$Mode: void <clinit>()>"],"<com.afollestad.assent.internal.Queue: void <init>()>":["<java.lang.Object: void <init>()>","<java.util.ArrayList: void <init>()>"],"<kotlinx.coroutines.JobSupport: boolean tryFinalizeSimpleState(kotlinx.coroutines.Incomplete,java.lang.Object,int)>":["<java.lang.IllegalStateException: void <init>(java.lang.String)>","<kotlinx.coroutines.JobSupport: void completeStateFinalization(kotlinx.coroutines.Incomplete,java.lang.Object,int,boolean)>","<java.lang.String: java.lang.String toString()>","<kotlinx.coroutines.JobSupport: void <clinit>()>"],"<com.afollestad.photoaffix.engine.subengines.RealDimensionsEngine_Factory: com.afollestad.photoaffix.engine.subengines.RealDimensionsEngine provideInstance(javax.inject.Provider,javax.inject.Provider,javax.inject.Provider,javax.inject.Provider,javax.inject.Provider)>":["<com.afollestad.photoaffix.engine.subengines.RealStitchEngine_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideScalePriorityPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.utilities.RealDpConverter_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.engine.RealAffixEngine_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideStackHorizontallyPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.engine.photos.RealPhotoLoader_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.engine.bitmaps.RealBitmapManipulator_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.utilities.RealMediaScanner_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.utilities.RealIoManager_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideImageSpacingHorizontalPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.di.AppProvideModule_ProvideAppNameFactory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideImageSpacingVerticalPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideBgFillColorPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.presenters.RealMainPresenter_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideRxkPrefsFactory: java.lang.Object get()>","<dagger.internal.DoubleCheck: java.lang.Object get()>","<com.afollestad.photoaffix.engine.subengines.RealDimensionsEngine_Factory: java.lang.Object get()>","<dagger.internal.InstanceFactory: java.lang.Object get()>","<com.afollestad.photoaffix.engine.subengines.RealDimensionsEngine: void <init>(com.afollestad.photoaffix.utilities.DpConverter,com.afollestad.rxkprefs.Pref,com.afollestad.rxkprefs.Pref,com.afollestad.rxkprefs.Pref,com.afollestad.rxkprefs.Pref)>"],"<androidx.arch.core.internal.SafeIterableMap$IteratorWithAdditions: void <init>(androidx.arch.core.internal.SafeIterableMap)>":["<java.lang.Object: void <init>()>"],"<androidx.fragment.app.FragmentTransition: void <clinit>()>":["<android.os.Build$VERSION: void <clinit>()>","<androidx.fragment.app.FragmentTransition: void <clinit>()>","<androidx.fragment.app.FragmentTransition: androidx.fragment.app.FragmentTransitionImpl resolveSupportImpl()>","<androidx.fragment.app.FragmentTransitionCompat21: void <init>()>"],"<androidx.core.app.NavUtils: java.lang.String getParentActivityName(android.content.Context,android.content.ComponentName)>":["<java.lang.StringBuilder: java.lang.String toString()>","<java.lang.StringBuilder: void <init>()>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<android.os.Build$VERSION: void <clinit>()>"],"<androidx.fragment.app.FragmentActivity$HostCallbacks: void <init>(androidx.fragment.app.FragmentActivity)>":["<androidx.fragment.app.FragmentHostCallback: void <init>(androidx.fragment.app.FragmentActivity)>"],"<androidx.appcompat.widget.AppCompatDrawableManager$AsldcInflateDelegate: void <init>()>":["<java.lang.Object: void <init>()>"],"<androidx.fragment.app.FragmentManagerNonConfig: void <init>(java.util.List,java.util.List,java.util.List)>":["<java.lang.Object: void <init>()>"],"<kotlin.text.StringsKt__StringsKt: int getLastIndex(java.lang.CharSequence)>":["<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<androidx.fragment.app.FragmentTransition: androidx.collection.ArrayMap captureOutSharedElements(androidx.fragment.app.FragmentTransitionImpl,androidx.collection.ArrayMap,java.lang.Object,androidx.fragment.app.FragmentTransition$FragmentContainerTransition)>":["<androidx.collection.SimpleArrayMap: java.lang.Object remove(java.lang.Object)>","<androidx.collection.ArrayMap: boolean retainAll(java.util.Collection)>","<androidx.collection.SimpleArrayMap: void clear()>","<java.lang.String: boolean equals(java.lang.Object)>","<androidx.collection.SimpleArrayMap: java.lang.Object get(java.lang.Object)>","<androidx.collection.ArrayMap: void <init>()>","<androidx.collection.SimpleArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>","<androidx.collection.ArrayMap: java.util.Set keySet()>","<androidx.collection.SimpleArrayMap: boolean isEmpty()>","<androidx.core.view.ViewCompat: java.lang.String getTransitionName(android.view.View)>","<androidx.fragment.app.FragmentTransitionImpl: void findNamedViews(java.util.Map,android.view.View)>","<androidx.core.view.ViewCompat: void <clinit>()>"],"<kotlinx.coroutines.DispatchedKt: void resumeCancellable(kotlin.coroutines.Continuation,java.lang.Object)>":["<kotlinx.coroutines.internal.ThreadContextKt: void restoreThreadContext(kotlin.coroutines.CoroutineContext,java.lang.Object)>","<kotlin.coroutines.jvm.internal.CompletedContinuation: void resumeWith(java.lang.Object)>","<kotlinx.coroutines.DispatchedContinuation: void resumeWith(java.lang.Object)>","<kotlinx.coroutines.UndispatchedEventLoop: void <clinit>()>","<kotlinx.coroutines.JobSupport: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>","<kotlin.coroutines.EmptyCoroutineContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>","<kotlinx.coroutines.scheduling.LimitingDispatcher: void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)>","<kotlinx.coroutines.CoroutineId: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>","<kotlinx.coroutines.DispatchException: void <init>(java.lang.String,java.lang.Throwable)>","<kotlinx.coroutines.internal.ThreadContextKt: void <clinit>()>","<kotlin.coroutines.jvm.internal.BaseContinuationImpl: void resumeWith(java.lang.Object)>","<kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>","<kotlinx.coroutines.CoroutineDispatcher: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>","<kotlinx.coroutines.DispatchedTask: void run()>","<kotlinx.coroutines.JobSupport: boolean isActive()>","<kotlinx.coroutines.Unconfined: void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)>","<kotlin.coroutines.CombinedContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>","<kotlinx.coroutines.MissingMainCoroutineDispatcher: void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)>","<kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher: void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)>","<kotlinx.coroutines.Unconfined: boolean isDispatchNeeded(kotlin.coroutines.CoroutineContext)>","<kotlinx.coroutines.CoroutineDispatcher: boolean isDispatchNeeded(kotlin.coroutines.CoroutineContext)>","<kotlinx.coroutines.DispatchedContinuation: kotlin.coroutines.CoroutineContext getContext()>","<kotlinx.coroutines.JobSupport: java.util.concurrent.CancellationException getCancellationException()>","<java.lang.ThreadLocal: java.lang.Object get()>","<kotlinx.coroutines.CommonPool: void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)>","<kotlin.ResultKt: java.lang.Object createFailure(java.lang.Throwable)>","<kotlin.Result: void <clinit>()>","<kotlin.Unit: void <clinit>()>","<kotlinx.coroutines.AbstractCoroutine: boolean isActive()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<kotlinx.coroutines.Job: void <clinit>()>","<kotlin.jvm.internal.Intrinsics: void checkExpressionValueIsNotNull(java.lang.Object,java.lang.String)>","<kotlinx.coroutines.internal.ThreadContextKt: java.lang.Object updateThreadContext(kotlin.coroutines.CoroutineContext,java.lang.Object)>","<kotlinx.coroutines.AbstractCoroutine: void resumeWith(java.lang.Object)>"],"<androidx.fragment.app.FragmentManagerImpl: androidx.fragment.app.FragmentTransaction beginTransaction()>":["<androidx.fragment.app.BackStackRecord: void <init>(androidx.fragment.app.FragmentManagerImpl)>"],"<androidx.core.graphics.TypefaceCompatBaseImpl$2: void <init>(androidx.core.graphics.TypefaceCompatBaseImpl)>":["<java.lang.Object: void <init>()>"],"<com.afollestad.photoaffix.views.MainActivity$performAffix$1$1$sizingResult$1: java.lang.Object invokeSuspend(java.lang.Object)>":["<com.afollestad.photoaffix.views.MainActivity: com.afollestad.photoaffix.engine.AffixEngine getAffixEngine()>","<java.lang.IllegalStateException: void <init>(java.lang.String)>","<com.afollestad.photoaffix.engine.RealAffixEngine: java.lang.Object process(java.util.List,kotlin.coroutines.Continuation)>","<kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>"],"<kotlinx.coroutines.JobSupport: void completeStateFinalization(kotlinx.coroutines.Incomplete,java.lang.Object,int,boolean)>":["<kotlinx.coroutines.JobSupport$Finishing: kotlinx.coroutines.NodeList getList()>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<java.lang.StringBuilder: void <init>()>","<kotlinx.coroutines.Empty: kotlinx.coroutines.NodeList getList()>","<kotlinx.coroutines.JobSupport: boolean isCancelling(kotlinx.coroutines.Incomplete)>","<kotlinx.coroutines.NonDisposableHandle: void <clinit>()>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>","<java.lang.StringBuilder: java.lang.String toString()>","<kotlinx.coroutines.JobSupport: void handleOnCompletionException$kotlinx_coroutines_core(java.lang.Throwable)>","<kotlinx.coroutines.NonDisposableHandle: void dispose()>","<kotlinx.coroutines.AbstractCoroutine: void handleOnCompletionException$kotlinx_coroutines_core(java.lang.Throwable)>","<kotlinx.coroutines.JobSupport: void notifyCompletion(kotlinx.coroutines.NodeList,java.lang.Throwable)>","<kotlinx.coroutines.JobNode: void dispose()>","<kotlinx.coroutines.CompletionHandlerException: void <init>(java.lang.String,java.lang.Throwable)>","<kotlinx.coroutines.JobSupport: void onCancellation(java.lang.Throwable)>","<kotlinx.coroutines.JobSupport: void onCompletionInternal$kotlinx_coroutines_core(java.lang.Object,int,boolean)>","<kotlinx.coroutines.AbstractCoroutine: void onCancellation(java.lang.Throwable)>","<kotlinx.coroutines.AbstractCoroutine: void onCompletionInternal$kotlinx_coroutines_core(java.lang.Object,int,boolean)>"],"<kotlinx.coroutines.JobSupport: void removeNode$kotlinx_coroutines_core(kotlinx.coroutines.JobNode)>":["<kotlinx.coroutines.JobSupportKt: void <clinit>()>","<kotlinx.coroutines.JobSupport: java.lang.Object getState$kotlinx_coroutines_core()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<kotlinx.coroutines.Empty: kotlinx.coroutines.NodeList getList()>","<kotlinx.coroutines.JobSupportKt: kotlinx.coroutines.Empty access$getEMPTY_ACTIVE$p()>","<kotlinx.coroutines.JobSupport: void <clinit>()>","<kotlinx.coroutines.internal.LockFreeLinkedListNode: boolean remove()>"],"<androidx.core.graphics.drawable.DrawableCompat: void setHotspotBounds(android.graphics.drawable.Drawable,int,int,int,int)>":["<android.graphics.drawable.LayerDrawable: void setHotspotBounds(int,int,int,int)>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: void setHotspotBounds(int,int,int,int)>","<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: void setHotspotBounds(int,int,int,int)>","<android.os.Build$VERSION: void <clinit>()>","<androidx.core.graphics.drawable.WrappedDrawableApi21: void setHotspotBounds(int,int,int,int)>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void setHotspotBounds(int,int,int,int)>","<android.graphics.drawable.Drawable: void setHotspotBounds(int,int,int,int)>"],"<androidx.vectordrawable.graphics.drawable.VectorDrawableCommon: void <init>()>":["<android.graphics.drawable.Drawable: void <init>()>"],"<java.lang.Throwable: void <init>(java.lang.String)>":["<java.lang.Object: void <init>()>","<java.lang.RuntimeException: void <init>(java.lang.String)>"],"<androidx.lifecycle.ViewModel: void <init>()>":["<java.lang.Object: void <init>()>"],"<androidx.core.view.ViewCompat: boolean hasOverlappingRendering(android.view.View)>":["<android.os.Build$VERSION: void <clinit>()>"],"<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mutate()>":["<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: android.graphics.drawable.Drawable mutate()>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: void <init>(androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState)>","<android.graphics.drawable.LayerDrawable: android.graphics.drawable.Drawable mutate()>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mutate()>","<androidx.core.graphics.drawable.WrappedDrawableApi14: android.graphics.drawable.Drawable mutate()>","<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: android.graphics.drawable.Drawable mutate()>","<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable mutate()>"],"<com.afollestad.photoaffix.prefs.PrefsModule_ProvideImageSpacingHorizontalPrefFactory: com.afollestad.rxkprefs.Pref provideInstance(com.afollestad.photoaffix.prefs.PrefsModule,javax.inject.Provider)>":["<com.afollestad.photoaffix.engine.subengines.RealStitchEngine_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideScalePriorityPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.utilities.RealDpConverter_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.engine.RealAffixEngine_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideStackHorizontallyPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.engine.photos.RealPhotoLoader_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.engine.bitmaps.RealBitmapManipulator_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideImageSpacingHorizontalPrefFactory: com.afollestad.rxkprefs.Pref proxyProvideImageSpacingHorizontalPref(com.afollestad.photoaffix.prefs.PrefsModule,com.afollestad.rxkprefs.RxkPrefs)>","<com.afollestad.photoaffix.utilities.RealMediaScanner_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.utilities.RealIoManager_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideImageSpacingVerticalPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.di.AppProvideModule_ProvideAppNameFactory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideImageSpacingHorizontalPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideBgFillColorPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.presenters.RealMainPresenter_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideRxkPrefsFactory: java.lang.Object get()>","<com.afollestad.photoaffix.engine.subengines.RealDimensionsEngine_Factory: java.lang.Object get()>","<dagger.internal.DoubleCheck: java.lang.Object get()>","<dagger.internal.InstanceFactory: java.lang.Object get()>"],"<androidx.collection.SparseArrayCompat: int size()>":["<androidx.collection.SparseArrayCompat: void gc()>"],"<androidx.fragment.app.FragmentTransaction: void <init>()>":["<java.lang.Object: void <init>()>"],"<androidx.collection.ArrayMap: boolean retainAll(java.util.Collection)>":["<androidx.collection.MapCollections: boolean retainAllHelper(java.util.Map,java.util.Collection)>"],"<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.PorterDuffColorFilter updateTintFilter(android.graphics.PorterDuffColorFilter,android.content.res.ColorStateList,android.graphics.PorterDuff$Mode)>":["<android.content.res.ColorStateList: int getColorForState(int[],int)>","<android.graphics.PorterDuffColorFilter: void <init>(int,android.graphics.PorterDuff$Mode)>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: int[] getState()>"],"<androidx.core.graphics.drawable.WrappedDrawableApi14: void <clinit>()>":["<androidx.core.graphics.drawable.WrappedDrawableApi14: void <clinit>()>","<android.graphics.PorterDuff$Mode: void <clinit>()>"],"<com.afollestad.dragselectrecyclerview.Mode: void <clinit>()>":["<com.afollestad.dragselectrecyclerview.Mode: void <init>(java.lang.String,int)>","<com.afollestad.dragselectrecyclerview.Mode: void <clinit>()>"],"<com.afollestad.assent.Permission: void <init>(java.lang.String,int,java.lang.String)>":["<java.lang.Enum: void <init>(java.lang.String,int)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<androidx.core.graphics.TypefaceCompatUtil: java.nio.ByteBuffer mmap(android.content.Context,android.os.CancellationSignal,android.net.Uri)>":["<java.nio.channels.FileChannel$MapMode: void <clinit>()>","<android.content.ContextWrapper: android.content.ContentResolver getContentResolver()>","<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>","<java.io.FileInputStream: void close()>","<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>","<java.io.FileInputStream: void <init>(java.io.FileDescriptor)>"],"<androidx.appcompat.content.res.AppCompatResources: android.util.TypedValue getTypedValue()>":["<java.lang.ThreadLocal: void set(java.lang.Object)>","<java.lang.ThreadLocal: java.lang.Object get()>","<android.util.TypedValue: void <init>()>","<androidx.appcompat.content.res.AppCompatResources: void <clinit>()>"],"<com.afollestad.photoaffix.utilities.ext.ViewExtKt: void hide(android.view.View)>":["<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<kotlinx.coroutines.AbstractCoroutine: void initParentJob$kotlinx_coroutines_core()>":["<kotlin.coroutines.CombinedContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>","<kotlinx.coroutines.CoroutineId: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>","<kotlinx.coroutines.JobSupport: void initParentJobInternal$kotlinx_coroutines_core(kotlinx.coroutines.Job)>","<kotlinx.coroutines.CoroutineDispatcher: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>","<kotlinx.coroutines.Job: void <clinit>()>","<kotlinx.coroutines.JobSupport: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>","<kotlin.coroutines.EmptyCoroutineContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>"],"<com.afollestad.photoaffix.prefs.PrefsModule_ProvideStackHorizontallyPrefFactory: com.afollestad.rxkprefs.Pref get()>":["<com.afollestad.photoaffix.prefs.PrefsModule_ProvideStackHorizontallyPrefFactory: com.afollestad.rxkprefs.Pref provideInstance(com.afollestad.photoaffix.prefs.PrefsModule,javax.inject.Provider)>"],"<kotlinx.coroutines.BuildersKt: kotlinx.coroutines.Deferred async$default(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.CoroutineContext,kotlinx.coroutines.CoroutineStart,kotlin.jvm.functions.Function2,int,java.lang.Object)>":["<kotlinx.coroutines.BuildersKt__Builders_commonKt: kotlinx.coroutines.Deferred async$default(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.CoroutineContext,kotlinx.coroutines.CoroutineStart,kotlin.jvm.functions.Function2,int,java.lang.Object)>"],"<kotlinx.coroutines.CoroutineExceptionHandler$Key: void <clinit>()>":["<kotlinx.coroutines.CoroutineExceptionHandler$Key: void <init>()>","<kotlinx.coroutines.CoroutineExceptionHandler$Key: void <clinit>()>"],"<androidx.collection.ArrayMap: void <init>()>":["<androidx.collection.SimpleArrayMap: void <init>()>"],"<androidx.appcompat.app.AppCompatActivity: void onDestroy()>":["<androidx.appcompat.app.AppCompatActivity: androidx.appcompat.app.AppCompatDelegate getDelegate()>","<androidx.fragment.app.FragmentActivity: void onDestroy()>","<androidx.appcompat.app.AppCompatDelegateImpl: void onDestroy()>"],"<androidx.appcompat.graphics.drawable.DrawableContainer: int getChangingConfigurations()>":["<androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState: int getChangingConfigurations()>","<android.graphics.drawable.Drawable: int getChangingConfigurations()>"],"<androidx.core.graphics.PathParser: void addNode(java.util.ArrayList,char,float[])>":["<java.util.ArrayList: boolean add(java.lang.Object)>","<androidx.core.graphics.PathParser$PathDataNode: void <init>(char,float[])>"],"<androidx.fragment.app.FragmentManagerImpl: void enqueueAction(androidx.fragment.app.FragmentManagerImpl$OpGenerator,boolean)>":["<java.lang.IllegalStateException: void <init>(java.lang.String)>","<java.util.ArrayList: void <init>()>","<androidx.fragment.app.FragmentManagerImpl: void checkStateLoss()>","<androidx.fragment.app.FragmentManagerImpl: void scheduleCommit()>","<java.util.ArrayList: boolean add(java.lang.Object)>"],"<androidx.appcompat.view.menu.MenuBuilder: void addMenuPresenter(androidx.appcompat.view.menu.MenuPresenter,android.content.Context)>":["<java.lang.ref.WeakReference: void <init>(java.lang.Object)>","<java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>"],"<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: void <init>()>":["<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: void <init>(android.content.Context,androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat$AnimatedVectorDrawableCompatState,android.content.res.Resources)>"],"<kotlinx.coroutines.AbstractCoroutine: void <init>(kotlin.coroutines.CoroutineContext,boolean)>":["<kotlin.coroutines.EmptyCoroutineContext: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext)>","<kotlinx.coroutines.JobSupport: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext)>","<kotlinx.coroutines.JobSupport: void <init>(boolean)>","<kotlinx.coroutines.CoroutineId: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<kotlin.coroutines.AbstractCoroutineContextElement: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext)>","<kotlin.coroutines.CombinedContext: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext)>"],"<kotlinx.coroutines.AbstractContinuation: void resumeWithExceptionMode$kotlinx_coroutines_core(java.lang.Throwable,int)>":["<kotlinx.coroutines.AbstractContinuation: void resumeImpl(java.lang.Object,int)>","<kotlinx.coroutines.CompletedExceptionally: void <init>(java.lang.Throwable)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<kotlinx.coroutines.CoroutineContextKt: kotlin.coroutines.CoroutineContext newCoroutineContext(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.CoroutineContext)>":["<kotlinx.coroutines.CoroutineContextKt: void <clinit>()>","<kotlin.coroutines.CombinedContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>","<kotlinx.coroutines.DebugKt: boolean getDEBUG()>","<kotlinx.coroutines.CoroutineId: void <init>(long)>","<kotlinx.coroutines.Dispatchers: void <clinit>()>","<kotlin.coroutines.ContinuationInterceptor: void <clinit>()>","<kotlin.coroutines.EmptyCoroutineContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>","<kotlinx.coroutines.JobSupport: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>","<kotlinx.coroutines.DebugKt: void <clinit>()>","<kotlin.coroutines.AbstractCoroutineContextElement: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext)>","<kotlinx.coroutines.CoroutineId: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>","<kotlinx.coroutines.CoroutineId: void <clinit>()>","<kotlinx.coroutines.internal.ContextScope: kotlin.coroutines.CoroutineContext getCoroutineContext()>","<kotlinx.coroutines.JobSupport: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext)>","<kotlin.coroutines.EmptyCoroutineContext: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext)>","<java.util.concurrent.atomic.AtomicLong: long incrementAndGet()>","<kotlinx.coroutines.CoroutineDispatcher: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>","<kotlinx.coroutines.AbstractCoroutine: kotlin.coroutines.CoroutineContext getCoroutineContext()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<kotlinx.coroutines.CoroutineId: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext)>","<kotlinx.coroutines.Dispatchers: kotlinx.coroutines.CoroutineDispatcher getDefault()>","<kotlin.coroutines.CombinedContext: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext)>"],"<androidx.fragment.app.FragmentController: boolean execPendingActions()>":["<androidx.fragment.app.FragmentManagerImpl: boolean execPendingActions()>"],"<androidx.appcompat.app.AppCompatDelegateImpl$2: void run()>":["<androidx.appcompat.app.AppCompatDelegateImpl: void doInvalidatePanelMenu(int)>"],"<io.reactivex.schedulers.Schedulers$IOTask: java.lang.Object call()>":["<io.reactivex.schedulers.Schedulers$IOTask: io.reactivex.Scheduler call()>"],"<androidx.fragment.app.FragmentTransition: void addToFirstInLastOut(androidx.fragment.app.BackStackRecord,androidx.fragment.app.BackStackRecord$Op,android.util.SparseArray,boolean,boolean)>":["<android.util.SparseArray: java.lang.Object get(int)>","<androidx.fragment.app.FragmentTransition: void <clinit>()>","<androidx.fragment.app.FragmentTransition: androidx.fragment.app.FragmentTransition$FragmentContainerTransition ensureContainer(androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.util.SparseArray,int)>"],"<com.afollestad.photoaffix.engine.bitmaps.RealBitmapManipulator: android.graphics.Bitmap decodePhoto(com.afollestad.photoaffix.engine.photos.Photo,android.graphics.BitmapFactory$Options)>":["<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<com.afollestad.photoaffix.engine.bitmaps.RealBitmapManipulator: android.graphics.Bitmap decodeUri(android.net.Uri,android.graphics.BitmapFactory$Options)>"],"<kotlin.coroutines.jvm.internal.RestrictedContinuationImpl: void <init>(kotlin.coroutines.Continuation)>":["<kotlin.coroutines.EmptyCoroutineContext: void <clinit>()>","<kotlin.coroutines.jvm.internal.CompletedContinuation: kotlin.coroutines.CoroutineContext getContext()>","<java.lang.IllegalArgumentException: void <init>(java.lang.String)>","<kotlin.coroutines.jvm.internal.ContinuationImpl: kotlin.coroutines.CoroutineContext getContext()>","<kotlin.coroutines.jvm.internal.RestrictedContinuationImpl: kotlin.coroutines.CoroutineContext getContext()>","<kotlinx.coroutines.DispatchedContinuation: kotlin.coroutines.CoroutineContext getContext()>","<java.lang.String: java.lang.String toString()>","<kotlinx.coroutines.AbstractCoroutine: kotlin.coroutines.CoroutineContext getContext()>","<kotlin.coroutines.jvm.internal.BaseContinuationImpl: void <init>(kotlin.coroutines.Continuation)>"],"<androidx.vectordrawable.graphics.drawable.AnimationUtilsCompat: android.view.animation.Interpolator loadInterpolator(android.content.Context,int)>":["<android.content.res.Resources$NotFoundException: void <init>(java.lang.String)>","<androidx.interpolator.view.animation.FastOutSlowInInterpolator: void <clinit>()>","<androidx.interpolator.view.animation.LinearOutSlowInInterpolator: void <clinit>()>","<androidx.interpolator.view.animation.FastOutSlowInInterpolator: void <init>()>","<androidx.interpolator.view.animation.LinearOutSlowInInterpolator: void <init>()>","<java.lang.StringBuilder: void <init>()>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<android.view.ContextThemeWrapper: android.content.res.Resources$Theme getTheme()>","<android.content.res.Resources: android.content.res.XmlResourceParser getAnimation(int)>","<android.content.res.Resources$NotFoundException: java.lang.Throwable initCause(java.lang.Throwable)>","<androidx.interpolator.view.animation.FastOutLinearInInterpolator: void <clinit>()>","<java.lang.StringBuilder: java.lang.String toString()>","<java.lang.Integer: java.lang.String toHexString(int)>","<androidx.vectordrawable.graphics.drawable.AnimationUtilsCompat: android.view.animation.Interpolator createInterpolatorFromXml(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser)>","<java.lang.Integer: void <clinit>()>","<androidx.appcompat.app.AppCompatActivity: android.content.res.Resources getResources()>","<android.os.Build$VERSION: void <clinit>()>","<android.view.animation.AnimationUtils: android.view.animation.Interpolator loadInterpolator(android.content.Context,int)>","<androidx.interpolator.view.animation.FastOutLinearInInterpolator: void <init>()>"],"<androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: android.animation.PropertyValuesHolder loadPvh(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser,java.lang.String,int)>":["<androidx.vectordrawable.graphics.drawable.ArgbEvaluator: androidx.vectordrawable.graphics.drawable.ArgbEvaluator getInstance()>","<androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: android.animation.Keyframe loadKeyframe(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,int,org.xmlpull.v1.XmlPullParser)>","<java.util.ArrayList: void add(int,java.lang.Object)>","<androidx.vectordrawable.graphics.drawable.ArgbEvaluator: void <clinit>()>","<androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: int inferValueTypeOfKeyframe(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,org.xmlpull.v1.XmlPullParser)>","<androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: void distributeKeyframes(android.animation.Keyframe[],float,int,int)>","<java.util.ArrayList: boolean add(java.lang.Object)>","<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofKeyframe(java.lang.String,android.animation.Keyframe[])>","<java.util.ArrayList: void <init>()>","<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>","<java.util.ArrayList: int size()>","<androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: android.animation.Keyframe createNewKeyframe(android.animation.Keyframe,float)>","<android.util.Xml: void <clinit>()>","<android.util.Xml: android.util.AttributeSet asAttributeSet(org.xmlpull.v1.XmlPullParser)>","<java.util.ArrayList: java.lang.Object get(int)>"],"<kotlinx.coroutines.MainCoroutineDispatcher: void <init>()>":["<kotlinx.coroutines.CoroutineDispatcher: void <init>()>"],"<kotlinx.coroutines.AbstractContinuationKt: void <clinit>()>":["<kotlinx.coroutines.AbstractContinuationKt: void <clinit>()>","<kotlinx.coroutines.Active: void <init>()>"],"<kotlinx.coroutines.TimeSourceKt: kotlinx.coroutines.TimeSource getTimeSource()>":["<kotlinx.coroutines.TimeSourceKt: void <clinit>()>"],"<kotlinx.coroutines.JobSupport: void notifyCompletion(kotlinx.coroutines.NodeList,java.lang.Throwable)>":["<kotlinx.coroutines.internal.LockFreeLinkedListNode: java.lang.Object getNext()>","<kotlinx.coroutines.InvokeOnCancelling: void invoke(java.lang.Throwable)>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<java.lang.StringBuilder: void <init>()>","<kotlin.ExceptionsKt__ExceptionsKt: void addSuppressed(java.lang.Throwable,java.lang.Throwable)>","<kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>","<kotlinx.coroutines.JobSupport: void handleOnCompletionException$kotlinx_coroutines_core(java.lang.Throwable)>","<java.lang.StringBuilder: java.lang.String toString()>","<kotlinx.coroutines.ResumeAwaitOnCompletion: void invoke(java.lang.Throwable)>","<kotlinx.coroutines.internal.LockFreeLinkedListNode: kotlinx.coroutines.internal.LockFreeLinkedListNode getNextNode()>","<kotlinx.coroutines.AbstractCoroutine: void handleOnCompletionException$kotlinx_coroutines_core(java.lang.Throwable)>","<kotlinx.coroutines.CompletionHandlerException: void <init>(java.lang.String,java.lang.Throwable)>","<kotlinx.coroutines.ChildHandleNode: void invoke(java.lang.Throwable)>","<kotlin.Unit: void <clinit>()>","<kotlinx.coroutines.ChildContinuation: void invoke(java.lang.Throwable)>","<kotlin.TypeCastException: void <init>(java.lang.String)>","<kotlinx.coroutines.JobSupport$ChildCompletion: void invoke(java.lang.Throwable)>","<kotlinx.coroutines.InvokeOnCompletion: void invoke(java.lang.Throwable)>"],"<com.afollestad.photoaffix.engine.subengines.Size: void <init>(int,int)>":["<java.lang.Object: void <init>()>"],"<com.afollestad.materialdialogs.utils.DimensExtKt: float dimen(com.afollestad.materialdialogs.MaterialDialog,java.lang.Integer,java.lang.Integer,float)>":["<java.lang.IllegalArgumentException: void <init>(java.lang.String)>","<com.afollestad.materialdialogs.MaterialDialogKt: void assertOneSet(java.lang.String,java.lang.Object,java.lang.Integer)>","<androidx.appcompat.app.AppCompatActivity: android.content.res.Resources getResources()>","<android.view.ContextThemeWrapper: android.content.res.Resources$Theme getTheme()>","<java.lang.String: java.lang.String toString()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<com.afollestad.materialdialogs.MaterialDialog: android.content.Context getWindowContext()>","<android.content.res.Resources: float getDimension(int)>"],"<kotlinx.coroutines.internal.LockFreeTaskQueueCore$Companion: void <init>()>":["<java.lang.Object: void <init>()>"],"<kotlinx.coroutines.internal.SystemPropsKt: void <clinit>()>":["<java.lang.Runtime: java.lang.Runtime getRuntime()>","<kotlinx.coroutines.internal.SystemPropsKt: void <clinit>()>"],"<androidx.appcompat.graphics.drawable.DrawableContainer: boolean selectDrawable(int)>":["<androidx.appcompat.graphics.drawable.DrawableContainer: void initializeDrawableForDisplay(android.graphics.drawable.Drawable)>","<android.graphics.drawable.LayerDrawable: boolean setVisible(boolean,boolean)>","<android.graphics.drawable.Drawable: void unscheduleSelf(java.lang.Runnable)>","<android.graphics.drawable.Drawable: void invalidateSelf()>","<androidx.appcompat.graphics.drawable.DrawableContainer: void animate(boolean)>","<androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState: android.graphics.drawable.Drawable getChild(int)>","<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: boolean setVisible(boolean,boolean)>","<android.os.SystemClock: long uptimeMillis()>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: boolean setVisible(boolean,boolean)>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: boolean setVisible(boolean,boolean)>","<androidx.appcompat.graphics.drawable.DrawableContainer$1: void <init>(androidx.appcompat.graphics.drawable.DrawableContainer)>","<androidx.core.graphics.drawable.WrappedDrawableApi14: boolean setVisible(boolean,boolean)>"],"<androidx.lifecycle.ReportFragment: void <init>()>":["<android.app.Fragment: void <init>()>"],"<androidx.core.graphics.TypefaceCompatUtil: boolean copyToFile(java.io.File,java.io.InputStream)>":["<java.io.FileOutputStream: void <init>(java.io.File,boolean)>","<java.lang.StringBuilder: java.lang.String toString()>","<android.os.StrictMode: void setThreadPolicy(android.os.StrictMode$ThreadPolicy)>","<java.lang.StringBuilder: void <init>()>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<java.io.FileInputStream: int read(byte[])>","<java.io.FileOutputStream: void write(byte[],int,int)>","<android.util.Log: int e(java.lang.String,java.lang.String)>","<android.os.StrictMode: android.os.StrictMode$ThreadPolicy allowThreadDiskWrites()>","<androidx.core.graphics.TypefaceCompatUtil: void closeQuietly(java.io.Closeable)>"],"<com.afollestad.assent.internal.Data$Companion: com.afollestad.assent.internal.Data get()>":["<com.afollestad.assent.internal.Data: void <clinit>()>","<com.afollestad.assent.internal.Data$Companion: void setInstance(com.afollestad.assent.internal.Data)>","<com.afollestad.assent.internal.Data$Companion: com.afollestad.assent.internal.Data getInstance()>","<kotlin.jvm.internal.Intrinsics: void throwNpe()>","<com.afollestad.assent.internal.Data: void <init>()>"],"<kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher: kotlinx.coroutines.scheduling.CoroutineScheduler createScheduler()>":["<kotlinx.coroutines.scheduling.CoroutineScheduler: void <init>(int,int,long,java.lang.String)>","<kotlinx.coroutines.scheduling.CoroutineScheduler: void <clinit>()>"],"<com.afollestad.photoaffix.views.MainActivity$performAffix$1$1: void <init>(com.afollestad.photoaffix.views.MainActivity$performAffix$1,kotlin.coroutines.Continuation)>":["<kotlin.coroutines.jvm.internal.SuspendLambda: void <init>(int,kotlin.coroutines.Continuation)>"],"<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: void <clinit>()>":["<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: void <clinit>()>","<android.graphics.Matrix: void <init>()>"],"<kotlinx.coroutines.DispatchedKt: void resume(kotlinx.coroutines.DispatchedTask,kotlin.coroutines.Continuation,int)>":["<kotlinx.coroutines.AbstractContinuation: java.lang.Object takeState()>","<kotlinx.coroutines.DispatchedTask: java.lang.Throwable getExceptionalResult(java.lang.Object)>","<kotlinx.coroutines.ResumeModeKt: void resumeMode(kotlin.coroutines.Continuation,java.lang.Object,int)>","<kotlinx.coroutines.CancellableContinuationImpl: java.lang.Object getSuccessfulResult(java.lang.Object)>","<kotlinx.coroutines.ResumeModeKt: void resumeWithExceptionMode(kotlin.coroutines.Continuation,java.lang.Throwable,int)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<kotlin.internal.PlatformImplementationsKt: int getJavaVersion()>":["<java.lang.System: java.lang.String getProperty(java.lang.String)>","<java.lang.Integer: void <clinit>()>","<java.lang.System: void <clinit>()>","<kotlin.text.StringsKt__StringsKt: int indexOf$default(java.lang.CharSequence,char,int,boolean,int,java.lang.Object)>","<java.lang.Integer: int parseInt(java.lang.String)>","<kotlin.TypeCastException: void <init>(java.lang.String)>","<kotlin.jvm.internal.Intrinsics: void checkExpressionValueIsNotNull(java.lang.Object,java.lang.String)>"],"<com.afollestad.photoaffix.adapters.PhotoGridAdapter: void <init>(com.afollestad.photoaffix.views.MainActivity)>":["<java.util.ArrayList: void <init>()>","<androidx.recyclerview.widget.RecyclerView$Adapter: void <init>()>","<kotlin.collections.CollectionsKt__CollectionsKt: java.util.List emptyList()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<androidx.appcompat.graphics.drawable.DrawableContainer: void setColorFilter(android.graphics.ColorFilter)>":["<androidx.core.graphics.drawable.WrappedDrawableApi14: void setColorFilter(android.graphics.ColorFilter)>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: void setColorFilter(android.graphics.ColorFilter)>","<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: void setColorFilter(android.graphics.ColorFilter)>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void setColorFilter(android.graphics.ColorFilter)>","<android.graphics.drawable.LayerDrawable: void setColorFilter(android.graphics.ColorFilter)>"],"<androidx.fragment.app.FragmentManagerImpl: int allocBackStackIndex(androidx.fragment.app.BackStackRecord)>":["<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>","<java.lang.StringBuilder: java.lang.String toString()>","<java.util.ArrayList: java.lang.Object remove(int)>","<java.util.ArrayList: void <init>()>","<androidx.fragment.app.FragmentManagerImpl: void <clinit>()>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<java.lang.StringBuilder: void <init>()>","<java.lang.StringBuilder: java.lang.StringBuilder append(int)>","<java.util.ArrayList: boolean add(java.lang.Object)>","<android.util.Log: int v(java.lang.String,java.lang.String)>","<java.util.ArrayList: int size()>","<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>"],"<kotlin.internal.PlatformImplementationsKt: void <clinit>()>":["<java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)>","<kotlin.internal.PlatformImplementations: void <init>()>","<java.lang.ClassCastException: void <init>(java.lang.String)>","<java.lang.StringBuilder: void <init>()>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<kotlin.internal.PlatformImplementationsKt: int getJavaVersion()>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>","<java.lang.StringBuilder: java.lang.String toString()>","<java.lang.Class: java.lang.ClassLoader getClassLoader()>","<java.lang.Class: java.lang.Object newInstance()>","<kotlin.TypeCastException: void <init>(java.lang.String)>","<kotlin.internal.PlatformImplementationsKt: void <clinit>()>","<kotlin.jvm.internal.Intrinsics: void checkExpressionValueIsNotNull(java.lang.Object,java.lang.String)>","<java.lang.Class: java.lang.Class forName(java.lang.String)>"],"<androidx.vectordrawable.graphics.drawable.PathInterpolatorCompat: void initCubic(float,float,float,float)>":["<android.graphics.Path: void <init>()>","<android.graphics.Path: void cubicTo(float,float,float,float,float,float)>","<androidx.vectordrawable.graphics.drawable.PathInterpolatorCompat: void initPath(android.graphics.Path)>","<android.graphics.Path: void moveTo(float,float)>"],"<kotlinx.coroutines.AbstractContinuationKt: kotlinx.coroutines.Active access$getACTIVE$p()>":["<kotlinx.coroutines.AbstractContinuationKt: void <clinit>()>"],"<androidx.fragment.app.FragmentManagerImpl: void removeRedundantOperationsAndExecute(java.util.ArrayList,java.util.ArrayList)>":["<androidx.fragment.app.FragmentManagerImpl: void executeOpsTogether(java.util.ArrayList,java.util.ArrayList,int,int)>","<java.lang.IllegalStateException: void <init>(java.lang.String)>","<androidx.fragment.app.FragmentManagerImpl: void executePostponedTransaction(java.util.ArrayList,java.util.ArrayList)>","<java.util.ArrayList: boolean isEmpty()>","<java.util.ArrayList: int size()>","<java.util.ArrayList: java.lang.Object get(int)>"],"<com.afollestad.photoaffix.engine.subengines.RealStitchEngine_Factory: com.afollestad.photoaffix.engine.subengines.RealStitchEngine get()>":["<com.afollestad.photoaffix.engine.subengines.RealStitchEngine_Factory: com.afollestad.photoaffix.engine.subengines.RealStitchEngine provideInstance(javax.inject.Provider,javax.inject.Provider,javax.inject.Provider,javax.inject.Provider,javax.inject.Provider,javax.inject.Provider,javax.inject.Provider)>"],"<com.afollestad.photoaffix.utilities.ext.CoroutineExtKt$scopeWhileAttached$1: void <init>(kotlinx.coroutines.Job)>":["<java.lang.Object: void <init>()>"],"<kotlinx.coroutines.scheduling.CoroutineScheduler$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>":["<kotlinx.coroutines.scheduling.CoroutineScheduler$Companion: void <init>()>"],"<androidx.core.provider.FontsContractCompat$TypefaceResult: void <init>(android.graphics.Typeface,int)>":["<java.lang.Object: void <init>()>"],"<androidx.fragment.app.FragmentManagerImpl: void dispatchOnFragmentPaused(androidx.fragment.app.Fragment,boolean)>":["<java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>"],"<androidx.collection.MapCollections: boolean retainAllHelper(java.util.Map,java.util.Collection)>":["<androidx.collection.MapCollections$ArrayIterator: void remove()>","<androidx.collection.MapCollections$ArrayIterator: java.lang.Object next()>","<androidx.collection.MapCollections$ValuesCollection: boolean contains(java.lang.Object)>","<androidx.collection.ArrayMap: java.util.Set keySet()>","<androidx.collection.MapCollections$KeySet: boolean contains(java.lang.Object)>","<androidx.collection.SimpleArrayMap: int size()>","<androidx.collection.MapCollections$KeySet: java.util.Iterator iterator()>","<androidx.collection.MapCollections$ArrayIterator: boolean hasNext()>"],"<kotlinx.coroutines.CompletedExceptionally: void <init>(java.lang.Throwable)>":["<java.lang.Object: void <init>()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<java.lang.Character: char toUpperCase(char)>":["<java.lang.RuntimeException: void <init>(java.lang.String)>"],"<androidx.fragment.app.FragmentTransitionImpl: void findNamedViews(java.util.Map,android.view.View)>":["<androidx.collection.SimpleArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>","<androidx.core.view.ViewCompat: java.lang.String getTransitionName(android.view.View)>","<androidx.fragment.app.FragmentTransitionImpl: void findNamedViews(java.util.Map,android.view.View)>","<androidx.core.view.ViewCompat: void <clinit>()>"],"<kotlinx.coroutines.JobSupport: void <clinit>()>":["<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>","<kotlinx.coroutines.JobSupport: void <clinit>()>"],"<java.lang.Character: boolean isSpaceChar(char)>":["<java.lang.RuntimeException: void <init>(java.lang.String)>"],"<kotlinx.coroutines.JobSupport: java.lang.Object awaitInternal$kotlinx_coroutines_core(kotlin.coroutines.Continuation)>":["<kotlinx.coroutines.JobSupport: java.lang.Object awaitSuspend(kotlin.coroutines.Continuation)>","<kotlinx.coroutines.JobSupport: java.lang.Object getState$kotlinx_coroutines_core()>","<kotlinx.coroutines.JobSupport: int startInternal(java.lang.Object)>"],"<androidx.core.graphics.TypefaceCompat: android.graphics.Typeface createFromFontInfo(android.content.Context,android.os.CancellationSignal,androidx.core.provider.FontsContractCompat$FontInfo[],int)>":["<androidx.core.graphics.TypefaceCompatBaseImpl: android.graphics.Typeface createFromFontInfo(android.content.Context,android.os.CancellationSignal,androidx.core.provider.FontsContractCompat$FontInfo[],int)>","<androidx.core.graphics.TypefaceCompatApi24Impl: android.graphics.Typeface createFromFontInfo(android.content.Context,android.os.CancellationSignal,androidx.core.provider.FontsContractCompat$FontInfo[],int)>","<androidx.core.graphics.TypefaceCompat: void <clinit>()>","<androidx.core.graphics.TypefaceCompatApi26Impl: android.graphics.Typeface createFromFontInfo(android.content.Context,android.os.CancellationSignal,androidx.core.provider.FontsContractCompat$FontInfo[],int)>","<androidx.core.graphics.TypefaceCompatApi21Impl: android.graphics.Typeface createFromFontInfo(android.content.Context,android.os.CancellationSignal,androidx.core.provider.FontsContractCompat$FontInfo[],int)>"],"<androidx.core.content.res.TypedArrayUtils: boolean getNamedBoolean(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int,boolean)>":["<androidx.core.content.res.TypedArrayUtils: boolean hasAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>"],"<kotlinx.coroutines.JobNode: void <init>(kotlinx.coroutines.Job)>":["<kotlinx.coroutines.CompletionHandlerBase: void <init>()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<kotlin.text.StringsKt__StringsKt: int indexOf(java.lang.CharSequence,char,int,boolean)>":["<kotlin.text.StringsKt__StringsKt: int indexOfAny(java.lang.CharSequence,char[],int,boolean)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<io.reactivex.internal.schedulers.SingleScheduler: void <init>(java.util.concurrent.ThreadFactory)>":["<java.util.concurrent.atomic.AtomicReference: void lazySet(java.lang.Object)>","<io.reactivex.Scheduler: void <clinit>()>","<io.reactivex.Scheduler: void <init>()>","<io.reactivex.internal.schedulers.SingleScheduler: java.util.concurrent.ScheduledExecutorService createExecutor(java.util.concurrent.ThreadFactory)>","<io.reactivex.internal.schedulers.SingleScheduler: void <clinit>()>","<java.util.concurrent.atomic.AtomicReference: void <init>()>"],"<androidx.lifecycle.ViewModelStore: void <init>()>":["<java.lang.Object: void <init>()>","<java.util.HashMap: void <init>()>"],"<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void <init>(kotlinx.coroutines.scheduling.CoroutineScheduler,int)>":["<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void setIndexInArray(int)>","<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void <init>(kotlinx.coroutines.scheduling.CoroutineScheduler)>"],"<androidx.fragment.app.FragmentManagerImpl: void scheduleCommit()>":["<java.util.ArrayList: boolean isEmpty()>","<androidx.fragment.app.FragmentHostCallback: android.os.Handler getHandler()>","<android.os.Handler: boolean post(java.lang.Runnable)>","<android.os.Handler: void removeCallbacks(java.lang.Runnable)>","<java.util.ArrayList: int size()>","<androidx.fragment.app.FragmentManagerImpl$1: void run()>"],"<kotlinx.coroutines.internal.OpDescriptor: void <init>()>":["<java.lang.Object: void <init>()>"],"<androidx.fragment.app.FragmentManagerImpl: void addAddedFragments(androidx.collection.ArraySet)>":["<java.lang.Math: int min(int,int)>","<java.util.ArrayList: int size()>","<androidx.collection.ArraySet: boolean add(java.lang.Object)>","<java.util.ArrayList: java.lang.Object get(int)>","<androidx.fragment.app.FragmentManagerImpl: void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean)>"],"<kotlinx.coroutines.JobSupport: kotlinx.coroutines.ChildHandleNode firstChild(kotlinx.coroutines.Incomplete)>":["<kotlinx.coroutines.Empty: kotlinx.coroutines.NodeList getList()>","<kotlinx.coroutines.JobSupport: kotlinx.coroutines.ChildHandleNode nextChild(kotlinx.coroutines.internal.LockFreeLinkedListNode)>"],"<kotlinx.coroutines.internal.ThreadContextKt: java.lang.Object threadContextElements(kotlin.coroutines.CoroutineContext)>":["<kotlinx.coroutines.CoroutineId: java.lang.Object fold(java.lang.Object,kotlin.jvm.functions.Function2)>","<kotlinx.coroutines.internal.ThreadContextKt: void <clinit>()>","<kotlin.coroutines.EmptyCoroutineContext: java.lang.Object fold(java.lang.Object,kotlin.jvm.functions.Function2)>","<kotlinx.coroutines.JobSupport: java.lang.Object fold(java.lang.Object,kotlin.jvm.functions.Function2)>","<java.lang.Integer: void <clinit>()>","<kotlin.jvm.internal.Intrinsics: void throwNpe()>","<kotlin.coroutines.AbstractCoroutineContextElement: java.lang.Object fold(java.lang.Object,kotlin.jvm.functions.Function2)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<java.lang.Integer: java.lang.Integer valueOf(int)>","<kotlin.coroutines.CombinedContext: java.lang.Object fold(java.lang.Object,kotlin.jvm.functions.Function2)>"],"<androidx.core.content.res.TypedArrayUtils: int getNamedInt(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int,int)>":["<androidx.core.content.res.TypedArrayUtils: boolean hasAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>"],"<io.reactivex.Scheduler: void <clinit>()>":["<io.reactivex.Scheduler: void <clinit>()>","<java.util.concurrent.TimeUnit: void <clinit>()>","<java.lang.Long: void <clinit>()>","<java.lang.Long: java.lang.Long getLong(java.lang.String,long)>"],"<androidx.fragment.app.Fragment: void <init>()>":["<java.lang.Object: void <init>()>","<androidx.lifecycle.MutableLiveData: void <init>()>","<androidx.lifecycle.LifecycleRegistry: void <init>(androidx.lifecycle.LifecycleOwner)>"],"<androidx.lifecycle.MutableLiveData: void <init>()>":["<androidx.lifecycle.LiveData: void <init>()>"],"<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void <clinit>()>":["<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void <clinit>()>","<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: java.util.concurrent.atomic.AtomicIntegerFieldUpdater newUpdater(java.lang.Class,java.lang.String)>"],"<androidx.collection.SparseArrayCompat: void append(int,java.lang.Object)>":["<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>","<java.lang.System: void <clinit>()>","<androidx.collection.SparseArrayCompat: void gc()>","<androidx.collection.SparseArrayCompat: void put(int,java.lang.Object)>","<androidx.collection.ContainerHelpers: int idealIntArraySize(int)>","<androidx.collection.ContainerHelpers: void <clinit>()>"],"<kotlin.coroutines.ContinuationInterceptor$DefaultImpls: void releaseInterceptedContinuation(kotlin.coroutines.ContinuationInterceptor,kotlin.coroutines.Continuation)>":["<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<androidx.appcompat.widget.AppCompatDrawableManager$AvdcInflateDelegate: void <init>()>":["<java.lang.Object: void <init>()>"],"<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: android.graphics.drawable.Drawable$ConstantState getConstantState()>":["<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat$AnimatedVectorDrawableDelegateState: void <init>(android.graphics.drawable.Drawable$ConstantState)>","<android.os.Build$VERSION: void <clinit>()>"],"<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat$AnimatedVectorDrawableDelegateState: android.graphics.drawable.Drawable newDrawable(android.content.res.Resources)>":["<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: void <init>()>"],"<androidx.core.provider.SelfDestructiveThread: void <init>(java.lang.String,int,int)>":["<java.lang.Object: void <init>()>","<androidx.core.provider.SelfDestructiveThread$1: void <init>(androidx.core.provider.SelfDestructiveThread)>"],"<kotlin.coroutines.EmptyCoroutineContext: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext)>":["<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<kotlin.ranges.IntProgressionIterator: void <init>(int,int,int)>":["<kotlin.collections.IntIterator: void <init>()>"],"<androidx.fragment.app.FragmentTransition: java.lang.Object configureSharedElementsOrdered(androidx.fragment.app.FragmentTransitionImpl,android.view.ViewGroup,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,java.util.ArrayList,java.util.ArrayList,java.lang.Object,java.lang.Object)>":["<androidx.fragment.app.FragmentTransition$4: void <init>(androidx.fragment.app.FragmentTransitionImpl,androidx.collection.ArrayMap,java.lang.Object,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,java.util.ArrayList,android.view.View,androidx.fragment.app.Fragment,androidx.fragment.app.Fragment,boolean,java.util.ArrayList,java.lang.Object,android.graphics.Rect)>","<androidx.fragment.app.OneShotPreDrawListener: androidx.fragment.app.OneShotPreDrawListener add(android.view.View,java.lang.Runnable)>","<android.graphics.Rect: void <init>()>","<android.graphics.Rect: void <clinit>()>","<androidx.collection.ArrayMap: java.util.Collection values()>","<androidx.collection.SimpleArrayMap: boolean isEmpty()>","<androidx.fragment.app.FragmentTransitionCompat21: void setEpicenter(java.lang.Object,android.graphics.Rect)>","<androidx.fragment.app.FragmentTransition: java.lang.Object getSharedElementTransition(androidx.fragment.app.FragmentTransitionImpl,androidx.fragment.app.Fragment,androidx.fragment.app.Fragment,boolean)>","<androidx.fragment.app.FragmentTransition: void setOutEpicenter(androidx.fragment.app.FragmentTransitionImpl,java.lang.Object,java.lang.Object,androidx.collection.ArrayMap,boolean,androidx.fragment.app.BackStackRecord)>","<java.util.ArrayList: boolean addAll(java.util.Collection)>","<androidx.fragment.app.FragmentTransitionCompat21: void setSharedElementTargets(java.lang.Object,android.view.View,java.util.ArrayList)>","<androidx.fragment.app.FragmentTransition: void <clinit>()>","<androidx.fragment.app.FragmentTransition: androidx.collection.ArrayMap captureOutSharedElements(androidx.fragment.app.FragmentTransitionImpl,androidx.collection.ArrayMap,java.lang.Object,androidx.fragment.app.FragmentTransition$FragmentContainerTransition)>","<androidx.fragment.app.FragmentTransition: void callSharedElementStartEnd(androidx.fragment.app.Fragment,androidx.fragment.app.Fragment,boolean,androidx.collection.ArrayMap,boolean)>"],"<kotlinx.coroutines.CoroutineStart$WhenMappings: void <clinit>()>":["<java.lang.Enum: int ordinal()>","<kotlinx.coroutines.CoroutineStart: kotlinx.coroutines.CoroutineStart[] values()>","<kotlinx.coroutines.CoroutineStart$WhenMappings: void <clinit>()>","<kotlinx.coroutines.CoroutineStart: void <clinit>()>"],"<androidx.fragment.app.FragmentTransitionCompat21: void <init>()>":["<androidx.fragment.app.FragmentTransitionImpl: void <init>()>"],"<com.afollestad.assent.internal.Data$Companion$assureFragment$1$1: void <init>(com.afollestad.assent.internal.Data)>":["<kotlin.jvm.internal.Lambda: void <init>(int)>"],"<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void inflateInternal(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>":["<java.util.ArrayDeque: java.lang.Object pop()>","<java.lang.String: boolean equals(java.lang.Object)>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: void <init>()>","<java.util.ArrayDeque: java.lang.Object peek()>","<java.util.ArrayDeque: void push(java.lang.Object)>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: java.lang.String getGroupName()>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VClipPath: void <init>()>","<java.util.ArrayList: boolean add(java.lang.Object)>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPath: java.lang.String getPathName()>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: void <init>()>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VClipPath: void inflate(android.content.res.Resources,android.util.AttributeSet,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser)>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: void inflate(android.content.res.Resources,android.util.AttributeSet,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser)>","<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>","<java.util.ArrayDeque: void <init>()>","<androidx.collection.SimpleArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: void inflate(android.content.res.Resources,android.util.AttributeSet,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser)>"],"<androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState: boolean canConstantState()>":["<android.graphics.drawable.LayerDrawable: android.graphics.drawable.Drawable$ConstantState getConstantState()>","<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: android.graphics.drawable.Drawable$ConstantState getConstantState()>","<androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState: void createAllFutures()>","<androidx.appcompat.graphics.drawable.DrawableContainer: android.graphics.drawable.Drawable$ConstantState getConstantState()>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable$ConstantState getConstantState()>","<androidx.core.graphics.drawable.WrappedDrawableApi14: android.graphics.drawable.Drawable$ConstantState getConstantState()>"],"<androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState: android.graphics.drawable.Drawable getChild(int)>":["<android.util.SparseArray: int indexOfKey(int)>","<android.util.SparseArray: int size()>","<android.util.SparseArray: java.lang.Object valueAt(int)>","<android.util.SparseArray: void removeAt(int)>","<androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState: android.graphics.drawable.Drawable prepareDrawable(android.graphics.drawable.Drawable)>"],"<androidx.core.graphics.drawable.WrappedDrawableApi21$DrawableWrapperStateLollipop: void <init>(androidx.core.graphics.drawable.WrappedDrawableApi14$DrawableWrapperState,android.content.res.Resources)>":["<androidx.core.graphics.drawable.WrappedDrawableApi14$DrawableWrapperState: void <init>(androidx.core.graphics.drawable.WrappedDrawableApi14$DrawableWrapperState,android.content.res.Resources)>"],"<com.afollestad.materialdialogs.MaterialDialog: com.afollestad.materialdialogs.MaterialDialog title(java.lang.Integer,java.lang.String)>":["<com.afollestad.materialdialogs.MaterialDialogKt: void assertOneSet(java.lang.String,java.lang.Object,java.lang.Integer)>","<java.lang.Integer: void <clinit>()>","<com.afollestad.materialdialogs.utils.DialogExtKt: void populateText$default(com.afollestad.materialdialogs.MaterialDialog,android.widget.TextView,java.lang.Integer,java.lang.CharSequence,int,android.graphics.Typeface,java.lang.Integer,int,java.lang.Object)>","<java.lang.Integer: java.lang.Integer valueOf(int)>"],"<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState cloneConstantState()>":["<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatedStateListState cloneConstantState()>"],"<kotlinx.coroutines.internal.AtomicKt: java.lang.Object access$getNO_DECISION$p()>":["<kotlinx.coroutines.internal.AtomicKt: void <clinit>()>"],"<io.reactivex.internal.operators.observable.ObservableMap: void <init>(io.reactivex.ObservableSource,io.reactivex.functions.Function)>":["<io.reactivex.internal.operators.observable.AbstractObservableWithUpstream: void <init>(io.reactivex.ObservableSource)>"],"<com.afollestad.rxkprefs.adapters.BooleanAdapter$Companion: void <init>()>":["<java.lang.Object: void <init>()>"],"<io.reactivex.schedulers.Schedulers$NewThreadTask: io.reactivex.Scheduler call()>":["<io.reactivex.schedulers.Schedulers$NewThreadHolder: void <clinit>()>"],"<androidx.appcompat.view.menu.MenuBuilder: void setQwertyMode(boolean)>":["<androidx.appcompat.view.menu.MenuBuilder: void onItemsChanged(boolean)>"],"<androidx.core.graphics.TypefaceCompatUtil: boolean copyToFile(java.io.File,android.content.res.Resources,int)>":["<android.content.res.Resources: java.io.InputStream openRawResource(int)>","<androidx.core.graphics.TypefaceCompatUtil: boolean copyToFile(java.io.File,java.io.InputStream)>","<androidx.core.graphics.TypefaceCompatUtil: void closeQuietly(java.io.Closeable)>"],"<kotlinx.coroutines.internal.LockFreeTaskQueueCore: void <clinit>()>":["<kotlinx.coroutines.internal.Symbol: void <init>(java.lang.String)>","<java.util.concurrent.atomic.AtomicLongFieldUpdater: java.util.concurrent.atomic.AtomicLongFieldUpdater newUpdater(java.lang.Class,java.lang.String)>","<kotlinx.coroutines.internal.LockFreeTaskQueueCore: void <clinit>()>","<kotlinx.coroutines.internal.LockFreeTaskQueueCore$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>","<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>"],"<androidx.appcompat.app.AppCompatDelegateImpl: int mapNightMode(int)>":["<androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager: int getApplyableNightMode()>","<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>","<android.os.Build$VERSION: void <clinit>()>","<androidx.appcompat.app.AppCompatDelegateImpl: void ensureAutoNightModeManager()>"],"<com.afollestad.materialdialogs.utils.MDUtil: boolean isColorDark(int,double)>":["<android.graphics.Color: int green(int)>","<android.graphics.Color: int blue(int)>","<java.lang.Double: boolean isNaN(double)>","<android.graphics.Color: int red(int)>","<java.lang.Double: void <clinit>()>"],"<com.afollestad.photoaffix.utilities.RealDpConverter_Factory: void <init>(javax.inject.Provider)>":["<java.lang.Object: void <init>()>"],"<androidx.core.app.NavUtils: java.lang.String getParentActivityName(android.app.Activity)>":["<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>","<androidx.core.app.NavUtils: java.lang.String getParentActivityName(android.content.Context,android.content.ComponentName)>"],"<com.afollestad.photoaffix.utilities.ext.ActivityExtKt: void toast$default(android.app.Activity,java.lang.Integer,java.lang.String,int,java.lang.Object)>":["<com.afollestad.photoaffix.utilities.ext.ActivityExtKt: void toast(android.app.Activity,java.lang.Integer,java.lang.String)>"],"<io.reactivex.internal.operators.observable.ObservableFromArray: void <init>(java.lang.Object[])>":["<io.reactivex.Observable: void <init>()>"],"<androidx.core.provider.FontsContractCompat$5: void <init>()>":["<java.lang.Object: void <init>()>"],"<com.afollestad.photoaffix.prefs.PrefsModule_ProvideBgFillColorPrefFactory: com.afollestad.photoaffix.prefs.PrefsModule_ProvideBgFillColorPrefFactory create(com.afollestad.photoaffix.prefs.PrefsModule,javax.inject.Provider)>":["<com.afollestad.photoaffix.prefs.PrefsModule_ProvideBgFillColorPrefFactory: void <init>(com.afollestad.photoaffix.prefs.PrefsModule,javax.inject.Provider)>"],"<kotlin.coroutines.jvm.internal.DebugProbesKt: void probeCoroutineSuspended(kotlin.coroutines.Continuation)>":["<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<androidx.core.content.res.ColorStateListInflaterCompat: int modulateColorAlpha(int,float)>":["<java.lang.Math: int round(float)>","<android.graphics.Color: int alpha(int)>"],"<java.lang.Float: boolean isNaN(float)>":["<java.lang.RuntimeException: void <init>(java.lang.String)>"],"<dagger.internal.DoubleCheck: java.lang.Object get()>":["<com.afollestad.photoaffix.engine.subengines.RealStitchEngine_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideScalePriorityPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.utilities.RealDpConverter_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.engine.RealAffixEngine_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideStackHorizontallyPrefFactory: java.lang.Object get()>","<dagger.internal.DoubleCheck: java.lang.Object reentrantCheck(java.lang.Object,java.lang.Object)>","<com.afollestad.photoaffix.engine.photos.RealPhotoLoader_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.engine.bitmaps.RealBitmapManipulator_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.utilities.RealMediaScanner_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.utilities.RealIoManager_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideImageSpacingVerticalPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.di.AppProvideModule_ProvideAppNameFactory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideImageSpacingHorizontalPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideBgFillColorPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.presenters.RealMainPresenter_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideRxkPrefsFactory: java.lang.Object get()>","<dagger.internal.DoubleCheck: void <clinit>()>","<com.afollestad.photoaffix.engine.subengines.RealDimensionsEngine_Factory: java.lang.Object get()>"],"<io.reactivex.Observable: io.reactivex.Observable fromArray(java.lang.Object[])>":["<io.reactivex.internal.operators.observable.ObservableFromArray: void <init>(java.lang.Object[])>","<io.reactivex.Observable: io.reactivex.Observable just(java.lang.Object)>","<io.reactivex.internal.functions.ObjectHelper: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>","<io.reactivex.Observable: io.reactivex.Observable empty()>","<io.reactivex.plugins.RxJavaPlugins: io.reactivex.Observable onAssembly(io.reactivex.Observable)>","<io.reactivex.internal.functions.ObjectHelper: void <clinit>()>"],"<androidx.fragment.app.FragmentManagerImpl: void dispatchOnFragmentActivityCreated(androidx.fragment.app.Fragment,android.os.Bundle,boolean)>":["<java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>"],"<java.lang.Character: boolean isWhitespace(char)>":["<java.lang.RuntimeException: void <init>(java.lang.String)>"],"<kotlin.internal.ProgressionUtilKt: int getProgressionLastElement(int,int,int)>":["<java.lang.IllegalArgumentException: void <init>(java.lang.String)>","<kotlin.internal.ProgressionUtilKt: int differenceModulo(int,int,int)>"],"<com.afollestad.photoaffix.engine.subengines.RealDimensionsEngine: com.afollestad.photoaffix.engine.subengines.SizingResult calculateVerticalSize(com.afollestad.photoaffix.engine.bitmaps.BitmapIterator)>":["<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>","<com.afollestad.photoaffix.engine.bitmaps.BitmapIterator: int size()>","<com.afollestad.photoaffix.engine.subengines.SizingResult: void <init>(com.afollestad.photoaffix.engine.subengines.Size,java.lang.Exception,int,kotlin.jvm.internal.DefaultConstructorMarker)>","<com.afollestad.photoaffix.engine.subengines.Size$Companion: com.afollestad.photoaffix.engine.subengines.Size fromOptions(android.graphics.BitmapFactory$Options)>","<com.afollestad.photoaffix.engine.subengines.Size: void <clinit>()>","<com.afollestad.photoaffix.engine.subengines.Size: int getHeight()>","<com.afollestad.photoaffix.engine.subengines.Size: int getWidth()>","<com.afollestad.photoaffix.engine.bitmaps.BitmapIterator: void reset()>","<com.afollestad.photoaffix.engine.bitmaps.BitmapIterator: java.lang.Object next()>","<com.afollestad.photoaffix.engine.bitmaps.BitmapIterator: boolean hasNext()>","<com.afollestad.photoaffix.engine.subengines.Size: void <init>(int,int)>","<com.afollestad.photoaffix.engine.subengines.RealDimensionsEngine: int dp(int)>","<com.afollestad.rxkprefs.RealPref: java.lang.Object get()>","<com.afollestad.photoaffix.utilities.ext.NumberExtKt: int toRoundedInt(float)>"],"<com.afollestad.photoaffix.utilities.ext.StringExtKt: android.net.Uri toUri(java.lang.String)>":["<android.net.Uri: void <clinit>()>","<android.net.Uri: android.net.Uri parse(java.lang.String)>","<kotlin.jvm.internal.Intrinsics: void throwNpe()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<androidx.core.graphics.TypefaceCompatApi26Impl: boolean isFontFamilyPrivateAPIAvailable()>":["<android.util.Log: int w(java.lang.String,java.lang.String)>"],"<androidx.appcompat.view.ContextThemeWrapper: android.content.res.Resources getResourcesInternal()>":["<android.content.ContextWrapper: android.content.res.Resources getResources()>","<android.content.ContextWrapper: android.content.Context createConfigurationContext(android.content.res.Configuration)>","<android.os.Build$VERSION: void <clinit>()>"],"<io.reactivex.internal.functions.Functions$EmptyLongConsumer: void <init>()>":["<java.lang.Object: void <init>()>"],"<kotlinx.coroutines.internal.LockFreeLinkedListNode: boolean remove()>":["<kotlinx.coroutines.internal.LockFreeLinkedListNode: void finishRemove(kotlinx.coroutines.internal.LockFreeLinkedListNode)>","<kotlinx.coroutines.internal.LockFreeLinkedListNode: java.lang.Object getNext()>","<kotlinx.coroutines.internal.LockFreeLinkedListNode: kotlinx.coroutines.internal.Removed removed()>","<kotlin.TypeCastException: void <init>(java.lang.String)>","<kotlinx.coroutines.internal.LockFreeLinkedListNode: void <clinit>()>"],"<dummyMainClass: androidx.core.content.FileProvider dummyMainMethod_androidx_core_content_FileProvider(android.content.Intent)>":["<androidx.core.content.FileProvider: void <init>()>","<androidx.core.content.FileProvider: void <clinit>()>"],"<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat$AnimatedVectorDrawableCompatState: void setupAnimatorSet()>":["<android.animation.AnimatorSet: void <init>()>","<android.animation.AnimatorSet: void playTogether(java.util.Collection)>"],"<kotlinx.coroutines.ResumeModeKt: void resumeWithExceptionMode(kotlin.coroutines.Continuation,java.lang.Throwable,int)>":["<kotlinx.coroutines.internal.ThreadContextKt: void restoreThreadContext(kotlin.coroutines.CoroutineContext,java.lang.Object)>","<kotlinx.coroutines.DispatchedKt: void <clinit>()>","<kotlin.coroutines.jvm.internal.CompletedContinuation: void resumeWith(java.lang.Object)>","<kotlinx.coroutines.DispatchedContinuation: void resumeWith(java.lang.Object)>","<kotlinx.coroutines.DispatchedContinuation: kotlin.coroutines.CoroutineContext getContext()>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<java.lang.StringBuilder: void <init>()>","<java.lang.StringBuilder: java.lang.StringBuilder append(int)>","<kotlin.ResultKt: java.lang.Object createFailure(java.lang.Throwable)>","<java.lang.IllegalStateException: void <init>(java.lang.String)>","<java.lang.StringBuilder: java.lang.String toString()>","<kotlinx.coroutines.internal.ThreadContextKt: void <clinit>()>","<kotlinx.coroutines.DispatchedKt: void resumeDirectWithException(kotlin.coroutines.Continuation,java.lang.Throwable)>","<kotlin.coroutines.jvm.internal.BaseContinuationImpl: void resumeWith(java.lang.Object)>","<kotlin.Result: void <clinit>()>","<kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>","<kotlin.Unit: void <clinit>()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<kotlinx.coroutines.DispatchedKt: void resumeCancellableWithException(kotlin.coroutines.Continuation,java.lang.Throwable)>","<kotlinx.coroutines.AbstractCoroutine: void resumeWith(java.lang.Object)>","<kotlinx.coroutines.internal.ThreadContextKt: java.lang.Object updateThreadContext(kotlin.coroutines.CoroutineContext,java.lang.Object)>"],"<androidx.core.content.res.TypedArrayUtils: int getNamedResourceId(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int,int)>":["<androidx.core.content.res.TypedArrayUtils: boolean hasAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>"],"<androidx.collection.MapCollections: void <init>()>":["<java.lang.Object: void <init>()>"],"<com.afollestad.photoaffix.prefs.PrefsModule: void <init>()>":["<java.lang.Object: void <init>()>"],"<kotlin.coroutines.CoroutineContext$Element$DefaultImpls: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Element,kotlin.coroutines.CoroutineContext$Key)>":["<kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>","<kotlinx.coroutines.JobSupport: kotlin.coroutines.CoroutineContext$Key getKey()>","<kotlin.TypeCastException: void <init>(java.lang.String)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<kotlin.coroutines.AbstractCoroutineContextElement: kotlin.coroutines.CoroutineContext$Key getKey()>"],"<com.afollestad.photoaffix.prefs.PrefsModule: com.afollestad.rxkprefs.RxkPrefs provideRxkPrefs(android.app.Application)>":["<com.afollestad.rxkprefs.RxkPrefsKt: com.afollestad.rxkprefs.RxkPrefs rxkPrefs$default(android.content.Context,java.lang.String,int,int,java.lang.Object)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<kotlinx.coroutines.UndispatchedEventLoop$threadLocalEventLoop$1: void <init>()>":["<kotlin.jvm.internal.Lambda: void <init>(int)>"],"<kotlinx.coroutines.NonDisposableHandle: void <init>()>":["<java.lang.Object: void <init>()>"],"<androidx.appcompat.graphics.drawable.DrawableContainer: android.graphics.drawable.Drawable mutate()>":["<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: void setConstantState(androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState)>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState cloneConstantState()>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatedStateListState: void mutate()>","<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable mutate()>"],"<java.lang.String: boolean regionMatches(int,java.lang.String,int,int)>":["<java.lang.RuntimeException: void <init>(java.lang.String)>"],"<androidx.lifecycle.ViewModelStore: void put(java.lang.String,androidx.lifecycle.ViewModel)>":["<androidx.loader.app.LoaderManagerImpl$LoaderViewModel: void onCleared()>","<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>"],"<androidx.appcompat.app.AppCompatDelegateImpl: boolean initializePanelMenu(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState)>":["<android.util.TypedValue: void <init>()>","<androidx.appcompat.view.menu.MenuBuilder: void <clinit>()>","<androidx.appcompat.view.ContextThemeWrapper: android.content.res.Resources$Theme getTheme()>","<androidx.appcompat.view.menu.MenuBuilder: void <init>(android.content.Context)>","<androidx.appcompat.app.AppCompatActivity: android.content.res.Resources getResources()>","<androidx.appcompat.view.ContextThemeWrapper: void <init>(android.content.Context,int)>","<android.content.res.Resources: android.content.res.Resources$Theme newTheme()>","<android.view.ContextThemeWrapper: android.content.res.Resources$Theme getTheme()>","<androidx.appcompat.view.menu.MenuBuilder: void setCallback(androidx.appcompat.view.menu.MenuBuilder$Callback)>","<androidx.appcompat.view.ContextThemeWrapper: android.content.res.Resources getResources()>","<androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState: void setMenu(androidx.appcompat.view.menu.MenuBuilder)>"],"<com.afollestad.photoaffix.di.DaggerAppComponent$Builder: void <init>()>":["<java.lang.Object: void <init>()>"],"<kotlinx.coroutines.scheduling.CoroutineScheduler: void dispatch(java.lang.Runnable,kotlinx.coroutines.scheduling.TaskContext,boolean)>":["<kotlinx.coroutines.TimeSourceKt: void <clinit>()>","<java.util.concurrent.RejectedExecutionException: void <init>(java.lang.String)>","<java.lang.StringBuilder: java.lang.String toString()>","<kotlinx.coroutines.scheduling.CoroutineScheduler: int submitToLocalQueue(kotlinx.coroutines.scheduling.Task,boolean)>","<kotlinx.coroutines.TimeSourceKt: kotlinx.coroutines.TimeSource getTimeSource()>","<kotlinx.coroutines.internal.LockFreeTaskQueue: boolean addLast(java.lang.Object)>","<java.lang.StringBuilder: void <init>()>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<kotlinx.coroutines.scheduling.CoroutineScheduler: void requestCpuWorker()>","<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.Task createTask$kotlinx_coroutines_core(java.lang.Runnable,kotlinx.coroutines.scheduling.TaskContext)>","<kotlinx.coroutines.DefaultTimeSource: void trackTask()>"],"<java.lang.Thread: void start()>":["<java.lang.RuntimeException: void <init>(java.lang.String)>"],"<kotlinx.coroutines.CoroutineExceptionHandlerKt: java.lang.Throwable handlerException(java.lang.Throwable,java.lang.Throwable)>":["<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>","<kotlin.ExceptionsKt__ExceptionsKt: void addSuppressed(java.lang.Throwable,java.lang.Throwable)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<androidx.appcompat.app.AppCompatActivity: android.content.res.Resources getResources()>":["<androidx.appcompat.widget.VectorEnabledTintResources: boolean shouldBeUsed()>","<android.view.ContextThemeWrapper: android.content.res.Resources getResources()>","<androidx.appcompat.widget.VectorEnabledTintResources: void <init>(android.content.Context,android.content.res.Resources)>","<androidx.appcompat.widget.VectorEnabledTintResources: void <clinit>()>"],"<java.lang.Thread: void setDaemon(boolean)>":["<java.lang.RuntimeException: void <init>(java.lang.String)>"],"<androidx.fragment.app.FragmentTransition: void setViewVisibility(java.util.ArrayList,int)>":["<java.util.ArrayList: int size()>","<java.util.ArrayList: java.lang.Object get(int)>"],"<kotlinx.coroutines.internal.LockFreeTaskQueueCore$Placeholder: void <init>(int)>":["<java.lang.Object: void <init>()>"],"<com.afollestad.photoaffix.views.ActivityExtKt: void showErrorDialog(android.app.Activity,java.lang.Exception)>":["<com.afollestad.photoaffix.views.ActivityExtKt: void unlockOrientation(android.app.Activity)>","<org.xmlpull.v1.XmlPullParserException: void printStackTrace()>","<com.afollestad.photoaffix.utilities.ext.ViewExtKt: void hide(android.view.View)>","<com.afollestad.materialdialogs.MaterialDialog: void show()>","<java.lang.Throwable: void printStackTrace()>","<com.afollestad.materialdialogs.MaterialDialog: com.afollestad.materialdialogs.MaterialDialog title$default(com.afollestad.materialdialogs.MaterialDialog,java.lang.Integer,java.lang.String,int,java.lang.Object)>","<io.reactivex.exceptions.CompositeException: java.lang.String getMessage()>","<java.lang.Integer: void <clinit>()>","<java.lang.Throwable: java.lang.String getMessage()>","<com.afollestad.materialdialogs.MaterialDialog: com.afollestad.materialdialogs.MaterialDialog positiveButton$default(com.afollestad.materialdialogs.MaterialDialog,java.lang.Integer,java.lang.CharSequence,kotlin.jvm.functions.Function1,int,java.lang.Object)>","<androidx.appcompat.app.AppCompatActivity: android.view.View findViewById(int)>","<com.afollestad.materialdialogs.MaterialDialog: com.afollestad.materialdialogs.MaterialDialog message$default(com.afollestad.materialdialogs.MaterialDialog,java.lang.Integer,java.lang.CharSequence,boolean,float,int,java.lang.Object)>","<io.reactivex.exceptions.CompositeException: void printStackTrace()>","<com.afollestad.materialdialogs.MaterialDialog: void <init>(android.content.Context)>","<java.lang.Integer: java.lang.Integer valueOf(int)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<kotlin.jvm.internal.Intrinsics: void checkExpressionValueIsNotNull(java.lang.Object,java.lang.String)>"],"<androidx.recyclerview.widget.LinearLayoutManager: void setReverseLayout(boolean)>":["<androidx.recyclerview.widget.LinearLayoutManager: void assertNotInLayoutOrScroll(java.lang.String)>","<androidx.recyclerview.widget.RecyclerView$LayoutManager: void requestLayout()>"],"<kotlin.jvm.internal.Intrinsics: void checkExpressionValueIsNotNull(java.lang.Object,java.lang.String)>":["<java.lang.IllegalStateException: void <init>(java.lang.String)>","<java.lang.StringBuilder: java.lang.String toString()>","<kotlin.jvm.internal.Intrinsics: java.lang.Throwable sanitizeStackTrace(java.lang.Throwable)>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<java.lang.StringBuilder: void <init>()>"],"<androidx.appcompat.app.TwilightManager: android.location.Location getLastKnownLocationForProvider(java.lang.String)>":["<android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)>"],"<io.reactivex.internal.schedulers.SchedulerPoolFactory: void tryStart(boolean)>":["<io.reactivex.internal.schedulers.SchedulerPoolFactory: void <clinit>()>","<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>","<java.util.concurrent.TimeUnit: void <clinit>()>","<io.reactivex.internal.schedulers.RxThreadFactory: void <init>(java.lang.String)>","<java.util.concurrent.Executors: java.util.concurrent.ScheduledExecutorService newScheduledThreadPool(int,java.util.concurrent.ThreadFactory)>","<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>","<io.reactivex.internal.schedulers.SchedulerPoolFactory$ScheduledTask: void <init>()>"],"<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPath: void <init>(androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPath)>":["<androidx.core.graphics.PathParser: androidx.core.graphics.PathParser$PathDataNode[] deepCopyNodes(androidx.core.graphics.PathParser$PathDataNode[])>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VObject: void <init>(androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$1)>"],"<kotlinx.coroutines.CoroutineExceptionHandlerImplKt: void <clinit>()>":["<java.lang.Class: java.lang.ClassLoader getClassLoader()>","<kotlinx.coroutines.CoroutineExceptionHandlerImplKt: void <clinit>()>","<kotlin.collections.CollectionsKt___CollectionsKt: java.util.List toList(java.lang.Iterable)>","<kotlin.jvm.internal.Intrinsics: void checkExpressionValueIsNotNull(java.lang.Object,java.lang.String)>","<java.util.ServiceLoader: java.util.ServiceLoader load(java.lang.Class,java.lang.ClassLoader)>"],"<androidx.fragment.app.FragmentManagerImpl$EndViewTransitionAnimator: void run()>":["<androidx.fragment.app.FragmentManagerImpl$EndViewTransitionAnimator: void run()>"],"<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat createFromXmlInner(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>":["<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: void inflate(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>","<java.lang.StringBuilder: java.lang.String toString()>","<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<java.lang.StringBuilder: void <init>()>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: void <init>()>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: void <clinit>()>"],"<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat$AnimatedVectorDrawableCompatState: void <init>(android.content.Context,androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat$AnimatedVectorDrawableCompatState,android.graphics.drawable.Drawable$Callback,android.content.res.Resources)>":["<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableDelegateState: android.graphics.drawable.Drawable newDrawable(android.content.res.Resources)>","<java.util.ArrayList: void <init>(int)>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableDelegateState: android.graphics.drawable.Drawable newDrawable()>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.graphics.drawable.Drawable newDrawable(android.content.res.Resources)>","<android.animation.ObjectAnimator: android.animation.Animator clone()>","<androidx.collection.ArrayMap: void <init>(int)>","<android.graphics.drawable.Drawable$ConstantState: void <init>()>","<java.util.ArrayList: boolean add(java.lang.Object)>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable$ConstantState getConstantState()>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void setAllowCaching(boolean)>","<android.animation.ValueAnimator: android.animation.Animator clone()>","<android.animation.AnimatorSet: android.animation.Animator clone()>","<androidx.collection.SimpleArrayMap: java.lang.Object get(java.lang.Object)>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.graphics.drawable.Drawable newDrawable()>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mutate()>","<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat$AnimatedVectorDrawableCompatState: void setupAnimatorSet()>","<androidx.collection.SimpleArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: java.lang.Object getTargetByName(java.lang.String)>","<android.graphics.drawable.Drawable: void setBounds(android.graphics.Rect)>","<java.util.ArrayList: int size()>","<java.util.ArrayList: java.lang.Object get(int)>","<android.graphics.drawable.Drawable: void setCallback(android.graphics.drawable.Drawable$Callback)>"],"<androidx.appcompat.app.AppCompatDelegateImpl: void applyFixedSizeWindow()>":["<androidx.appcompat.R$styleable: void <clinit>()>","<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(int[])>"],"<kotlinx.coroutines.CoroutineId: void <clinit>()>":["<kotlinx.coroutines.CoroutineId$Key: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>","<kotlinx.coroutines.CoroutineId: void <clinit>()>"],"<com.afollestad.assent.AssentInContextKt$runWithPermissions$1: void <init>(com.afollestad.assent.Permission[],kotlin.jvm.functions.Function1)>":["<kotlin.jvm.internal.Lambda: void <init>(int)>"],"<com.afollestad.materialdialogs.MaterialDialog: void <init>(android.content.Context)>":["<java.util.LinkedHashMap: void <init>()>","<com.afollestad.materialdialogs.Theme$Companion: com.afollestad.materialdialogs.Theme inferTheme(android.content.Context)>","<com.afollestad.materialdialogs.utils.DialogExtKt: void setWindowConstraints(com.afollestad.materialdialogs.MaterialDialog)>","<java.util.ArrayList: void <init>()>","<android.app.Dialog: void <init>(android.content.Context,int)>","<com.afollestad.materialdialogs.utils.ViewExtKt: java.lang.Object inflate$default(com.afollestad.materialdialogs.MaterialDialog,int,android.view.ViewGroup,int,java.lang.Object)>","<com.afollestad.materialdialogs.Theme: void <clinit>()>","<android.app.Dialog: void setContentView(android.view.View)>","<com.afollestad.materialdialogs.Theme: int getStyleRes()>","<com.afollestad.materialdialogs.utils.DialogExtKt: void setDefaults(com.afollestad.materialdialogs.MaterialDialog)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<androidx.appcompat.graphics.drawable.DrawableContainer: void jumpToCurrentState()>":["<androidx.core.graphics.drawable.WrappedDrawableApi14: void jumpToCurrentState()>","<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: void jumpToCurrentState()>","<android.graphics.drawable.Drawable: void invalidateSelf()>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: void setAlpha(int)>","<android.graphics.drawable.LayerDrawable: void jumpToCurrentState()>","<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: void setAlpha(int)>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void setAlpha(int)>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: void jumpToCurrentState()>","<android.graphics.drawable.LayerDrawable: void setAlpha(int)>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void jumpToCurrentState()>","<androidx.core.graphics.drawable.WrappedDrawableApi14: void setAlpha(int)>"],"<kotlinx.coroutines.CancellableContinuationImpl: void <init>(kotlin.coroutines.Continuation,int)>":["<kotlin.coroutines.jvm.internal.CompletedContinuation: kotlin.coroutines.CoroutineContext getContext()>","<kotlin.coroutines.jvm.internal.ContinuationImpl: kotlin.coroutines.CoroutineContext getContext()>","<kotlin.coroutines.jvm.internal.RestrictedContinuationImpl: kotlin.coroutines.CoroutineContext getContext()>","<kotlinx.coroutines.AbstractContinuation: void <init>(kotlin.coroutines.Continuation,int)>","<kotlinx.coroutines.DispatchedContinuation: kotlin.coroutines.CoroutineContext getContext()>","<kotlinx.coroutines.AbstractCoroutine: kotlin.coroutines.CoroutineContext getContext()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<kotlinx.coroutines.EventLoopBase: void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)>":["<kotlinx.coroutines.EventLoopBase: void execute$kotlinx_coroutines_core(java.lang.Runnable)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<androidx.collection.LongSparseArray: androidx.collection.LongSparseArray clone()>":["<java.lang.AssertionError: void <init>(java.lang.Object)>","<java.lang.Object: java.lang.Object clone()>"],"<androidx.fragment.app.FragmentTransitionImpl: void getBoundsOnScreen(android.view.View,android.graphics.Rect)>":["<android.graphics.Rect: void set(int,int,int,int)>"],"<androidx.fragment.app.FragmentTransitionCompat21$1: void <init>(androidx.fragment.app.FragmentTransitionCompat21,android.graphics.Rect)>":["<android.transition.Transition$EpicenterCallback: void <init>()>"],"<androidx.recyclerview.widget.RecyclerView$LayoutManager$1: void <init>(androidx.recyclerview.widget.RecyclerView$LayoutManager)>":["<java.lang.Object: void <init>()>"],"<androidx.core.graphics.TypefaceCompatApi26Impl: java.lang.reflect.Method obtainAddFontFromBufferMethod(java.lang.Class)>":["<java.lang.Integer: void <clinit>()>"],"<com.afollestad.photoaffix.prefs.PrefsModule_ProvideStackHorizontallyPrefFactory: java.lang.Object get()>":["<com.afollestad.photoaffix.prefs.PrefsModule_ProvideStackHorizontallyPrefFactory: com.afollestad.rxkprefs.Pref get()>"],"<com.afollestad.photoaffix.utilities.RealDpConverter_Factory: com.afollestad.photoaffix.utilities.RealDpConverter get()>":["<com.afollestad.photoaffix.utilities.RealDpConverter_Factory: com.afollestad.photoaffix.utilities.RealDpConverter provideInstance(javax.inject.Provider)>"],"<kotlin.jvm.internal.Intrinsics: void throwNpe()>":["<kotlin.jvm.internal.Intrinsics: java.lang.Throwable sanitizeStackTrace(java.lang.Throwable)>","<kotlin.KotlinNullPointerException: void <init>()>"],"<androidx.core.content.res.ResourcesCompat: android.graphics.Typeface getFont(android.content.Context,int)>":["<android.util.TypedValue: void <init>()>","<androidx.core.content.res.ResourcesCompat: android.graphics.Typeface loadFont(android.content.Context,int,android.util.TypedValue,int,androidx.core.content.res.ResourcesCompat$FontCallback,android.os.Handler,boolean)>","<android.content.ContextWrapper: boolean isRestricted()>"],"<androidx.fragment.app.FragmentManagerImpl: void makeInactive(androidx.fragment.app.Fragment)>":["<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>","<java.lang.StringBuilder: java.lang.String toString()>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<androidx.fragment.app.FragmentManagerImpl: void <clinit>()>","<java.lang.StringBuilder: void <init>()>","<android.util.SparseArray: void put(int,java.lang.Object)>","<android.util.Log: int v(java.lang.String,java.lang.String)>"],"<androidx.core.graphics.TypefaceCompatApi26Impl: boolean freeze(java.lang.Object)>":["<java.lang.RuntimeException: void <init>(java.lang.Throwable)>"],"<androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: android.animation.Animator loadAnimator(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,int,float)>":["<android.content.res.Resources$NotFoundException: void <init>(java.lang.String)>","<android.content.res.Resources$NotFoundException: java.lang.Throwable initCause(java.lang.Throwable)>","<java.lang.StringBuilder: java.lang.String toString()>","<java.lang.Integer: java.lang.String toHexString(int)>","<java.lang.Integer: void <clinit>()>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<java.lang.StringBuilder: void <init>()>","<androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: android.animation.Animator createAnimatorFromXml(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser,float)>","<android.content.res.Resources: android.content.res.XmlResourceParser getAnimation(int)>"],"<kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp: void <init>(kotlinx.coroutines.internal.LockFreeLinkedListNode)>":["<kotlinx.coroutines.internal.AtomicOp: void <init>()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<androidx.fragment.app.FragmentTransitionCompat21: java.lang.Object mergeTransitionsInSequence(java.lang.Object,java.lang.Object,java.lang.Object)>":["<android.transition.TransitionSet: android.transition.TransitionSet setOrdering(int)>","<android.transition.TransitionSet: android.transition.TransitionSet addTransition(android.transition.Transition)>","<android.transition.TransitionSet: void <init>()>"],"<androidx.fragment.app.FragmentManagerState: void <init>()>":["<java.lang.Object: void <init>()>"],"<dagger.internal.DoubleCheck: void <clinit>()>":["<java.lang.Object: void <init>()>","<dagger.internal.DoubleCheck: void <clinit>()>"],"<kotlinx.coroutines.ThreadContextElement$DefaultImpls: java.lang.Object fold(kotlinx.coroutines.ThreadContextElement,java.lang.Object,kotlin.jvm.functions.Function2)>":["<kotlin.coroutines.CoroutineContext$Element$DefaultImpls: java.lang.Object fold(kotlin.coroutines.CoroutineContext$Element,java.lang.Object,kotlin.jvm.functions.Function2)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<io.reactivex.internal.functions.ObjectHelper$BiObjectPredicate: void <init>()>":["<java.lang.Object: void <init>()>"],"<java.lang.Double: void <clinit>()>":["<java.lang.Double: void <clinit>()>"],"<kotlinx.coroutines.Dispatchers: void <init>()>":["<java.lang.Object: void <init>()>"],"<androidx.loader.app.LoaderManagerImpl$LoaderViewModel$1: void <init>()>":["<java.lang.Object: void <init>()>"],"<com.afollestad.photoaffix.di.DaggerAppComponent: void <init>(com.afollestad.photoaffix.di.DaggerAppComponent$Builder,com.afollestad.photoaffix.di.DaggerAppComponent$1)>":["<com.afollestad.photoaffix.di.DaggerAppComponent: void <init>(com.afollestad.photoaffix.di.DaggerAppComponent$Builder)>"],"<androidx.fragment.app.FragmentManagerImpl$AnimationOrAnimator: void <init>(android.view.animation.Animation)>":["<java.lang.IllegalStateException: void <init>(java.lang.String)>","<java.lang.Object: void <init>()>"],"<androidx.collection.MapCollections$KeySet: java.util.Iterator iterator()>":["<androidx.collection.MapCollections$ArrayIterator: void <init>(androidx.collection.MapCollections,int)>"],"<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: void inflate(android.content.res.Resources,android.util.AttributeSet,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser)>":["<androidx.core.content.res.TypedArrayUtils: android.content.res.TypedArray obtainAttributes(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,int[])>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: void updateStateFromTypedArray(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser)>","<androidx.vectordrawable.graphics.drawable.AndroidResources: void <clinit>()>"],"<androidx.fragment.app.FragmentHostCallback: void <init>(androidx.fragment.app.FragmentActivity)>":["<androidx.fragment.app.FragmentHostCallback: void <init>(android.app.Activity,android.content.Context,android.os.Handler,int)>"],"<androidx.core.graphics.TypefaceCompat: android.graphics.Typeface createFromResourcesFontFile(android.content.Context,android.content.res.Resources,int,java.lang.String,int)>":["<androidx.core.graphics.TypefaceCompatBaseImpl: android.graphics.Typeface createFromResourcesFontFile(android.content.Context,android.content.res.Resources,int,java.lang.String,int)>","<androidx.core.graphics.TypefaceCompatApi26Impl: android.graphics.Typeface createFromResourcesFontFile(android.content.Context,android.content.res.Resources,int,java.lang.String,int)>","<androidx.collection.LruCache: java.lang.Object put(java.lang.Object,java.lang.Object)>","<androidx.core.graphics.TypefaceCompat: java.lang.String createResourceUid(android.content.res.Resources,int,int)>","<androidx.core.graphics.TypefaceCompat: void <clinit>()>"],"<kotlinx.coroutines.EventLoopBase: void <clinit>()>":["<kotlinx.coroutines.EventLoopBase: void <clinit>()>","<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>"],"<kotlinx.coroutines.CoroutineDispatcher: kotlin.coroutines.Continuation interceptContinuation(kotlin.coroutines.Continuation)>":["<kotlinx.coroutines.DispatchedContinuation: void <init>(kotlinx.coroutines.CoroutineDispatcher,kotlin.coroutines.Continuation)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<com.afollestad.photoaffix.engine.RealAffixEngine_Factory: void <init>(javax.inject.Provider,javax.inject.Provider,javax.inject.Provider,javax.inject.Provider)>":["<java.lang.Object: void <init>()>"],"<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void <init>()>":["<androidx.vectordrawable.graphics.drawable.VectorDrawableCommon: void <init>()>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: void <init>()>","<android.graphics.Rect: void <init>()>","<android.graphics.Matrix: void <init>()>","<android.graphics.Rect: void <clinit>()>"],"<java.lang.ArrayIndexOutOfBoundsException: void <init>()>":["<java.lang.RuntimeException: void <init>(java.lang.String)>","<java.lang.IndexOutOfBoundsException: void <init>()>"],"<java.lang.Long: java.lang.Long getLong(java.lang.String,long)>":["<java.lang.RuntimeException: void <init>(java.lang.String)>"],"<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker parkedWorkersStackPop()>":["<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void setNextParkedWorker(java.lang.Object)>","<kotlinx.coroutines.scheduling.CoroutineScheduler: int parkedWorkersStackNextIndex(kotlinx.coroutines.scheduling.CoroutineScheduler$Worker)>","<kotlinx.coroutines.scheduling.CoroutineScheduler: void <clinit>()>"],"<androidx.recyclerview.widget.OrientationHelper: androidx.recyclerview.widget.OrientationHelper createHorizontalHelper(androidx.recyclerview.widget.RecyclerView$LayoutManager)>":["<androidx.recyclerview.widget.OrientationHelper$1: void <init>(androidx.recyclerview.widget.RecyclerView$LayoutManager)>"],"<androidx.vectordrawable.graphics.drawable.VectorDrawableCommon: void setHotspotBounds(int,int,int,int)>":["<androidx.core.graphics.drawable.DrawableCompat: void setHotspotBounds(android.graphics.drawable.Drawable,int,int,int,int)>"],"<com.afollestad.photoaffix.utilities.ext.ActivityExtKt$toast$1: void <init>(android.app.Activity,java.lang.Integer,java.lang.String)>":["<java.lang.Object: void <init>()>"],"<androidx.core.content.res.ColorStateListInflaterCompat: android.content.res.ColorStateList createFromXml(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.content.res.Resources$Theme)>":["<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>","<androidx.core.content.res.ColorStateListInflaterCompat: android.content.res.ColorStateList createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>","<android.util.Xml: void <clinit>()>","<android.util.Xml: android.util.AttributeSet asAttributeSet(org.xmlpull.v1.XmlPullParser)>"],"<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>":["<androidx.core.content.res.TypedArrayUtils: android.content.res.TypedArray obtainAttributes(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,int[])>","<java.lang.String: boolean equals(java.lang.Object)>","<androidx.vectordrawable.graphics.drawable.AndroidResources: void <clinit>()>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat create(android.content.res.Resources,int,android.content.res.Resources$Theme)>","<androidx.core.graphics.drawable.DrawableCompat: void inflate(android.graphics.drawable.Drawable,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void setAllowCaching(boolean)>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void <clinit>()>","<java.lang.IllegalStateException: void <init>(java.lang.String)>","<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: void setupAnimatorsForTarget(java.lang.String,android.animation.Animator)>","<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat$AnimatedVectorDrawableCompatState: void setupAnimatorSet()>","<androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: android.animation.Animator loadAnimator(android.content.Context,int)>","<android.content.res.Resources: android.content.res.TypedArray obtainAttributes(android.util.AttributeSet,int[])>","<android.graphics.drawable.Drawable: void setCallback(android.graphics.drawable.Drawable$Callback)>"],"<com.afollestad.photoaffix.engine.subengines.RealDimensionsEngine: int dp(int)>":["<com.afollestad.photoaffix.utilities.RealDpConverter: float toDp(int)>"],"<com.afollestad.photoaffix.engine.photos.RealPhotoLoader_Factory: com.afollestad.photoaffix.engine.photos.RealPhotoLoader_Factory create(javax.inject.Provider)>":["<com.afollestad.photoaffix.engine.photos.RealPhotoLoader_Factory: void <init>(javax.inject.Provider)>"],"<io.reactivex.internal.schedulers.IoScheduler$CachedWorkerPool: void <init>(long,java.util.concurrent.TimeUnit,java.util.concurrent.ThreadFactory)>":["<java.util.concurrent.TimeUnit: void <clinit>()>","<io.reactivex.Scheduler: void <clinit>()>","<java.lang.Object: void <init>()>","<java.util.concurrent.Executors: java.util.concurrent.ScheduledExecutorService newScheduledThreadPool(int,java.util.concurrent.ThreadFactory)>","<io.reactivex.internal.schedulers.IoScheduler: void <clinit>()>","<java.util.concurrent.ConcurrentLinkedQueue: void <init>()>","<io.reactivex.disposables.CompositeDisposable: void <init>()>"],"<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VClipPath: void updateStateFromTypedArray(android.content.res.TypedArray)>":["<androidx.core.graphics.PathParser: androidx.core.graphics.PathParser$PathDataNode[] createNodesFromPathData(java.lang.String)>"],"<androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState: void setMenu(androidx.appcompat.view.menu.MenuBuilder)>":["<androidx.appcompat.view.menu.MenuBuilder: void addMenuPresenter(androidx.appcompat.view.menu.MenuPresenter)>","<androidx.appcompat.view.menu.MenuBuilder: void removeMenuPresenter(androidx.appcompat.view.menu.MenuPresenter)>"],"<androidx.core.content.res.ComplexColorCompat: androidx.core.content.res.ComplexColorCompat 'from'(android.content.res.ColorStateList)>":["<android.content.res.ColorStateList: int getDefaultColor()>","<androidx.core.content.res.ComplexColorCompat: void <init>(android.graphics.Shader,android.content.res.ColorStateList,int)>"],"<androidx.collection.SparseArrayCompat: void <init>()>":["<androidx.collection.SparseArrayCompat: void <init>(int)>"],"<kotlin.collections.CollectionsKt__CollectionsKt: java.util.List optimizeReadOnlyList(java.util.List)>":["<kotlin.collections.EmptyList: int size()>","<kotlin.collections.CollectionsKt__CollectionsKt: java.util.List emptyList()>","<kotlin.collections.EmptyList: java.lang.Object get(int)>","<kotlin.collections.CollectionsKt__CollectionsJVMKt: java.util.List listOf(java.lang.Object)>","<java.util.ArrayList: int size()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<java.util.ArrayList: java.lang.Object get(int)>"],"<kotlin.coroutines.EmptyCoroutineContext: kotlin.coroutines.CoroutineContext minusKey(kotlin.coroutines.CoroutineContext$Key)>":["<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<kotlinx.coroutines.DispatchedKt: void <clinit>()>":["<kotlinx.coroutines.DispatchedKt: void <clinit>()>","<kotlinx.coroutines.internal.Symbol: void <init>(java.lang.String)>"],"<kotlinx.coroutines.scheduling.GlobalQueue: void <init>()>":["<kotlinx.coroutines.internal.LockFreeTaskQueue: void <init>(boolean)>"],"<androidx.appcompat.widget.AppCompatDrawableManager$ColorFilterLruCache: void <init>(int)>":["<androidx.collection.LruCache: void <init>(int)>"],"<kotlinx.coroutines.AbstractContinuation: void completeStateUpdate(kotlinx.coroutines.NotCompleted,java.lang.Object,int)>":["<kotlinx.coroutines.AbstractContinuation: void handleException(java.lang.Throwable)>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>","<java.lang.StringBuilder: java.lang.String toString()>","<kotlinx.coroutines.AbstractContinuation: void dispatchResume(int)>","<java.lang.StringBuilder: void <init>()>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<kotlinx.coroutines.CompletionHandlerException: void <init>(java.lang.String,java.lang.Throwable)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<kotlinx.coroutines.AbstractContinuation: void initParentJobInternal$kotlinx_coroutines_core(kotlinx.coroutines.Job)>":["<kotlinx.coroutines.NonDisposableHandle: void <clinit>()>","<kotlinx.coroutines.ChildContinuation: void <init>(kotlinx.coroutines.Job,kotlinx.coroutines.AbstractContinuation)>","<java.lang.IllegalStateException: void <init>(java.lang.String)>","<kotlinx.coroutines.NonDisposableHandle: void dispose()>","<kotlinx.coroutines.Job$DefaultImpls: kotlinx.coroutines.DisposableHandle invokeOnCompletion$default(kotlinx.coroutines.Job,boolean,boolean,kotlin.jvm.functions.Function1,int,java.lang.Object)>","<kotlinx.coroutines.JobNode: void dispose()>","<java.lang.String: java.lang.String toString()>","<kotlinx.coroutines.AbstractContinuation: boolean isCompleted()>","<kotlinx.coroutines.JobSupport: boolean start()>"],"<androidx.fragment.app.Fragment: void setArguments(android.os.Bundle)>":["<java.lang.IllegalStateException: void <init>(java.lang.String)>","<androidx.fragment.app.Fragment: boolean isStateSaved()>"],"<com.afollestad.photoaffix.prefs.PrefsModule_ProvideBgFillColorPrefFactory: com.afollestad.rxkprefs.Pref proxyProvideBgFillColorPref(com.afollestad.photoaffix.prefs.PrefsModule,com.afollestad.rxkprefs.RxkPrefs)>":["<com.afollestad.photoaffix.prefs.PrefsModule: com.afollestad.rxkprefs.Pref provideBgFillColorPref(com.afollestad.rxkprefs.RxkPrefs)>","<dagger.internal.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>"],"<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void jumpToCurrentState()>":["<androidx.vectordrawable.graphics.drawable.VectorDrawableCommon: void jumpToCurrentState()>"],"<io.reactivex.internal.schedulers.ComputationScheduler$FixedSchedulerPool: void shutdown()>":["<io.reactivex.internal.schedulers.NewThreadWorker: void dispose()>"],"<com.afollestad.photoaffix.prefs.PrefsModule_ProvideBgFillColorPrefFactory: java.lang.Object get()>":["<com.afollestad.photoaffix.prefs.PrefsModule_ProvideBgFillColorPrefFactory: com.afollestad.rxkprefs.Pref get()>"],"<android.os.Handler: boolean post(java.lang.Runnable)>":["<androidx.fragment.app.FragmentManagerImpl$1: void run()>"],"<androidx.core.content.res.ComplexColorCompat: androidx.core.content.res.ComplexColorCompat 'from'(int)>":["<androidx.core.content.res.ComplexColorCompat: void <init>(android.graphics.Shader,android.content.res.ColorStateList,int)>"],"<kotlinx.coroutines.Empty: void <init>(boolean)>":["<java.lang.Object: void <init>()>"],"<io.reactivex.internal.schedulers.TrampolineScheduler: void <init>()>":["<io.reactivex.Scheduler: void <init>()>"],"<com.afollestad.photoaffix.engine.subengines.Size$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>":["<com.afollestad.photoaffix.engine.subengines.Size$Companion: void <init>()>"],"<androidx.fragment.app.FragmentTransitionCompat21$4: void <init>(androidx.fragment.app.FragmentTransitionCompat21,android.graphics.Rect)>":["<android.transition.Transition$EpicenterCallback: void <init>()>"],"<androidx.appcompat.view.menu.MenuBuilder: boolean collapseItemActionView(androidx.appcompat.view.menu.MenuItemImpl)>":["<androidx.appcompat.view.menu.MenuBuilder: void startDispatchingItemsChanged()>","<java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>","<androidx.appcompat.view.menu.MenuBuilder: void stopDispatchingItemsChanged()>","<java.util.concurrent.CopyOnWriteArrayList: boolean isEmpty()>","<java.util.concurrent.CopyOnWriteArrayList: boolean remove(java.lang.Object)>"],"<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: int[] getState()>":["<androidx.vectordrawable.graphics.drawable.VectorDrawableCommon: int[] getState()>"],"<kotlinx.coroutines.CoroutineContextKt: void <clinit>()>":["<kotlinx.coroutines.CoroutineContextKt: void <clinit>()>","<java.lang.IllegalStateException: void <init>(java.lang.String)>","<java.lang.String: int hashCode()>","<java.lang.StringBuilder: java.lang.String toString()>","<java.lang.String: boolean equals(java.lang.Object)>","<java.lang.StringBuilder: java.lang.StringBuilder append(char)>","<java.lang.StringBuilder: void <init>()>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<kotlinx.coroutines.internal.SystemPropsKt: java.lang.String systemProp(java.lang.String)>","<java.lang.String: java.lang.String toString()>","<kotlinx.coroutines.internal.SystemPropsKt: void <clinit>()>","<java.util.concurrent.atomic.AtomicLong: void <init>()>"],"<kotlin.text.CharsKt__CharJVMKt: boolean isWhitespace(char)>":["<java.lang.Character: boolean isWhitespace(char)>","<java.lang.Character: void <clinit>()>","<java.lang.Character: boolean isSpaceChar(char)>"],"<kotlinx.coroutines.DispatchedContinuation: void resumeWith(java.lang.Object)>":["<kotlinx.coroutines.CompletedExceptionallyKt: java.lang.Object toState(java.lang.Object)>","<kotlinx.coroutines.internal.ThreadContextKt: void restoreThreadContext(kotlin.coroutines.CoroutineContext,java.lang.Object)>","<kotlinx.coroutines.MissingMainCoroutineDispatcher: void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)>","<kotlin.coroutines.jvm.internal.CompletedContinuation: void resumeWith(java.lang.Object)>","<kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher: void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)>","<kotlinx.coroutines.UndispatchedEventLoop: void <clinit>()>","<kotlinx.coroutines.Unconfined: boolean isDispatchNeeded(kotlin.coroutines.CoroutineContext)>","<kotlinx.coroutines.DispatchedContinuation: void resumeWith(java.lang.Object)>","<kotlinx.coroutines.CoroutineDispatcher: boolean isDispatchNeeded(kotlin.coroutines.CoroutineContext)>","<kotlinx.coroutines.DispatchedContinuation: kotlin.coroutines.CoroutineContext getContext()>","<kotlinx.coroutines.CommonPool: void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)>","<kotlin.coroutines.jvm.internal.CompletedContinuation: kotlin.coroutines.CoroutineContext getContext()>","<java.lang.ThreadLocal: java.lang.Object get()>","<kotlinx.coroutines.scheduling.LimitingDispatcher: void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)>","<kotlin.coroutines.jvm.internal.ContinuationImpl: kotlin.coroutines.CoroutineContext getContext()>","<kotlinx.coroutines.DispatchException: void <init>(java.lang.String,java.lang.Throwable)>","<kotlinx.coroutines.internal.ThreadContextKt: void <clinit>()>","<kotlin.coroutines.jvm.internal.BaseContinuationImpl: void resumeWith(java.lang.Object)>","<kotlin.Unit: void <clinit>()>","<kotlinx.coroutines.DispatchedTask: void run()>","<kotlin.jvm.internal.Intrinsics: void checkExpressionValueIsNotNull(java.lang.Object,java.lang.String)>","<kotlinx.coroutines.Unconfined: void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)>","<kotlinx.coroutines.internal.ThreadContextKt: java.lang.Object updateThreadContext(kotlin.coroutines.CoroutineContext,java.lang.Object)>"],"<androidx.core.graphics.drawable.WrappedDrawableApi21: androidx.core.graphics.drawable.WrappedDrawableApi14$DrawableWrapperState mutateConstantState()>":["<androidx.core.graphics.drawable.WrappedDrawableApi21$DrawableWrapperStateLollipop: void <init>(androidx.core.graphics.drawable.WrappedDrawableApi14$DrawableWrapperState,android.content.res.Resources)>"],"<com.afollestad.photoaffix.utilities.ext.CoroutineExtKt: void scopeWhileAttached(android.view.View,kotlin.coroutines.CoroutineContext,kotlin.jvm.functions.Function1)>":["<kotlin.coroutines.CombinedContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>","<com.afollestad.photoaffix.views.MainActivity$performAffix$1: java.lang.Object invoke(java.lang.Object)>","<com.afollestad.photoaffix.utilities.ext.CoroutineExtKt$scopeWhileAttached$1: void <init>(kotlinx.coroutines.Job)>","<kotlinx.coroutines.JobSupport: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>","<kotlin.coroutines.EmptyCoroutineContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>","<kotlinx.coroutines.JobKt: kotlinx.coroutines.Job Job(kotlinx.coroutines.Job)>","<kotlin.coroutines.AbstractCoroutineContextElement: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext)>","<kotlinx.coroutines.CoroutineId: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>","<kotlinx.coroutines.JobSupport: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext)>","<kotlin.coroutines.EmptyCoroutineContext: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext)>","<kotlinx.coroutines.CoroutineDispatcher: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<kotlinx.coroutines.CoroutineId: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext)>","<kotlinx.coroutines.Job: void <clinit>()>","<kotlinx.coroutines.CoroutineScopeKt: kotlinx.coroutines.CoroutineScope CoroutineScope(kotlin.coroutines.CoroutineContext)>","<kotlin.coroutines.CombinedContext: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext)>"],"<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void invalidateSelf()>":["<android.graphics.drawable.Drawable: void invalidateSelf()>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void invalidateSelf()>"],"<androidx.appcompat.app.AppCompatDelegateImpl: void invalidateOptionsMenu()>":["<androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.app.ActionBar getSupportActionBar()>","<androidx.appcompat.app.AppCompatDelegateImpl: void invalidatePanelMenu(int)>","<androidx.appcompat.app.ActionBar: boolean invalidateOptionsMenu()>"],"<androidx.lifecycle.LifecycleRegistry: androidx.lifecycle.Lifecycle$State getStateAfter(androidx.lifecycle.Lifecycle$Event)>":["<androidx.lifecycle.Lifecycle$State: void <clinit>()>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>","<java.lang.IllegalArgumentException: void <init>(java.lang.String)>","<java.lang.StringBuilder: java.lang.String toString()>","<androidx.lifecycle.LifecycleRegistry$1: void <clinit>()>","<java.lang.StringBuilder: void <init>()>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<java.lang.Enum: int ordinal()>"],"<androidx.fragment.app.FragmentTransitionCompat21: void setEpicenter(java.lang.Object,android.graphics.Rect)>":["<android.transition.TransitionSet: void setEpicenterCallback(android.transition.Transition$EpicenterCallback)>","<androidx.fragment.app.FragmentTransitionCompat21$4: void <init>(androidx.fragment.app.FragmentTransitionCompat21,android.graphics.Rect)>"],"<androidx.appcompat.graphics.drawable.StateListDrawable$StateListState: void <init>(androidx.appcompat.graphics.drawable.StateListDrawable$StateListState,androidx.appcompat.graphics.drawable.StateListDrawable,android.content.res.Resources)>":["<androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState: int getCapacity()>","<androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState: void <init>(androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState,androidx.appcompat.graphics.drawable.DrawableContainer,android.content.res.Resources)>"],"<androidx.appcompat.graphics.drawable.DrawableContainer: int resolveDensity(android.content.res.Resources,int)>":["<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>"],"<androidx.core.provider.FontsContractCompat$3: void <init>(java.lang.String)>":["<java.lang.Object: void <init>()>"],"<androidx.fragment.app.FragmentManager: void <init>()>":["<java.lang.Object: void <init>()>"],"<androidx.fragment.app.FragmentController: void dispatchDestroy()>":["<androidx.fragment.app.FragmentManagerImpl: void dispatchDestroy()>"],"<kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher: void <init>(int,int,long,java.lang.String)>":["<kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher: kotlinx.coroutines.scheduling.CoroutineScheduler createScheduler()>","<kotlinx.coroutines.ExecutorCoroutineDispatcher: void <init>()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<androidx.fragment.app.BackStackRecord: void doAddOp(int,androidx.fragment.app.Fragment,java.lang.String,int)>":["<java.lang.Object: java.lang.Class getClass()>","<java.lang.IllegalArgumentException: void <init>(java.lang.String)>","<java.lang.String: boolean equals(java.lang.Object)>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<java.lang.StringBuilder: void <init>()>","<java.lang.StringBuilder: java.lang.StringBuilder append(int)>","<java.lang.reflect.Modifier: boolean isStatic(int)>","<androidx.fragment.app.BackStackRecord: void addOp(androidx.fragment.app.BackStackRecord$Op)>","<java.lang.IllegalStateException: void <init>(java.lang.String)>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>","<java.lang.StringBuilder: java.lang.String toString()>","<java.lang.reflect.Modifier: boolean isPublic(int)>","<androidx.fragment.app.BackStackRecord$Op: void <init>(int,androidx.fragment.app.Fragment)>"],"<kotlinx.coroutines.CoroutineExceptionHandlerKt: void handleExceptionViaHandler(kotlin.coroutines.CoroutineContext,java.lang.Throwable)>":["<kotlin.coroutines.CombinedContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>","<kotlinx.coroutines.CoroutineId: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>","<kotlinx.coroutines.CoroutineExceptionHandlerKt: java.lang.Throwable handlerException(java.lang.Throwable,java.lang.Throwable)>","<kotlinx.coroutines.CoroutineDispatcher: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>","<kotlinx.coroutines.CoroutineExceptionHandlerImplKt: void <clinit>()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<kotlinx.coroutines.JobSupport: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>","<kotlinx.coroutines.CoroutineExceptionHandler: void <clinit>()>","<kotlin.coroutines.EmptyCoroutineContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>","<kotlinx.coroutines.CoroutineExceptionHandlerImplKt: void handleCoroutineExceptionImpl(kotlin.coroutines.CoroutineContext,java.lang.Throwable)>"],"<io.reactivex.internal.schedulers.RxThreadFactory: void <init>(java.lang.String,int,boolean)>":["<java.util.concurrent.atomic.AtomicLong: void <init>()>"],"<kotlinx.coroutines.internal.ThreadContextKt$updateState$1: java.lang.Object invoke(java.lang.Object,java.lang.Object)>":["<kotlinx.coroutines.internal.ThreadContextKt$updateState$1: kotlinx.coroutines.internal.ThreadState invoke(kotlinx.coroutines.internal.ThreadState,kotlin.coroutines.CoroutineContext$Element)>"],"<io.reactivex.internal.schedulers.ComputationScheduler$PoolWorker: void <init>(java.util.concurrent.ThreadFactory)>":["<io.reactivex.internal.schedulers.NewThreadWorker: void <init>(java.util.concurrent.ThreadFactory)>"],"<kotlin.collections.EmptyIterator: java.lang.Void next()>":["<java.util.NoSuchElementException: void <init>()>"],"<androidx.core.graphics.TypefaceCompatApi26Impl: java.lang.Class obtainFontFamily()>":["<java.lang.Class: java.lang.Class forName(java.lang.String)>"],"<io.reactivex.internal.functions.Functions: io.reactivex.functions.Function identity()>":["<io.reactivex.internal.functions.Functions: void <clinit>()>"],"<androidx.collection.ArrayMap$1: int colIndexOfValue(java.lang.Object)>":["<androidx.collection.SimpleArrayMap: int indexOfValue(java.lang.Object)>"],"<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatedStateListState: int addStateSet(int[],android.graphics.drawable.Drawable,int)>":["<java.lang.Integer: void <clinit>()>","<androidx.collection.SparseArrayCompat: void put(int,java.lang.Object)>","<java.lang.Integer: java.lang.Integer valueOf(int)>","<androidx.appcompat.graphics.drawable.StateListDrawable$StateListState: int addStateSet(int[],android.graphics.drawable.Drawable)>"],"<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void idleResetBeforeUnpark()>":["<kotlinx.coroutines.scheduling.CoroutineScheduler: int access$getMIN_PARK_TIME_NS$cp()>","<kotlinx.coroutines.scheduling.CoroutineScheduler: void <clinit>()>"],"<com.afollestad.materialdialogs.WhichButton$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>":["<com.afollestad.materialdialogs.WhichButton$Companion: void <init>()>"],"<kotlin.collections.CollectionsKt___CollectionsKt: java.util.List toList(java.lang.Iterable)>":["<kotlin.collections.EmptyIterator: java.lang.Object next()>","<kotlin.collections.CollectionsKt__CollectionsKt: java.util.List optimizeReadOnlyList(java.util.List)>","<kotlin.collections.EmptyList: java.util.Iterator iterator()>","<kotlin.collections.CollectionsKt___CollectionsKt: java.util.List toMutableList(java.util.Collection)>","<kotlin.collections.CollectionsKt__CollectionsKt: java.util.List emptyList()>","<kotlin.collections.EmptyList: java.lang.Object get(int)>","<kotlin.collections.CollectionsKt__CollectionsJVMKt: java.util.List listOf(java.lang.Object)>","<kotlin.collections.EmptyList: int size()>","<java.util.ArrayList: java.util.Iterator iterator()>","<kotlin.collections.CollectionsKt___CollectionsKt: java.util.List toMutableList(java.lang.Iterable)>","<java.util.ArrayList: int size()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<java.util.ArrayList: java.lang.Object get(int)>"],"<androidx.vectordrawable.graphics.drawable.PathInterpolatorCompat: void parseInterpolatorFromTypeArray(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser)>":["<android.view.InflateException: void <init>(java.lang.String)>","<java.lang.StringBuilder: java.lang.String toString()>","<androidx.core.graphics.PathParser: android.graphics.Path createPathFromPathData(java.lang.String)>","<androidx.vectordrawable.graphics.drawable.PathInterpolatorCompat: void initQuad(float,float)>","<java.lang.StringBuilder: void <init>()>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<androidx.core.content.res.TypedArrayUtils: float getNamedFloat(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int,float)>","<androidx.core.content.res.TypedArrayUtils: boolean hasAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>","<androidx.vectordrawable.graphics.drawable.PathInterpolatorCompat: void initCubic(float,float,float,float)>","<androidx.core.content.res.TypedArrayUtils: java.lang.String getNamedString(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int)>","<androidx.vectordrawable.graphics.drawable.PathInterpolatorCompat: void initPath(android.graphics.Path)>"],"<androidx.fragment.app.FragmentManagerImpl: android.os.Parcelable saveAllState()>":["<androidx.fragment.app.FragmentManagerImpl: void throwException(java.lang.RuntimeException)>","<androidx.fragment.app.FragmentManagerImpl: void saveNonConfig()>","<android.util.SparseArray: int size()>","<androidx.fragment.app.FragmentManagerImpl: void <clinit>()>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<java.lang.StringBuilder: java.lang.String toString()>","<androidx.fragment.app.FragmentManagerImpl: boolean execPendingActions()>","<androidx.fragment.app.FragmentState: void <clinit>()>","<android.util.SparseArray: java.lang.Object valueAt(int)>","<androidx.fragment.app.FragmentManagerState: void <clinit>()>","<java.util.ArrayList: int size()>","<android.os.BaseBundle: void putInt(java.lang.String,int)>","<java.util.ArrayList: java.lang.Object get(int)>","<androidx.fragment.app.FragmentManagerImpl: void forcePostponedTransactions()>","<androidx.fragment.app.BackStackState: void <init>(androidx.fragment.app.BackStackRecord)>","<android.os.Bundle: void <init>()>","<androidx.fragment.app.FragmentManagerImpl: android.os.Bundle saveFragmentBasicState(androidx.fragment.app.Fragment)>","<androidx.fragment.app.FragmentState: void <init>(androidx.fragment.app.Fragment)>","<java.lang.StringBuilder: void <init>()>","<java.lang.StringBuilder: java.lang.StringBuilder append(int)>","<android.util.Log: int v(java.lang.String,java.lang.String)>","<androidx.fragment.app.BackStackState: void <clinit>()>","<android.os.Bundle: void <clinit>()>","<androidx.fragment.app.FragmentManagerImpl: void endAnimatingAwayFragments()>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>","<java.lang.IllegalStateException: void <init>(java.lang.String)>","<androidx.fragment.app.FragmentManagerImpl: void putFragment(android.os.Bundle,java.lang.String,androidx.fragment.app.Fragment)>","<androidx.fragment.app.FragmentManagerState: void <init>()>"],"<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatedStateListState: void <init>(androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatedStateListState,androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat,android.content.res.Resources)>":["<androidx.collection.SparseArrayCompat: void <clinit>()>","<androidx.collection.LongSparseArray: void <clinit>()>","<androidx.appcompat.graphics.drawable.StateListDrawable$StateListState: void <init>(androidx.appcompat.graphics.drawable.StateListDrawable$StateListState,androidx.appcompat.graphics.drawable.StateListDrawable,android.content.res.Resources)>","<androidx.collection.LongSparseArray: void <init>()>","<androidx.collection.SparseArrayCompat: void <init>()>"],"<kotlinx.coroutines.internal.LockFreeLinkedListNode: kotlinx.coroutines.internal.LockFreeLinkedListNode getNextNode()>":["<kotlinx.coroutines.internal.LockFreeLinkedListNode: java.lang.Object getNext()>","<kotlinx.coroutines.internal.LockFreeLinkedListKt: void <clinit>()>","<kotlinx.coroutines.internal.LockFreeLinkedListKt: kotlinx.coroutines.internal.LockFreeLinkedListNode unwrap(java.lang.Object)>"],"<kotlin.coroutines.CoroutineContext$Element$DefaultImpls: kotlin.coroutines.CoroutineContext minusKey(kotlin.coroutines.CoroutineContext$Element,kotlin.coroutines.CoroutineContext$Key)>":["<kotlin.coroutines.EmptyCoroutineContext: void <clinit>()>","<kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>","<kotlinx.coroutines.JobSupport: kotlin.coroutines.CoroutineContext$Key getKey()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<kotlin.coroutines.AbstractCoroutineContextElement: kotlin.coroutines.CoroutineContext$Key getKey()>"],"<androidx.core.graphics.TypefaceCompatApi24Impl: android.graphics.Typeface createFromFontInfo(android.content.Context,android.os.CancellationSignal,androidx.core.provider.FontsContractCompat$FontInfo[],int)>":["<androidx.core.graphics.TypefaceCompatApi24Impl: boolean addFontWeightStyle(java.lang.Object,java.nio.ByteBuffer,int,int,boolean)>","<androidx.core.graphics.TypefaceCompatApi24Impl: java.lang.Object newFamily()>","<androidx.collection.SimpleArrayMap: java.lang.Object get(java.lang.Object)>","<androidx.core.graphics.TypefaceCompatApi24Impl: void <clinit>()>","<android.graphics.Typeface: void <clinit>()>","<android.graphics.Typeface: android.graphics.Typeface create(android.graphics.Typeface,int)>","<androidx.collection.SimpleArrayMap: void <init>()>","<androidx.core.graphics.TypefaceCompatApi24Impl: android.graphics.Typeface createFromFamiliesWithDefault(java.lang.Object)>","<androidx.collection.SimpleArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>","<androidx.core.graphics.TypefaceCompatUtil: java.nio.ByteBuffer mmap(android.content.Context,android.os.CancellationSignal,android.net.Uri)>"],"<androidx.collection.ArrayMap: java.util.Set keySet()>":["<androidx.collection.MapCollections: java.util.Set getKeySet()>","<androidx.collection.ArrayMap: androidx.collection.MapCollections getCollection()>"],"<com.afollestad.assent.AssentInContextKt: void runWithPermissions$default(android.content.Context,com.afollestad.assent.Permission[],int,kotlin.jvm.functions.Function1,int,java.lang.Object)>":["<com.afollestad.assent.AssentInContextKt: void runWithPermissions(android.content.Context,com.afollestad.assent.Permission[],int,kotlin.jvm.functions.Function1)>"],"<io.reactivex.internal.schedulers.SchedulerPoolFactory: void start()>":["<io.reactivex.internal.schedulers.SchedulerPoolFactory: void <clinit>()>","<io.reactivex.internal.schedulers.SchedulerPoolFactory: void tryStart(boolean)>"],"<androidx.core.content.res.ResourcesCompat: android.graphics.Typeface loadFont(android.content.Context,int,android.util.TypedValue,int,androidx.core.content.res.ResourcesCompat$FontCallback,android.os.Handler,boolean)>":["<android.content.res.Resources$NotFoundException: void <init>(java.lang.String)>","<java.lang.StringBuilder: java.lang.String toString()>","<java.lang.Integer: java.lang.String toHexString(int)>","<java.lang.Integer: void <clinit>()>","<androidx.core.content.res.ResourcesCompat: android.graphics.Typeface loadFont(android.content.Context,android.content.res.Resources,android.util.TypedValue,int,int,androidx.core.content.res.ResourcesCompat$FontCallback,android.os.Handler,boolean)>","<androidx.appcompat.app.AppCompatActivity: android.content.res.Resources getResources()>","<java.lang.StringBuilder: void <init>()>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<android.content.res.Resources: void getValue(int,android.util.TypedValue,boolean)>"],"<androidx.appcompat.app.AppCompatDelegateImpl: void initWindowDecorActionBar()>":["<androidx.appcompat.app.WindowDecorActionBar: void <init>(android.app.Activity,boolean)>","<androidx.appcompat.app.WindowDecorActionBar: void setDefaultDisplayHomeAsUpEnabled(boolean)>","<androidx.appcompat.app.AppCompatDelegateImpl: void ensureSubDecor()>","<androidx.appcompat.app.WindowDecorActionBar: void <clinit>()>","<androidx.appcompat.app.WindowDecorActionBar: void <init>(android.app.Dialog)>"],"<kotlin.ranges.IntProgressionIterator: int nextInt()>":["<java.util.NoSuchElementException: void <init>()>"],"<kotlinx.coroutines.internal.SystemPropsKt: int systemProp(java.lang.String,int,int,int)>":["<kotlinx.coroutines.internal.SystemPropsKt: long systemProp(java.lang.String,long,long,long)>","<kotlinx.coroutines.internal.SystemPropsKt: void <clinit>()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<androidx.core.view.ViewCompat: java.lang.String getTransitionName(android.view.View)>":["<android.os.Build$VERSION: void <clinit>()>","<java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>","<androidx.core.view.ViewCompat: void <clinit>()>"],"<kotlin.collections.EmptyList: java.lang.Void get(int)>":["<java.lang.StringBuilder: java.lang.String toString()>","<java.lang.StringBuilder: java.lang.StringBuilder append(char)>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<java.lang.StringBuilder: void <init>()>","<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>","<java.lang.StringBuilder: java.lang.StringBuilder append(int)>"],"<androidx.appcompat.app.AppCompatDelegateImpl: void <clinit>()>":["<androidx.appcompat.app.AppCompatDelegate: void <clinit>()>","<android.os.Build$VERSION: void <clinit>()>","<java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler getDefaultUncaughtExceptionHandler()>","<androidx.appcompat.app.AppCompatDelegateImpl$1: void <init>(java.lang.Thread$UncaughtExceptionHandler)>","<java.lang.Thread: void setDefaultUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)>","<androidx.appcompat.app.AppCompatDelegateImpl: void <clinit>()>"],"<io.reactivex.exceptions.CompositeException: void printStackTrace(io.reactivex.exceptions.CompositeException$PrintStreamOrWriter)>":["<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>","<java.lang.StringBuilder: java.lang.String toString()>","<java.lang.StringBuilder: java.lang.StringBuilder append(char)>","<io.reactivex.exceptions.CompositeException$WrappedPrintStream: void println(java.lang.Object)>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<java.lang.StringBuilder: java.lang.StringBuilder append(int)>","<io.reactivex.exceptions.CompositeException: void appendStackTrace(java.lang.StringBuilder,java.lang.Throwable,java.lang.String)>","<java.lang.StringBuilder: void <init>(int)>","<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>"],"<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: void setAlpha(int)>":["<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void setAlpha(int)>"],"<kotlin.text.StringsKt__StringsKt: java.lang.CharSequence trim(java.lang.CharSequence)>":["<kotlin.text.CharsKt__CharJVMKt: boolean isWhitespace(char)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<androidx.fragment.app.FragmentManagerImpl: androidx.fragment.app.FragmentManagerImpl$AnimationOrAnimator makeFadeAnimation(android.content.Context,float,float)>":["<android.view.animation.AlphaAnimation: void <init>(float,float)>","<androidx.fragment.app.FragmentManagerImpl: void <clinit>()>","<android.view.animation.Animation: void setInterpolator(android.view.animation.Interpolator)>","<androidx.fragment.app.FragmentManagerImpl$AnimationOrAnimator: void <init>(android.view.animation.Animation)>","<android.view.animation.Animation: void setDuration(long)>"],"<kotlinx.coroutines.JobSupport: kotlinx.coroutines.ChildHandle attachChild(kotlinx.coroutines.ChildJob)>":["<kotlinx.coroutines.ChildHandleNode: void <init>(kotlinx.coroutines.JobSupport,kotlinx.coroutines.ChildJob)>","<kotlinx.coroutines.Job$DefaultImpls: kotlinx.coroutines.DisposableHandle invokeOnCompletion$default(kotlinx.coroutines.Job,boolean,boolean,kotlin.jvm.functions.Function1,int,java.lang.Object)>","<kotlin.TypeCastException: void <init>(java.lang.String)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<androidx.fragment.app.FragmentManagerImpl: void executePostponedTransaction(java.util.ArrayList,java.util.ArrayList)>":["<java.util.ArrayList: java.lang.Object remove(int)>","<java.util.ArrayList: int indexOf(java.lang.Object)>","<java.util.ArrayList: int size()>","<java.util.ArrayList: java.lang.Object get(int)>"],"<androidx.core.content.res.ResourcesCompat: android.graphics.Typeface loadFont(android.content.Context,android.content.res.Resources,android.util.TypedValue,int,int,androidx.core.content.res.ResourcesCompat$FontCallback,android.os.Handler,boolean)>":["<android.content.res.Resources$NotFoundException: void <init>(java.lang.String)>","<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>","<androidx.core.graphics.TypefaceCompat: android.graphics.Typeface createFromResourcesFontFile(android.content.Context,android.content.res.Resources,int,java.lang.String,int)>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<java.lang.StringBuilder: void <init>()>","<android.content.res.Resources: java.lang.String getResourceName(int)>","<androidx.core.graphics.TypefaceCompat: android.graphics.Typeface createFromResourcesFamilyXml(android.content.Context,androidx.core.content.res.FontResourcesParserCompat$FamilyResourceEntry,android.content.res.Resources,int,int,androidx.core.content.res.ResourcesCompat$FontCallback,android.os.Handler,boolean)>","<android.content.res.Resources: android.content.res.XmlResourceParser getXml(int)>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>","<java.lang.StringBuilder: java.lang.String toString()>","<androidx.core.graphics.TypefaceCompat: android.graphics.Typeface findFromCache(android.content.res.Resources,int,int)>","<java.lang.Integer: java.lang.String toHexString(int)>","<java.lang.Integer: void <clinit>()>","<androidx.core.content.res.FontResourcesParserCompat: androidx.core.content.res.FontResourcesParserCompat$FamilyResourceEntry parse(org.xmlpull.v1.XmlPullParser,android.content.res.Resources)>","<android.util.Log: int e(java.lang.String,java.lang.String)>","<androidx.core.graphics.TypefaceCompat: void <clinit>()>"],"<kotlinx.coroutines.internal.SystemPropsKt: int systemProp$default(java.lang.String,int,int,int,int,java.lang.Object)>":["<kotlinx.coroutines.internal.SystemPropsKt: int systemProp(java.lang.String,int,int,int)>","<kotlinx.coroutines.internal.SystemPropsKt: void <clinit>()>"],"<androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: android.animation.ObjectAnimator loadObjectAnimator(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,float,org.xmlpull.v1.XmlPullParser)>":["<android.animation.ObjectAnimator: void <init>()>","<androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: android.animation.ValueAnimator loadAnimator(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,android.animation.ValueAnimator,float,org.xmlpull.v1.XmlPullParser)>"],"<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatedVectorDrawableTransition: void start()>":["<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: void start()>"],"<androidx.appcompat.graphics.drawable.StateListDrawable: void setConstantState(androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState)>":["<androidx.appcompat.graphics.drawable.DrawableContainer: void setConstantState(androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState)>"],"<kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher: void <init>(int,int,java.lang.String,int,kotlin.jvm.internal.DefaultConstructorMarker)>":["<kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher: void <init>(int,int,java.lang.String)>","<kotlinx.coroutines.scheduling.TasksKt: void <clinit>()>"],"<androidx.fragment.app.Fragment: boolean isStateSaved()>":["<androidx.fragment.app.FragmentManagerImpl: boolean isStateSaved()>"],"<kotlin.collections.ArrayAsCollection: void <init>(java.lang.Object[],boolean)>":["<java.lang.Object: void <init>()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<kotlinx.coroutines.DefaultTimeSource: void <init>()>":["<java.lang.Object: void <init>()>"],"<java.lang.String: java.lang.String substring(int,int)>":["<java.lang.RuntimeException: void <init>(java.lang.String)>"],"<androidx.lifecycle.Lifecycle$Event: void <init>(java.lang.String,int)>":["<java.lang.Enum: void <init>(java.lang.String,int)>"],"<androidx.core.graphics.TypefaceCompatApi24Impl: boolean addFontWeightStyle(java.lang.Object,java.nio.ByteBuffer,int,int,boolean)>":["<java.lang.Boolean: void <clinit>()>","<java.lang.Boolean: java.lang.Boolean valueOf(boolean)>","<androidx.core.graphics.TypefaceCompatApi24Impl: void <clinit>()>","<java.lang.Integer: void <clinit>()>","<java.lang.Integer: java.lang.Integer valueOf(int)>","<java.lang.RuntimeException: void <init>(java.lang.Throwable)>"],"<androidx.collection.LongSparseArray: void gc()>":["<androidx.collection.LongSparseArray: void <clinit>()>"],"<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void cpuWorkerIdle()>":["<java.lang.Thread: void yield()>","<kotlin.ranges.RangesKt___RangesKt: int coerceAtMost(int,int)>","<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void doPark(long)>","<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: boolean tryReleaseCpu$kotlinx_coroutines_core(kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState)>","<kotlinx.coroutines.scheduling.CoroutineScheduler: int access$getMAX_PARK_TIME_NS$cp()>","<kotlinx.coroutines.scheduling.CoroutineScheduler: void <clinit>()>","<kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: void <clinit>()>"],"<kotlinx.coroutines.DeferredCoroutine: void <init>(kotlin.coroutines.CoroutineContext,boolean)>":["<kotlinx.coroutines.AbstractCoroutine: void <init>(kotlin.coroutines.CoroutineContext,boolean)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<com.afollestad.photoaffix.presenters.RealMainPresenter_Factory: java.lang.Object get()>":["<com.afollestad.photoaffix.presenters.RealMainPresenter_Factory: com.afollestad.photoaffix.presenters.RealMainPresenter get()>"],"<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: void setHotspotBounds(int,int,int,int)>":["<androidx.vectordrawable.graphics.drawable.VectorDrawableCommon: void setHotspotBounds(int,int,int,int)>"],"<io.reactivex.plugins.RxJavaPlugins: io.reactivex.Scheduler callRequireNonNull(java.util.concurrent.Callable)>":["<io.reactivex.internal.util.ExceptionHelper: void <clinit>()>","<io.reactivex.internal.functions.ObjectHelper: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>","<io.reactivex.schedulers.Schedulers$SingleTask: java.lang.Object call()>","<io.reactivex.schedulers.Schedulers$ComputationTask: java.lang.Object call()>","<io.reactivex.schedulers.Schedulers$NewThreadTask: java.lang.Object call()>","<io.reactivex.internal.util.ExceptionHelper: java.lang.RuntimeException wrapOrThrow(java.lang.Throwable)>","<io.reactivex.schedulers.Schedulers$IOTask: java.lang.Object call()>","<io.reactivex.internal.functions.ObjectHelper: void <clinit>()>"],"<androidx.appcompat.graphics.drawable.DrawableContainer: void setDither(boolean)>":["<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: void setDither(boolean)>","<android.graphics.drawable.LayerDrawable: void setDither(boolean)>","<androidx.core.graphics.drawable.WrappedDrawableApi14: void setDither(boolean)>","<android.graphics.drawable.Drawable: void setDither(boolean)>"],"<io.reactivex.observables.ConnectableObservable: io.reactivex.Observable refCount()>":["<io.reactivex.internal.operators.observable.ObservableRefCount: void <init>(io.reactivex.observables.ConnectableObservable)>","<io.reactivex.plugins.RxJavaPlugins: io.reactivex.Observable onAssembly(io.reactivex.Observable)>"],"<androidx.core.graphics.TypefaceCompatApi21Impl: void <init>()>":["<androidx.core.graphics.TypefaceCompatBaseImpl: void <init>()>"],"<com.afollestad.photoaffix.engine.RealAffixEngine_Factory: com.afollestad.photoaffix.engine.RealAffixEngine_Factory create(javax.inject.Provider,javax.inject.Provider,javax.inject.Provider,javax.inject.Provider)>":["<com.afollestad.photoaffix.engine.RealAffixEngine_Factory: void <init>(javax.inject.Provider,javax.inject.Provider,javax.inject.Provider,javax.inject.Provider)>"],"<kotlinx.coroutines.scheduling.WorkQueue: kotlinx.coroutines.scheduling.Task poll()>":["<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object getAndSet(int,java.lang.Object)>","<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>","<kotlinx.coroutines.scheduling.WorkQueue: void <clinit>()>","<kotlinx.coroutines.scheduling.WorkQueue: java.util.concurrent.atomic.AtomicReferenceArray access$getBuffer$p(kotlinx.coroutines.scheduling.WorkQueue)>"],"<kotlinx.coroutines.BuildersKt__Builders_commonKt: kotlinx.coroutines.Deferred async$default(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.CoroutineContext,kotlinx.coroutines.CoroutineStart,kotlin.jvm.functions.Function2,int,java.lang.Object)>":["<kotlin.coroutines.EmptyCoroutineContext: void <clinit>()>","<kotlinx.coroutines.CoroutineStart: void <clinit>()>","<kotlinx.coroutines.BuildersKt: kotlinx.coroutines.Deferred async(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.CoroutineContext,kotlinx.coroutines.CoroutineStart,kotlin.jvm.functions.Function2)>"],"<kotlinx.coroutines.AbstractContinuation: boolean trySuspend()>":["<java.lang.IllegalStateException: void <init>(java.lang.String)>","<kotlinx.coroutines.AbstractContinuation: void <clinit>()>","<java.lang.String: java.lang.String toString()>"],"<androidx.appcompat.app.AppCompatActivity: void onSaveInstanceState(android.os.Bundle)>":["<androidx.appcompat.app.AppCompatActivity: androidx.appcompat.app.AppCompatDelegate getDelegate()>","<androidx.fragment.app.FragmentActivity: void onSaveInstanceState(android.os.Bundle)>","<androidx.appcompat.app.AppCompatDelegateImpl: void onSaveInstanceState(android.os.Bundle)>"],"<com.afollestad.assent.internal.ExtensionsKt: boolean equalsPermissions(java.util.List,java.util.List)>":["<kotlin.collections.EmptyIterator: java.lang.Object next()>","<kotlin.collections.EmptyList: java.util.Iterator iterator()>","<kotlin.collections.EmptyList: int size()>","<kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>","<kotlin.collections.EmptyIterator: boolean hasNext()>","<java.util.ArrayList: java.util.Iterator iterator()>","<kotlin.collections.EmptyList: java.lang.Object get(int)>","<java.util.ArrayList: int size()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<java.util.ArrayList: java.lang.Object get(int)>"],"<java.lang.Float: java.lang.Float valueOf(float)>":["<java.lang.RuntimeException: void <init>(java.lang.String)>"],"<kotlin.ranges.IntRange: void <init>(int,int)>":["<kotlin.ranges.IntProgression: void <init>(int,int,int)>"],"<com.afollestad.photoaffix.prefs.PrefsModule_ProvideImageSpacingVerticalPrefFactory: com.afollestad.rxkprefs.Pref provideInstance(com.afollestad.photoaffix.prefs.PrefsModule,javax.inject.Provider)>":["<com.afollestad.photoaffix.engine.subengines.RealStitchEngine_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideScalePriorityPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.utilities.RealDpConverter_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.engine.RealAffixEngine_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideStackHorizontallyPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.engine.bitmaps.RealBitmapManipulator_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.engine.photos.RealPhotoLoader_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.utilities.RealMediaScanner_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideImageSpacingVerticalPrefFactory: com.afollestad.rxkprefs.Pref proxyProvideImageSpacingVerticalPref(com.afollestad.photoaffix.prefs.PrefsModule,com.afollestad.rxkprefs.RxkPrefs)>","<com.afollestad.photoaffix.utilities.RealIoManager_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideImageSpacingHorizontalPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.di.AppProvideModule_ProvideAppNameFactory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideImageSpacingVerticalPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideBgFillColorPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.presenters.RealMainPresenter_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideRxkPrefsFactory: java.lang.Object get()>","<dagger.internal.DoubleCheck: java.lang.Object get()>","<com.afollestad.photoaffix.engine.subengines.RealDimensionsEngine_Factory: java.lang.Object get()>","<dagger.internal.InstanceFactory: java.lang.Object get()>"],"<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>":["<java.lang.Exception: void <init>()>","<java.lang.RuntimeException: void <init>(java.lang.String)>"],"<androidx.core.R$styleable: void <clinit>()>":["<androidx.core.R$styleable: void <clinit>()>"],"<androidx.core.content.res.TypedArrayUtils: float getNamedFloat(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int,float)>":["<androidx.core.content.res.TypedArrayUtils: boolean hasAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>"],"<androidx.appcompat.widget.AppCompatDrawableManager: android.content.res.ColorStateList getTintListFromCache(android.content.Context,int)>":["<java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>"],"<kotlin.text.StringsKt__StringsKt: int lastIndexOf$default(java.lang.CharSequence,java.lang.String,int,boolean,int,java.lang.Object)>":["<kotlin.text.StringsKt__StringsKt: int lastIndexOf(java.lang.CharSequence,java.lang.String,int,boolean)>","<kotlin.text.StringsKt__StringsKt: int getLastIndex(java.lang.CharSequence)>"],"<com.afollestad.photoaffix.engine.subengines.RealDimensionsEngine: void <init>(com.afollestad.photoaffix.utilities.DpConverter,com.afollestad.rxkprefs.Pref,com.afollestad.rxkprefs.Pref,com.afollestad.rxkprefs.Pref,com.afollestad.rxkprefs.Pref)>":["<java.lang.Object: void <init>()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<com.afollestad.photoaffix.presenters.RealMainPresenter_Factory: com.afollestad.photoaffix.presenters.RealMainPresenter_Factory create(javax.inject.Provider,javax.inject.Provider)>":["<com.afollestad.photoaffix.presenters.RealMainPresenter_Factory: void <init>(javax.inject.Provider,javax.inject.Provider)>"],"<com.afollestad.photoaffix.views.MainActivity: void refresh(boolean)>":["<com.afollestad.assent.Permission: void <clinit>()>","<com.afollestad.assent.AssentInContextKt: void runWithPermissions$default(android.content.Context,com.afollestad.assent.Permission[],int,kotlin.jvm.functions.Function1,int,java.lang.Object)>","<com.afollestad.photoaffix.views.MainActivity$refresh$1: void <init>(com.afollestad.photoaffix.views.MainActivity,boolean)>"],"<androidx.appcompat.graphics.drawable.DrawableContainer: boolean setVisible(boolean,boolean)>":["<android.graphics.drawable.LayerDrawable: boolean setVisible(boolean,boolean)>","<android.graphics.drawable.Drawable: boolean setVisible(boolean,boolean)>","<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: boolean setVisible(boolean,boolean)>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: boolean setVisible(boolean,boolean)>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: boolean setVisible(boolean,boolean)>","<androidx.core.graphics.drawable.WrappedDrawableApi14: boolean setVisible(boolean,boolean)>"],"<kotlinx.coroutines.InvokeOnCancelling: void <clinit>()>":["<kotlinx.coroutines.InvokeOnCancelling: void <clinit>()>","<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: java.util.concurrent.atomic.AtomicIntegerFieldUpdater newUpdater(java.lang.Class,java.lang.String)>","<kotlinx.coroutines.internal.LockFreeLinkedListNode: void <clinit>()>"],"<com.afollestad.photoaffix.engine.subengines.RealStitchEngine_Factory: com.afollestad.photoaffix.engine.subengines.RealStitchEngine provideInstance(javax.inject.Provider,javax.inject.Provider,javax.inject.Provider,javax.inject.Provider,javax.inject.Provider,javax.inject.Provider,javax.inject.Provider)>":["<com.afollestad.photoaffix.prefs.PrefsModule_ProvideScalePriorityPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.engine.subengines.RealStitchEngine_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.utilities.RealDpConverter_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.engine.subengines.RealStitchEngine: void <init>(com.afollestad.photoaffix.utilities.DpConverter,com.afollestad.photoaffix.engine.bitmaps.BitmapManipulator,com.afollestad.rxkprefs.Pref,com.afollestad.rxkprefs.Pref,com.afollestad.rxkprefs.Pref,com.afollestad.rxkprefs.Pref,com.afollestad.rxkprefs.Pref)>","<com.afollestad.photoaffix.engine.RealAffixEngine_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideStackHorizontallyPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.engine.bitmaps.RealBitmapManipulator_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.engine.photos.RealPhotoLoader_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.utilities.RealMediaScanner_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.utilities.RealIoManager_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideImageSpacingHorizontalPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideImageSpacingVerticalPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.di.AppProvideModule_ProvideAppNameFactory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideBgFillColorPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.presenters.RealMainPresenter_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideRxkPrefsFactory: java.lang.Object get()>","<com.afollestad.photoaffix.engine.subengines.RealDimensionsEngine_Factory: java.lang.Object get()>","<dagger.internal.DoubleCheck: java.lang.Object get()>","<dagger.internal.InstanceFactory: java.lang.Object get()>"],"<androidx.appcompat.app.WindowDecorActionBar: void setHasEmbeddedTabs(boolean)>":["<androidx.appcompat.app.WindowDecorActionBar: int getNavigationMode()>","<androidx.core.view.ViewCompat: void requestApplyInsets(android.view.View)>","<androidx.core.view.ViewCompat: void <clinit>()>"],"<kotlinx.coroutines.CoroutineStart: kotlinx.coroutines.CoroutineStart[] values()>":["<java.lang.Object: java.lang.Object clone()>","<kotlinx.coroutines.CoroutineStart: void <clinit>()>"],"<java.lang.Long: void <clinit>()>":["<java.lang.Long: void <clinit>()>"],"<androidx.recyclerview.widget.LinearLayoutManager: void setOrientation(int)>":["<androidx.recyclerview.widget.LinearLayoutManager: void assertNotInLayoutOrScroll(java.lang.String)>","<java.lang.StringBuilder: java.lang.String toString()>","<java.lang.IllegalArgumentException: void <init>(java.lang.String)>","<androidx.recyclerview.widget.OrientationHelper: androidx.recyclerview.widget.OrientationHelper createOrientationHelper(androidx.recyclerview.widget.RecyclerView$LayoutManager,int)>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<java.lang.StringBuilder: void <init>()>","<java.lang.StringBuilder: java.lang.StringBuilder append(int)>","<androidx.recyclerview.widget.RecyclerView$LayoutManager: void requestLayout()>"],"<kotlinx.coroutines.scheduling.LimitingDispatcher: void afterTask()>":["<kotlinx.coroutines.scheduling.LimitingDispatcher: void dispatch(java.lang.Runnable,boolean)>","<kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher: void dispatchWithContext$kotlinx_coroutines_core(java.lang.Runnable,kotlinx.coroutines.scheduling.TaskContext,boolean)>","<java.util.concurrent.ConcurrentLinkedQueue: java.lang.Object poll()>","<kotlinx.coroutines.scheduling.LimitingDispatcher: void <clinit>()>"],"<androidx.appcompat.app.AppCompatDelegateImpl: void onPostResume()>":["<androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.app.ActionBar getSupportActionBar()>","<androidx.appcompat.app.WindowDecorActionBar: void setShowHideAnimationEnabled(boolean)>"],"<io.reactivex.internal.operators.observable.AbstractObservableWithUpstream: void <init>(io.reactivex.ObservableSource)>":["<io.reactivex.Observable: void <init>()>"],"<kotlinx.coroutines.DeferredCoroutine: java.lang.Object await(kotlin.coroutines.Continuation)>":["<kotlinx.coroutines.DeferredCoroutine: java.lang.Object await$suspendImpl(kotlinx.coroutines.DeferredCoroutine,kotlin.coroutines.Continuation)>"],"<io.reactivex.internal.schedulers.IoScheduler: void <init>(java.util.concurrent.ThreadFactory)>":["<io.reactivex.internal.schedulers.IoScheduler: void start()>","<io.reactivex.Scheduler: void <clinit>()>","<io.reactivex.Scheduler: void <init>()>","<io.reactivex.internal.schedulers.IoScheduler: void <clinit>()>","<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>"],"<androidx.appcompat.widget.DrawableUtils: boolean canSafelyMutateDrawable(android.graphics.drawable.Drawable)>":["<android.graphics.drawable.LayerDrawable: android.graphics.drawable.Drawable$ConstantState getConstantState()>","<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: android.graphics.drawable.Drawable$ConstantState getConstantState()>","<androidx.appcompat.widget.DrawableUtils: boolean canSafelyMutateDrawable(android.graphics.drawable.Drawable)>","<android.os.Build$VERSION: void <clinit>()>","<androidx.appcompat.graphics.drawable.DrawableContainer: android.graphics.drawable.Drawable$ConstantState getConstantState()>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable$ConstantState getConstantState()>","<androidx.core.graphics.drawable.WrappedDrawableApi14: android.graphics.drawable.Drawable$ConstantState getConstantState()>","<androidx.core.graphics.drawable.WrappedDrawableApi14: android.graphics.drawable.Drawable getWrappedDrawable()>","<androidx.appcompat.widget.DrawableUtils: void <clinit>()>"],"<kotlinx.coroutines.internal.LockFreeLinkedListNode: void helpDelete()>":["<kotlinx.coroutines.internal.LockFreeLinkedListNode: java.lang.Object getNext()>","<kotlinx.coroutines.internal.LockFreeLinkedListNode: kotlinx.coroutines.internal.LockFreeLinkedListNode markPrev()>","<kotlinx.coroutines.internal.LockFreeLinkedListKt: void <clinit>()>","<kotlin.TypeCastException: void <init>(java.lang.String)>","<kotlinx.coroutines.internal.LockFreeLinkedListKt: kotlinx.coroutines.internal.LockFreeLinkedListNode unwrap(java.lang.Object)>","<kotlinx.coroutines.internal.LockFreeLinkedListNode: void <clinit>()>"],"<kotlin.jvm.internal.TypeIntrinsics: boolean isFunctionOfArity(java.lang.Object,int)>":["<kotlin.jvm.internal.TypeIntrinsics: int getFunctionArity(java.lang.Object)>"],"<com.afollestad.photoaffix.views.ActivityExtKt: void lockOrientation(android.app.Activity)>":["<android.app.Activity: java.lang.Object getSystemService(java.lang.String)>","<kotlin.TypeCastException: void <init>(java.lang.String)>","<android.app.Activity: void setRequestedOrientation(int)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<kotlin.jvm.internal.Intrinsics: void checkExpressionValueIsNotNull(java.lang.Object,java.lang.String)>"],"<kotlinx.coroutines.MainDispatcherLoader: void <init>()>":["<java.lang.Object: void <init>()>"],"<kotlinx.coroutines.DispatchedContinuation: kotlin.coroutines.CoroutineContext getContext()>":["<kotlin.coroutines.jvm.internal.CompletedContinuation: kotlin.coroutines.CoroutineContext getContext()>","<kotlin.coroutines.jvm.internal.ContinuationImpl: kotlin.coroutines.CoroutineContext getContext()>","<kotlinx.coroutines.DispatchedContinuation: kotlin.coroutines.CoroutineContext getContext()>"],"<kotlin.coroutines.jvm.internal.ContinuationImpl: void <init>(kotlin.coroutines.Continuation,kotlin.coroutines.CoroutineContext)>":["<kotlin.coroutines.jvm.internal.BaseContinuationImpl: void <init>(kotlin.coroutines.Continuation)>"],"<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>":["<java.lang.RuntimeException: void <init>(java.lang.String)>"],"<androidx.fragment.app.FragmentTransitionCompat21: void replaceTargets(java.lang.Object,java.util.ArrayList,java.util.ArrayList)>":["<android.transition.TransitionSet: android.transition.Transition removeTarget(android.view.View)>","<android.transition.TransitionSet: android.transition.Transition addTarget(android.view.View)>","<android.transition.TransitionSet: int getTransitionCount()>","<java.util.ArrayList: int size()>","<androidx.fragment.app.FragmentTransitionCompat21: void replaceTargets(java.lang.Object,java.util.ArrayList,java.util.ArrayList)>","<java.util.ArrayList: java.lang.Object get(int)>","<androidx.fragment.app.FragmentTransitionCompat21: boolean hasSimpleTarget(android.transition.Transition)>","<android.transition.Transition: java.util.List getTargets()>","<android.transition.TransitionSet: android.transition.Transition getTransitionAt(int)>"],"<kotlinx.coroutines.JobKt: kotlinx.coroutines.Job Job(kotlinx.coroutines.Job)>":["<kotlinx.coroutines.JobKt__JobKt: kotlinx.coroutines.Job Job(kotlinx.coroutines.Job)>"],"<androidx.core.content.res.GradientColorInflaterCompat$ColorStops: void <init>(java.util.List,java.util.List)>":["<java.lang.Object: void <init>()>","<java.util.ArrayList: int size()>","<java.util.ArrayList: java.lang.Object get(int)>"],"<kotlin.internal.ProgressionUtilKt: int differenceModulo(int,int,int)>":["<kotlin.internal.ProgressionUtilKt: int mod(int,int)>"],"<kotlinx.coroutines.JobSupport: void access$continueCompleting(kotlinx.coroutines.JobSupport,kotlinx.coroutines.JobSupport$Finishing,kotlinx.coroutines.ChildHandleNode,java.lang.Object)>":["<kotlinx.coroutines.JobSupport: void continueCompleting(kotlinx.coroutines.JobSupport$Finishing,kotlinx.coroutines.ChildHandleNode,java.lang.Object)>"],"<androidx.core.provider.FontsContractCompat$1: void <init>(android.content.Context,androidx.core.provider.FontRequest,int,java.lang.String)>":["<java.lang.Object: void <init>()>"],"<androidx.fragment.app.FragmentTransition: void configureTransitionsOrdered(androidx.fragment.app.FragmentManagerImpl,int,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.view.View,androidx.collection.ArrayMap)>":["<androidx.fragment.app.FragmentTransitionImpl: void setNameOverridesOrdered(android.view.View,java.util.ArrayList,java.util.Map)>","<androidx.fragment.app.FragmentTransition: java.lang.Object getEnterTransition(androidx.fragment.app.FragmentTransitionImpl,androidx.fragment.app.Fragment,boolean)>","<androidx.fragment.app.FragmentTransitionImpl: void scheduleNameReset(android.view.ViewGroup,java.util.ArrayList,java.util.Map)>","<androidx.fragment.app.FragmentTransitionCompat21: void beginDelayedTransition(android.view.ViewGroup,java.lang.Object)>","<androidx.fragment.app.FragmentTransition: androidx.fragment.app.FragmentTransitionImpl chooseImpl(androidx.fragment.app.Fragment,androidx.fragment.app.Fragment)>","<androidx.fragment.app.FragmentTransition: java.lang.Object mergeTransitions(androidx.fragment.app.FragmentTransitionImpl,java.lang.Object,java.lang.Object,java.lang.Object,androidx.fragment.app.Fragment,boolean)>","<java.util.ArrayList: boolean isEmpty()>","<androidx.fragment.app.FragmentTransition: void scheduleTargetChange(androidx.fragment.app.FragmentTransitionImpl,android.view.ViewGroup,androidx.fragment.app.Fragment,android.view.View,java.util.ArrayList,java.lang.Object,java.util.ArrayList,java.lang.Object,java.util.ArrayList)>","<androidx.fragment.app.FragmentTransition: java.lang.Object getExitTransition(androidx.fragment.app.FragmentTransitionImpl,androidx.fragment.app.Fragment,boolean)>","<androidx.fragment.app.FragmentActivity$HostCallbacks: boolean onHasView()>","<java.util.ArrayList: void <init>()>","<androidx.fragment.app.FragmentTransition: java.util.ArrayList configureEnteringExitingViews(androidx.fragment.app.FragmentTransitionImpl,java.lang.Object,androidx.fragment.app.Fragment,java.util.ArrayList,android.view.View)>","<androidx.fragment.app.FragmentTransition: void <clinit>()>","<androidx.fragment.app.FragmentTransitionCompat21: void addTarget(java.lang.Object,android.view.View)>","<androidx.fragment.app.FragmentTransitionCompat21: void scheduleRemoveTargets(java.lang.Object,java.lang.Object,java.util.ArrayList,java.lang.Object,java.util.ArrayList,java.lang.Object,java.util.ArrayList)>","<androidx.fragment.app.FragmentTransition: java.lang.Object configureSharedElementsOrdered(androidx.fragment.app.FragmentTransitionImpl,android.view.ViewGroup,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,java.util.ArrayList,java.util.ArrayList,java.lang.Object,java.lang.Object)>","<androidx.fragment.app.FragmentActivity$HostCallbacks: android.view.View onFindViewById(int)>"],"<com.afollestad.photoaffix.views.MainActivity: void setupMainGrid(android.os.Bundle)>":["<com.afollestad.photoaffix.views.MainActivity: android.view.View _$_findCachedViewById(int)>","<com.afollestad.photoaffix.adapters.PhotoGridAdapter: void restoreInstanceState(android.os.Bundle)>","<androidx.recyclerview.widget.DefaultItemAnimator: void <init>()>","<android.content.res.Resources: int getInteger(int)>","<androidx.recyclerview.widget.GridLayoutManager: void <init>(android.content.Context,int)>","<com.afollestad.photoaffix.adapters.PhotoGridAdapter: void onSelection(kotlin.jvm.functions.Function2)>","<com.afollestad.dragselectrecyclerview.DragSelectTouchListener$Companion: com.afollestad.dragselectrecyclerview.DragSelectTouchListener create$default(com.afollestad.dragselectrecyclerview.DragSelectTouchListener$Companion,android.content.Context,com.afollestad.dragselectrecyclerview.DragSelectReceiver,kotlin.jvm.functions.Function1,int,java.lang.Object)>","<androidx.recyclerview.widget.SimpleItemAnimator: void setSupportsChangeAnimations(boolean)>","<com.afollestad.photoaffix.adapters.PhotoGridAdapter: void <init>(com.afollestad.photoaffix.views.MainActivity)>","<com.afollestad.photoaffix.views.MainActivity$setupMainGrid$1: void <init>(com.afollestad.photoaffix.views.MainActivity)>","<com.afollestad.dragselectrecyclerview.DragSelectTouchListener: void <clinit>()>","<androidx.appcompat.app.AppCompatActivity: android.content.res.Resources getResources()>","<kotlin.jvm.internal.Intrinsics: void throwUninitializedPropertyAccessException(java.lang.String)>","<com.afollestad.photoaffix.adapters.PhotoGridAdapter: void <clinit>()>","<kotlin.jvm.internal.Intrinsics: void checkExpressionValueIsNotNull(java.lang.Object,java.lang.String)>","<com.afollestad.photoaffix.adapters.PhotoGridAdapter: void setDragListener(com.afollestad.dragselectrecyclerview.DragSelectTouchListener)>"],"<androidx.core.graphics.drawable.DrawableCompat: void setAutoMirrored(android.graphics.drawable.Drawable,boolean)>":["<androidx.core.graphics.drawable.WrappedDrawableApi14: void setAutoMirrored(boolean)>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void setAutoMirrored(boolean)>","<android.os.Build$VERSION: void <clinit>()>","<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: void setAutoMirrored(boolean)>","<android.graphics.drawable.LayerDrawable: void setAutoMirrored(boolean)>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: void setAutoMirrored(boolean)>"],"<io.reactivex.schedulers.Schedulers$SingleTask: void <init>()>":["<java.lang.Object: void <init>()>"],"<java.lang.NullPointerException: void <init>()>":["<java.lang.RuntimeException: void <init>(java.lang.String)>","<java.lang.RuntimeException: void <init>()>"],"<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: void updateLocalMatrix()>":["<android.graphics.Matrix: boolean postRotate(float,float,float)>","<android.graphics.Matrix: boolean postScale(float,float)>","<android.graphics.Matrix: boolean postTranslate(float,float)>","<android.graphics.Matrix: void reset()>"],"<kotlin.jvm.internal.TypeIntrinsics: void throwCce(java.lang.Object,java.lang.String)>":["<java.lang.Object: java.lang.Class getClass()>","<java.lang.StringBuilder: java.lang.String toString()>","<java.lang.StringBuilder: void <init>()>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<kotlin.jvm.internal.TypeIntrinsics: void throwCce(java.lang.String)>"],"<io.reactivex.Observable: io.reactivex.Observable startWith(java.lang.Object)>":["<io.reactivex.Observable: io.reactivex.Observable just(java.lang.Object)>","<io.reactivex.internal.functions.ObjectHelper: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>","<io.reactivex.Observable: io.reactivex.Observable concatArray(io.reactivex.ObservableSource[])>","<io.reactivex.internal.functions.ObjectHelper: void <clinit>()>"],"<io.reactivex.internal.schedulers.SchedulerPoolFactory: java.util.concurrent.ScheduledExecutorService create(java.util.concurrent.ThreadFactory)>":["<io.reactivex.internal.schedulers.SchedulerPoolFactory: void <clinit>()>","<io.reactivex.internal.schedulers.SchedulerPoolFactory: void tryPutIntoPool(boolean,java.util.concurrent.ScheduledExecutorService)>","<java.util.concurrent.Executors: java.util.concurrent.ScheduledExecutorService newScheduledThreadPool(int,java.util.concurrent.ThreadFactory)>"],"<kotlinx.coroutines.internal.LockFreeTaskQueueCore$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>":["<kotlinx.coroutines.internal.LockFreeTaskQueueCore$Companion: void <init>()>"],"<kotlinx.coroutines.internal.ConcurrentKt: void <clinit>()>":["<java.lang.Boolean: void <clinit>()>","<kotlinx.coroutines.internal.ConcurrentKt: void <clinit>()>","<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>"],"<kotlinx.coroutines.scheduling.DefaultScheduler: void <init>()>":["<kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher: void <init>(int,int,java.lang.String,int,kotlin.jvm.internal.DefaultConstructorMarker)>"],"<androidx.recyclerview.widget.RecyclerView$LayoutManager: void <init>()>":["<androidx.recyclerview.widget.RecyclerView$LayoutManager$2: void <init>(androidx.recyclerview.widget.RecyclerView$LayoutManager)>","<androidx.recyclerview.widget.RecyclerView$LayoutManager$1: void <init>(androidx.recyclerview.widget.RecyclerView$LayoutManager)>","<java.lang.Object: void <init>()>","<androidx.recyclerview.widget.ViewBoundsCheck: void <init>(androidx.recyclerview.widget.ViewBoundsCheck$Callback)>"],"<androidx.appcompat.widget.AppCompatDrawableManager$AvdcInflateDelegate: android.graphics.drawable.Drawable createFromXmlInner(android.content.Context,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>":["<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat createFromXmlInner(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>","<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>","<androidx.appcompat.app.AppCompatActivity: android.content.res.Resources getResources()>"],"<com.afollestad.photoaffix.engine.photos.Photo: void <init>(long,java.lang.String,long,kotlin.jvm.functions.Function1,int,kotlin.jvm.internal.DefaultConstructorMarker)>":["<com.afollestad.photoaffix.engine.photos.PhotoKt: void <clinit>()>","<com.afollestad.photoaffix.engine.photos.Photo: void <init>(long,java.lang.String,long,kotlin.jvm.functions.Function1)>","<com.afollestad.photoaffix.engine.photos.PhotoKt: kotlin.jvm.functions.Function1 getDefaultUriParser()>"],"<java.lang.Boolean: boolean parseBoolean(java.lang.String)>":["<java.lang.RuntimeException: void <init>(java.lang.String)>"],"<kotlinx.coroutines.CoroutineId: java.lang.Object updateThreadContext(kotlin.coroutines.CoroutineContext)>":["<kotlinx.coroutines.CoroutineId: java.lang.String updateThreadContext(kotlin.coroutines.CoroutineContext)>"],"<com.afollestad.photoaffix.views.MainActivity: void <init>()>":["<androidx.appcompat.app.AppCompatActivity: void <init>()>"],"<androidx.vectordrawable.graphics.drawable.VectorDrawableCommon: void setChangingConfigurations(int)>":["<android.graphics.drawable.Drawable: void setChangingConfigurations(int)>","<androidx.core.graphics.drawable.WrappedDrawableApi14: void setChangingConfigurations(int)>","<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: void setChangingConfigurations(int)>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void setChangingConfigurations(int)>"],"<androidx.recyclerview.widget.OrientationHelper$1: void <init>(androidx.recyclerview.widget.RecyclerView$LayoutManager)>":["<androidx.recyclerview.widget.OrientationHelper: void <init>(androidx.recyclerview.widget.RecyclerView$LayoutManager,androidx.recyclerview.widget.OrientationHelper$1)>"],"<kotlinx.coroutines.ChildContinuation: java.lang.Object invoke(java.lang.Object)>":["<kotlinx.coroutines.ChildContinuation: void invoke(java.lang.Throwable)>","<kotlin.Unit: void <clinit>()>"],"<androidx.fragment.app.BackStackState: void <init>(androidx.fragment.app.BackStackRecord)>":["<java.lang.IllegalStateException: void <init>(java.lang.String)>","<java.lang.Object: void <init>()>"],"<kotlinx.coroutines.CoroutineExceptionHandlerKt: void handleCoroutineException(kotlin.coroutines.CoroutineContext,java.lang.Throwable,kotlinx.coroutines.Job)>":["<kotlin.coroutines.CombinedContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>","<kotlinx.coroutines.CoroutineId: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>","<kotlinx.coroutines.JobSupport: boolean cancel(java.lang.Throwable)>","<kotlinx.coroutines.CoroutineDispatcher: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<kotlinx.coroutines.JobSupport: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>","<kotlinx.coroutines.CoroutineExceptionHandlerKt: void handleExceptionViaHandler(kotlin.coroutines.CoroutineContext,java.lang.Throwable)>","<kotlin.coroutines.EmptyCoroutineContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>","<kotlinx.coroutines.Job: void <clinit>()>"],"<io.reactivex.schedulers.Schedulers$SingleTask: io.reactivex.Scheduler call()>":["<io.reactivex.schedulers.Schedulers$SingleHolder: void <clinit>()>"],"<androidx.core.graphics.drawable.WrappedDrawableApi14$DrawableWrapperStateBase: void <init>(androidx.core.graphics.drawable.WrappedDrawableApi14$DrawableWrapperState,android.content.res.Resources)>":["<androidx.core.graphics.drawable.WrappedDrawableApi14$DrawableWrapperState: void <init>(androidx.core.graphics.drawable.WrappedDrawableApi14$DrawableWrapperState,android.content.res.Resources)>"],"<kotlinx.coroutines.JobSupport: boolean start()>":["<kotlinx.coroutines.JobSupport: java.lang.Object getState$kotlinx_coroutines_core()>","<kotlinx.coroutines.JobSupport: int startInternal(java.lang.Object)>"],"<com.afollestad.assent.internal.ExtensionsKt: java.lang.String[] allValues(java.util.List)>":["<kotlin.collections.EmptyIterator: java.lang.Object next()>","<kotlin.collections.EmptyList: java.util.Iterator iterator()>","<java.util.ArrayList: void <init>(int)>","<java.util.ArrayList: boolean add(java.lang.Object)>","<kotlin.collections.EmptyIterator: boolean hasNext()>","<kotlin.collections.EmptyList: boolean add(java.lang.Object)>","<java.util.ArrayList: java.util.Iterator iterator()>","<java.lang.String: void <clinit>()>","<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>","<kotlin.TypeCastException: void <init>(java.lang.String)>","<kotlin.collections.CollectionsKt__IterablesKt: int collectionSizeOrDefault(java.lang.Iterable,int)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<kotlin.collections.EmptyList: java.lang.Object[] toArray(java.lang.Object[])>"],"<androidx.collection.ArraySet: boolean add(java.lang.Object)>":["<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>","<androidx.collection.ArraySet: int indexOf(java.lang.Object,int)>","<java.lang.System: void <clinit>()>","<androidx.collection.ArraySet: int indexOfNull()>","<androidx.collection.ArraySet: void allocArrays(int)>","<androidx.collection.ArraySet: void <clinit>()>","<androidx.collection.ArraySet: void freeArrays(int[],java.lang.Object[],int)>"],"<androidx.appcompat.graphics.drawable.DrawableContainer$BlockInvalidateCallback: void <init>()>":["<java.lang.Object: void <init>()>"],"<androidx.core.graphics.drawable.WrappedDrawableApi21: boolean isCompatTintEnabled()>":["<android.os.Build$VERSION: void <clinit>()>"],"<androidx.lifecycle.LifecycleRegistry: void backwardPass(androidx.lifecycle.LifecycleOwner)>":["<androidx.lifecycle.LifecycleRegistry: androidx.lifecycle.Lifecycle$Event downEvent(androidx.lifecycle.Lifecycle$State)>","<androidx.arch.core.internal.FastSafeIterableMap: boolean contains(java.lang.Object)>","<java.lang.Enum: int compareTo(java.lang.Enum)>","<androidx.arch.core.internal.SafeIterableMap: java.util.Iterator descendingIterator()>","<androidx.arch.core.internal.SafeIterableMap$ListIterator: boolean hasNext()>","<androidx.lifecycle.LifecycleRegistry: void pushParentState(androidx.lifecycle.Lifecycle$State)>","<androidx.lifecycle.LifecycleRegistry: androidx.lifecycle.Lifecycle$State getStateAfter(androidx.lifecycle.Lifecycle$Event)>","<androidx.arch.core.internal.SafeIterableMap$ListIterator: java.lang.Object next()>","<androidx.lifecycle.LifecycleRegistry: void popParentState()>"],"<androidx.fragment.app.FragmentManagerImpl: void dispatchDestroy()>":["<androidx.fragment.app.FragmentManagerImpl: boolean execPendingActions()>","<androidx.fragment.app.FragmentManagerImpl: void dispatchStateChange(int)>"],"<kotlin.Result: void <clinit>()>":["<kotlin.Result: void <clinit>()>","<kotlin.Result$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>"],"<kotlinx.coroutines.AbstractCoroutine: boolean isActive()>":["<kotlinx.coroutines.JobSupport: boolean isActive()>"],"<kotlin.text.StringsKt__StringsJVMKt: boolean startsWith$default(java.lang.String,java.lang.String,boolean,int,java.lang.Object)>":["<kotlin.text.StringsKt__StringsJVMKt: boolean startsWith(java.lang.String,java.lang.String,boolean)>"],"<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: void jumpToCurrentState()>":["<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimationDrawableTransition: void stop()>","<androidx.appcompat.graphics.drawable.DrawableContainer: void jumpToCurrentState()>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatedVectorDrawableTransition: void stop()>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatableTransition: void stop()>","<androidx.appcompat.graphics.drawable.DrawableContainer: boolean selectDrawable(int)>"],"<kotlinx.coroutines.internal.ThreadContextKt$restoreState$1: java.lang.Object invoke(java.lang.Object,java.lang.Object)>":["<kotlinx.coroutines.internal.ThreadContextKt$restoreState$1: kotlinx.coroutines.internal.ThreadState invoke(kotlinx.coroutines.internal.ThreadState,kotlin.coroutines.CoroutineContext$Element)>"],"<kotlinx.coroutines.internal.LockFreeTaskQueueCore: kotlinx.coroutines.internal.LockFreeTaskQueueCore removeSlowPath(int,int)>":["<java.lang.IllegalStateException: void <init>(java.lang.String)>","<kotlinx.coroutines.internal.LockFreeTaskQueueCore$Companion: long updateHead(long,int)>","<kotlinx.coroutines.internal.LockFreeTaskQueueCore: void <clinit>()>","<kotlinx.coroutines.internal.LockFreeTaskQueueCore: kotlinx.coroutines.internal.LockFreeTaskQueueCore next()>","<java.lang.String: java.lang.String toString()>","<java.util.concurrent.atomic.AtomicReferenceArray: void set(int,java.lang.Object)>"],"<kotlinx.coroutines.LazyStandaloneCoroutine: void <init>(kotlin.coroutines.CoroutineContext,kotlin.jvm.functions.Function2)>":["<kotlinx.coroutines.StandaloneCoroutine: void <init>(kotlin.coroutines.CoroutineContext,boolean)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<androidx.fragment.app.FragmentManagerImpl: void executeOps(java.util.ArrayList,java.util.ArrayList,int,int)>":["<java.util.ArrayList: java.lang.Object get(int)>"],"<java.lang.String: java.lang.String valueOf(int)>":["<java.lang.RuntimeException: void <init>(java.lang.String)>"],"<io.reactivex.internal.schedulers.ComputationScheduler$FixedSchedulerPool: void <init>(int,java.util.concurrent.ThreadFactory)>":["<java.lang.Object: void <init>()>","<io.reactivex.internal.schedulers.ComputationScheduler$PoolWorker: void <init>(java.util.concurrent.ThreadFactory)>"],"<kotlinx.coroutines.BuildersKt: kotlinx.coroutines.Job launch(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.CoroutineContext,kotlinx.coroutines.CoroutineStart,kotlin.jvm.functions.Function2)>":["<kotlinx.coroutines.BuildersKt__Builders_commonKt: kotlinx.coroutines.Job launch(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.CoroutineContext,kotlinx.coroutines.CoroutineStart,kotlin.jvm.functions.Function2)>"],"<kotlinx.coroutines.internal.LockFreeTaskQueueCore: void <init>(int,boolean)>":["<java.lang.IllegalStateException: void <init>(java.lang.String)>","<java.lang.Object: void <init>()>","<java.lang.String: java.lang.String toString()>","<java.util.concurrent.atomic.AtomicReferenceArray: void <init>(int)>"],"<io.reactivex.schedulers.Schedulers$IOTask: void <init>()>":["<java.lang.Object: void <init>()>"],"<java.lang.Class: java.lang.String getName()>":["<java.lang.RuntimeException: void <init>(java.lang.String)>"],"<kotlinx.coroutines.CoroutineId: void restoreThreadContext(kotlin.coroutines.CoroutineContext,java.lang.Object)>":["<kotlinx.coroutines.CoroutineId: void restoreThreadContext(kotlin.coroutines.CoroutineContext,java.lang.String)>"],"<com.afollestad.rxkprefs.adapters.BooleanAdapter: void <clinit>()>":["<com.afollestad.rxkprefs.adapters.BooleanAdapter: void <clinit>()>","<com.afollestad.rxkprefs.adapters.BooleanAdapter$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>","<com.afollestad.rxkprefs.adapters.BooleanAdapter: void <init>()>"],"<io.reactivex.internal.operators.observable.ObservableEmpty: void <init>()>":["<io.reactivex.Observable: void <init>()>"],"<com.afollestad.materialdialogs.utils.MDUtil: java.lang.CharSequence resolveString(com.afollestad.materialdialogs.MaterialDialog,java.lang.Integer,java.lang.Integer,boolean)>":["<com.afollestad.materialdialogs.utils.MDUtil: java.lang.CharSequence resolveString(android.content.Context,java.lang.Integer,java.lang.Integer,boolean)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<com.afollestad.materialdialogs.MaterialDialog: android.content.Context getWindowContext()>"],"<kotlinx.coroutines.JobSupportKt: kotlinx.coroutines.internal.Symbol access$getSEALED$p()>":["<kotlinx.coroutines.JobSupportKt: void <clinit>()>"],"<kotlinx.coroutines.CommonPool: void <init>()>":["<kotlinx.coroutines.ExecutorCoroutineDispatcher: void <init>()>"],"<dagger.internal.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>":["<java.lang.NullPointerException: void <init>(java.lang.String)>"],"<kotlinx.coroutines.internal.LockFreeTaskQueueCore: long markFrozen()>":["<kotlinx.coroutines.internal.LockFreeTaskQueueCore: void <clinit>()>"],"<androidx.fragment.app.FragmentManagerImpl: void startPendingDeferredFragments()>":["<android.util.SparseArray: int size()>","<android.util.SparseArray: java.lang.Object valueAt(int)>","<androidx.fragment.app.FragmentManagerImpl: void performPendingDeferredStart(androidx.fragment.app.Fragment)>"],"<com.afollestad.photoaffix.engine.subengines.RealStitchEngine$canvasCreator$1: void <clinit>()>":["<com.afollestad.photoaffix.engine.subengines.RealStitchEngine$canvasCreator$1: void <init>()>","<com.afollestad.photoaffix.engine.subengines.RealStitchEngine$canvasCreator$1: void <clinit>()>"],"<com.afollestad.photoaffix.engine.RealAffixEngine_Factory: com.afollestad.photoaffix.engine.RealAffixEngine get()>":["<com.afollestad.photoaffix.engine.RealAffixEngine_Factory: com.afollestad.photoaffix.engine.RealAffixEngine provideInstance(javax.inject.Provider,javax.inject.Provider,javax.inject.Provider,javax.inject.Provider)>"],"<kotlin.collections.EmptyList: java.util.Iterator iterator()>":["<kotlin.collections.EmptyIterator: void <clinit>()>"],"<androidx.vectordrawable.graphics.drawable.ArgbEvaluator: androidx.vectordrawable.graphics.drawable.ArgbEvaluator getInstance()>":["<androidx.vectordrawable.graphics.drawable.ArgbEvaluator: void <clinit>()>"],"<kotlin.coroutines.EmptyCoroutineContext: void <init>()>":["<java.lang.Object: void <init>()>"],"<androidx.appcompat.widget.ThemeUtils: android.content.res.ColorStateList getThemeAttrColorStateList(android.content.Context,int)>":["<androidx.appcompat.widget.TintTypedArray: androidx.appcompat.widget.TintTypedArray obtainStyledAttributes(android.content.Context,android.util.AttributeSet,int[])>","<androidx.appcompat.widget.ThemeUtils: void <clinit>()>","<androidx.appcompat.widget.TintTypedArray: void recycle()>","<androidx.appcompat.widget.TintTypedArray: android.content.res.ColorStateList getColorStateList(int)>"],"<androidx.core.graphics.drawable.WrappedDrawableApi21: boolean setState(int[])>":["<android.graphics.drawable.Drawable: void invalidateSelf()>","<androidx.core.graphics.drawable.WrappedDrawableApi14: boolean setState(int[])>"],"<dagger.internal.DoubleCheck: void <init>(javax.inject.Provider)>":["<java.lang.Object: void <init>()>","<dagger.internal.DoubleCheck: void <clinit>()>"],"<androidx.fragment.app.FragmentController: android.os.Parcelable saveAllState()>":["<androidx.fragment.app.FragmentManagerImpl: android.os.Parcelable saveAllState()>"],"<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: boolean setVisible(boolean,boolean)>":["<android.graphics.drawable.Drawable: boolean setVisible(boolean,boolean)>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: boolean setVisible(boolean,boolean)>"],"<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable$ConstantState getConstantState()>":["<android.graphics.drawable.LayerDrawable: android.graphics.drawable.Drawable$ConstantState getConstantState()>","<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: android.graphics.drawable.Drawable$ConstantState getConstantState()>","<android.os.Build$VERSION: void <clinit>()>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: int getChangingConfigurations()>","<androidx.appcompat.graphics.drawable.DrawableContainer: android.graphics.drawable.Drawable$ConstantState getConstantState()>","<androidx.core.graphics.drawable.WrappedDrawableApi14: android.graphics.drawable.Drawable$ConstantState getConstantState()>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable$ConstantState getConstantState()>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableDelegateState: void <init>(android.graphics.drawable.Drawable$ConstantState)>"],"<kotlinx.coroutines.BuildersKt: kotlinx.coroutines.Deferred async(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.CoroutineContext,kotlinx.coroutines.CoroutineStart,kotlin.jvm.functions.Function2)>":["<kotlinx.coroutines.BuildersKt__Builders_commonKt: kotlinx.coroutines.Deferred async(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.CoroutineContext,kotlinx.coroutines.CoroutineStart,kotlin.jvm.functions.Function2)>"],"<androidx.collection.MapCollections: java.util.Collection getValues()>":["<androidx.collection.MapCollections$ValuesCollection: void <init>(androidx.collection.MapCollections)>"],"<com.afollestad.materialdialogs.utils.FontExtKt: android.graphics.Typeface font(com.afollestad.materialdialogs.MaterialDialog,java.lang.Integer,java.lang.Integer)>":["<java.lang.IllegalArgumentException: void <init>(java.lang.String)>","<com.afollestad.materialdialogs.MaterialDialogKt: void assertOneSet(java.lang.String,java.lang.Object,java.lang.Integer)>","<java.lang.String: java.lang.String toString()>","<android.view.ContextThemeWrapper: android.content.res.Resources$Theme getTheme()>","<androidx.core.content.res.ResourcesCompat: android.graphics.Typeface getFont(android.content.Context,int)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<com.afollestad.materialdialogs.MaterialDialog: android.content.Context getWindowContext()>"],"<com.afollestad.materialdialogs.utils.DimensExtKt: float dimen$default(com.afollestad.materialdialogs.MaterialDialog,java.lang.Integer,java.lang.Integer,float,int,java.lang.Object)>":["<androidx.appcompat.app.AppCompatActivity: android.content.res.Resources getResources()>","<com.afollestad.materialdialogs.utils.DimensExtKt: float dimen(com.afollestad.materialdialogs.MaterialDialog,java.lang.Integer,java.lang.Integer,float)>","<android.content.res.Resources: float getDimension(int)>","<com.afollestad.materialdialogs.MaterialDialog: android.content.Context getWindowContext()>"],"<androidx.vectordrawable.graphics.drawable.PathInterpolatorCompat: void <init>(android.content.Context,android.util.AttributeSet,org.xmlpull.v1.XmlPullParser)>":["<androidx.appcompat.app.AppCompatActivity: android.content.res.Resources getResources()>","<androidx.vectordrawable.graphics.drawable.PathInterpolatorCompat: void <init>(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,org.xmlpull.v1.XmlPullParser)>","<android.view.ContextThemeWrapper: android.content.res.Resources$Theme getTheme()>"],"<androidx.core.graphics.TypefaceCompatApi24Impl: java.lang.Object newFamily()>":["<androidx.core.graphics.TypefaceCompatApi24Impl: void <clinit>()>","<java.lang.RuntimeException: void <init>(java.lang.Throwable)>"],"<kotlinx.coroutines.UndispatchedEventLoop: void <clinit>()>":["<kotlinx.coroutines.internal.ThreadLocalWithInitialValue: void <init>(kotlin.jvm.functions.Function0)>","<kotlinx.coroutines.UndispatchedEventLoop: void <clinit>()>","<kotlinx.coroutines.UndispatchedEventLoop: void <init>()>","<kotlinx.coroutines.UndispatchedEventLoop$threadLocalEventLoop$1: void <clinit>()>"],"<com.afollestad.assent.internal.Queue: boolean push(java.lang.Object)>":["<java.util.ArrayList: boolean add(java.lang.Object)>"],"<kotlinx.coroutines.JobSupportKt: void <clinit>()>":["<kotlinx.coroutines.internal.Symbol: void <init>(java.lang.String)>","<kotlinx.coroutines.Empty: void <init>(boolean)>","<kotlinx.coroutines.JobSupportKt: void <clinit>()>"],"<com.afollestad.photoaffix.di.AppProvideModule_ProvideAppNameFactory: com.afollestad.photoaffix.di.AppProvideModule_ProvideAppNameFactory create(com.afollestad.photoaffix.di.AppProvideModule,javax.inject.Provider)>":["<com.afollestad.photoaffix.di.AppProvideModule_ProvideAppNameFactory: void <init>(com.afollestad.photoaffix.di.AppProvideModule,javax.inject.Provider)>"],"<com.afollestad.photoaffix.engine.photos.RealPhotoLoader_Factory: void <init>(javax.inject.Provider)>":["<java.lang.Object: void <init>()>"],"<androidx.core.graphics.PathParser$PathDataNode: void nodesToPath(androidx.core.graphics.PathParser$PathDataNode[],android.graphics.Path)>":["<androidx.core.graphics.PathParser$PathDataNode: void addCommand(android.graphics.Path,float[],char,char,float[])>"],"<kotlinx.coroutines.Job$Key: void <clinit>()>":["<kotlinx.coroutines.Job$Key: void <clinit>()>","<kotlinx.coroutines.CoroutineExceptionHandler: void <clinit>()>","<kotlinx.coroutines.Job$Key: void <init>()>"],"<androidx.fragment.app.FragmentManagerImpl: int postponePostponableTransactions(java.util.ArrayList,java.util.ArrayList,int,int,androidx.collection.ArraySet)>":["<androidx.fragment.app.FragmentManagerImpl$StartEnterTransitionListener: void <init>(androidx.fragment.app.BackStackRecord,boolean)>","<java.util.ArrayList: java.lang.Object remove(int)>","<java.util.ArrayList: void add(int,java.lang.Object)>","<java.util.ArrayList: void <init>()>","<java.util.ArrayList: boolean add(java.lang.Object)>","<androidx.fragment.app.FragmentManagerImpl: void addAddedFragments(androidx.collection.ArraySet)>","<java.util.ArrayList: java.lang.Object get(int)>"],"<androidx.core.graphics.TypefaceCompatBaseImpl: android.graphics.Typeface createFromFontFamilyFilesResourceEntry(android.content.Context,androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry,android.content.res.Resources,int)>":["<androidx.core.graphics.TypefaceCompat: android.graphics.Typeface createFromResourcesFontFile(android.content.Context,android.content.res.Resources,int,java.lang.String,int)>","<androidx.core.graphics.TypefaceCompatBaseImpl: androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry findBestEntry(androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry,int)>","<androidx.core.graphics.TypefaceCompat: void <clinit>()>"],"<androidx.recyclerview.widget.RecyclerView$ItemAnimator: void <init>()>":["<java.lang.Object: void <init>()>","<java.util.ArrayList: void <init>()>"],"<com.afollestad.photoaffix.di.AppProvideModule_ProvideAppNameFactory: void <init>(com.afollestad.photoaffix.di.AppProvideModule,javax.inject.Provider)>":["<java.lang.Object: void <init>()>"],"<kotlin.ranges.IntRange$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>":["<kotlin.ranges.IntRange$Companion: void <init>()>"],"<com.afollestad.materialdialogs.utils.ViewExtKt: java.lang.Object inflate(com.afollestad.materialdialogs.MaterialDialog,int,android.view.ViewGroup)>":["<android.view.LayoutInflater: android.view.LayoutInflater 'from'(android.content.Context)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<com.afollestad.materialdialogs.MaterialDialog: android.content.Context getWindowContext()>"],"<androidx.fragment.app.FragmentTransition$1: void <init>(java.util.ArrayList)>":["<java.lang.Object: void <init>()>"],"<com.afollestad.photoaffix.dialogs.ImageSizingDialog$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>":["<com.afollestad.photoaffix.dialogs.ImageSizingDialog$Companion: void <init>()>"],"<kotlinx.coroutines.scheduling.LimitingDispatcher: void <clinit>()>":["<kotlinx.coroutines.scheduling.LimitingDispatcher: void <clinit>()>","<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: java.util.concurrent.atomic.AtomicIntegerFieldUpdater newUpdater(java.lang.Class,java.lang.String)>"],"<kotlin.coroutines.jvm.internal.CompletedContinuation: void <clinit>()>":["<kotlin.coroutines.jvm.internal.CompletedContinuation: void <init>()>","<kotlin.coroutines.jvm.internal.CompletedContinuation: void <clinit>()>"],"<com.afollestad.photoaffix.engine.photos.RealPhotoLoader_Factory: java.lang.Object get()>":["<com.afollestad.photoaffix.engine.photos.RealPhotoLoader_Factory: com.afollestad.photoaffix.engine.photos.RealPhotoLoader get()>"],"<com.afollestad.photoaffix.engine.subengines.RealStitchEngine_Factory: com.afollestad.photoaffix.engine.subengines.RealStitchEngine_Factory create(javax.inject.Provider,javax.inject.Provider,javax.inject.Provider,javax.inject.Provider,javax.inject.Provider,javax.inject.Provider,javax.inject.Provider)>":["<com.afollestad.photoaffix.engine.subengines.RealStitchEngine_Factory: void <init>(javax.inject.Provider,javax.inject.Provider,javax.inject.Provider,javax.inject.Provider,javax.inject.Provider,javax.inject.Provider,javax.inject.Provider)>"],"<kotlin.Result$Failure: void <init>(java.lang.Throwable)>":["<java.lang.Object: void <init>()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<io.reactivex.internal.schedulers.IoScheduler$CachedWorkerPool: void shutdown()>":["<io.reactivex.disposables.CompositeDisposable: void dispose()>"],"<io.reactivex.internal.functions.Functions: void <clinit>()>":["<io.reactivex.internal.functions.Functions$Identity: void <init>()>","<io.reactivex.internal.functions.Functions$NaturalObjectComparator: void <init>()>","<io.reactivex.internal.functions.Functions$EmptyConsumer: void <init>()>","<io.reactivex.internal.functions.Functions$TruePredicate: void <init>()>","<io.reactivex.internal.functions.Functions$EmptyLongConsumer: void <init>()>","<io.reactivex.internal.functions.Functions$FalsePredicate: void <init>()>","<io.reactivex.internal.functions.Functions: void <clinit>()>","<io.reactivex.internal.functions.Functions$MaxRequestSubscription: void <init>()>","<io.reactivex.internal.functions.Functions$EmptyRunnable: void <init>()>","<io.reactivex.internal.functions.Functions$NullCallable: void <init>()>","<io.reactivex.internal.functions.Functions$ErrorConsumer: void <init>()>","<io.reactivex.internal.functions.Functions$OnErrorMissingConsumer: void <init>()>","<io.reactivex.internal.functions.Functions$EmptyAction: void <init>()>"],"<androidx.core.view.LayoutInflaterCompat: void forceSetFactory2(android.view.LayoutInflater,android.view.LayoutInflater$Factory2)>":["<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>","<java.lang.StringBuilder: java.lang.String toString()>","<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>","<java.lang.StringBuilder: void <init>()>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>","<java.lang.Class: java.lang.String getName()>"],"<androidx.core.view.ViewPropertyAnimatorListenerAdapter: void <init>()>":["<java.lang.Object: void <init>()>"],"<kotlin.coroutines.jvm.internal.ContinuationImpl: void <init>(kotlin.coroutines.Continuation)>":["<kotlin.coroutines.jvm.internal.CompletedContinuation: kotlin.coroutines.CoroutineContext getContext()>","<kotlin.coroutines.jvm.internal.ContinuationImpl: kotlin.coroutines.CoroutineContext getContext()>","<kotlin.coroutines.jvm.internal.RestrictedContinuationImpl: kotlin.coroutines.CoroutineContext getContext()>","<kotlinx.coroutines.DispatchedContinuation: kotlin.coroutines.CoroutineContext getContext()>","<kotlin.coroutines.jvm.internal.ContinuationImpl: void <init>(kotlin.coroutines.Continuation,kotlin.coroutines.CoroutineContext)>","<kotlinx.coroutines.AbstractCoroutine: kotlin.coroutines.CoroutineContext getContext()>"],"<androidx.core.graphics.drawable.WrappedDrawableApi21: void setTintList(android.content.res.ColorStateList)>":["<androidx.core.graphics.drawable.WrappedDrawableApi21: boolean isCompatTintEnabled()>","<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: void setTintList(android.content.res.ColorStateList)>","<androidx.core.graphics.drawable.WrappedDrawableApi14: void setTintList(android.content.res.ColorStateList)>","<androidx.core.graphics.drawable.WrappedDrawableApi21: void setTintList(android.content.res.ColorStateList)>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void setTintList(android.content.res.ColorStateList)>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: void setTintList(android.content.res.ColorStateList)>","<android.graphics.drawable.LayerDrawable: void setTintList(android.content.res.ColorStateList)>"],"<androidx.core.provider.FontsContractCompat: androidx.core.provider.FontsContractCompat$TypefaceResult getFontInternal(android.content.Context,androidx.core.provider.FontRequest,int)>":["<androidx.core.graphics.TypefaceCompat: android.graphics.Typeface createFromFontInfo(android.content.Context,android.os.CancellationSignal,androidx.core.provider.FontsContractCompat$FontInfo[],int)>","<androidx.core.provider.FontsContractCompat: void <clinit>()>","<androidx.core.provider.FontsContractCompat: androidx.core.provider.FontsContractCompat$FontFamilyResult fetchFonts(android.content.Context,android.os.CancellationSignal,androidx.core.provider.FontRequest)>","<androidx.core.provider.FontsContractCompat$TypefaceResult: void <init>(android.graphics.Typeface,int)>","<androidx.core.provider.FontsContractCompat$FontFamilyResult: int getStatusCode()>","<androidx.core.provider.FontsContractCompat$FontFamilyResult: androidx.core.provider.FontsContractCompat$FontInfo[] getFonts()>","<androidx.core.graphics.TypefaceCompat: void <clinit>()>"],"<kotlinx.coroutines.CoroutineName: void <clinit>()>":["<kotlinx.coroutines.CoroutineName: void <clinit>()>","<kotlinx.coroutines.CoroutineName$Key: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>"],"<androidx.collection.SimpleArrayMap: boolean containsKey(java.lang.Object)>":["<androidx.collection.SimpleArrayMap: int indexOfKey(java.lang.Object)>"],"<kotlin._Assertions: void <clinit>()>":["<java.lang.Object: java.lang.Class getClass()>","<kotlin._Assertions: void <init>()>","<kotlin._Assertions: void <clinit>()>"],"<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatedStateListState: int indexOfKeyframe(int[])>":["<androidx.appcompat.graphics.drawable.StateListDrawable$StateListState: int indexOfStateSet(int[])>","<android.util.StateSet: void <clinit>()>"],"<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: int[] getState()>":["<androidx.vectordrawable.graphics.drawable.VectorDrawableCommon: int[] getState()>"],"<androidx.appcompat.widget.AppCompatDrawableManager: android.graphics.PorterDuffColorFilter getPorterDuffColorFilter(int,android.graphics.PorterDuff$Mode)>":["<androidx.appcompat.widget.AppCompatDrawableManager$ColorFilterLruCache: android.graphics.PorterDuffColorFilter get(int,android.graphics.PorterDuff$Mode)>","<android.graphics.PorterDuffColorFilter: void <init>(int,android.graphics.PorterDuff$Mode)>","<androidx.appcompat.widget.AppCompatDrawableManager$ColorFilterLruCache: android.graphics.PorterDuffColorFilter put(int,android.graphics.PorterDuff$Mode,android.graphics.PorterDuffColorFilter)>","<androidx.appcompat.widget.AppCompatDrawableManager: void <clinit>()>"],"<com.afollestad.photoaffix.adapters.PhotoGridAdapter: void restoreInstanceState(android.os.Bundle)>":["<kotlin.collections.ArraysKt___ArraysKt: java.util.List toMutableList(int[])>","<androidx.recyclerview.widget.RecyclerView$Adapter: void notifyDataSetChanged()>","<com.afollestad.photoaffix.adapters.PhotoGridAdapter: void setPhotos(java.util.List)>"],"<androidx.fragment.app.FragmentManagerImpl: boolean executePendingTransactions()>":["<androidx.fragment.app.FragmentManagerImpl: boolean execPendingActions()>","<androidx.fragment.app.FragmentManagerImpl: void forcePostponedTransactions()>"],"<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: void <init>()>":["<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPath: void <init>()>","<android.graphics.Paint$Cap: void <clinit>()>","<android.graphics.Paint$Join: void <clinit>()>"],"<com.afollestad.photoaffix.presenters.RealMainPresenter$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>":["<com.afollestad.photoaffix.presenters.RealMainPresenter$Companion: void <init>()>"],"<kotlinx.coroutines.internal.LockFreeLinkedListKt: kotlinx.coroutines.internal.LockFreeLinkedListNode unwrap(java.lang.Object)>":["<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<com.afollestad.photoaffix.utilities.RealIoManager: void <init>(android.app.Application,java.lang.String)>":["<java.lang.Object: void <init>()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<com.afollestad.materialdialogs.WhichButton: void <clinit>()>":["<com.afollestad.materialdialogs.WhichButton: void <init>(java.lang.String,int,int)>","<com.afollestad.materialdialogs.WhichButton$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>","<com.afollestad.materialdialogs.WhichButton: void <clinit>()>"],"<com.afollestad.assent.internal.PendingRequest: void <init>(java.util.List,int,java.util.List)>":["<java.lang.Object: void <init>()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: void inflateChildElements(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>":["<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: int parseTransition(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: int parseItem(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>"],"<io.reactivex.exceptions.CompositeException$PrintStreamOrWriter: void <init>()>":["<java.lang.Object: void <init>()>"],"<androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: android.animation.PropertyValuesHolder getPVH(android.content.res.TypedArray,int,int,int,java.lang.String)>":["<androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: boolean isColorType(int)>","<androidx.core.graphics.PathParser: androidx.core.graphics.PathParser$PathDataNode[] createNodesFromPathData(java.lang.String)>","<androidx.vectordrawable.graphics.drawable.ArgbEvaluator: androidx.vectordrawable.graphics.drawable.ArgbEvaluator getInstance()>","<android.view.InflateException: void <init>(java.lang.String)>","<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofFloat(java.lang.String,float[])>","<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofInt(java.lang.String,int[])>","<androidx.vectordrawable.graphics.drawable.ArgbEvaluator: void <clinit>()>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<java.lang.StringBuilder: void <init>()>","<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofObject(java.lang.String,android.animation.TypeEvaluator,java.lang.Object[])>","<java.lang.StringBuilder: java.lang.String toString()>","<androidx.core.graphics.PathParser: boolean canMorph(androidx.core.graphics.PathParser$PathDataNode[],androidx.core.graphics.PathParser$PathDataNode[])>","<androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat$PathDataEvaluator: void <init>()>"],"<androidx.fragment.app.FragmentManagerImpl: androidx.fragment.app.FragmentManagerImpl$AnimationOrAnimator makeOpenCloseAnimation(android.content.Context,float,float,float,float)>":["<android.view.animation.AnimationSet: void <init>(boolean)>","<android.view.animation.ScaleAnimation: void <init>(float,float,float,float,int,float,int,float)>","<android.view.animation.AlphaAnimation: void <init>(float,float)>","<androidx.fragment.app.FragmentManagerImpl: void <clinit>()>","<android.view.animation.Animation: void setInterpolator(android.view.animation.Interpolator)>","<androidx.fragment.app.FragmentManagerImpl$AnimationOrAnimator: void <init>(android.view.animation.Animation)>","<android.view.animation.Animation: void setDuration(long)>","<android.view.animation.AnimationSet: void addAnimation(android.view.animation.Animation)>"],"<androidx.core.graphics.drawable.WrappedDrawableApi14: void setDither(boolean)>":["<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: void setDither(boolean)>","<android.graphics.drawable.LayerDrawable: void setDither(boolean)>","<androidx.core.graphics.drawable.WrappedDrawableApi14: void setDither(boolean)>","<android.graphics.drawable.Drawable: void setDither(boolean)>"],"<androidx.collection.SimpleArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>":["<androidx.collection.SimpleArrayMap: void allocArrays(int)>","<java.util.ConcurrentModificationException: void <init>()>","<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>","<java.lang.String: int hashCode()>","<java.util.AbstractList: int hashCode()>","<java.lang.System: void <clinit>()>","<java.lang.Object: int hashCode()>","<androidx.collection.SimpleArrayMap: void freeArrays(int[],java.lang.Object[],int)>","<androidx.collection.SimpleArrayMap: int indexOf(java.lang.Object,int)>","<androidx.collection.SimpleArrayMap: int indexOfNull()>"],"<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>":["<java.lang.RuntimeException: void <init>(java.lang.String)>"],"<kotlinx.coroutines.EventLoopBase: void <init>()>":["<kotlinx.coroutines.CoroutineDispatcher: void <init>()>"],"<androidx.appcompat.app.TwilightCalculator: void calculateTwilight(long,double,double)>":["<java.lang.Math: double cos(double)>","<java.lang.Double: boolean isNaN(double)>","<java.lang.Math: long round(double)>","<java.lang.Double: void <clinit>()>","<java.lang.Math: double sin(double)>","<java.lang.Math: double asin(double)>","<java.lang.Math: double acos(double)>"],"<androidx.fragment.app.FragmentManagerImpl: void dispatchOnFragmentDetached(androidx.fragment.app.Fragment,boolean)>":["<java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>"],"<kotlinx.coroutines.internal.LockFreeLinkedListKt: void <clinit>()>":["<kotlinx.coroutines.internal.Symbol: void <init>(java.lang.String)>","<kotlinx.coroutines.internal.LockFreeLinkedListKt: void <clinit>()>"],"<androidx.appcompat.app.AppCompatActivity: void setTheme(int)>":["<android.app.Activity: void setTheme(int)>"],"<androidx.fragment.app.FragmentTransition: java.lang.Object mergeTransitions(androidx.fragment.app.FragmentTransitionImpl,java.lang.Object,java.lang.Object,java.lang.Object,androidx.fragment.app.Fragment,boolean)>":["<androidx.fragment.app.FragmentTransitionCompat21: java.lang.Object mergeTransitionsInSequence(java.lang.Object,java.lang.Object,java.lang.Object)>","<androidx.fragment.app.FragmentTransitionCompat21: java.lang.Object mergeTransitionsTogether(java.lang.Object,java.lang.Object,java.lang.Object)>"],"<com.afollestad.photoaffix.prefs.PrefsModule_ProvideImageSpacingVerticalPrefFactory: java.lang.Object get()>":["<com.afollestad.photoaffix.prefs.PrefsModule_ProvideImageSpacingVerticalPrefFactory: com.afollestad.rxkprefs.Pref get()>"],"<kotlin.collections.EmptyList: boolean add(java.lang.Object)>":["<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>"],"<androidx.appcompat.graphics.drawable.DrawableContainer: void setTintMode(android.graphics.PorterDuff$Mode)>":["<androidx.core.graphics.drawable.DrawableCompat: void setTintMode(android.graphics.drawable.Drawable,android.graphics.PorterDuff$Mode)>"],"<androidx.core.graphics.PathParser: float[] copyOfRange(float[],int,int)>":["<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>","<java.lang.Math: int min(int,int)>","<java.lang.System: void <clinit>()>","<java.lang.IllegalArgumentException: void <init>()>","<java.lang.ArrayIndexOutOfBoundsException: void <init>()>"],"<androidx.fragment.app.BackStackRecord: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>":["<androidx.fragment.app.BackStackRecord: void dump(java.lang.String,java.io.PrintWriter,boolean)>"],"<kotlin.collections.CollectionsKt__CollectionsKt: java.util.List mutableListOf(java.lang.Object[])>":["<java.util.ArrayList: void <init>(java.util.Collection)>","<java.util.ArrayList: void <init>()>","<kotlin.collections.ArrayAsCollection: void <init>(java.lang.Object[],boolean)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<kotlin.collections.EmptyList: java.lang.Object[] toArray(java.lang.Object[])>":["<kotlin.jvm.internal.CollectionToArray: java.lang.Object[] toArray(java.util.Collection,java.lang.Object[])>","<kotlin.jvm.internal.CollectionToArray: void <clinit>()>"],"<androidx.core.graphics.TypefaceCompatBaseImpl$1: int getWeight(java.lang.Object)>":["<androidx.core.graphics.TypefaceCompatBaseImpl$1: int getWeight(androidx.core.provider.FontsContractCompat$FontInfo)>"],"<androidx.fragment.app.FragmentManagerImpl: androidx.fragment.app.Fragment findFragmentUnder(androidx.fragment.app.Fragment)>":["<java.util.ArrayList: int indexOf(java.lang.Object)>","<java.util.ArrayList: java.lang.Object get(int)>"],"<kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt$createCoroutineUnintercepted$$inlined$createCoroutineFromSuspendFunction$IntrinsicsKt__IntrinsicsJvmKt$3: java.lang.Object invokeSuspend(java.lang.Object)>":["<kotlin.jvm.internal.TypeIntrinsics: java.lang.Object beforeCheckcastToFunctionOfArity(java.lang.Object,int)>","<com.afollestad.photoaffix.views.MainActivity$performAffix$1$1: java.lang.Object invoke(java.lang.Object,java.lang.Object)>","<java.lang.IllegalStateException: void <init>(java.lang.String)>","<java.lang.String: java.lang.String toString()>","<kotlin.TypeCastException: void <init>(java.lang.String)>","<com.afollestad.photoaffix.views.MainActivity$performAffix$1$1$sizingResult$1: java.lang.Object invoke(java.lang.Object,java.lang.Object)>","<kotlin.ResultKt: void throwOnFailure(java.lang.Object)>"],"<kotlinx.coroutines.Job$DefaultImpls: java.lang.Object fold(kotlinx.coroutines.Job,java.lang.Object,kotlin.jvm.functions.Function2)>":["<kotlin.coroutines.CoroutineContext$Element$DefaultImpls: java.lang.Object fold(kotlin.coroutines.CoroutineContext$Element,java.lang.Object,kotlin.jvm.functions.Function2)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<kotlinx.coroutines.internal.SystemPropsKt: long systemProp$default(java.lang.String,long,long,long,int,java.lang.Object)>":["<kotlinx.coroutines.internal.SystemPropsKt: long systemProp(java.lang.String,long,long,long)>","<kotlinx.coroutines.internal.SystemPropsKt: void <clinit>()>"],"<androidx.core.graphics.drawable.WrappedDrawableApi14: boolean updateTint(int[])>":["<androidx.core.graphics.drawable.WrappedDrawableApi21: boolean isCompatTintEnabled()>","<android.content.res.ColorStateList: int getDefaultColor()>","<android.content.res.ColorStateList: int getColorForState(int[],int)>","<android.graphics.drawable.Drawable: void clearColorFilter()>","<android.graphics.drawable.Drawable: void setColorFilter(int,android.graphics.PorterDuff$Mode)>","<androidx.core.graphics.drawable.WrappedDrawableApi14: boolean isCompatTintEnabled()>"],"<com.afollestad.photoaffix.views.MainActivity$setupMainGrid$1: void <init>(com.afollestad.photoaffix.views.MainActivity)>":["<kotlin.jvm.internal.Lambda: void <init>(int)>"],"<com.afollestad.photoaffix.prefs.PrefsModule_ProvideRxkPrefsFactory: java.lang.Object get()>":["<com.afollestad.photoaffix.prefs.PrefsModule_ProvideRxkPrefsFactory: com.afollestad.rxkprefs.RxkPrefs get()>"],"<com.afollestad.materialdialogs.utils.ViewExtKt: boolean isVisible(android.view.View)>":["<kotlin.text.StringsKt__StringsJVMKt: boolean isBlank(java.lang.CharSequence)>","<kotlin.text.StringsKt__StringsKt: java.lang.CharSequence trim(java.lang.CharSequence)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<kotlin.jvm.internal.Intrinsics: void checkExpressionValueIsNotNull(java.lang.Object,java.lang.String)>"],"<com.afollestad.materialdialogs.utils.MDUtil: boolean isColorDark$default(com.afollestad.materialdialogs.utils.MDUtil,int,double,int,java.lang.Object)>":["<com.afollestad.materialdialogs.utils.MDUtil: boolean isColorDark(int,double)>"],"<com.afollestad.assent.internal.Data$Companion: java.lang.Object getLOCK()>":["<com.afollestad.assent.internal.Data: void <clinit>()>","<com.afollestad.assent.internal.Data: java.lang.Object access$getLOCK$cp()>"],"<androidx.fragment.app.FragmentTransition$2: void <init>(java.lang.Object,androidx.fragment.app.FragmentTransitionImpl,android.view.View,androidx.fragment.app.Fragment,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList,java.lang.Object)>":["<java.lang.Object: void <init>()>"],"<kotlin.collections.CollectionsKt___CollectionsKt: java.util.List toMutableList(java.lang.Iterable)>":["<kotlin.collections.CollectionsKt___CollectionsKt: java.util.List toMutableList(java.util.Collection)>","<java.util.ArrayList: void <init>()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<kotlin.collections.CollectionsKt___CollectionsKt: java.util.Collection toCollection(java.lang.Iterable,java.util.Collection)>"],"<androidx.appcompat.graphics.drawable.DrawableContainer: void setAutoMirrored(boolean)>":["<androidx.core.graphics.drawable.DrawableCompat: void setAutoMirrored(android.graphics.drawable.Drawable,boolean)>"],"<androidx.core.graphics.TypefaceCompatBaseImpl: androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry findBestEntry(androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry,int)>":["<androidx.core.graphics.TypefaceCompatBaseImpl$2: void <init>(androidx.core.graphics.TypefaceCompatBaseImpl)>","<androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry: androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry[] getEntries()>","<androidx.core.graphics.TypefaceCompatBaseImpl: java.lang.Object findBestFont(java.lang.Object[],int,androidx.core.graphics.TypefaceCompatBaseImpl$StyleExtractor)>"],"<com.afollestad.photoaffix.views.MainActivity$onCreate$1: void <init>(com.afollestad.photoaffix.views.MainActivity)>":["<java.lang.Object: void <init>()>"],"<androidx.collection.SimpleArrayMap: void <init>(int)>":["<androidx.collection.SimpleArrayMap: void allocArrays(int)>","<java.lang.Object: void <init>()>","<androidx.collection.ContainerHelpers: void <clinit>()>"],"<androidx.core.content.res.ComplexColorCompat: void <init>(android.graphics.Shader,android.content.res.ColorStateList,int)>":["<java.lang.Object: void <init>()>"],"<kotlinx.coroutines.internal.LockFreeTaskQueue: void <clinit>()>":["<kotlinx.coroutines.internal.LockFreeTaskQueue: void <clinit>()>","<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>"],"<kotlinx.coroutines.scheduling.WorkQueue: boolean addLast(kotlinx.coroutines.scheduling.Task,kotlinx.coroutines.scheduling.GlobalQueue)>":["<kotlinx.coroutines.scheduling.WorkQueue: void offloadWork(kotlinx.coroutines.scheduling.GlobalQueue)>","<kotlinx.coroutines.scheduling.WorkQueue: boolean tryAddLast(kotlinx.coroutines.scheduling.Task)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<androidx.appcompat.widget.VectorEnabledTintResources: boolean shouldBeUsed()>":["<androidx.appcompat.widget.VectorEnabledTintResources: boolean isCompatVectorFromResourcesEnabled()>","<android.os.Build$VERSION: void <clinit>()>","<androidx.appcompat.widget.VectorEnabledTintResources: void <clinit>()>"],"<kotlinx.coroutines.TimeSourceKt: void <clinit>()>":["<kotlinx.coroutines.TimeSourceKt: void <clinit>()>","<kotlinx.coroutines.DefaultTimeSource: void <clinit>()>"],"<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: android.graphics.Paint$Cap getStrokeLineCap(int,android.graphics.Paint$Cap)>":["<android.graphics.Paint$Cap: void <clinit>()>"],"<androidx.lifecycle.LiveData: void <init>()>":["<androidx.lifecycle.LiveData: void <clinit>()>","<androidx.arch.core.internal.SafeIterableMap: void <init>()>","<java.lang.Object: void <init>()>","<androidx.lifecycle.LiveData$1: void <init>(androidx.lifecycle.LiveData)>"],"<io.reactivex.schedulers.Schedulers$IoHolder: void <clinit>()>":["<io.reactivex.Scheduler: void <clinit>()>","<io.reactivex.internal.schedulers.IoScheduler: void <init>()>","<io.reactivex.schedulers.Schedulers$IoHolder: void <clinit>()>","<io.reactivex.internal.schedulers.IoScheduler: void <clinit>()>"],"<dagger.internal.DoubleCheck: java.lang.Object reentrantCheck(java.lang.Object,java.lang.Object)>":["<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>","<java.lang.IllegalStateException: void <init>(java.lang.String)>","<java.lang.StringBuilder: java.lang.String toString()>","<dagger.internal.DoubleCheck: void <clinit>()>","<java.lang.StringBuilder: void <init>()>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>"],"<androidx.core.graphics.TypefaceCompatApi24Impl: android.graphics.Typeface createFromFamiliesWithDefault(java.lang.Object)>":["<androidx.core.graphics.TypefaceCompatApi24Impl: void <clinit>()>","<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>","<java.lang.reflect.Array: void set(java.lang.Object,int,java.lang.Object)>","<java.lang.RuntimeException: void <init>(java.lang.Throwable)>"],"<androidx.arch.core.internal.SafeIterableMap: java.util.Iterator descendingIterator()>":["<java.lang.Boolean: void <clinit>()>","<java.lang.Boolean: java.lang.Boolean valueOf(boolean)>","<androidx.arch.core.internal.SafeIterableMap$DescendingIterator: void <init>(androidx.arch.core.internal.SafeIterableMap$Entry,androidx.arch.core.internal.SafeIterableMap$Entry)>","<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>"],"<androidx.appcompat.app.TwilightManager: androidx.appcompat.app.TwilightManager getInstance(android.content.Context)>":["<androidx.appcompat.app.TwilightManager: void <init>(android.content.Context,android.location.LocationManager)>","<android.app.Activity: java.lang.Object getSystemService(java.lang.String)>","<android.content.ContextWrapper: android.content.Context getApplicationContext()>"],"<androidx.core.content.res.ComplexColorCompat: androidx.core.content.res.ComplexColorCompat createFromXml(android.content.res.Resources,int,android.content.res.Resources$Theme)>":["<java.lang.StringBuilder: java.lang.String toString()>","<androidx.core.content.res.GradientColorInflaterCompat: android.graphics.Shader createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>","<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>","<androidx.core.content.res.ComplexColorCompat: androidx.core.content.res.ComplexColorCompat 'from'(android.graphics.Shader)>","<androidx.core.content.res.ColorStateListInflaterCompat: android.content.res.ColorStateList createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<java.lang.StringBuilder: void <init>()>","<android.util.Xml: android.util.AttributeSet asAttributeSet(org.xmlpull.v1.XmlPullParser)>","<android.util.Xml: void <clinit>()>","<androidx.core.content.res.ComplexColorCompat: androidx.core.content.res.ComplexColorCompat 'from'(android.content.res.ColorStateList)>"],"<androidx.core.graphics.ColorUtils: void <clinit>()>":["<java.lang.ThreadLocal: void <init>()>","<androidx.core.graphics.ColorUtils: void <clinit>()>"],"<androidx.fragment.app.DialogFragment: void <init>()>":["<androidx.fragment.app.Fragment: void <init>()>"],"<androidx.arch.core.internal.SafeIterableMap$ListIterator: androidx.arch.core.internal.SafeIterableMap$Entry nextNode()>":["<androidx.arch.core.internal.SafeIterableMap$DescendingIterator: androidx.arch.core.internal.SafeIterableMap$Entry forward(androidx.arch.core.internal.SafeIterableMap$Entry)>"],"<androidx.lifecycle.ViewModelProvider: androidx.lifecycle.ViewModel get(java.lang.String,java.lang.Class)>":["<androidx.lifecycle.ViewModelStore: androidx.lifecycle.ViewModel get(java.lang.String)>","<java.lang.Class: boolean isInstance(java.lang.Object)>","<androidx.loader.app.LoaderManagerImpl$LoaderViewModel$1: androidx.lifecycle.ViewModel create(java.lang.Class)>","<androidx.lifecycle.ViewModelStore: void put(java.lang.String,androidx.lifecycle.ViewModel)>"],"<androidx.fragment.app.FragmentActivity: void onDestroy()>":["<androidx.lifecycle.ViewModelStore: void clear()>","<android.app.Activity: boolean isChangingConfigurations()>","<androidx.fragment.app.FragmentController: void dispatchDestroy()>","<android.app.Activity: void onDestroy()>"],"<kotlinx.coroutines.AbstractContinuation: boolean tryResume()>":["<java.lang.IllegalStateException: void <init>(java.lang.String)>","<kotlinx.coroutines.AbstractContinuation: void <clinit>()>","<java.lang.String: java.lang.String toString()>"],"<kotlinx.coroutines.NodeList: void <init>()>":["<kotlinx.coroutines.internal.LockFreeLinkedListHead: void <init>()>"],"<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void afterTask(kotlinx.coroutines.scheduling.TaskMode)>":["<java.lang.AssertionError: void <init>(java.lang.Object)>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>","<java.lang.StringBuilder: java.lang.String toString()>","<kotlinx.coroutines.scheduling.TaskMode: void <clinit>()>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<java.lang.StringBuilder: void <init>()>","<kotlin._Assertions: void <clinit>()>","<kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: void <clinit>()>","<kotlinx.coroutines.scheduling.CoroutineScheduler: void <clinit>()>"],"<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatedStateListState: android.graphics.drawable.Drawable newDrawable(android.content.res.Resources)>":["<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: void <init>(androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatedStateListState,android.content.res.Resources)>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: void <clinit>()>"],"<androidx.core.graphics.TypefaceCompatApi21Impl: java.io.File getFile(android.os.ParcelFileDescriptor)>":["<android.system.Os: java.lang.String readlink(java.lang.String)>","<java.lang.StringBuilder: java.lang.String toString()>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<java.lang.StringBuilder: void <init>()>","<java.io.File: void <clinit>()>","<java.lang.StringBuilder: java.lang.StringBuilder append(int)>","<android.system.OsConstants: void <clinit>()>","<java.io.File: void <init>(java.lang.String)>","<android.system.Os: android.system.StructStat stat(java.lang.String)>","<android.system.OsConstants: boolean S_ISREG(int)>"],"<androidx.appcompat.widget.AppCompatDrawableManager$ColorFilterLruCache: android.graphics.PorterDuffColorFilter get(int,android.graphics.PorterDuff$Mode)>":["<androidx.collection.LruCache: java.lang.Object get(java.lang.Object)>","<java.lang.Integer: void <clinit>()>","<androidx.appcompat.widget.AppCompatDrawableManager$ColorFilterLruCache: int generateCacheKey(int,android.graphics.PorterDuff$Mode)>","<java.lang.Integer: java.lang.Integer valueOf(int)>"],"<androidx.core.content.res.TypedArrayUtils: int getNamedColor(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int,int)>":["<androidx.core.content.res.TypedArrayUtils: boolean hasAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>"],"<androidx.fragment.app.FragmentTransition$4: void <init>(androidx.fragment.app.FragmentTransitionImpl,androidx.collection.ArrayMap,java.lang.Object,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,java.util.ArrayList,android.view.View,androidx.fragment.app.Fragment,androidx.fragment.app.Fragment,boolean,java.util.ArrayList,java.lang.Object,android.graphics.Rect)>":["<java.lang.Object: void <init>()>"],"<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.Task findTaskWithCpuPermit()>":["<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.GlobalQueue access$getGlobalQueue$p(kotlinx.coroutines.scheduling.CoroutineScheduler)>","<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: int nextInt$kotlinx_coroutines_core(int)>","<kotlinx.coroutines.internal.LockFreeTaskQueue: java.lang.Object removeFirstOrNull()>","<kotlinx.coroutines.scheduling.CoroutineScheduler: int access$getCorePoolSize$p(kotlinx.coroutines.scheduling.CoroutineScheduler)>","<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.Task trySteal()>","<kotlinx.coroutines.scheduling.WorkQueue: kotlinx.coroutines.scheduling.Task poll()>","<kotlinx.coroutines.scheduling.CoroutineScheduler: void <clinit>()>"],"<androidx.core.graphics.drawable.WrappedDrawableApi14: void setTintMode(android.graphics.PorterDuff$Mode)>":["<androidx.core.graphics.drawable.WrappedDrawableApi14: boolean updateTint(int[])>","<androidx.core.graphics.drawable.WrappedDrawableApi14: int[] getState()>"],"<androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry: void <init>(java.lang.String,int,boolean,java.lang.String,int,int)>":["<java.lang.Object: void <init>()>"],"<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>":["<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: void <init>()>","<androidx.core.content.res.TypedArrayUtils: android.content.res.TypedArray obtainAttributes(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,int[])>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.PorterDuffColorFilter updateTintFilter(android.graphics.PorterDuffColorFilter,android.content.res.ColorStateList,android.graphics.PorterDuff$Mode)>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void inflateInternal(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: void <clinit>()>","<androidx.vectordrawable.graphics.drawable.AndroidResources: void <clinit>()>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void updateStateFromTypedArray(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser)>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: int getChangingConfigurations()>","<androidx.core.graphics.drawable.DrawableCompat: void inflate(android.graphics.drawable.Drawable,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>"],"<com.afollestad.photoaffix.engine.photos.Photo: void <clinit>()>":["<com.afollestad.photoaffix.engine.photos.Photo$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>","<com.afollestad.photoaffix.engine.photos.Photo: void <clinit>()>"],"<kotlinx.coroutines.ChildHandleNode: boolean childCancelled(java.lang.Throwable)>":["<kotlinx.coroutines.JobSupport: boolean childCancelled(java.lang.Throwable)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<kotlinx.coroutines.DefaultExecutor: java.lang.Thread thread()>":["<kotlinx.coroutines.EventLoopBase: void <clinit>()>","<kotlinx.coroutines.DefaultExecutor: void <clinit>()>","<kotlinx.coroutines.DefaultExecutor: java.lang.Thread createThreadSync()>"],"<com.afollestad.dragselectrecyclerview.DragSelectTouchListener$autoScrollRunnable$1: void <init>(com.afollestad.dragselectrecyclerview.DragSelectTouchListener)>":["<java.lang.Object: void <init>()>"],"<com.afollestad.photoaffix.views.MainActivity$performAffix$1$1: java.lang.Object invokeSuspend(java.lang.Object)>":["<com.afollestad.photoaffix.engine.subengines.SizingResult: boolean isError()>","<com.afollestad.photoaffix.engine.subengines.SizingResult: com.afollestad.photoaffix.engine.subengines.Size getSize()>","<kotlinx.coroutines.Dispatchers: void <clinit>()>","<kotlin.jvm.internal.Intrinsics: void throwNpe()>","<kotlinx.coroutines.Dispatchers: kotlinx.coroutines.CoroutineDispatcher getIO()>","<com.afollestad.photoaffix.engine.subengines.SizingResult: java.lang.Exception getError()>","<androidx.fragment.app.Fragment: void <clinit>()>","<com.afollestad.photoaffix.engine.subengines.Size: int getHeight()>","<com.afollestad.photoaffix.views.MainActivity$performAffix$1$1$sizingResult$1: void <init>(com.afollestad.photoaffix.views.MainActivity$performAffix$1$1,kotlin.coroutines.Continuation)>","<com.afollestad.photoaffix.engine.subengines.Size: int getWidth()>","<kotlinx.coroutines.DeferredCoroutine: java.lang.Object await(kotlin.coroutines.Continuation)>","<java.lang.IllegalStateException: void <init>(java.lang.String)>","<kotlinx.coroutines.BuildersKt: kotlinx.coroutines.Deferred async$default(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.CoroutineContext,kotlinx.coroutines.CoroutineStart,kotlin.jvm.functions.Function2,int,java.lang.Object)>","<com.afollestad.photoaffix.dialogs.ImageSizingDialog$Companion: void show(androidx.appcompat.app.AppCompatActivity,int,int)>","<com.afollestad.photoaffix.dialogs.ImageSizingDialog: void <clinit>()>","<kotlin.Unit: void <clinit>()>","<com.afollestad.photoaffix.views.ActivityExtKt: void showErrorDialog(android.app.Activity,java.lang.Exception)>","<kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>"],"<androidx.core.graphics.TypefaceCompatApi26Impl: java.lang.reflect.Method obtainAddFontFromAssetManagerMethod(java.lang.Class)>":["<java.lang.Boolean: void <clinit>()>","<java.lang.Integer: void <clinit>()>"],"<kotlin.coroutines.jvm.internal.DebugProbesKt: void probeCoroutineResumed(kotlin.coroutines.Continuation)>":["<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<androidx.arch.core.internal.FastSafeIterableMap: boolean contains(java.lang.Object)>":["<java.util.HashMap: boolean containsKey(java.lang.Object)>"],"<kotlinx.coroutines.internal.LockFreeTaskQueueCore$Companion: long updateTail(long,int)>":["<kotlinx.coroutines.internal.LockFreeTaskQueueCore$Companion: long wo(long,long)>"],"<com.afollestad.materialdialogs.Theme$Companion: void <init>()>":["<java.lang.Object: void <init>()>"],"<com.afollestad.rxkprefs.adapters.BooleanAdapter: com.afollestad.rxkprefs.adapters.BooleanAdapter access$getINSTANCE$cp()>":["<com.afollestad.rxkprefs.adapters.BooleanAdapter: void <clinit>()>"],"<androidx.core.content.PermissionChecker: int checkSelfPermission(android.content.Context,java.lang.String)>":["<android.os.Process: int myUid()>","<androidx.core.content.PermissionChecker: int checkPermission(android.content.Context,java.lang.String,int,int,java.lang.String)>","<android.os.Process: int myPid()>","<android.content.ContextWrapper: java.lang.String getPackageName()>"],"<androidx.recyclerview.widget.SimpleItemAnimator: void <init>()>":["<androidx.recyclerview.widget.RecyclerView$ItemAnimator: void <init>()>"],"<androidx.appcompat.graphics.drawable.StateListDrawable$StateListState: void growArray(int,int)>":["<androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState: void growArray(int,int)>","<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>","<java.lang.System: void <clinit>()>"],"<androidx.recyclerview.widget.DefaultItemAnimator: void <init>()>":["<java.util.ArrayList: void <init>()>","<androidx.recyclerview.widget.SimpleItemAnimator: void <init>()>"],"<androidx.loader.app.LoaderManagerImpl$LoaderViewModel: void <clinit>()>":["<androidx.loader.app.LoaderManagerImpl$LoaderViewModel: void <clinit>()>","<androidx.loader.app.LoaderManagerImpl$LoaderViewModel$1: void <init>()>"],"<kotlinx.coroutines.scheduling.LimitingDispatcher: void dispatch(java.lang.Runnable,boolean)>":["<kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher: void dispatchWithContext$kotlinx_coroutines_core(java.lang.Runnable,kotlinx.coroutines.scheduling.TaskContext,boolean)>","<java.util.concurrent.ConcurrentLinkedQueue: java.lang.Object poll()>","<kotlinx.coroutines.scheduling.LimitingDispatcher: void <clinit>()>","<java.util.concurrent.ConcurrentLinkedQueue: boolean add(java.lang.Object)>"],"<kotlinx.coroutines.BuildersKt__Builders_commonKt: kotlinx.coroutines.Deferred async(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.CoroutineContext,kotlinx.coroutines.CoroutineStart,kotlin.jvm.functions.Function2)>":["<kotlinx.coroutines.CoroutineContextKt: void <clinit>()>","<kotlinx.coroutines.DeferredCoroutine: void <init>(kotlin.coroutines.CoroutineContext,boolean)>","<kotlinx.coroutines.LazyDeferredCoroutine: void <init>(kotlin.coroutines.CoroutineContext,kotlin.jvm.functions.Function2)>","<kotlinx.coroutines.CoroutineContextKt: kotlin.coroutines.CoroutineContext newCoroutineContext(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.CoroutineContext)>","<kotlinx.coroutines.AbstractCoroutine: void start(kotlinx.coroutines.CoroutineStart,java.lang.Object,kotlin.jvm.functions.Function2)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<kotlinx.coroutines.CoroutineStart: boolean isLazy()>"],"<androidx.fragment.app.FragmentManagerImpl: void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean)>":["<androidx.fragment.app.FragmentManagerImpl: void throwException(java.lang.RuntimeException)>","<androidx.fragment.app.FragmentManagerImpl: void dispatchOnFragmentStarted(androidx.fragment.app.Fragment,boolean)>","<androidx.fragment.app.FragmentManagerImpl: void dispatchOnFragmentActivityCreated(androidx.fragment.app.Fragment,android.os.Bundle,boolean)>","<androidx.fragment.app.FragmentManagerImpl: void dispatchOnFragmentPreCreated(androidx.fragment.app.Fragment,android.os.Bundle,boolean)>","<java.lang.IllegalArgumentException: void <init>(java.lang.String)>","<androidx.fragment.app.FragmentManagerImpl: void dispatchOnFragmentDestroyed(androidx.fragment.app.Fragment,boolean)>","<androidx.fragment.app.FragmentManagerImpl: void <clinit>()>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<androidx.fragment.app.FragmentManagerImpl: void dispatchOnFragmentPaused(androidx.fragment.app.Fragment,boolean)>","<androidx.fragment.app.FragmentManagerImpl: void ensureInflatedFragmentView(androidx.fragment.app.Fragment)>","<androidx.fragment.app.FragmentManagerImpl: void dispatchOnFragmentResumed(androidx.fragment.app.Fragment,boolean)>","<android.util.Log: int w(java.lang.String,java.lang.String)>","<java.lang.StringBuilder: java.lang.String toString()>","<androidx.fragment.app.FragmentActivity$HostCallbacks: void onAttachFragment(androidx.fragment.app.Fragment)>","<androidx.fragment.app.FragmentManagerImpl: androidx.fragment.app.Fragment getFragment(android.os.Bundle,java.lang.String)>","<java.lang.Integer: java.lang.String toHexString(int)>","<java.lang.Integer: void <clinit>()>","<androidx.fragment.app.FragmentActivity$HostCallbacks: boolean onShouldSaveFragmentState(androidx.fragment.app.Fragment)>","<androidx.fragment.app.FragmentManagerImpl: void dispatchOnFragmentPreAttached(androidx.fragment.app.Fragment,android.content.Context,boolean)>","<androidx.fragment.app.FragmentHostCallback: androidx.fragment.app.FragmentManagerImpl getFragmentManagerImpl()>","<androidx.fragment.app.FragmentManagerImpl: androidx.fragment.app.FragmentManagerImpl$AnimationOrAnimator loadAnimation(androidx.fragment.app.Fragment,int,boolean,int)>","<androidx.fragment.app.FragmentManagerImpl: void saveFragmentViewState(androidx.fragment.app.Fragment)>","<androidx.fragment.app.FragmentManagerImpl: void dispatchOnFragmentAttached(androidx.fragment.app.Fragment,android.content.Context,boolean)>","<androidx.fragment.app.FragmentHostCallback: android.content.Context getContext()>","<androidx.fragment.app.FragmentManagerImpl: void dispatchOnFragmentDetached(androidx.fragment.app.Fragment,boolean)>","<androidx.fragment.app.FragmentManagerImpl: void dispatchOnFragmentCreated(androidx.fragment.app.Fragment,android.os.Bundle,boolean)>","<java.lang.StringBuilder: void <init>()>","<java.lang.StringBuilder: java.lang.StringBuilder append(int)>","<androidx.fragment.app.SuperNotCalledException: void <init>(java.lang.String)>","<android.util.Log: int v(java.lang.String,java.lang.String)>","<androidx.fragment.app.FragmentManagerImpl: void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean)>","<androidx.fragment.app.FragmentManagerImpl: void dispatchOnFragmentStopped(androidx.fragment.app.Fragment,boolean)>","<android.content.ContextWrapper: java.lang.ClassLoader getClassLoader()>","<androidx.fragment.app.FragmentManagerImpl: void makeInactive(androidx.fragment.app.Fragment)>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>","<java.lang.IllegalStateException: void <init>(java.lang.String)>","<androidx.fragment.app.FragmentManagerImpl: void dispatchOnFragmentViewDestroyed(androidx.fragment.app.Fragment,boolean)>","<android.util.SparseArray: java.lang.Object get(int)>","<androidx.fragment.app.FragmentManagerImpl: void dispatchOnFragmentViewCreated(androidx.fragment.app.Fragment,android.view.View,android.os.Bundle,boolean)>","<androidx.fragment.app.FragmentActivity$HostCallbacks: android.view.View onFindViewById(int)>","<androidx.fragment.app.FragmentManagerImpl: void animateRemoveFragment(androidx.fragment.app.Fragment,androidx.fragment.app.FragmentManagerImpl$AnimationOrAnimator,int)>"],"<androidx.core.content.ContextCompat: android.content.res.ColorStateList getColorStateList(android.content.Context,int)>":["<android.content.Context: android.content.res.ColorStateList getColorStateList(int)>","<android.content.res.Resources: android.content.res.ColorStateList getColorStateList(int)>","<androidx.appcompat.app.AppCompatActivity: android.content.res.Resources getResources()>","<android.os.Build$VERSION: void <clinit>()>"],"<com.afollestad.photoaffix.views.MainActivity$performAffix$1$1$sizingResult$1: void <init>(com.afollestad.photoaffix.views.MainActivity$performAffix$1$1,kotlin.coroutines.Continuation)>":["<kotlin.coroutines.jvm.internal.SuspendLambda: void <init>(int,kotlin.coroutines.Continuation)>"],"<kotlin.Unit: void <init>()>":["<java.lang.Object: void <init>()>"],"<kotlinx.coroutines.JobSupportKt: kotlinx.coroutines.Empty access$getEMPTY_NEW$p()>":["<kotlinx.coroutines.JobSupportKt: void <clinit>()>"],"<androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState: void <init>(androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState,androidx.appcompat.graphics.drawable.DrawableContainer,android.content.res.Resources)>":["<android.graphics.drawable.LayerDrawable: android.graphics.drawable.Drawable$ConstantState getConstantState()>","<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: android.graphics.drawable.Drawable$ConstantState getConstantState()>","<android.graphics.Rect: void <init>(android.graphics.Rect)>","<android.util.SparseArray: android.util.SparseArray clone()>","<android.graphics.Rect: void <clinit>()>","<android.graphics.drawable.Drawable$ConstantState: void <init>()>","<android.util.SparseArray: void put(int,java.lang.Object)>","<androidx.appcompat.graphics.drawable.DrawableContainer: android.graphics.drawable.Drawable$ConstantState getConstantState()>","<androidx.core.graphics.drawable.WrappedDrawableApi14: android.graphics.drawable.Drawable$ConstantState getConstantState()>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable$ConstantState getConstantState()>","<android.util.SparseArray: void <init>(int)>","<androidx.appcompat.graphics.drawable.DrawableContainer: int resolveDensity(android.content.res.Resources,int)>"],"<androidx.fragment.app.FragmentController: void dispatchActivityCreated()>":["<androidx.fragment.app.FragmentManagerImpl: void dispatchActivityCreated()>"],"<io.reactivex.internal.schedulers.IoScheduler: void <init>()>":["<io.reactivex.internal.schedulers.IoScheduler: void <init>(java.util.concurrent.ThreadFactory)>","<io.reactivex.Scheduler: void <clinit>()>","<io.reactivex.internal.schedulers.IoScheduler: void <clinit>()>"],"<kotlinx.coroutines.internal.ContextScope: void <init>(kotlin.coroutines.CoroutineContext)>":["<java.lang.Object: void <init>()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<androidx.vectordrawable.graphics.drawable.PathInterpolatorCompat: void <init>(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,org.xmlpull.v1.XmlPullParser)>":["<java.lang.Object: void <init>()>","<androidx.core.content.res.TypedArrayUtils: android.content.res.TypedArray obtainAttributes(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,int[])>","<androidx.vectordrawable.graphics.drawable.AndroidResources: void <clinit>()>","<androidx.vectordrawable.graphics.drawable.PathInterpolatorCompat: void parseInterpolatorFromTypeArray(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser)>"],"<androidx.appcompat.app.WindowDecorActionBar: void init(android.view.View)>":["<java.lang.Object: java.lang.Class getClass()>","<androidx.appcompat.R$styleable: void <clinit>()>","<androidx.appcompat.view.ActionBarPolicy: boolean hasEmbeddedTabs()>","<androidx.appcompat.app.WindowDecorActionBar: void setHasEmbeddedTabs(boolean)>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<java.lang.StringBuilder: void <init>()>","<androidx.appcompat.app.WindowDecorActionBar: androidx.appcompat.widget.DecorToolbar getDecorToolbar(android.view.View)>","<androidx.appcompat.view.ActionBarPolicy: boolean enableHomeButtonByDefault()>","<androidx.appcompat.app.WindowDecorActionBar: void setHomeButtonEnabled(boolean)>","<java.lang.IllegalStateException: void <init>(java.lang.String)>","<java.lang.StringBuilder: java.lang.String toString()>","<androidx.appcompat.app.WindowDecorActionBar: void setHideOnContentScrollEnabled(boolean)>","<androidx.appcompat.app.WindowDecorActionBar: void setElevation(float)>","<androidx.appcompat.view.ActionBarPolicy: androidx.appcompat.view.ActionBarPolicy get(android.content.Context)>"],"<androidx.fragment.app.FragmentTransitionCompat21: boolean hasSimpleTarget(android.transition.Transition)>":["<android.transition.Transition: java.util.List getTargetNames()>","<androidx.fragment.app.FragmentTransitionImpl: boolean isNullOrEmpty(java.util.List)>","<android.transition.Transition: java.util.List getTargetTypes()>","<android.transition.Transition: java.util.List getTargetIds()>"],"<com.afollestad.photoaffix.engine.bitmaps.BitmapIterator: int size()>":["<java.util.ArrayList: int size()>"],"<kotlinx.coroutines.internal.LockFreeTaskQueueCore: int addLast(java.lang.Object)>":["<kotlinx.coroutines.internal.LockFreeTaskQueueCore: void <clinit>()>","<kotlinx.coroutines.internal.LockFreeTaskQueueCore: kotlinx.coroutines.internal.LockFreeTaskQueueCore fillPlaceholder(int,java.lang.Object)>","<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>","<kotlinx.coroutines.internal.LockFreeTaskQueueCore: kotlinx.coroutines.internal.LockFreeTaskQueueCore next()>","<kotlinx.coroutines.internal.LockFreeTaskQueueCore$Companion: long updateTail(long,int)>","<java.util.concurrent.atomic.AtomicReferenceArray: void set(int,java.lang.Object)>","<kotlinx.coroutines.internal.LockFreeTaskQueueCore$Companion: int addFailReason(long)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<androidx.core.content.ContextCompat: void <clinit>()>":["<java.lang.Object: void <init>()>","<androidx.core.content.ContextCompat: void <clinit>()>"],"<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: void <init>(androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatedStateListState,android.content.res.Resources)>":["<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatedStateListState: void <init>(androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatedStateListState,androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat,android.content.res.Resources)>","<androidx.appcompat.graphics.drawable.StateListDrawable: void <init>(androidx.appcompat.graphics.drawable.StateListDrawable$StateListState)>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: void setConstantState(androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState)>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: boolean onStateChange(int[])>","<android.graphics.drawable.Drawable: int[] getState()>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: void jumpToCurrentState()>"],"<androidx.appcompat.app.TwilightManager: android.location.Location getLastKnownLocation()>":["<androidx.core.content.PermissionChecker: int checkSelfPermission(android.content.Context,java.lang.String)>","<androidx.appcompat.app.TwilightManager: android.location.Location getLastKnownLocationForProvider(java.lang.String)>"],"<androidx.core.graphics.drawable.WrappedDrawableApi21: void <init>(androidx.core.graphics.drawable.WrappedDrawableApi14$DrawableWrapperState,android.content.res.Resources)>":["<androidx.core.graphics.drawable.WrappedDrawableApi14: void <init>(androidx.core.graphics.drawable.WrappedDrawableApi14$DrawableWrapperState,android.content.res.Resources)>","<androidx.core.graphics.drawable.WrappedDrawableApi21: void findAndCacheIsProjectedDrawableMethod()>"],"<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.Task findTask$kotlinx_coroutines_core()>":["<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.GlobalQueue access$getGlobalQueue$p(kotlinx.coroutines.scheduling.CoroutineScheduler)>","<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.Task findTaskWithCpuPermit()>","<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: boolean tryAcquireCpuPermit()>","<kotlinx.coroutines.scheduling.WorkQueue: kotlinx.coroutines.scheduling.Task poll()>","<kotlinx.coroutines.scheduling.CoroutineScheduler: void <clinit>()>","<kotlinx.coroutines.scheduling.GlobalQueue: kotlinx.coroutines.scheduling.Task removeFirstBlockingModeOrNull()>"],"<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatedStateListState: int indexOfTransition(int,int)>":["<androidx.collection.LongSparseArray: java.lang.Object get(long,java.lang.Object)>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatedStateListState: long generateTransitionKey(int,int)>","<java.lang.Long: java.lang.Long valueOf(long)>","<java.lang.Long: void <clinit>()>"],"<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: void setAlpha(float)>":["<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: void setRootAlpha(int)>"],"<kotlinx.coroutines.ChildHandleNode: void <init>(kotlinx.coroutines.JobSupport,kotlinx.coroutines.ChildJob)>":["<kotlinx.coroutines.JobCancellingNode: void <init>(kotlinx.coroutines.Job)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<com.afollestad.assent.Permission$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>":["<com.afollestad.assent.Permission$Companion: void <init>()>"],"<androidx.fragment.app.FragmentActivity$HostCallbacks: void onAttachFragment(androidx.fragment.app.Fragment)>":["<androidx.fragment.app.FragmentActivity: void onAttachFragment(androidx.fragment.app.Fragment)>"],"<androidx.core.content.res.FontResourcesParserCompat: int getType(android.content.res.TypedArray,int)>":["<android.util.TypedValue: void <init>()>","<android.os.Build$VERSION: void <clinit>()>"],"<io.reactivex.plugins.RxJavaPlugins: io.reactivex.Scheduler initComputationScheduler(java.util.concurrent.Callable)>":["<io.reactivex.internal.functions.ObjectHelper: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>","<io.reactivex.plugins.RxJavaPlugins: io.reactivex.Scheduler applyRequireNonNull(io.reactivex.functions.Function,java.util.concurrent.Callable)>","<io.reactivex.plugins.RxJavaPlugins: io.reactivex.Scheduler callRequireNonNull(java.util.concurrent.Callable)>","<io.reactivex.internal.functions.ObjectHelper: void <clinit>()>"],"<kotlinx.coroutines.JobSupport: boolean childCancelled(java.lang.Throwable)>":["<kotlinx.coroutines.JobImpl: boolean getHandlesException()>","<kotlinx.coroutines.JobSupport: boolean cancelImpl(java.lang.Object)>","<kotlinx.coroutines.JobSupport: boolean getHandlesException()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry: void <init>(androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry[])>":["<java.lang.Object: void <init>()>"],"<com.afollestad.photoaffix.adapters.PhotoGridAdapter$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>":["<com.afollestad.photoaffix.adapters.PhotoGridAdapter$Companion: void <init>()>"],"<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatedStateListState: int addTransition(int,int,android.graphics.drawable.Drawable,boolean)>":["<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatedStateListState: long generateTransitionKey(int,int)>","<java.lang.Long: java.lang.Long valueOf(long)>","<androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState: int addChild(android.graphics.drawable.Drawable)>","<java.lang.Long: void <clinit>()>","<androidx.collection.LongSparseArray: void append(long,java.lang.Object)>"],"<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: void init()>":["<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: boolean onStateChange(int[])>","<android.graphics.drawable.Drawable: int[] getState()>"],"<com.afollestad.materialdialogs.Theme$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>":["<com.afollestad.materialdialogs.Theme$Companion: void <init>()>"],"<androidx.core.provider.SelfDestructiveThread$3: void <init>(androidx.core.provider.SelfDestructiveThread,java.util.concurrent.atomic.AtomicReference,java.util.concurrent.Callable,java.util.concurrent.locks.ReentrantLock,java.util.concurrent.atomic.AtomicBoolean,java.util.concurrent.locks.Condition)>":["<java.lang.Object: void <init>()>"],"<io.reactivex.internal.operators.observable.ObservablePublish: void <init>(io.reactivex.ObservableSource,io.reactivex.ObservableSource,java.util.concurrent.atomic.AtomicReference)>":["<io.reactivex.observables.ConnectableObservable: void <init>()>"],"<kotlinx.coroutines.DispatchedTask: void <init>(int)>":["<kotlinx.coroutines.scheduling.Task: void <init>()>"],"<com.afollestad.photoaffix.engine.bitmaps.RealBitmapManipulator: void <init>(com.afollestad.photoaffix.utilities.IoManager)>":["<java.lang.Object: void <init>()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<kotlin.ranges.RangesKt___RangesKt: kotlin.ranges.IntProgression downTo(int,int)>":["<kotlin.ranges.IntProgression: void <clinit>()>","<kotlin.ranges.IntProgression$Companion: kotlin.ranges.IntProgression fromClosedRange(int,int,int)>"],"<androidx.collection.SparseArrayCompat: java.lang.Object valueAt(int)>":["<androidx.collection.SparseArrayCompat: void gc()>"],"<com.afollestad.photoaffix.utilities.RealMediaScanner_Factory: com.afollestad.photoaffix.utilities.RealMediaScanner get()>":["<com.afollestad.photoaffix.utilities.RealMediaScanner_Factory: com.afollestad.photoaffix.utilities.RealMediaScanner provideInstance(javax.inject.Provider)>"],"<kotlinx.coroutines.scheduling.CoroutineScheduler: void dispatch$default(kotlinx.coroutines.scheduling.CoroutineScheduler,java.lang.Runnable,kotlinx.coroutines.scheduling.TaskContext,boolean,int,java.lang.Object)>":["<kotlinx.coroutines.scheduling.NonBlockingContext: void <clinit>()>","<kotlinx.coroutines.scheduling.CoroutineScheduler: void dispatch(java.lang.Runnable,kotlinx.coroutines.scheduling.TaskContext,boolean)>"],"<androidx.appcompat.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable tintDrawable(android.content.Context,int,boolean,android.graphics.drawable.Drawable)>":["<androidx.appcompat.widget.ThemeUtils: int getThemeAttrColor(android.content.Context,int)>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: android.graphics.drawable.Drawable mutate()>","<androidx.appcompat.widget.AppCompatDrawableManager: void setPorterDuffColorFilter(android.graphics.drawable.Drawable,int,android.graphics.PorterDuff$Mode)>","<androidx.appcompat.widget.AppCompatDrawableManager: android.content.res.ColorStateList getTintList(android.content.Context,int)>","<androidx.core.graphics.drawable.DrawableCompat: void setTintList(android.graphics.drawable.Drawable,android.content.res.ColorStateList)>","<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: android.graphics.drawable.Drawable mutate()>","<androidx.appcompat.widget.ThemeUtils: int getDisabledThemeAttrColor(android.content.Context,int)>","<androidx.core.graphics.drawable.DrawableCompat: void setTintMode(android.graphics.drawable.Drawable,android.graphics.PorterDuff$Mode)>","<androidx.core.graphics.drawable.DrawableCompat: android.graphics.drawable.Drawable wrap(android.graphics.drawable.Drawable)>","<android.graphics.drawable.LayerDrawable: android.graphics.drawable.Drawable findDrawableByLayerId(int)>","<androidx.appcompat.widget.AppCompatDrawableManager: android.graphics.PorterDuff$Mode getTintMode(int)>","<androidx.appcompat.widget.AppCompatDrawableManager: boolean tintDrawableUsingColorFilter(android.content.Context,int,android.graphics.drawable.Drawable)>","<androidx.appcompat.widget.ThemeUtils: void <clinit>()>","<android.graphics.drawable.LayerDrawable: android.graphics.drawable.Drawable mutate()>","<androidx.appcompat.widget.DrawableUtils: boolean canSafelyMutateDrawable(android.graphics.drawable.Drawable)>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mutate()>","<androidx.core.graphics.drawable.WrappedDrawableApi14: android.graphics.drawable.Drawable mutate()>","<androidx.appcompat.widget.AppCompatDrawableManager: void <clinit>()>","<androidx.appcompat.widget.DrawableUtils: void <clinit>()>"],"<io.reactivex.schedulers.Schedulers$ComputationTask: java.lang.Object call()>":["<io.reactivex.schedulers.Schedulers$ComputationTask: io.reactivex.Scheduler call()>"],"<kotlinx.coroutines.scheduling.CoroutineScheduler: void access$requestCpuWorker(kotlinx.coroutines.scheduling.CoroutineScheduler)>":["<kotlinx.coroutines.scheduling.CoroutineScheduler: void requestCpuWorker()>"],"<kotlin.text.StringsKt__StringsKt: kotlin.ranges.IntRange getIndices(java.lang.CharSequence)>":["<kotlin.ranges.IntRange: void <init>(int,int)>","<kotlin.ranges.IntRange: void <clinit>()>","<kotlin.ranges.IntProgression: void <clinit>()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.app.ActionBar getSupportActionBar()>":["<androidx.appcompat.app.AppCompatDelegateImpl: void initWindowDecorActionBar()>"],"<kotlin.collections.ArraysKt___ArraysKt: char single(char[])>":["<java.lang.IllegalArgumentException: void <init>(java.lang.String)>","<java.util.NoSuchElementException: void <init>(java.lang.String)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<kotlinx.coroutines.intrinsics.CancellableKt: void startCoroutineCancellable(kotlin.jvm.functions.Function2,java.lang.Object,kotlin.coroutines.Continuation)>":["<kotlinx.coroutines.DispatchedKt: void <clinit>()>","<kotlin.Unit: void <clinit>()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt: kotlin.coroutines.Continuation createCoroutineUnintercepted(kotlin.jvm.functions.Function2,java.lang.Object,kotlin.coroutines.Continuation)>","<kotlinx.coroutines.DispatchedKt: void resumeCancellable(kotlin.coroutines.Continuation,java.lang.Object)>","<kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt: kotlin.coroutines.Continuation intercepted(kotlin.coroutines.Continuation)>"],"<com.afollestad.photoaffix.presenters.RealMainPresenter_Factory: void <init>(javax.inject.Provider,javax.inject.Provider)>":["<java.lang.Object: void <init>()>"],"<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>":["<kotlin.jvm.internal.Intrinsics: void throwParameterIsNullException(java.lang.String)>"],"<kotlin.coroutines.ContinuationKt: void startCoroutine(kotlin.jvm.functions.Function2,java.lang.Object,kotlin.coroutines.Continuation)>":["<kotlin.coroutines.jvm.internal.CompletedContinuation: void resumeWith(java.lang.Object)>","<kotlinx.coroutines.DispatchedContinuation: void resumeWith(java.lang.Object)>","<kotlin.coroutines.jvm.internal.BaseContinuationImpl: void resumeWith(java.lang.Object)>","<kotlin.Result: void <clinit>()>","<kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>","<kotlin.Unit: void <clinit>()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt: kotlin.coroutines.Continuation createCoroutineUnintercepted(kotlin.jvm.functions.Function2,java.lang.Object,kotlin.coroutines.Continuation)>","<kotlinx.coroutines.AbstractCoroutine: void resumeWith(java.lang.Object)>","<kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt: kotlin.coroutines.Continuation intercepted(kotlin.coroutines.Continuation)>"],"<androidx.fragment.app.FragmentManagerImpl: void restoreAllState(android.os.Parcelable,androidx.fragment.app.FragmentManagerNonConfig)>":["<androidx.fragment.app.FragmentManagerImpl: void throwException(java.lang.RuntimeException)>","<java.io.PrintWriter: void <init>(java.io.Writer)>","<java.util.ArrayList: void <init>(int)>","<androidx.fragment.app.FragmentHostCallback: android.content.Context getContext()>","<java.io.PrintWriter: void close()>","<java.lang.StringBuilder: void <init>()>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<androidx.fragment.app.FragmentManagerImpl: void <clinit>()>","<java.util.ArrayList: boolean contains(java.lang.Object)>","<java.lang.StringBuilder: java.lang.StringBuilder append(int)>","<java.util.ArrayList: boolean add(java.lang.Object)>","<android.util.Log: int v(java.lang.String,java.lang.String)>","<java.util.ArrayList: void clear()>","<android.util.SparseArray: void put(int,java.lang.Object)>","<androidx.core.util.LogWriter: void <init>(java.lang.String)>","<android.util.Log: int w(java.lang.String,java.lang.String)>","<android.content.ContextWrapper: java.lang.ClassLoader getClassLoader()>","<java.lang.IllegalStateException: void <init>(java.lang.String)>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>","<java.lang.StringBuilder: java.lang.String toString()>","<android.util.SparseArray: java.lang.Object get(int)>","<android.util.SparseArray: void <init>(int)>","<androidx.fragment.app.FragmentManagerImpl: void setBackStackIndex(int,androidx.fragment.app.BackStackRecord)>"],"<androidx.collection.LongSparseArray: void append(long,java.lang.Object)>":["<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>","<androidx.collection.LongSparseArray: void gc()>","<java.lang.System: void <clinit>()>","<androidx.collection.ContainerHelpers: void <clinit>()>","<androidx.collection.LongSparseArray: void put(long,java.lang.Object)>","<androidx.collection.ContainerHelpers: int idealLongArraySize(int)>"],"<kotlinx.coroutines.CommonPool: boolean isGoodCommonPool$kotlinx_coroutines_core(java.lang.Class,java.util.concurrent.ExecutorService)>":["<kotlinx.coroutines.CommonPool$isGoodCommonPool$1: void <clinit>()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<kotlinx.coroutines.AbstractCoroutine: void resumeWith(java.lang.Object)>":["<kotlinx.coroutines.CompletedExceptionallyKt: java.lang.Object toState(java.lang.Object)>","<kotlinx.coroutines.AbstractCoroutine: int getDefaultResumeMode$kotlinx_coroutines_core()>","<kotlinx.coroutines.JobSupport: boolean makeCompletingOnce$kotlinx_coroutines_core(java.lang.Object,int)>"],"<com.afollestad.assent.internal.Data: com.afollestad.assent.internal.Data access$getInstance$cp()>":["<com.afollestad.assent.internal.Data: void <clinit>()>"],"<com.afollestad.photoaffix.di.DaggerAppComponent$Builder: com.afollestad.photoaffix.di.AppComponent build()>":["<java.lang.IllegalStateException: void <init>(java.lang.String)>","<java.lang.StringBuilder: java.lang.String toString()>","<com.afollestad.photoaffix.prefs.PrefsModule: void <init>()>","<com.afollestad.photoaffix.prefs.PrefsModule: void <clinit>()>","<java.lang.Class: java.lang.String getCanonicalName()>","<java.lang.StringBuilder: void <init>()>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<com.afollestad.photoaffix.di.AppProvideModule: void <init>()>","<com.afollestad.photoaffix.di.DaggerAppComponent: void <init>(com.afollestad.photoaffix.di.DaggerAppComponent$Builder,com.afollestad.photoaffix.di.DaggerAppComponent$1)>"],"<androidx.core.graphics.drawable.WrappedDrawableApi14: void setAutoMirrored(boolean)>":["<androidx.core.graphics.drawable.WrappedDrawableApi14: void setAutoMirrored(boolean)>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void setAutoMirrored(boolean)>","<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: void setAutoMirrored(boolean)>","<android.graphics.drawable.LayerDrawable: void setAutoMirrored(boolean)>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: void setAutoMirrored(boolean)>"],"<androidx.recyclerview.widget.RecyclerView$Adapter: void notifyDataSetChanged()>":["<androidx.recyclerview.widget.RecyclerView$AdapterDataObservable: void notifyChanged()>"],"<com.afollestad.photoaffix.engine.RealAffixEngine_Factory: java.lang.Object get()>":["<com.afollestad.photoaffix.engine.RealAffixEngine_Factory: com.afollestad.photoaffix.engine.RealAffixEngine get()>"],"<androidx.fragment.app.FragmentManagerImpl: void saveNonConfig()>":["<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>","<java.util.ArrayList: void <init>(int)>","<java.lang.StringBuilder: java.lang.String toString()>","<android.util.SparseArray: int size()>","<java.util.ArrayList: void <init>()>","<java.lang.StringBuilder: void <init>()>","<androidx.fragment.app.FragmentManagerImpl: void <clinit>()>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<android.util.SparseArray: java.lang.Object valueAt(int)>","<java.util.ArrayList: boolean add(java.lang.Object)>","<android.util.Log: int v(java.lang.String,java.lang.String)>","<androidx.fragment.app.FragmentManagerNonConfig: void <init>(java.util.List,java.util.List,java.util.List)>"],"<androidx.collection.LruCache: void <init>(int)>":["<java.lang.IllegalArgumentException: void <init>(java.lang.String)>","<java.lang.Object: void <init>()>","<java.util.LinkedHashMap: void <init>(int,float,boolean)>"],"<kotlin.coroutines.ContinuationInterceptor$DefaultImpls: kotlin.coroutines.CoroutineContext minusKey(kotlin.coroutines.ContinuationInterceptor,kotlin.coroutines.CoroutineContext$Key)>":["<kotlin.coroutines.EmptyCoroutineContext: void <clinit>()>","<kotlin.coroutines.ContinuationInterceptor: void <clinit>()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<io.reactivex.internal.operators.observable.ObservableEmpty: void <clinit>()>":["<io.reactivex.internal.operators.observable.ObservableEmpty: void <init>()>","<io.reactivex.internal.operators.observable.ObservableEmpty: void <clinit>()>"],"<com.afollestad.photoaffix.engine.bitmaps.RealBitmapManipulator_Factory: java.lang.Object get()>":["<com.afollestad.photoaffix.engine.bitmaps.RealBitmapManipulator_Factory: com.afollestad.photoaffix.engine.bitmaps.RealBitmapManipulator get()>"],"<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatableTransition: void <init>(android.graphics.drawable.Animatable)>":["<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$Transition: void <init>(androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$1)>"],"<androidx.appcompat.app.AppCompatDelegate: int getDefaultNightMode()>":["<androidx.appcompat.app.AppCompatDelegate: void <clinit>()>"],"<androidx.fragment.app.FragmentActivity: boolean markState(androidx.fragment.app.FragmentManager,androidx.lifecycle.Lifecycle$State)>":["<androidx.fragment.app.FragmentActivity: boolean markState(androidx.fragment.app.FragmentManager,androidx.lifecycle.Lifecycle$State)>","<androidx.lifecycle.Lifecycle$State: void <clinit>()>","<androidx.fragment.app.FragmentManagerImpl: java.util.List getFragments()>"],"<androidx.core.graphics.TypefaceCompatBaseImpl: android.graphics.Typeface createFromResourcesFontFile(android.content.Context,android.content.res.Resources,int,java.lang.String,int)>":["<java.io.File: boolean delete()>","<androidx.core.graphics.TypefaceCompatUtil: boolean copyToFile(java.io.File,android.content.res.Resources,int)>","<android.graphics.Typeface: void <clinit>()>","<java.io.File: java.lang.String getPath()>","<android.graphics.Typeface: android.graphics.Typeface createFromFile(java.lang.String)>","<androidx.core.graphics.TypefaceCompatUtil: java.io.File getTempFile(android.content.Context)>"],"<androidx.fragment.app.FragmentManagerImpl: void setHWLayerAnimListenerIfAlpha(android.view.View,androidx.fragment.app.FragmentManagerImpl$AnimationOrAnimator)>":["<androidx.fragment.app.FragmentManagerImpl$AnimatorOnHWLayerIfNeededListener: void <init>(android.view.View)>","<androidx.fragment.app.FragmentManagerImpl: boolean shouldRunOnHWLayer(android.view.View,androidx.fragment.app.FragmentManagerImpl$AnimationOrAnimator)>","<androidx.fragment.app.FragmentManagerImpl: android.view.animation.Animation$AnimationListener getAnimationListener(android.view.animation.Animation)>","<androidx.fragment.app.FragmentManagerImpl: void <clinit>()>","<androidx.fragment.app.FragmentManagerImpl$AnimateOnHWLayerIfNeededListener: void <init>(android.view.View,android.view.animation.Animation$AnimationListener)>","<android.view.animation.Animation: void setAnimationListener(android.view.animation.Animation$AnimationListener)>"],"<androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>":["<java.lang.NullPointerException: void <init>()>"],"<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void <init>(kotlinx.coroutines.scheduling.CoroutineScheduler)>":["<kotlinx.coroutines.scheduling.CoroutineScheduler: int access$getMIN_PARK_TIME_NS$cp()>","<kotlinx.coroutines.scheduling.WorkQueue: void <clinit>()>","<java.util.Random: int nextInt()>","<kotlinx.coroutines.scheduling.WorkQueue: void <init>()>","<java.lang.Thread: void setDaemon(boolean)>","<java.lang.Thread: void <init>()>","<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.internal.Symbol access$getNOT_IN_STACK$cp()>","<kotlinx.coroutines.scheduling.CoroutineScheduler: java.util.Random access$getRandom$p(kotlinx.coroutines.scheduling.CoroutineScheduler)>","<kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: void <clinit>()>","<kotlinx.coroutines.scheduling.CoroutineScheduler: void <clinit>()>"],"<androidx.collection.ArraySet: void <init>(int)>":["<java.lang.Object: void <init>()>","<androidx.collection.ArraySet: void allocArrays(int)>","<androidx.collection.ArraySet: void <clinit>()>"],"<androidx.vectordrawable.graphics.drawable.ArgbEvaluator: void <init>()>":["<java.lang.Object: void <init>()>"],"<androidx.core.graphics.TypefaceCompatApi28Impl: void <init>()>":["<androidx.core.graphics.TypefaceCompatApi26Impl: void <init>()>"],"<kotlin.text.StringsKt__StringsJVMKt: boolean startsWith(java.lang.String,java.lang.String,boolean)>":["<kotlin.text.StringsKt__StringsJVMKt: boolean regionMatches(java.lang.String,int,java.lang.String,int,int,boolean)>","<java.lang.String: int length()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<kotlinx.coroutines.JobSupport: boolean tryFinalizeFinishingState(kotlinx.coroutines.JobSupport$Finishing,java.lang.Object,int)>":["<kotlinx.coroutines.StandaloneCoroutine: void handleJobException(java.lang.Throwable)>","<java.lang.IllegalArgumentException: void <init>(java.lang.String)>","<kotlinx.coroutines.JobSupport: boolean suppressExceptions(java.lang.Throwable,java.util.List)>","<kotlinx.coroutines.JobSupport: void completeStateFinalization(kotlinx.coroutines.Incomplete,java.lang.Object,int,boolean)>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<kotlinx.coroutines.JobSupport: java.lang.Object getState$kotlinx_coroutines_core()>","<java.lang.StringBuilder: void <init>()>","<java.lang.String: java.lang.String toString()>","<kotlinx.coroutines.JobSupport: java.lang.Throwable getFinalRootCause(kotlinx.coroutines.JobSupport$Finishing,java.util.List)>","<kotlinx.coroutines.CompletedExceptionally: void <init>(java.lang.Throwable)>","<kotlinx.coroutines.JobSupport: void <clinit>()>","<kotlinx.coroutines.JobSupport$Finishing: java.util.List sealLocked(java.lang.Throwable)>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>","<java.lang.StringBuilder: java.lang.String toString()>","<kotlinx.coroutines.JobSupport: boolean cancelParent(java.lang.Throwable)>","<kotlinx.coroutines.JobSupport$Finishing: boolean isSealed()>","<kotlinx.coroutines.JobSupport: void handleJobException(java.lang.Throwable)>"],"<com.afollestad.photoaffix.prefs.PrefsModule_ProvideImageSpacingHorizontalPrefFactory: com.afollestad.photoaffix.prefs.PrefsModule_ProvideImageSpacingHorizontalPrefFactory create(com.afollestad.photoaffix.prefs.PrefsModule,javax.inject.Provider)>":["<com.afollestad.photoaffix.prefs.PrefsModule_ProvideImageSpacingHorizontalPrefFactory: void <init>(com.afollestad.photoaffix.prefs.PrefsModule,javax.inject.Provider)>"],"<androidx.appcompat.widget.VectorEnabledTintResources: boolean isCompatVectorFromResourcesEnabled()>":["<androidx.appcompat.widget.VectorEnabledTintResources: void <clinit>()>"],"<androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState: void <init>(int)>":["<java.lang.Object: void <init>()>"],"<androidx.core.provider.FontsContractCompat: boolean equalsByteArrayList(java.util.List,java.util.List)>":["<java.util.Arrays: boolean equals(byte[],byte[])>","<java.util.ArrayList: int size()>","<java.util.ArrayList: java.lang.Object get(int)>"],"<androidx.appcompat.app.AppCompatDelegateImpl$AppCompatWindowCallback: void onPanelClosed(int,android.view.Menu)>":["<androidx.appcompat.view.WindowCallbackWrapper: void onPanelClosed(int,android.view.Menu)>","<androidx.appcompat.app.AppCompatDelegateImpl: void onPanelClosed(int)>"],"<androidx.appcompat.app.WindowDecorActionBar: void dispatchMenuVisibilityChanged(boolean)>":["<java.util.ArrayList: int size()>","<java.util.ArrayList: java.lang.Object get(int)>"],"<androidx.fragment.app.SuperNotCalledException: void <init>(java.lang.String)>":["<android.util.AndroidRuntimeException: void <init>(java.lang.String)>"],"<kotlinx.coroutines.Active: void <init>()>":["<java.lang.Object: void <init>()>"],"<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableDelegateState: void <init>(android.graphics.drawable.Drawable$ConstantState)>":["<android.graphics.drawable.Drawable$ConstantState: void <init>()>"],"<io.reactivex.internal.util.ExceptionHelper$Termination: void <init>()>":["<java.lang.Throwable: void <init>(java.lang.String)>"],"<androidx.appcompat.view.ContextThemeWrapper: void initializeTheme()>":["<android.content.ContextWrapper: android.content.Context getBaseContext()>","<androidx.appcompat.view.ContextThemeWrapper: void onApplyThemeResource(android.content.res.Resources$Theme,int,boolean)>","<androidx.appcompat.view.ContextThemeWrapper: android.content.res.Resources getResources()>"],"<androidx.core.content.res.ColorStateListInflaterCompat: android.content.res.ColorStateList createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>":["<java.lang.StringBuilder: java.lang.String toString()>","<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<java.lang.StringBuilder: void <init>()>","<androidx.core.content.res.ColorStateListInflaterCompat: android.content.res.ColorStateList inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>"],"<kotlinx.coroutines.CompletionHandlerException: void <init>(java.lang.String,java.lang.Throwable)>":["<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<androidx.fragment.app.FragmentManagerImpl$AnimateOnHWLayerIfNeededListener: void <init>(android.view.View,android.view.animation.Animation$AnimationListener)>":["<androidx.fragment.app.FragmentManagerImpl$AnimationListenerWrapper: void <init>(android.view.animation.Animation$AnimationListener)>"],"<kotlinx.coroutines.InvokeOnCompletion: void invoke(java.lang.Throwable)>":["<kotlinx.coroutines.ChildHandleNode: java.lang.Object invoke(java.lang.Object)>","<kotlinx.coroutines.JobSupport$ChildCompletion: java.lang.Object invoke(java.lang.Object)>","<kotlinx.coroutines.ResumeAwaitOnCompletion: java.lang.Object invoke(java.lang.Object)>","<kotlinx.coroutines.ChildContinuation: java.lang.Object invoke(java.lang.Object)>"],"<androidx.fragment.app.FragmentManagerImpl: void dispatchOnFragmentViewCreated(androidx.fragment.app.Fragment,android.view.View,android.os.Bundle,boolean)>":["<java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>"],"<kotlinx.coroutines.internal.ThreadContextKt: java.lang.Object updateThreadContext(kotlin.coroutines.CoroutineContext,java.lang.Object)>":["<kotlinx.coroutines.CoroutineId: java.lang.Object fold(java.lang.Object,kotlin.jvm.functions.Function2)>","<kotlinx.coroutines.internal.ThreadState: void <init>(kotlin.coroutines.CoroutineContext,int)>","<kotlinx.coroutines.CoroutineId: java.lang.Object updateThreadContext(kotlin.coroutines.CoroutineContext)>","<kotlinx.coroutines.internal.ThreadContextKt: void <clinit>()>","<kotlin.coroutines.EmptyCoroutineContext: java.lang.Object fold(java.lang.Object,kotlin.jvm.functions.Function2)>","<java.lang.Integer: void <clinit>()>","<kotlinx.coroutines.JobSupport: java.lang.Object fold(java.lang.Object,kotlin.jvm.functions.Function2)>","<kotlin.coroutines.AbstractCoroutineContextElement: java.lang.Object fold(java.lang.Object,kotlin.jvm.functions.Function2)>","<kotlin.TypeCastException: void <init>(java.lang.String)>","<java.lang.Integer: java.lang.Integer valueOf(int)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<kotlin.coroutines.CombinedContext: java.lang.Object fold(java.lang.Object,kotlin.jvm.functions.Function2)>","<kotlinx.coroutines.internal.ThreadContextKt: java.lang.Object threadContextElements(kotlin.coroutines.CoroutineContext)>"],"<io.reactivex.internal.util.ExceptionHelper: void <clinit>()>":["<io.reactivex.internal.util.ExceptionHelper: void <clinit>()>","<io.reactivex.internal.util.ExceptionHelper$Termination: void <init>()>"],"<androidx.appcompat.content.res.AppCompatResources: android.content.res.ColorStateList getCachedColorStateList(android.content.Context,int)>":["<androidx.appcompat.app.AppCompatActivity: android.content.res.Resources getResources()>","<android.content.res.Resources: android.content.res.Configuration getConfiguration()>","<androidx.appcompat.content.res.AppCompatResources: void <clinit>()>","<java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>"],"<androidx.appcompat.app.AppCompatDelegateImpl: android.view.View findViewById(int)>":["<androidx.appcompat.app.AppCompatDelegateImpl: void ensureSubDecor()>"],"<kotlinx.coroutines.JobCancellationException: boolean equals(java.lang.Object)>":["<kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>","<java.lang.Throwable: java.lang.String getMessage()>","<java.lang.Throwable: java.lang.Throwable getCause()>"],"<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat create(android.content.res.Resources,int,android.content.res.Resources$Theme)>":["<androidx.core.content.res.ResourcesCompat: android.graphics.drawable.Drawable getDrawable(android.content.res.Resources,int,android.content.res.Resources$Theme)>","<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void <init>()>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable$ConstantState getConstantState()>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableDelegateState: void <init>(android.graphics.drawable.Drawable$ConstantState)>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void <clinit>()>","<android.graphics.drawable.LayerDrawable: android.graphics.drawable.Drawable$ConstantState getConstantState()>","<android.content.res.Resources: android.content.res.XmlResourceParser getXml(int)>","<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: android.graphics.drawable.Drawable$ConstantState getConstantState()>","<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>","<android.os.Build$VERSION: void <clinit>()>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>","<androidx.appcompat.graphics.drawable.DrawableContainer: android.graphics.drawable.Drawable$ConstantState getConstantState()>","<android.util.Xml: void <clinit>()>","<android.util.Xml: android.util.AttributeSet asAttributeSet(org.xmlpull.v1.XmlPullParser)>","<androidx.core.graphics.drawable.WrappedDrawableApi14: android.graphics.drawable.Drawable$ConstantState getConstantState()>"],"<androidx.appcompat.widget.AppCompatDrawableManager: android.graphics.PorterDuff$Mode getTintMode(int)>":["<android.graphics.PorterDuff$Mode: void <clinit>()>"],"<io.reactivex.internal.schedulers.SchedulerPoolFactory: void tryPutIntoPool(boolean,java.util.concurrent.ScheduledExecutorService)>":["<io.reactivex.internal.schedulers.SchedulerPoolFactory: void <clinit>()>","<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>"],"<kotlinx.coroutines.scheduling.CoroutineScheduler: int submitToLocalQueue(kotlinx.coroutines.scheduling.Task,boolean)>":["<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler getScheduler()>","<kotlinx.coroutines.scheduling.TasksKt: void <clinit>()>","<kotlinx.coroutines.scheduling.TaskMode: void <clinit>()>","<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState getState()>","<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: boolean tryAcquireCpuPermit()>","<java.lang.Thread: java.lang.Thread currentThread()>","<kotlinx.coroutines.scheduling.Task: kotlinx.coroutines.scheduling.TaskMode getMode()>","<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.WorkQueue getLocalQueue()>","<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: boolean isBlocking()>","<kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: void <clinit>()>"],"<com.afollestad.photoaffix.views.MainActivity: void processIntent(android.content.Intent)>":["<java.util.ArrayList: void <init>(int)>","<android.app.Activity: void finish()>","<java.util.ArrayList: boolean add(java.lang.Object)>","<com.afollestad.photoaffix.engine.photos.Photo: void <clinit>()>","<com.afollestad.photoaffix.engine.photos.Photo: void <init>(long,java.lang.String,long,kotlin.jvm.functions.Function1,int,kotlin.jvm.internal.DefaultConstructorMarker)>","<com.afollestad.photoaffix.utilities.ext.ActivityExtKt: void toast$default(android.app.Activity,java.lang.Integer,java.lang.String,int,java.lang.Object)>","<kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>","<java.util.ArrayList: java.util.Iterator iterator()>","<java.lang.Integer: void <clinit>()>","<java.util.ArrayList: int size()>","<com.afollestad.photoaffix.views.MainActivity: void performAffix(java.util.List)>","<kotlin.collections.CollectionsKt__IterablesKt: int collectionSizeOrDefault(java.lang.Iterable,int)>","<java.lang.Integer: java.lang.Integer valueOf(int)>","<kotlin.jvm.internal.Intrinsics: void checkExpressionValueIsNotNull(java.lang.Object,java.lang.String)>"],"<com.afollestad.photoaffix.utilities.RealMediaScanner_Factory: com.afollestad.photoaffix.utilities.RealMediaScanner provideInstance(javax.inject.Provider)>":["<com.afollestad.photoaffix.engine.subengines.RealStitchEngine_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideScalePriorityPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.utilities.RealDpConverter_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.engine.RealAffixEngine_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideStackHorizontallyPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.engine.photos.RealPhotoLoader_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.engine.bitmaps.RealBitmapManipulator_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.utilities.RealMediaScanner_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.utilities.RealIoManager_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.utilities.RealMediaScanner: void <init>(android.app.Application)>","<com.afollestad.photoaffix.di.AppProvideModule_ProvideAppNameFactory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideImageSpacingVerticalPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideImageSpacingHorizontalPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideBgFillColorPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.presenters.RealMainPresenter_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideRxkPrefsFactory: java.lang.Object get()>","<dagger.internal.DoubleCheck: java.lang.Object get()>","<com.afollestad.photoaffix.engine.subengines.RealDimensionsEngine_Factory: java.lang.Object get()>","<dagger.internal.InstanceFactory: java.lang.Object get()>"],"<com.afollestad.photoaffix.engine.photos.RealPhotoLoader_Factory: com.afollestad.photoaffix.engine.photos.RealPhotoLoader get()>":["<com.afollestad.photoaffix.engine.photos.RealPhotoLoader_Factory: com.afollestad.photoaffix.engine.photos.RealPhotoLoader provideInstance(javax.inject.Provider)>"],"<androidx.fragment.app.FragmentManagerState$1: void <init>()>":["<java.lang.Object: void <init>()>"],"<androidx.appcompat.view.ActionBarPolicy: androidx.appcompat.view.ActionBarPolicy get(android.content.Context)>":["<androidx.appcompat.view.ActionBarPolicy: void <init>(android.content.Context)>"],"<androidx.fragment.app.FragmentManagerImpl: void saveFragmentViewState(androidx.fragment.app.Fragment)>":["<android.util.SparseArray: void clear()>","<android.util.SparseArray: int size()>","<android.util.SparseArray: void <init>()>"],"<androidx.appcompat.view.menu.MenuBuilder: void <clinit>()>":["<androidx.appcompat.view.menu.MenuBuilder: void <clinit>()>"],"<androidx.fragment.app.FragmentManagerImpl: void dispatchOnFragmentCreated(androidx.fragment.app.Fragment,android.os.Bundle,boolean)>":["<java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>"],"<androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState getPanelState(int,boolean)>":["<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>","<androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState: void <init>(int)>","<java.lang.System: void <clinit>()>"],"<kotlin.collections.CollectionsKt___CollectionsKt: java.util.Collection toCollection(java.lang.Iterable,java.util.Collection)>":["<kotlin.collections.EmptyIterator: java.lang.Object next()>","<kotlin.collections.EmptyList: java.util.Iterator iterator()>","<java.util.ArrayList: java.util.Iterator iterator()>","<kotlin.collections.EmptyList: boolean add(java.lang.Object)>","<kotlin.collections.EmptyIterator: boolean hasNext()>","<java.util.ArrayList: boolean add(java.lang.Object)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<com.afollestad.photoaffix.engine.photos.PhotoKt$defaultUriParser$1: android.net.Uri invoke(java.lang.String)>":["<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>","<java.lang.StringBuilder: java.lang.String toString()>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<java.lang.StringBuilder: void <init>()>","<com.afollestad.photoaffix.utilities.ext.StringExtKt: android.net.Uri toUri(java.lang.String)>","<kotlin.text.StringsKt__StringsJVMKt: boolean startsWith$default(java.lang.String,java.lang.String,boolean,int,java.lang.Object)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<kotlin.jvm.internal.Intrinsics: void checkExpressionValueIsNotNull(java.lang.Object,java.lang.String)>"],"<androidx.appcompat.app.AppCompatDelegateImpl$5: void <init>(androidx.appcompat.app.AppCompatDelegateImpl)>":["<java.lang.Object: void <init>()>"],"<com.afollestad.photoaffix.prefs.PrefsModule_ProvideImageSpacingVerticalPrefFactory: com.afollestad.rxkprefs.Pref get()>":["<com.afollestad.photoaffix.prefs.PrefsModule_ProvideImageSpacingVerticalPrefFactory: com.afollestad.rxkprefs.Pref provideInstance(com.afollestad.photoaffix.prefs.PrefsModule,javax.inject.Provider)>"],"<androidx.appcompat.app.AppCompatDelegateImpl: void installViewFactory()>":["<android.util.Log: int i(java.lang.String,java.lang.String)>","<android.view.LayoutInflater: android.view.LayoutInflater 'from'(android.content.Context)>","<androidx.core.view.LayoutInflaterCompat: void setFactory2(android.view.LayoutInflater,android.view.LayoutInflater$Factory2)>"],"<kotlin.ranges.IntRange: void <clinit>()>":["<kotlin.ranges.IntRange: void <init>(int,int)>","<kotlin.ranges.IntRange: void <clinit>()>","<kotlin.ranges.IntProgression: void <clinit>()>","<kotlin.ranges.IntRange$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>"],"<androidx.core.graphics.PathParser$ExtractFloatResult: void <init>()>":["<java.lang.Object: void <init>()>"],"<androidx.core.graphics.drawable.WrappedDrawableApi14: void updateLocalState(android.content.res.Resources)>":["<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableDelegateState: android.graphics.drawable.Drawable newDrawable(android.content.res.Resources)>","<androidx.core.graphics.drawable.WrappedDrawableApi14: void setWrappedDrawable(android.graphics.drawable.Drawable)>","<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat$AnimatedVectorDrawableDelegateState: android.graphics.drawable.Drawable newDrawable(android.content.res.Resources)>","<androidx.core.graphics.drawable.WrappedDrawableApi14$DrawableWrapperStateBase: android.graphics.drawable.Drawable newDrawable(android.content.res.Resources)>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.graphics.drawable.Drawable newDrawable(android.content.res.Resources)>","<androidx.core.graphics.drawable.WrappedDrawableApi21$DrawableWrapperStateLollipop: android.graphics.drawable.Drawable newDrawable(android.content.res.Resources)>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatedStateListState: android.graphics.drawable.Drawable newDrawable(android.content.res.Resources)>"],"<androidx.core.provider.FontRequest: void <init>(java.lang.String,java.lang.String,java.lang.String,java.util.List)>":["<androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>","<java.lang.StringBuilder: java.lang.String toString()>","<java.lang.Object: void <init>()>","<java.lang.StringBuilder: void <init>(java.lang.String)>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>"],"<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$FrameInterpolator: void <init>(android.graphics.drawable.AnimationDrawable,boolean)>":["<java.lang.Object: void <init>()>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$FrameInterpolator: int updateFrames(android.graphics.drawable.AnimationDrawable,boolean)>"],"<androidx.fragment.app.FragmentTransitionImpl: void <init>()>":["<java.lang.Object: void <init>()>"],"<java.lang.String: boolean endsWith(java.lang.String)>":["<java.lang.RuntimeException: void <init>(java.lang.String)>"],"<java.lang.Thread: java.lang.String getName()>":["<java.lang.RuntimeException: void <init>(java.lang.String)>"],"<androidx.collection.MapCollections: java.util.Set getKeySet()>":["<androidx.collection.MapCollections$KeySet: void <init>(androidx.collection.MapCollections)>"],"<java.lang.Object: void <init>()>":["<java.lang.RuntimeException: void <init>(java.lang.String)>","<java.lang.Object: void finalize()>"],"<io.reactivex.internal.schedulers.NewThreadWorker: void <init>(java.util.concurrent.ThreadFactory)>":["<io.reactivex.internal.schedulers.SchedulerPoolFactory: void <clinit>()>","<io.reactivex.internal.schedulers.SchedulerPoolFactory: java.util.concurrent.ScheduledExecutorService create(java.util.concurrent.ThreadFactory)>","<io.reactivex.Scheduler$Worker: void <init>()>"],"<androidx.appcompat.content.res.AppCompatResources: boolean isColorInt(android.content.Context,int)>":["<androidx.appcompat.app.AppCompatActivity: android.content.res.Resources getResources()>","<androidx.appcompat.content.res.AppCompatResources: void <clinit>()>","<android.content.res.Resources: void getValue(int,android.util.TypedValue,boolean)>","<androidx.appcompat.content.res.AppCompatResources: android.util.TypedValue getTypedValue()>"],"<kotlinx.coroutines.MissingMainCoroutineDispatcher: void missing()>":["<java.lang.IllegalStateException: void <init>(java.lang.String)>","<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>"],"<com.afollestad.materialdialogs.MaterialDialog: void show()>":["<android.app.Dialog: void show()>","<com.afollestad.materialdialogs.utils.DialogExtKt: void preShow(com.afollestad.materialdialogs.MaterialDialog)>"],"<androidx.core.graphics.TypefaceCompatApi21Impl: android.graphics.Typeface createFromFontInfo(android.content.Context,android.os.CancellationSignal,androidx.core.provider.FontsContractCompat$FontInfo[],int)>":["<androidx.core.graphics.TypefaceCompatApi21Impl: java.io.File getFile(android.os.ParcelFileDescriptor)>","<android.content.ContextWrapper: android.content.ContentResolver getContentResolver()>","<android.graphics.Typeface: android.graphics.Typeface createFromFile(java.io.File)>","<androidx.core.graphics.TypefaceCompatBaseImpl: androidx.core.provider.FontsContractCompat$FontInfo findBestInfo(androidx.core.provider.FontsContractCompat$FontInfo[],int)>","<android.graphics.Typeface: void <clinit>()>","<java.io.FileInputStream: void close()>","<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>","<java.io.FileInputStream: void <init>(java.io.FileDescriptor)>","<java.io.File: boolean canRead()>","<androidx.core.graphics.TypefaceCompatBaseImpl: android.graphics.Typeface createFromInputStream(android.content.Context,java.io.InputStream)>"],"<io.reactivex.internal.functions.Functions$FalsePredicate: void <init>()>":["<java.lang.Object: void <init>()>"],"<kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher: void dispatchWithContext$kotlinx_coroutines_core(java.lang.Runnable,kotlinx.coroutines.scheduling.TaskContext,boolean)>":["<kotlinx.coroutines.DefaultExecutor: void <clinit>()>","<kotlinx.coroutines.scheduling.CoroutineScheduler: void dispatch(java.lang.Runnable,kotlinx.coroutines.scheduling.TaskContext,boolean)>","<kotlinx.coroutines.EventLoopBase: void <clinit>()>","<kotlinx.coroutines.EventLoopBase: void execute$kotlinx_coroutines_core(java.lang.Runnable)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.Task createTask$kotlinx_coroutines_core(java.lang.Runnable,kotlinx.coroutines.scheduling.TaskContext)>"],"<kotlin.coroutines.jvm.internal.CompletedContinuation: void <init>()>":["<java.lang.Object: void <init>()>"],"<kotlinx.coroutines.JobSupport: boolean makeCompletingOnce$kotlinx_coroutines_core(java.lang.Object,int)>":["<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>","<kotlinx.coroutines.JobSupport: java.lang.Throwable getExceptionOrNull(java.lang.Object)>","<java.lang.IllegalStateException: void <init>(java.lang.String)>","<java.lang.StringBuilder: java.lang.String toString()>","<kotlinx.coroutines.JobSupport: java.lang.Object getState$kotlinx_coroutines_core()>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<java.lang.StringBuilder: void <init>()>","<java.lang.String: java.lang.String toString()>","<kotlinx.coroutines.JobSupport: int tryMakeCompleting(java.lang.Object,java.lang.Object,int)>","<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>"],"<androidx.appcompat.widget.AppCompatDrawableManager: void addTintListToCache(android.content.Context,int,android.content.res.ColorStateList)>":["<androidx.collection.SparseArrayCompat: void <clinit>()>","<androidx.collection.SparseArrayCompat: void append(int,java.lang.Object)>","<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>","<java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>","<java.util.WeakHashMap: void <init>()>","<androidx.collection.SparseArrayCompat: void <init>()>"],"<kotlinx.coroutines.scheduling.CoroutineScheduler: void access$parkedWorkersStackPush(kotlinx.coroutines.scheduling.CoroutineScheduler,kotlinx.coroutines.scheduling.CoroutineScheduler$Worker)>":["<kotlinx.coroutines.scheduling.CoroutineScheduler: void parkedWorkersStackPush(kotlinx.coroutines.scheduling.CoroutineScheduler$Worker)>"],"<kotlinx.coroutines.scheduling.WorkQueue: void addToGlobalQueue(kotlinx.coroutines.scheduling.GlobalQueue,kotlinx.coroutines.scheduling.Task)>":["<java.lang.IllegalStateException: void <init>(java.lang.String)>","<kotlinx.coroutines.internal.LockFreeTaskQueue: boolean addLast(java.lang.Object)>","<java.lang.String: java.lang.String toString()>"],"<kotlin.ranges.RangesKt___RangesKt: int coerceIn(int,int,int)>":["<java.lang.StringBuilder: java.lang.String toString()>","<java.lang.IllegalArgumentException: void <init>(java.lang.String)>","<java.lang.StringBuilder: java.lang.StringBuilder append(char)>","<java.lang.StringBuilder: void <init>()>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<java.lang.StringBuilder: java.lang.StringBuilder append(int)>"],"<kotlinx.coroutines.JobSupport: void promoteSingleToNodeList(kotlinx.coroutines.JobNode)>":["<kotlinx.coroutines.NodeList: void <init>()>","<kotlinx.coroutines.JobSupport: void <clinit>()>"],"<androidx.collection.LongSparseArray: java.lang.Object get(long,java.lang.Object)>":["<androidx.collection.ContainerHelpers: int binarySearch(long[],int,long)>","<androidx.collection.ContainerHelpers: void <clinit>()>","<androidx.collection.LongSparseArray: void <clinit>()>"],"<com.afollestad.materialdialogs.checkbox.DialogCheckboxExtKt: android.widget.CheckBox getCheckBoxPrompt(com.afollestad.materialdialogs.MaterialDialog)>":["<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<com.afollestad.materialdialogs.MaterialDialog: com.afollestad.materialdialogs.internal.main.DialogLayout getView$com_afollestad_material_dialogs_core()>"],"<androidx.core.content.res.FontResourcesParserCompat: androidx.core.content.res.FontResourcesParserCompat$FamilyResourceEntry readFamily(org.xmlpull.v1.XmlPullParser,android.content.res.Resources)>":["<androidx.core.content.res.FontResourcesParserCompat$ProviderResourceEntry: void <init>(androidx.core.provider.FontRequest,int,int)>","<androidx.core.content.res.FontResourcesParserCompat: androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry readFont(org.xmlpull.v1.XmlPullParser,android.content.res.Resources)>","<java.util.ArrayList: boolean add(java.lang.Object)>","<java.util.ArrayList: boolean isEmpty()>","<androidx.core.content.res.FontResourcesParserCompat: void skip(org.xmlpull.v1.XmlPullParser)>","<androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry: void <init>(androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry[])>","<androidx.core.R$styleable: void <clinit>()>","<androidx.core.content.res.FontResourcesParserCompat: java.util.List readCerts(android.content.res.Resources,int)>","<java.util.ArrayList: void <init>()>","<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>","<java.util.ArrayList: int size()>","<androidx.core.provider.FontRequest: void <init>(java.lang.String,java.lang.String,java.lang.String,java.util.List)>","<android.util.Xml: android.util.AttributeSet asAttributeSet(org.xmlpull.v1.XmlPullParser)>","<android.util.Xml: void <clinit>()>","<android.content.res.Resources: android.content.res.TypedArray obtainAttributes(android.util.AttributeSet,int[])>"],"<androidx.appcompat.app.AppCompatDelegateImpl: void onPanelClosed(int)>":["<androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.app.ActionBar getSupportActionBar()>","<androidx.appcompat.app.WindowDecorActionBar: void dispatchMenuVisibilityChanged(boolean)>","<androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState getPanelState(int,boolean)>","<androidx.appcompat.app.AppCompatDelegateImpl: void closePanel(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,boolean)>"],"<androidx.fragment.app.FragmentTransition: androidx.fragment.app.FragmentTransitionImpl chooseImpl(androidx.fragment.app.Fragment,androidx.fragment.app.Fragment)>":["<java.util.ArrayList: boolean isEmpty()>","<java.lang.IllegalArgumentException: void <init>(java.lang.String)>","<java.util.ArrayList: void <init>()>","<androidx.fragment.app.FragmentTransition: void <clinit>()>","<java.util.ArrayList: boolean add(java.lang.Object)>","<androidx.fragment.app.FragmentTransition: boolean canHandleAll(androidx.fragment.app.FragmentTransitionImpl,java.util.List)>"],"<androidx.core.graphics.drawable.WrappedDrawableApi14: void setAlpha(int)>":["<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: void setAlpha(int)>","<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: void setAlpha(int)>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void setAlpha(int)>","<androidx.core.graphics.drawable.WrappedDrawableApi14: void setAlpha(int)>","<android.graphics.drawable.LayerDrawable: void setAlpha(int)>"],"<androidx.collection.SparseArrayCompat: void put(int,java.lang.Object)>":["<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>","<androidx.collection.SparseArrayCompat: void <clinit>()>","<java.lang.System: void <clinit>()>","<androidx.collection.SparseArrayCompat: void gc()>","<androidx.collection.ContainerHelpers: int idealIntArraySize(int)>","<androidx.collection.ContainerHelpers: void <clinit>()>","<androidx.collection.ContainerHelpers: int binarySearch(int[],int,int)>"],"<androidx.appcompat.view.menu.MenuBuilder: void setShortcutsVisibleInner(boolean)>":["<android.content.res.Resources: android.content.res.Configuration getConfiguration()>","<androidx.core.view.ViewConfigurationCompat: void <clinit>()>","<androidx.core.view.ViewConfigurationCompat: boolean shouldShowMenuShortcutsWhenKeyboardPresent(android.view.ViewConfiguration,android.content.Context)>","<android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>"],"<androidx.core.view.ViewCompat: void setTransitionName(android.view.View,java.lang.String)>":["<android.os.Build$VERSION: void <clinit>()>","<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>","<androidx.core.view.ViewCompat: void <clinit>()>","<java.util.WeakHashMap: void <init>()>"],"<com.afollestad.photoaffix.engine.bitmaps.RealBitmapManipulator_Factory: com.afollestad.photoaffix.engine.bitmaps.RealBitmapManipulator_Factory create(javax.inject.Provider)>":["<com.afollestad.photoaffix.engine.bitmaps.RealBitmapManipulator_Factory: void <init>(javax.inject.Provider)>"],"<io.reactivex.observables.ConnectableObservable: void <init>()>":["<io.reactivex.Observable: void <init>()>"],"<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableDelegateState: android.graphics.drawable.Drawable newDrawable(android.content.res.Resources)>":["<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableDelegateState: android.graphics.drawable.Drawable newDrawable(android.content.res.Resources)>","<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat$AnimatedVectorDrawableDelegateState: android.graphics.drawable.Drawable newDrawable(android.content.res.Resources)>","<androidx.core.graphics.drawable.WrappedDrawableApi14$DrawableWrapperStateBase: android.graphics.drawable.Drawable newDrawable(android.content.res.Resources)>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.graphics.drawable.Drawable newDrawable(android.content.res.Resources)>","<androidx.core.graphics.drawable.WrappedDrawableApi21$DrawableWrapperStateLollipop: android.graphics.drawable.Drawable newDrawable(android.content.res.Resources)>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void <init>()>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void <clinit>()>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatedStateListState: android.graphics.drawable.Drawable newDrawable(android.content.res.Resources)>"],"<androidx.fragment.app.FragmentManagerImpl: void dispatchOnFragmentPreCreated(androidx.fragment.app.Fragment,android.os.Bundle,boolean)>":["<java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>"],"<kotlinx.coroutines.InactiveNodeList: void <init>(kotlinx.coroutines.NodeList)>":["<java.lang.Object: void <init>()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<androidx.appcompat.app.AppCompatDelegateImpl: void checkCloseActionMenu(androidx.appcompat.view.menu.MenuBuilder)>":["<androidx.appcompat.app.AppCompatDelegateImpl: android.view.Window$Callback getWindowCallback()>"],"<androidx.appcompat.app.AppCompatDelegateImpl: void callOnPanelClosed(int,androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,android.view.Menu)>":["<androidx.appcompat.app.AppCompatDelegateImpl$AppCompatWindowCallback: void onPanelClosed(int,android.view.Menu)>"],"<kotlinx.coroutines.CommonPool: int getParallelism()>":["<java.lang.Integer: void <clinit>()>","<java.lang.Runtime: java.lang.Runtime getRuntime()>","<kotlin.ranges.RangesKt___RangesKt: int coerceAtLeast(int,int)>","<java.lang.Integer: java.lang.Integer valueOf(int)>","<kotlinx.coroutines.CommonPool: void <clinit>()>"],"<com.afollestad.assent.internal.Data$Companion$assureFragment$1$1: void invoke(androidx.fragment.app.FragmentTransaction)>":["<kotlin.jvm.internal.Intrinsics: void throwNpe()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<androidx.fragment.app.BackStackRecord: androidx.fragment.app.FragmentTransaction add(androidx.fragment.app.Fragment,java.lang.String)>","<com.afollestad.assent.internal.Data: com.afollestad.assent.internal.PermissionFragment getPermissionFragment$com_afollestad_assent()>"],"<androidx.vectordrawable.graphics.drawable.VectorDrawableCommon: void jumpToCurrentState()>":["<androidx.core.graphics.drawable.DrawableCompat: void jumpToCurrentState(android.graphics.drawable.Drawable)>"],"<com.afollestad.photoaffix.engine.bitmaps.BitmapIterator: android.graphics.BitmapFactory$Options next()>":["<java.lang.IllegalStateException: void <init>(java.lang.String)>","<java.lang.String: java.lang.String toString()>","<java.util.ArrayList: int size()>","<com.afollestad.photoaffix.engine.bitmaps.RealBitmapManipulator: android.graphics.Bitmap decodePhoto(com.afollestad.photoaffix.engine.photos.Photo,android.graphics.BitmapFactory$Options)>","<java.util.ArrayList: java.lang.Object get(int)>","<com.afollestad.photoaffix.engine.bitmaps.RealBitmapManipulator: android.graphics.BitmapFactory$Options createOptions(boolean)>"],"<kotlinx.coroutines.JobSupport$Finishing: void addExceptionLocked(java.lang.Throwable)>":["<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>","<java.lang.IllegalStateException: void <init>(java.lang.String)>","<java.lang.StringBuilder: java.lang.String toString()>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<java.lang.StringBuilder: void <init>()>","<kotlin.TypeCastException: void <init>(java.lang.String)>","<java.util.ArrayList: boolean add(java.lang.Object)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<kotlinx.coroutines.JobSupport$Finishing: java.util.ArrayList allocateList()>"],"<androidx.core.graphics.TypefaceCompatApi24Impl: android.graphics.Typeface createFromFontFamilyFilesResourceEntry(android.content.Context,androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry,android.content.res.Resources,int)>":["<androidx.core.graphics.TypefaceCompatUtil: java.nio.ByteBuffer copyToDirectBuffer(android.content.Context,android.content.res.Resources,int)>","<androidx.core.graphics.TypefaceCompatApi24Impl: boolean addFontWeightStyle(java.lang.Object,java.nio.ByteBuffer,int,int,boolean)>","<androidx.core.graphics.TypefaceCompatApi24Impl: java.lang.Object newFamily()>","<androidx.core.graphics.TypefaceCompatApi24Impl: void <clinit>()>","<androidx.core.graphics.TypefaceCompatApi24Impl: android.graphics.Typeface createFromFamiliesWithDefault(java.lang.Object)>","<androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry: androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry[] getEntries()>"],"<com.afollestad.photoaffix.adapters.PhotoGridAdapter: void setPhotos(java.util.List)>":["<androidx.recyclerview.widget.RecyclerView$Adapter: void notifyDataSetChanged()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<com.afollestad.photoaffix.engine.bitmaps.BitmapIterator: boolean hasNext()>":["<java.util.ArrayList: int size()>"],"<androidx.core.graphics.PathParser: androidx.core.graphics.PathParser$PathDataNode[] deepCopyNodes(androidx.core.graphics.PathParser$PathDataNode[])>":["<androidx.core.graphics.PathParser$PathDataNode: void <init>(androidx.core.graphics.PathParser$PathDataNode)>"],"<androidx.core.graphics.drawable.WrappedDrawableApi14: android.graphics.drawable.Drawable mutate()>":["<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: android.graphics.drawable.Drawable mutate()>","<androidx.core.graphics.drawable.WrappedDrawableApi21: androidx.core.graphics.drawable.WrappedDrawableApi14$DrawableWrapperState mutateConstantState()>","<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: android.graphics.drawable.Drawable mutate()>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable$ConstantState getConstantState()>","<androidx.core.graphics.drawable.WrappedDrawableApi14: androidx.core.graphics.drawable.WrappedDrawableApi14$DrawableWrapperState mutateConstantState()>","<android.graphics.drawable.LayerDrawable: android.graphics.drawable.Drawable$ConstantState getConstantState()>","<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: android.graphics.drawable.Drawable$ConstantState getConstantState()>","<android.graphics.drawable.LayerDrawable: android.graphics.drawable.Drawable mutate()>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mutate()>","<androidx.core.graphics.drawable.WrappedDrawableApi14: android.graphics.drawable.Drawable mutate()>","<androidx.appcompat.graphics.drawable.DrawableContainer: android.graphics.drawable.Drawable$ConstantState getConstantState()>","<androidx.core.graphics.drawable.WrappedDrawableApi14: android.graphics.drawable.Drawable$ConstantState getConstantState()>","<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable mutate()>"],"<com.afollestad.materialdialogs.MaterialDialog: com.afollestad.materialdialogs.MaterialDialog message$default(com.afollestad.materialdialogs.MaterialDialog,java.lang.Integer,java.lang.CharSequence,boolean,float,int,java.lang.Object)>":["<com.afollestad.materialdialogs.MaterialDialog: com.afollestad.materialdialogs.MaterialDialog message(java.lang.Integer,java.lang.CharSequence,boolean,float)>"],"<java.lang.Object: boolean equals(java.lang.Object)>":["<java.lang.RuntimeException: void <init>(java.lang.String)>"],"<androidx.appcompat.widget.AppCompatDrawableManager$VdcInflateDelegate: void <init>()>":["<java.lang.Object: void <init>()>"],"<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: void setTintMode(android.graphics.PorterDuff$Mode)>":["<androidx.appcompat.graphics.drawable.DrawableContainer: void setTintMode(android.graphics.PorterDuff$Mode)>"],"<androidx.appcompat.widget.AppCompatDrawableManager: android.content.res.ColorStateList createSwitchThumbColorStateList(android.content.Context)>":["<androidx.appcompat.widget.ThemeUtils: int getThemeAttrColor(android.content.Context,int)>","<android.content.res.ColorStateList: void <clinit>()>","<android.content.res.ColorStateList: int getDefaultColor()>","<androidx.appcompat.widget.ThemeUtils: void <clinit>()>","<android.content.res.ColorStateList: int getColorForState(int[],int)>","<androidx.appcompat.widget.ThemeUtils: android.content.res.ColorStateList getThemeAttrColorStateList(android.content.Context,int)>","<android.content.res.ColorStateList: boolean isStateful()>","<android.content.res.ColorStateList: void <init>(int[][],int[])>","<androidx.appcompat.widget.ThemeUtils: int getDisabledThemeAttrColor(android.content.Context,int)>"],"<androidx.fragment.app.FragmentTransitionCompat21: void addTargets(java.lang.Object,java.util.ArrayList)>":["<android.transition.TransitionSet: android.transition.Transition addTarget(android.view.View)>","<androidx.fragment.app.FragmentTransitionImpl: boolean isNullOrEmpty(java.util.List)>","<java.util.ArrayList: int size()>","<android.transition.TransitionSet: int getTransitionCount()>","<java.util.ArrayList: java.lang.Object get(int)>","<androidx.fragment.app.FragmentTransitionCompat21: boolean hasSimpleTarget(android.transition.Transition)>","<androidx.fragment.app.FragmentTransitionCompat21: void addTargets(java.lang.Object,java.util.ArrayList)>","<android.transition.Transition: java.util.List getTargets()>","<android.transition.TransitionSet: android.transition.Transition getTransitionAt(int)>"],"<com.afollestad.photoaffix.utilities.RealIoManager_Factory: void <init>(javax.inject.Provider,javax.inject.Provider)>":["<java.lang.Object: void <init>()>"],"<androidx.appcompat.widget.AppCompatDrawableManager: boolean isVectorDrawable(android.graphics.drawable.Drawable)>":["<java.lang.Object: java.lang.Class getClass()>","<java.lang.String: boolean equals(java.lang.Object)>"],"<kotlinx.coroutines.AbstractCoroutine: void onStartInternal$kotlinx_coroutines_core()>":["<kotlinx.coroutines.AbstractCoroutine: void onStart()>","<kotlinx.coroutines.LazyDeferredCoroutine: void onStart()>","<kotlinx.coroutines.LazyStandaloneCoroutine: void onStart()>"],"<androidx.core.view.ViewCompat: void setElevation(android.view.View,float)>":["<android.os.Build$VERSION: void <clinit>()>"],"<kotlinx.coroutines.CoroutineExceptionHandler$Key: void <init>()>":["<java.lang.Object: void <init>()>"],"<androidx.fragment.app.FragmentManagerImpl$4: void <init>(androidx.fragment.app.FragmentManagerImpl,android.view.ViewGroup,android.view.View,androidx.fragment.app.Fragment)>":["<android.animation.AnimatorListenerAdapter: void <init>()>"],"<kotlinx.coroutines.JobSupport: boolean cancelMakeCompleting(java.lang.Object)>":["<kotlinx.coroutines.JobSupport: java.lang.Throwable createCauseException(java.lang.Object)>","<java.lang.IllegalStateException: void <init>(java.lang.String)>","<kotlinx.coroutines.JobSupport: java.lang.Object getState$kotlinx_coroutines_core()>","<java.lang.String: java.lang.String toString()>","<kotlinx.coroutines.JobSupport: int tryMakeCompleting(java.lang.Object,java.lang.Object,int)>","<kotlinx.coroutines.CompletedExceptionally: void <init>(java.lang.Throwable)>"],"<androidx.fragment.app.FragmentManagerImpl$2: void <init>(androidx.fragment.app.FragmentManagerImpl,android.view.animation.Animation$AnimationListener,android.view.ViewGroup,androidx.fragment.app.Fragment)>":["<androidx.fragment.app.FragmentManagerImpl$AnimationListenerWrapper: void <init>(android.view.animation.Animation$AnimationListener)>"],"<androidx.appcompat.app.AppCompatActivity: androidx.appcompat.app.AppCompatDelegate getDelegate()>":["<androidx.appcompat.app.AppCompatDelegate: androidx.appcompat.app.AppCompatDelegate create(android.app.Activity,androidx.appcompat.app.AppCompatCallback)>","<androidx.appcompat.app.AppCompatDelegate: void <clinit>()>"],"<androidx.fragment.app.FragmentManagerImpl: void attachController(androidx.fragment.app.FragmentHostCallback,androidx.fragment.app.FragmentContainer,androidx.fragment.app.Fragment)>":["<java.lang.IllegalStateException: void <init>(java.lang.String)>"],"<androidx.fragment.app.FragmentController: void dispatchStop()>":["<androidx.fragment.app.FragmentManagerImpl: void dispatchStop()>"],"<androidx.fragment.app.FragmentManagerImpl: void dispatchOnFragmentStarted(androidx.fragment.app.Fragment,boolean)>":["<java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>"],"<androidx.recyclerview.widget.ViewBoundsCheck$BoundFlags: void <init>()>":["<java.lang.Object: void <init>()>"],"<kotlin.coroutines.CoroutineContext$DefaultImpls: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext,kotlin.coroutines.CoroutineContext)>":["<kotlin.coroutines.EmptyCoroutineContext: void <clinit>()>","<kotlinx.coroutines.CoroutineId: java.lang.Object fold(java.lang.Object,kotlin.jvm.functions.Function2)>","<kotlin.coroutines.EmptyCoroutineContext: java.lang.Object fold(java.lang.Object,kotlin.jvm.functions.Function2)>","<kotlinx.coroutines.JobSupport: java.lang.Object fold(java.lang.Object,kotlin.jvm.functions.Function2)>","<kotlin.coroutines.AbstractCoroutineContextElement: java.lang.Object fold(java.lang.Object,kotlin.jvm.functions.Function2)>","<kotlin.coroutines.CoroutineContext$plus$1: void <clinit>()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<kotlin.coroutines.CombinedContext: java.lang.Object fold(java.lang.Object,kotlin.jvm.functions.Function2)>"],"<androidx.collection.MapCollections$ValuesCollection: void <init>(androidx.collection.MapCollections)>":["<java.lang.Object: void <init>()>"],"<java.lang.Class: boolean isInstance(java.lang.Object)>":["<java.lang.RuntimeException: void <init>(java.lang.String)>"],"<androidx.appcompat.widget.AppCompatDrawableManager: android.content.res.ColorStateList getTintList(android.content.Context,int)>":["<androidx.appcompat.content.res.AppCompatResources: android.content.res.ColorStateList getColorStateList(android.content.Context,int)>","<androidx.appcompat.widget.AppCompatDrawableManager: android.content.res.ColorStateList createBorderlessButtonColorStateList(android.content.Context)>","<androidx.appcompat.widget.ThemeUtils: void <clinit>()>","<androidx.appcompat.widget.AppCompatDrawableManager: void addTintListToCache(android.content.Context,int,android.content.res.ColorStateList)>","<androidx.appcompat.widget.ThemeUtils: android.content.res.ColorStateList getThemeAttrColorStateList(android.content.Context,int)>","<androidx.appcompat.widget.AppCompatDrawableManager: android.content.res.ColorStateList createColoredButtonColorStateList(android.content.Context)>","<androidx.appcompat.widget.AppCompatDrawableManager: android.content.res.ColorStateList createDefaultButtonColorStateList(android.content.Context)>","<androidx.appcompat.widget.AppCompatDrawableManager: boolean arrayContains(int[],int)>","<androidx.appcompat.content.res.AppCompatResources: void <clinit>()>","<androidx.appcompat.widget.AppCompatDrawableManager: android.content.res.ColorStateList getTintListFromCache(android.content.Context,int)>","<androidx.appcompat.widget.AppCompatDrawableManager: android.content.res.ColorStateList createSwitchThumbColorStateList(android.content.Context)>","<androidx.appcompat.widget.AppCompatDrawableManager: void <clinit>()>"],"<com.afollestad.photoaffix.prefs.PrefsModule_ProvideRxkPrefsFactory: com.afollestad.rxkprefs.RxkPrefs get()>":["<com.afollestad.photoaffix.prefs.PrefsModule_ProvideRxkPrefsFactory: com.afollestad.rxkprefs.RxkPrefs provideInstance(com.afollestad.photoaffix.prefs.PrefsModule,javax.inject.Provider)>"],"<com.afollestad.photoaffix.prefs.PrefsModule_ProvideBgFillColorPrefFactory: com.afollestad.rxkprefs.Pref provideInstance(com.afollestad.photoaffix.prefs.PrefsModule,javax.inject.Provider)>":["<com.afollestad.photoaffix.prefs.PrefsModule_ProvideScalePriorityPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.engine.subengines.RealStitchEngine_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.utilities.RealDpConverter_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.engine.RealAffixEngine_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideStackHorizontallyPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.engine.photos.RealPhotoLoader_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideBgFillColorPrefFactory: com.afollestad.rxkprefs.Pref proxyProvideBgFillColorPref(com.afollestad.photoaffix.prefs.PrefsModule,com.afollestad.rxkprefs.RxkPrefs)>","<com.afollestad.photoaffix.engine.bitmaps.RealBitmapManipulator_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.utilities.RealMediaScanner_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.utilities.RealIoManager_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideImageSpacingVerticalPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideImageSpacingHorizontalPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.di.AppProvideModule_ProvideAppNameFactory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideBgFillColorPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.presenters.RealMainPresenter_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideRxkPrefsFactory: java.lang.Object get()>","<com.afollestad.photoaffix.engine.subengines.RealDimensionsEngine_Factory: java.lang.Object get()>","<dagger.internal.DoubleCheck: java.lang.Object get()>","<dagger.internal.InstanceFactory: java.lang.Object get()>"],"<kotlinx.coroutines.scheduling.NanoTimeSource: void <init>()>":["<kotlinx.coroutines.scheduling.TimeSource: void <init>()>"],"<kotlinx.coroutines.JobSupport: java.lang.Throwable getChildJobCancellationCause()>":["<kotlinx.coroutines.JobImpl: boolean getHandlesException()>","<java.lang.IllegalStateException: void <init>(java.lang.String)>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>","<java.lang.StringBuilder: java.lang.String toString()>","<kotlinx.coroutines.JobSupport: boolean getHandlesException()>","<kotlinx.coroutines.JobCancellationException: void <init>(java.lang.String,java.lang.Throwable,kotlinx.coroutines.Job)>","<kotlinx.coroutines.JobSupport: java.lang.String stateString(java.lang.Object)>","<java.lang.StringBuilder: void <init>()>","<kotlinx.coroutines.JobSupport: java.lang.Object getState$kotlinx_coroutines_core()>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<java.lang.String: java.lang.String toString()>"],"<kotlinx.coroutines.JobSupport: void notifyCancelling(kotlinx.coroutines.NodeList,java.lang.Throwable)>":["<kotlinx.coroutines.internal.LockFreeLinkedListNode: java.lang.Object getNext()>","<kotlinx.coroutines.InvokeOnCancelling: void invoke(java.lang.Throwable)>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<java.lang.StringBuilder: void <init>()>","<kotlin.ExceptionsKt__ExceptionsKt: void addSuppressed(java.lang.Throwable,java.lang.Throwable)>","<kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>","<kotlinx.coroutines.JobSupport: void handleOnCompletionException$kotlinx_coroutines_core(java.lang.Throwable)>","<java.lang.StringBuilder: java.lang.String toString()>","<kotlinx.coroutines.ResumeAwaitOnCompletion: void invoke(java.lang.Throwable)>","<kotlinx.coroutines.internal.LockFreeLinkedListNode: kotlinx.coroutines.internal.LockFreeLinkedListNode getNextNode()>","<kotlinx.coroutines.AbstractCoroutine: void handleOnCompletionException$kotlinx_coroutines_core(java.lang.Throwable)>","<kotlinx.coroutines.ChildHandleNode: void invoke(java.lang.Throwable)>","<kotlin.Unit: void <clinit>()>","<kotlinx.coroutines.CompletionHandlerException: void <init>(java.lang.String,java.lang.Throwable)>","<kotlinx.coroutines.ChildContinuation: void invoke(java.lang.Throwable)>","<kotlinx.coroutines.JobSupport$ChildCompletion: void invoke(java.lang.Throwable)>","<kotlinx.coroutines.JobSupport: void onCancellation(java.lang.Throwable)>","<kotlin.TypeCastException: void <init>(java.lang.String)>","<kotlinx.coroutines.JobSupport: boolean cancelParent(java.lang.Throwable)>","<kotlinx.coroutines.InvokeOnCompletion: void invoke(java.lang.Throwable)>","<kotlinx.coroutines.AbstractCoroutine: void onCancellation(java.lang.Throwable)>"],"<io.reactivex.internal.schedulers.NewThreadScheduler: void <clinit>()>":["<java.lang.Integer: java.lang.Integer getInteger(java.lang.String,int)>","<io.reactivex.Scheduler: void <clinit>()>","<java.lang.Math: int min(int,int)>","<java.lang.Integer: void <clinit>()>","<io.reactivex.internal.schedulers.RxThreadFactory: void <init>(java.lang.String,int)>","<java.lang.Math: int max(int,int)>","<io.reactivex.internal.schedulers.NewThreadScheduler: void <clinit>()>"],"<androidx.appcompat.view.menu.MenuBuilder: android.view.MenuItem getItem(int)>":["<java.util.ArrayList: java.lang.Object get(int)>"],"<com.afollestad.photoaffix.prefs.PrefsModule: com.afollestad.rxkprefs.Pref provideBgFillColorPref(com.afollestad.rxkprefs.RxkPrefs)>":["<com.afollestad.rxkprefs.RealRxkPrefs: com.afollestad.rxkprefs.Pref integer(java.lang.String,int)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<io.reactivex.Observable: io.reactivex.Observable filter(io.reactivex.functions.Predicate)>":["<io.reactivex.internal.functions.ObjectHelper: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>","<io.reactivex.internal.operators.observable.ObservableFilter: void <init>(io.reactivex.ObservableSource,io.reactivex.functions.Predicate)>","<io.reactivex.plugins.RxJavaPlugins: io.reactivex.Observable onAssembly(io.reactivex.Observable)>","<io.reactivex.internal.functions.ObjectHelper: void <clinit>()>"],"<com.afollestad.photoaffix.prefs.PrefsModule_ProvideStackHorizontallyPrefFactory: com.afollestad.photoaffix.prefs.PrefsModule_ProvideStackHorizontallyPrefFactory create(com.afollestad.photoaffix.prefs.PrefsModule,javax.inject.Provider)>":["<com.afollestad.photoaffix.prefs.PrefsModule_ProvideStackHorizontallyPrefFactory: void <init>(com.afollestad.photoaffix.prefs.PrefsModule,javax.inject.Provider)>"],"<com.afollestad.photoaffix.views.MainActivity$performAffix$1: void <init>(com.afollestad.photoaffix.views.MainActivity,java.util.List)>":["<kotlin.jvm.internal.Lambda: void <init>(int)>"],"<androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: android.animation.Animator loadAnimator(android.content.Context,int)>":["<androidx.appcompat.app.AppCompatActivity: android.content.res.Resources getResources()>","<android.os.Build$VERSION: void <clinit>()>","<android.view.ContextThemeWrapper: android.content.res.Resources$Theme getTheme()>","<androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: android.animation.Animator loadAnimator(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,int)>","<android.animation.AnimatorInflater: android.animation.Animator loadAnimator(android.content.Context,int)>"],"<kotlinx.coroutines.EventLoopBase: void execute$kotlinx_coroutines_core(java.lang.Runnable)>":["<kotlinx.coroutines.EventLoopBase: void <clinit>()>","<kotlinx.coroutines.DefaultExecutor: void <clinit>()>","<kotlinx.coroutines.DefaultExecutor: void unpark()>","<kotlinx.coroutines.EventLoopBase: void execute$kotlinx_coroutines_core(java.lang.Runnable)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<kotlinx.coroutines.EventLoopBase: boolean enqueueImpl(java.lang.Runnable)>"],"<androidx.fragment.app.FragmentManagerImpl: void dispatchOnFragmentPreAttached(androidx.fragment.app.Fragment,android.content.Context,boolean)>":["<java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>"],"<io.reactivex.disposables.CompositeDisposable: void dispose(io.reactivex.internal.util.OpenHashSet)>":["<io.reactivex.internal.util.ExceptionHelper: void <clinit>()>","<io.reactivex.exceptions.Exceptions: void throwIfFatal(java.lang.Throwable)>","<java.util.ArrayList: void <init>()>","<io.reactivex.exceptions.CompositeException: void <init>(java.lang.Iterable)>","<io.reactivex.internal.util.ExceptionHelper: java.lang.RuntimeException wrapOrThrow(java.lang.Throwable)>","<java.util.ArrayList: int size()>","<java.util.ArrayList: boolean add(java.lang.Object)>","<java.util.ArrayList: java.lang.Object get(int)>"],"<kotlinx.coroutines.CoroutineDispatcher: kotlin.coroutines.CoroutineContext minusKey(kotlin.coroutines.CoroutineContext$Key)>":["<kotlin.coroutines.ContinuationInterceptor$DefaultImpls: kotlin.coroutines.CoroutineContext minusKey(kotlin.coroutines.ContinuationInterceptor,kotlin.coroutines.CoroutineContext$Key)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: void <init>(android.content.Context,androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat$AnimatedVectorDrawableCompatState,android.content.res.Resources)>":["<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat$AnimatedVectorDrawableCompatState: void <init>(android.content.Context,androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat$AnimatedVectorDrawableCompatState,android.graphics.drawable.Drawable$Callback,android.content.res.Resources)>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCommon: void <init>()>","<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat$1: void <init>(androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat)>"],"<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: int getChangingConfigurations()>":["<androidx.appcompat.graphics.drawable.DrawableContainer: int getChangingConfigurations()>"],"<androidx.appcompat.widget.AppCompatDrawableManager: void setPorterDuffColorFilter(android.graphics.drawable.Drawable,int,android.graphics.PorterDuff$Mode)>":["<androidx.appcompat.widget.AppCompatDrawableManager: android.graphics.PorterDuffColorFilter getPorterDuffColorFilter(int,android.graphics.PorterDuff$Mode)>","<androidx.appcompat.widget.DrawableUtils: boolean canSafelyMutateDrawable(android.graphics.drawable.Drawable)>","<androidx.appcompat.widget.AppCompatDrawableManager: void <clinit>()>","<androidx.appcompat.widget.DrawableUtils: void <clinit>()>"],"<androidx.appcompat.graphics.drawable.StateListDrawable: int[] extractStateSet(android.util.AttributeSet)>":["<android.util.StateSet: int[] trimStateSet(int[],int)>","<android.util.StateSet: void <clinit>()>"],"<io.reactivex.internal.schedulers.ComputationScheduler: void <clinit>()>":["<io.reactivex.internal.schedulers.RxThreadFactory: void <init>(java.lang.String,int,boolean)>","<io.reactivex.Scheduler: void <clinit>()>","<io.reactivex.internal.schedulers.ComputationScheduler$PoolWorker: void <init>(java.util.concurrent.ThreadFactory)>","<io.reactivex.internal.schedulers.RxThreadFactory: void <init>(java.lang.String)>","<io.reactivex.internal.schedulers.NewThreadWorker: void dispose()>","<io.reactivex.internal.schedulers.ComputationScheduler$FixedSchedulerPool: void <init>(int,java.util.concurrent.ThreadFactory)>","<java.lang.Runtime: java.lang.Runtime getRuntime()>","<io.reactivex.internal.schedulers.ComputationScheduler: int cap(int,int)>","<io.reactivex.internal.schedulers.ComputationScheduler: void <clinit>()>","<java.lang.Math: int max(int,int)>","<io.reactivex.internal.schedulers.ComputationScheduler$FixedSchedulerPool: void shutdown()>","<java.lang.Integer: java.lang.Integer getInteger(java.lang.String,int)>","<java.lang.Math: int min(int,int)>","<java.lang.Integer: void <clinit>()>"],"<androidx.loader.app.LoaderManager: void <init>()>":["<java.lang.Object: void <init>()>"],"<com.afollestad.materialdialogs.utils.DialogExtKt: void setDefaults(com.afollestad.materialdialogs.MaterialDialog)>":["<com.afollestad.materialdialogs.MaterialDialog: void setBodyFont$com_afollestad_material_dialogs_core(android.graphics.Typeface)>","<com.afollestad.materialdialogs.MaterialDialog: void setTitleFont$com_afollestad_material_dialogs_core(android.graphics.Typeface)>","<com.afollestad.materialdialogs.MaterialDialog: void setButtonFont$com_afollestad_material_dialogs_core(android.graphics.Typeface)>","<com.afollestad.materialdialogs.utils.DialogExtKt: com.afollestad.materialdialogs.MaterialDialog colorBackground(com.afollestad.materialdialogs.MaterialDialog,int)>","<com.afollestad.materialdialogs.utils.ColorExtKt: int resolveColor$default(com.afollestad.materialdialogs.MaterialDialog,java.lang.Integer,java.lang.Integer,int,java.lang.Object)>","<java.lang.Integer: void <clinit>()>","<com.afollestad.materialdialogs.utils.FontExtKt: android.graphics.Typeface font$default(com.afollestad.materialdialogs.MaterialDialog,java.lang.Integer,java.lang.Integer,int,java.lang.Object)>","<java.lang.Integer: java.lang.Integer valueOf(int)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<kotlinx.coroutines.JobImpl: void <init>(kotlinx.coroutines.Job)>":["<kotlinx.coroutines.JobSupport: void initParentJobInternal$kotlinx_coroutines_core(kotlinx.coroutines.Job)>","<kotlinx.coroutines.JobSupport: void <init>(boolean)>"],"<com.afollestad.photoaffix.views.MainActivity$performAffix$1$1: java.lang.Object invoke(java.lang.Object,java.lang.Object)>":["<com.afollestad.photoaffix.views.MainActivity$performAffix$1$1: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)>","<com.afollestad.photoaffix.views.MainActivity$performAffix$1$1: java.lang.Object invokeSuspend(java.lang.Object)>","<kotlin.Unit: void <clinit>()>"],"<kotlinx.coroutines.scheduling.NanoTimeSource: void <clinit>()>":["<kotlinx.coroutines.scheduling.NanoTimeSource: void <clinit>()>","<kotlinx.coroutines.scheduling.NanoTimeSource: void <init>()>"],"<io.reactivex.Scheduler: void <init>()>":["<java.lang.Object: void <init>()>"],"<androidx.appcompat.graphics.drawable.StateListDrawable: void <init>(androidx.appcompat.graphics.drawable.StateListDrawable$StateListState)>":["<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: void setConstantState(androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState)>","<androidx.appcompat.graphics.drawable.DrawableContainer: void <init>()>"],"<androidx.collection.ArraySet: int indexOfNull()>":["<androidx.collection.ContainerHelpers: void <clinit>()>","<androidx.collection.ContainerHelpers: int binarySearch(int[],int,int)>"],"<com.afollestad.photoaffix.engine.subengines.RealStitchEngine$rectCreator$1: void <init>()>":["<kotlin.jvm.internal.Lambda: void <init>(int)>"],"<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: int parseItem(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>":["<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)>","<androidx.appcompat.R$styleable: void <clinit>()>","<androidx.appcompat.content.res.AppCompatResources: android.graphics.drawable.Drawable getDrawable(android.content.Context,int)>","<androidx.core.content.res.TypedArrayUtils: android.content.res.TypedArray obtainAttributes(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,int[])>","<androidx.appcompat.graphics.drawable.StateListDrawable: int[] extractStateSet(android.util.AttributeSet)>","<java.lang.StringBuilder: void <init>()>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatedStateListState: int addStateSet(int[],android.graphics.drawable.Drawable,int)>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void <clinit>()>","<java.lang.StringBuilder: java.lang.String toString()>","<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>","<android.os.Build$VERSION: void <clinit>()>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>","<androidx.appcompat.content.res.AppCompatResources: void <clinit>()>","<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>"],"<androidx.lifecycle.ViewModelStore: void clear()>":["<java.util.HashMap: java.util.Collection values()>","<java.util.HashMap: void clear()>"],"<java.lang.Float: float parseFloat(java.lang.String)>":["<java.lang.RuntimeException: void <init>(java.lang.String)>"],"<androidx.core.graphics.drawable.WrappedDrawableApi14$DrawableWrapperState: android.graphics.drawable.Drawable newDrawable()>":["<androidx.core.graphics.drawable.WrappedDrawableApi14$DrawableWrapperStateBase: android.graphics.drawable.Drawable newDrawable(android.content.res.Resources)>","<androidx.core.graphics.drawable.WrappedDrawableApi21$DrawableWrapperStateLollipop: android.graphics.drawable.Drawable newDrawable(android.content.res.Resources)>"],"<androidx.appcompat.app.AppCompatDelegateImpl: void onStart()>":["<androidx.appcompat.app.AppCompatDelegateImpl: boolean applyDayNight()>"],"<com.afollestad.assent.internal.Data$Companion: com.afollestad.assent.internal.Data getInstance()>":["<com.afollestad.assent.internal.Data: com.afollestad.assent.internal.Data access$getInstance$cp()>","<com.afollestad.assent.internal.Data: void <clinit>()>"],"<java.lang.RuntimeException: void <init>(java.lang.String)>":["<java.lang.Exception: void <init>()>","<java.lang.RuntimeException: void <init>(java.lang.String)>"],"<kotlin.coroutines.ContinuationInterceptor$Key: void <clinit>()>":["<kotlin.coroutines.ContinuationInterceptor$Key: void <clinit>()>","<kotlin.coroutines.ContinuationInterceptor$Key: void <init>()>"],"<androidx.core.graphics.TypefaceCompatBaseImpl: androidx.core.provider.FontsContractCompat$FontInfo findBestInfo(androidx.core.provider.FontsContractCompat$FontInfo[],int)>":["<androidx.core.graphics.TypefaceCompatBaseImpl: java.lang.Object findBestFont(java.lang.Object[],int,androidx.core.graphics.TypefaceCompatBaseImpl$StyleExtractor)>","<androidx.core.graphics.TypefaceCompatBaseImpl$1: void <init>(androidx.core.graphics.TypefaceCompatBaseImpl)>"],"<androidx.fragment.app.FragmentManagerImpl: void dispatchStart()>":["<androidx.fragment.app.FragmentManagerImpl: void dispatchStateChange(int)>"],"<androidx.core.graphics.drawable.WrappedDrawableApi14: void <init>(android.graphics.drawable.Drawable)>":["<androidx.core.graphics.drawable.WrappedDrawableApi14: void setWrappedDrawable(android.graphics.drawable.Drawable)>","<androidx.core.graphics.drawable.WrappedDrawableApi21: androidx.core.graphics.drawable.WrappedDrawableApi14$DrawableWrapperState mutateConstantState()>","<androidx.core.graphics.drawable.WrappedDrawableApi14: androidx.core.graphics.drawable.WrappedDrawableApi14$DrawableWrapperState mutateConstantState()>","<android.graphics.drawable.Drawable: void <init>()>"],"<androidx.recyclerview.widget.GridLayoutManager$DefaultSpanSizeLookup: void <init>()>":["<androidx.recyclerview.widget.GridLayoutManager$SpanSizeLookup: void <init>()>"],"<androidx.core.graphics.TypefaceCompatUtil: java.nio.ByteBuffer mmap(java.io.File)>":["<java.nio.channels.FileChannel$MapMode: void <clinit>()>","<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>","<java.io.FileInputStream: void <init>(java.io.File)>","<java.io.FileInputStream: void close()>","<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>"],"<androidx.appcompat.widget.TintTypedArray: android.graphics.drawable.Drawable getDrawableIfKnown(int)>":["<androidx.appcompat.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable getDrawable(android.content.Context,int,boolean)>","<androidx.appcompat.widget.AppCompatDrawableManager: androidx.appcompat.widget.AppCompatDrawableManager get()>","<androidx.appcompat.widget.AppCompatDrawableManager: void <clinit>()>"],"<com.afollestad.photoaffix.dialogs.ImageSizingDialog$Companion: void show(androidx.appcompat.app.AppCompatActivity,int,int)>":["<com.afollestad.photoaffix.dialogs.ImageSizingDialog: void <init>()>","<android.os.Bundle: void <init>()>","<androidx.fragment.app.Fragment: void setArguments(android.os.Bundle)>","<androidx.fragment.app.FragmentActivity: androidx.fragment.app.FragmentManager getSupportFragmentManager()>","<com.afollestad.photoaffix.dialogs.ImageSizingDialog: void <clinit>()>","<android.os.BaseBundle: void putInt(java.lang.String,int)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<androidx.fragment.app.Fragment: void <clinit>()>","<android.os.Bundle: void <clinit>()>","<androidx.fragment.app.DialogFragment: void show(androidx.fragment.app.FragmentManager,java.lang.String)>"],"<androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: void parseAnimatorFromTypeArray(android.animation.ValueAnimator,android.content.res.TypedArray,android.content.res.TypedArray,float,org.xmlpull.v1.XmlPullParser)>":["<androidx.core.content.res.TypedArrayUtils: int getNamedInt(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int,int)>","<android.animation.ValueAnimator: android.animation.ValueAnimator setDuration(long)>","<androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: void setupObjectAnimator(android.animation.ValueAnimator,android.content.res.TypedArray,int,float,org.xmlpull.v1.XmlPullParser)>","<android.animation.ValueAnimator: void setRepeatMode(int)>","<androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: android.animation.PropertyValuesHolder getPVH(android.content.res.TypedArray,int,int,int,java.lang.String)>","<android.animation.ValueAnimator: void setStartDelay(long)>","<android.animation.ValueAnimator: void setRepeatCount(int)>","<androidx.core.content.res.TypedArrayUtils: boolean hasAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>","<android.animation.ObjectAnimator: android.animation.ValueAnimator setDuration(long)>","<android.animation.ValueAnimator: void setValues(android.animation.PropertyValuesHolder[])>","<androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: int inferValueTypeFromValues(android.content.res.TypedArray,int,int)>"],"<kotlinx.coroutines.internal.ConcurrentKt: java.util.Set identitySet(int)>":["<java.util.IdentityHashMap: void <init>(int)>","<java.util.Collections: java.util.Set newSetFromMap(java.util.Map)>","<java.util.Collections: void <clinit>()>","<kotlin.jvm.internal.Intrinsics: void checkExpressionValueIsNotNull(java.lang.Object,java.lang.String)>"],"<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: boolean tryReleaseCpu$kotlinx_coroutines_core(kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState)>":["<kotlinx.coroutines.scheduling.CoroutineScheduler: java.util.concurrent.Semaphore access$getCpuPermits$p(kotlinx.coroutines.scheduling.CoroutineScheduler)>","<java.util.concurrent.Semaphore: void release()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<kotlinx.coroutines.scheduling.CoroutineScheduler: void <clinit>()>","<kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: void <clinit>()>"],"<androidx.fragment.app.FragmentTransitionCompat21: java.lang.Object cloneTransition(java.lang.Object)>":["<android.transition.TransitionSet: android.transition.Transition clone()>"],"<androidx.appcompat.app.AppCompatDelegateImpl$2: void <init>(androidx.appcompat.app.AppCompatDelegateImpl)>":["<java.lang.Object: void <init>()>"],"<kotlinx.coroutines.MissingMainCoroutineDispatcher: void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)>":["<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<kotlinx.coroutines.MissingMainCoroutineDispatcher: void missing()>"],"<androidx.fragment.app.FragmentTransitionCompat21: void setEpicenter(java.lang.Object,android.view.View)>":["<androidx.fragment.app.FragmentTransitionImpl: void getBoundsOnScreen(android.view.View,android.graphics.Rect)>","<androidx.fragment.app.FragmentTransitionCompat21$1: void <init>(androidx.fragment.app.FragmentTransitionCompat21,android.graphics.Rect)>","<android.graphics.Rect: void <init>()>","<android.transition.TransitionSet: void setEpicenterCallback(android.transition.Transition$EpicenterCallback)>","<android.graphics.Rect: void <clinit>()>"],"<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void <init>(androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState)>":["<androidx.vectordrawable.graphics.drawable.VectorDrawableCommon: void <init>()>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.PorterDuffColorFilter updateTintFilter(android.graphics.PorterDuffColorFilter,android.content.res.ColorStateList,android.graphics.PorterDuff$Mode)>","<android.graphics.Rect: void <init>()>","<android.graphics.Matrix: void <init>()>","<android.graphics.Rect: void <clinit>()>"],"<com.afollestad.photoaffix.di.DaggerAppComponent: void inject(com.afollestad.photoaffix.views.MainActivity)>":["<com.afollestad.photoaffix.di.DaggerAppComponent: com.afollestad.photoaffix.views.MainActivity injectMainActivity(com.afollestad.photoaffix.views.MainActivity)>"],"<com.afollestad.materialdialogs.utils.MDUtil: java.lang.CharSequence resolveString(android.content.Context,java.lang.Integer,java.lang.Integer,boolean)>":["<android.text.Html: android.text.Spanned fromHtml(java.lang.String)>","<android.content.res.Resources: java.lang.CharSequence getText(int)>","<androidx.appcompat.app.AppCompatActivity: android.content.res.Resources getResources()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<kotlin.jvm.internal.Intrinsics: java.lang.Throwable sanitizeStackTrace(java.lang.Throwable)>":["<java.lang.Class: java.lang.String getName()>","<kotlin.jvm.internal.Intrinsics: java.lang.Throwable sanitizeStackTrace(java.lang.Throwable,java.lang.String)>"],"<kotlinx.coroutines.internal.LockFreeTaskQueue: boolean addLast(java.lang.Object)>":["<kotlinx.coroutines.internal.LockFreeTaskQueue: void <clinit>()>","<kotlinx.coroutines.internal.LockFreeTaskQueueCore: int addLast(java.lang.Object)>","<kotlinx.coroutines.internal.LockFreeTaskQueueCore: kotlinx.coroutines.internal.LockFreeTaskQueueCore next()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<androidx.appcompat.app.AppCompatDelegateImpl: void throwFeatureRequestIfSubDecorInstalled()>":["<android.util.AndroidRuntimeException: void <init>(java.lang.String)>"],"<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: void <init>()>":["<android.graphics.Matrix: void <init>()>","<java.util.ArrayList: void <init>()>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VObject: void <init>(androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$1)>"],"<androidx.core.graphics.TypefaceCompatBaseImpl$1: void <init>(androidx.core.graphics.TypefaceCompatBaseImpl)>":["<java.lang.Object: void <init>()>"],"<java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler getUncaughtExceptionHandler()>":["<java.lang.RuntimeException: void <init>(java.lang.String)>"],"<androidx.fragment.app.FragmentTransitionCompat21: java.lang.Object mergeTransitionsTogether(java.lang.Object,java.lang.Object,java.lang.Object)>":["<android.transition.TransitionSet: android.transition.TransitionSet addTransition(android.transition.Transition)>","<android.transition.TransitionSet: void <init>()>"],"<androidx.fragment.app.FragmentManagerImpl: void dispatchOnFragmentStopped(androidx.fragment.app.Fragment,boolean)>":["<java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>"],"<kotlin.jvm.internal.TypeIntrinsics: java.lang.ClassCastException throwCce(java.lang.ClassCastException)>":["<kotlin.jvm.internal.TypeIntrinsics: java.lang.Throwable sanitizeStackTrace(java.lang.Throwable)>"],"<io.reactivex.internal.operators.observable.ObservableConcatMap: void <init>(io.reactivex.ObservableSource,io.reactivex.functions.Function,int,io.reactivex.internal.util.ErrorMode)>":["<java.lang.Math: int max(int,int)>","<io.reactivex.internal.operators.observable.AbstractObservableWithUpstream: void <init>(io.reactivex.ObservableSource)>"],"<androidx.appcompat.app.WindowDecorActionBar: void setHideOnContentScrollEnabled(boolean)>":["<java.lang.IllegalStateException: void <init>(java.lang.String)>"],"<androidx.fragment.app.FragmentManagerImpl$AnimationListenerWrapper: void <init>(android.view.animation.Animation$AnimationListener)>":["<java.lang.Object: void <init>()>"],"<androidx.fragment.app.FragmentTransition: void addSharedElementsWithMatchingNames(java.util.ArrayList,androidx.collection.ArrayMap,java.util.Collection)>":["<androidx.collection.SimpleArrayMap: java.lang.Object valueAt(int)>","<androidx.collection.MapCollections$ValuesCollection: boolean contains(java.lang.Object)>","<androidx.collection.MapCollections$KeySet: boolean contains(java.lang.Object)>","<java.util.ArrayList: boolean add(java.lang.Object)>","<androidx.core.view.ViewCompat: java.lang.String getTransitionName(android.view.View)>","<androidx.collection.SimpleArrayMap: int size()>","<androidx.core.view.ViewCompat: void <clinit>()>"],"<io.reactivex.internal.schedulers.SingleScheduler: void <clinit>()>":["<java.lang.Integer: java.lang.Integer getInteger(java.lang.String,int)>","<io.reactivex.internal.schedulers.RxThreadFactory: void <init>(java.lang.String,int,boolean)>","<io.reactivex.Scheduler: void <clinit>()>","<java.lang.Math: int min(int,int)>","<java.lang.Integer: void <clinit>()>","<java.util.concurrent.Executors: java.util.concurrent.ScheduledExecutorService newScheduledThreadPool(int)>","<java.lang.Math: int max(int,int)>","<io.reactivex.internal.schedulers.SingleScheduler: void <clinit>()>"],"<androidx.appcompat.widget.AppCompatDrawableManager: void <init>()>":["<java.util.WeakHashMap: void <init>(int)>","<java.lang.Object: void <init>()>"],"<com.afollestad.photoaffix.utilities.RealDpConverter_Factory: java.lang.Object get()>":["<com.afollestad.photoaffix.utilities.RealDpConverter_Factory: com.afollestad.photoaffix.utilities.RealDpConverter get()>"],"<com.afollestad.photoaffix.engine.photos.Photo: void <init>(long,java.lang.String,long,kotlin.jvm.functions.Function1)>":["<java.lang.Object: void <init>()>","<com.afollestad.photoaffix.engine.photos.PhotoKt$defaultUriParser$1: java.lang.Object invoke(java.lang.Object)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<kotlinx.coroutines.scheduling.CoroutineScheduler: void access$runSafely(kotlinx.coroutines.scheduling.CoroutineScheduler,kotlinx.coroutines.scheduling.Task)>":["<kotlinx.coroutines.scheduling.CoroutineScheduler: void runSafely(kotlinx.coroutines.scheduling.Task)>"],"<androidx.collection.ArraySet: int indexOf(java.lang.Object,int)>":["<androidx.collection.ContainerHelpers: void <clinit>()>","<androidx.collection.ContainerHelpers: int binarySearch(int[],int,int)>"],"<androidx.fragment.app.FragmentState: void <clinit>()>":["<androidx.fragment.app.FragmentState$1: void <init>()>","<androidx.fragment.app.FragmentState: void <clinit>()>"],"<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void setColorFilter(android.graphics.ColorFilter)>":["<androidx.core.graphics.drawable.WrappedDrawableApi14: void setColorFilter(android.graphics.ColorFilter)>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: void setColorFilter(android.graphics.ColorFilter)>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void invalidateSelf()>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void setColorFilter(android.graphics.ColorFilter)>","<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: void setColorFilter(android.graphics.ColorFilter)>","<android.graphics.drawable.LayerDrawable: void setColorFilter(android.graphics.ColorFilter)>"],"<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: boolean setState(int[])>":["<androidx.vectordrawable.graphics.drawable.VectorDrawableCommon: boolean setState(int[])>"],"<kotlinx.coroutines.DispatchedKt: void resumeCancellableWithException(kotlin.coroutines.Continuation,java.lang.Throwable)>":["<kotlinx.coroutines.internal.ThreadContextKt: void restoreThreadContext(kotlin.coroutines.CoroutineContext,java.lang.Object)>","<kotlin.coroutines.jvm.internal.CompletedContinuation: void resumeWith(java.lang.Object)>","<kotlinx.coroutines.UndispatchedEventLoop: void <clinit>()>","<kotlinx.coroutines.DispatchedContinuation: void resumeWith(java.lang.Object)>","<kotlin.coroutines.jvm.internal.RestrictedContinuationImpl: kotlin.coroutines.CoroutineContext getContext()>","<kotlinx.coroutines.AbstractCoroutine: kotlin.coroutines.CoroutineContext getContext()>","<kotlinx.coroutines.CompletedExceptionally: void <init>(java.lang.Throwable)>","<kotlinx.coroutines.JobSupport: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>","<kotlin.coroutines.EmptyCoroutineContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>","<kotlinx.coroutines.scheduling.LimitingDispatcher: void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)>","<kotlinx.coroutines.DispatchException: void <init>(java.lang.String,java.lang.Throwable)>","<kotlinx.coroutines.CoroutineId: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>","<kotlinx.coroutines.internal.ThreadContextKt: void <clinit>()>","<kotlin.coroutines.jvm.internal.BaseContinuationImpl: void resumeWith(java.lang.Object)>","<kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>","<kotlinx.coroutines.CoroutineDispatcher: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>","<kotlinx.coroutines.DispatchedTask: void run()>","<kotlinx.coroutines.JobSupport: boolean isActive()>","<kotlinx.coroutines.Unconfined: void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)>","<kotlin.coroutines.CombinedContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>","<kotlinx.coroutines.MissingMainCoroutineDispatcher: void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)>","<kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher: void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)>","<kotlinx.coroutines.Unconfined: boolean isDispatchNeeded(kotlin.coroutines.CoroutineContext)>","<kotlinx.coroutines.CoroutineDispatcher: boolean isDispatchNeeded(kotlin.coroutines.CoroutineContext)>","<kotlinx.coroutines.DispatchedContinuation: kotlin.coroutines.CoroutineContext getContext()>","<kotlinx.coroutines.JobSupport: java.util.concurrent.CancellationException getCancellationException()>","<kotlin.coroutines.jvm.internal.CompletedContinuation: kotlin.coroutines.CoroutineContext getContext()>","<kotlin.ResultKt: java.lang.Object createFailure(java.lang.Throwable)>","<kotlinx.coroutines.CommonPool: void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)>","<java.lang.ThreadLocal: java.lang.Object get()>","<kotlin.coroutines.jvm.internal.ContinuationImpl: kotlin.coroutines.CoroutineContext getContext()>","<kotlin.Result: void <clinit>()>","<kotlin.Unit: void <clinit>()>","<kotlinx.coroutines.AbstractCoroutine: boolean isActive()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<kotlin.jvm.internal.Intrinsics: void checkExpressionValueIsNotNull(java.lang.Object,java.lang.String)>","<kotlinx.coroutines.Job: void <clinit>()>","<kotlinx.coroutines.internal.ThreadContextKt: java.lang.Object updateThreadContext(kotlin.coroutines.CoroutineContext,java.lang.Object)>","<kotlinx.coroutines.AbstractCoroutine: void resumeWith(java.lang.Object)>"],"<androidx.lifecycle.Lifecycle$State: void <clinit>()>":["<androidx.lifecycle.Lifecycle$State: void <clinit>()>","<androidx.lifecycle.Lifecycle$State: void <init>(java.lang.String,int)>"],"<androidx.arch.core.internal.SafeIterableMap$DescendingIterator: void <init>(androidx.arch.core.internal.SafeIterableMap$Entry,androidx.arch.core.internal.SafeIterableMap$Entry)>":["<androidx.arch.core.internal.SafeIterableMap$ListIterator: void <init>(androidx.arch.core.internal.SafeIterableMap$Entry,androidx.arch.core.internal.SafeIterableMap$Entry)>"],"<kotlinx.coroutines.ExecutorCoroutineDispatcher: void <init>()>":["<kotlinx.coroutines.CoroutineDispatcher: void <init>()>"],"<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatedVectorDrawableTransition: void <init>(androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat)>":["<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$Transition: void <init>(androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$1)>"],"<androidx.appcompat.app.TwilightCalculator: void <init>()>":["<java.lang.Object: void <init>()>"],"<kotlinx.coroutines.ChildContinuation: void <init>(kotlinx.coroutines.Job,kotlinx.coroutines.AbstractContinuation)>":["<kotlinx.coroutines.JobCancellingNode: void <init>(kotlinx.coroutines.Job)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<com.afollestad.dragselectrecyclerview.DragSelectTouchListener$Companion: com.afollestad.dragselectrecyclerview.DragSelectTouchListener create(android.content.Context,com.afollestad.dragselectrecyclerview.DragSelectReceiver,kotlin.jvm.functions.Function1)>":["<com.afollestad.dragselectrecyclerview.DragSelectTouchListener: void <clinit>()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<com.afollestad.dragselectrecyclerview.DragSelectTouchListener: void <init>(android.content.Context,com.afollestad.dragselectrecyclerview.DragSelectReceiver,kotlin.jvm.internal.DefaultConstructorMarker)>"],"<java.lang.Double: boolean isNaN(double)>":["<java.lang.RuntimeException: void <init>(java.lang.String)>"],"<androidx.core.provider.FontsContractCompat: android.content.pm.ProviderInfo getProvider(android.content.pm.PackageManager,androidx.core.provider.FontRequest,android.content.res.Resources)>":["<java.util.ArrayList: void <init>(java.util.Collection)>","<androidx.core.provider.FontsContractCompat: boolean equalsByteArrayList(java.util.List,java.util.List)>","<androidx.core.provider.FontsContractCompat: void <clinit>()>","<androidx.core.provider.FontsContractCompat: java.util.List getCertificates(androidx.core.provider.FontRequest,android.content.res.Resources)>","<androidx.core.provider.FontRequest: java.lang.String getProviderPackage()>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<java.lang.StringBuilder: void <init>()>","<java.util.Collections: void <clinit>()>","<java.lang.StringBuilder: java.lang.String toString()>","<androidx.core.provider.FontRequest: java.lang.String getProviderAuthority()>","<android.content.pm.PackageManager$NameNotFoundException: void <init>(java.lang.String)>","<java.util.Collections: void sort(java.util.List,java.util.Comparator)>","<java.util.ArrayList: int size()>","<java.util.ArrayList: java.lang.Object get(int)>","<androidx.core.provider.FontsContractCompat: java.util.List convertToByteArrayList(android.content.pm.Signature[])>"],"<com.afollestad.photoaffix.engine.bitmaps.RealBitmapManipulator_Factory: com.afollestad.photoaffix.engine.bitmaps.RealBitmapManipulator get()>":["<com.afollestad.photoaffix.engine.bitmaps.RealBitmapManipulator_Factory: com.afollestad.photoaffix.engine.bitmaps.RealBitmapManipulator provideInstance(javax.inject.Provider)>"],"<androidx.appcompat.app.AppCompatDelegateImpl: void <init>(android.content.Context,android.view.Window,androidx.appcompat.app.AppCompatCallback)>":["<androidx.appcompat.widget.TintTypedArray: androidx.appcompat.widget.TintTypedArray obtainStyledAttributes(android.content.Context,android.util.AttributeSet,int[])>","<java.lang.IllegalStateException: void <init>(java.lang.String)>","<androidx.appcompat.app.AppCompatDelegate: void <clinit>()>","<androidx.appcompat.app.AppCompatDelegate: void <init>()>","<androidx.appcompat.widget.TintTypedArray: android.graphics.drawable.Drawable getDrawableIfKnown(int)>","<androidx.appcompat.app.AppCompatDelegateImpl$AppCompatWindowCallback: void <init>(androidx.appcompat.app.AppCompatDelegateImpl,android.view.Window$Callback)>","<androidx.appcompat.widget.TintTypedArray: void recycle()>","<androidx.appcompat.app.AppCompatDelegateImpl: void <clinit>()>","<androidx.appcompat.app.AppCompatDelegateImpl$2: void <init>(androidx.appcompat.app.AppCompatDelegateImpl)>"],"<kotlinx.coroutines.scheduling.WorkQueue: boolean tryStealLastScheduled(long,kotlinx.coroutines.scheduling.WorkQueue,kotlinx.coroutines.scheduling.GlobalQueue)>":["<kotlinx.coroutines.scheduling.TasksKt: void <clinit>()>","<kotlinx.coroutines.scheduling.WorkQueue: void <clinit>()>","<kotlinx.coroutines.scheduling.WorkQueue: boolean add(kotlinx.coroutines.scheduling.Task,kotlinx.coroutines.scheduling.GlobalQueue)>"],"<androidx.fragment.app.FragmentTransitionCompat21: void swapSharedElementTargets(java.lang.Object,java.util.ArrayList,java.util.ArrayList)>":["<androidx.fragment.app.FragmentTransitionCompat21: void replaceTargets(java.lang.Object,java.util.ArrayList,java.util.ArrayList)>","<android.transition.Transition: java.util.List getTargets()>"],"<androidx.fragment.app.FragmentManagerImpl: void animateRemoveFragment(androidx.fragment.app.Fragment,androidx.fragment.app.FragmentManagerImpl$AnimationOrAnimator,int)>":["<androidx.fragment.app.FragmentManagerImpl: void setHWLayerAnimListenerIfAlpha(android.view.View,androidx.fragment.app.FragmentManagerImpl$AnimationOrAnimator)>","<androidx.fragment.app.FragmentManagerImpl: android.view.animation.Animation$AnimationListener getAnimationListener(android.view.animation.Animation)>","<androidx.fragment.app.FragmentManagerImpl$3: void <init>(androidx.fragment.app.FragmentManagerImpl,android.view.ViewGroup,android.view.View,androidx.fragment.app.Fragment)>","<androidx.fragment.app.FragmentManagerImpl$2: void <init>(androidx.fragment.app.FragmentManagerImpl,android.view.animation.Animation$AnimationListener,android.view.ViewGroup,androidx.fragment.app.Fragment)>","<androidx.fragment.app.FragmentManagerImpl$EndViewTransitionAnimator: void <init>(android.view.animation.Animation,android.view.ViewGroup,android.view.View)>","<androidx.fragment.app.FragmentManagerImpl: void <clinit>()>","<android.view.animation.Animation: void setAnimationListener(android.view.animation.Animation$AnimationListener)>"],"<androidx.appcompat.app.AppCompatDelegateImpl: void doInvalidatePanelMenu(int)>":["<androidx.appcompat.view.menu.MenuBuilder: void clear()>","<android.os.Bundle: void <init>()>","<androidx.appcompat.app.AppCompatDelegateImpl: boolean preparePanel(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,android.view.KeyEvent)>","<android.os.BaseBundle: int size()>","<androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState getPanelState(int,boolean)>","<androidx.appcompat.view.menu.MenuBuilder: void stopDispatchingItemsChanged()>","<android.os.Bundle: void <clinit>()>","<androidx.appcompat.view.menu.MenuBuilder: void saveActionViewStates(android.os.Bundle)>"],"<kotlinx.coroutines.scheduling.CoroutineScheduler: void access$parkedWorkersStackTopUpdate(kotlinx.coroutines.scheduling.CoroutineScheduler,kotlinx.coroutines.scheduling.CoroutineScheduler$Worker,int,int)>":["<kotlinx.coroutines.scheduling.CoroutineScheduler: void parkedWorkersStackTopUpdate(kotlinx.coroutines.scheduling.CoroutineScheduler$Worker,int,int)>"],"<kotlinx.coroutines.internal.ThreadContextKt$updateState$1: kotlinx.coroutines.internal.ThreadState invoke(kotlinx.coroutines.internal.ThreadState,kotlin.coroutines.CoroutineContext$Element)>":["<kotlinx.coroutines.CoroutineId: java.lang.Object updateThreadContext(kotlin.coroutines.CoroutineContext)>","<kotlinx.coroutines.internal.ThreadState: kotlin.coroutines.CoroutineContext getContext()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<kotlinx.coroutines.internal.ThreadState: void append(java.lang.Object)>"],"<kotlinx.coroutines.internal.LockFreeLinkedListNode: void finishRemove(kotlinx.coroutines.internal.LockFreeLinkedListNode)>":["<kotlinx.coroutines.internal.LockFreeLinkedListKt: void <clinit>()>","<kotlinx.coroutines.internal.LockFreeLinkedListNode: kotlinx.coroutines.internal.LockFreeLinkedListNode correctPrev(kotlinx.coroutines.internal.LockFreeLinkedListNode,kotlinx.coroutines.internal.OpDescriptor)>","<kotlinx.coroutines.internal.LockFreeLinkedListNode: void helpDelete()>","<kotlinx.coroutines.internal.LockFreeLinkedListKt: kotlinx.coroutines.internal.LockFreeLinkedListNode unwrap(java.lang.Object)>"],"<androidx.appcompat.app.WindowDecorActionBar: androidx.appcompat.widget.DecorToolbar getDecorToolbar(android.view.View)>":["<java.lang.IllegalStateException: void <init>(java.lang.String)>","<java.lang.StringBuilder: java.lang.String toString()>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<java.lang.StringBuilder: void <init>()>"],"<kotlinx.coroutines.scheduling.TaskMode: void <init>(java.lang.String,int)>":["<java.lang.Enum: void <init>(java.lang.String,int)>"],"<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void setTintMode(android.graphics.PorterDuff$Mode)>":["<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.PorterDuffColorFilter updateTintFilter(android.graphics.PorterDuffColorFilter,android.content.res.ColorStateList,android.graphics.PorterDuff$Mode)>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void invalidateSelf()>","<androidx.core.graphics.drawable.DrawableCompat: void setTintMode(android.graphics.drawable.Drawable,android.graphics.PorterDuff$Mode)>"],"<kotlinx.coroutines.CoroutineStart: void invoke(kotlin.jvm.functions.Function2,java.lang.Object,kotlin.coroutines.Continuation)>":["<kotlinx.coroutines.intrinsics.UndispatchedKt: void startCoroutineUndispatched(kotlin.jvm.functions.Function2,java.lang.Object,kotlin.coroutines.Continuation)>","<kotlin.NoWhenBranchMatchedException: void <init>()>","<java.lang.Enum: int ordinal()>","<kotlinx.coroutines.intrinsics.CancellableKt: void startCoroutineCancellable(kotlin.jvm.functions.Function2,java.lang.Object,kotlin.coroutines.Continuation)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<kotlinx.coroutines.CoroutineStart$WhenMappings: void <clinit>()>","<kotlin.coroutines.ContinuationKt: void startCoroutine(kotlin.jvm.functions.Function2,java.lang.Object,kotlin.coroutines.Continuation)>"],"<com.afollestad.dragselectrecyclerview.DragSelectTouchListener: void <init>(android.content.Context,com.afollestad.dragselectrecyclerview.DragSelectReceiver,kotlin.jvm.internal.DefaultConstructorMarker)>":["<com.afollestad.dragselectrecyclerview.DragSelectTouchListener: void <init>(android.content.Context,com.afollestad.dragselectrecyclerview.DragSelectReceiver)>"],"<kotlinx.coroutines.JobSupport: void handleOnCompletionException$kotlinx_coroutines_core(java.lang.Throwable)>":["<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<androidx.appcompat.app.WindowDecorActionBar$2: void <init>(androidx.appcompat.app.WindowDecorActionBar)>":["<androidx.core.view.ViewPropertyAnimatorListenerAdapter: void <init>()>"],"<androidx.collection.MapCollections$KeySet: void <init>(androidx.collection.MapCollections)>":["<java.lang.Object: void <init>()>"],"<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$Transition: void <init>(androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$1)>":["<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$Transition: void <init>()>"],"<kotlinx.coroutines.ChildHandleNode: void invoke(java.lang.Throwable)>":["<kotlinx.coroutines.JobSupport: void parentCancelled(kotlinx.coroutines.ParentJob)>"],"<androidx.fragment.app.FragmentManagerImpl: void checkStateLoss()>":["<java.lang.IllegalStateException: void <init>(java.lang.String)>","<java.lang.StringBuilder: java.lang.String toString()>","<androidx.fragment.app.FragmentManagerImpl: boolean isStateSaved()>","<java.lang.StringBuilder: void <init>()>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>"],"<androidx.fragment.app.BackStackRecord: int commit()>":["<androidx.fragment.app.BackStackRecord: int commitInternal(boolean)>"],"<androidx.appcompat.widget.VectorEnabledTintResources: android.graphics.drawable.Drawable getDrawable(int)>":["<androidx.appcompat.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable onDrawableLoadedFromResources(android.content.Context,androidx.appcompat.widget.VectorEnabledTintResources,int)>","<androidx.appcompat.widget.AppCompatDrawableManager: androidx.appcompat.widget.AppCompatDrawableManager get()>","<java.lang.ref.WeakReference: java.lang.Object get()>","<androidx.appcompat.widget.AppCompatDrawableManager: void <clinit>()>","<android.content.res.Resources: android.graphics.drawable.Drawable getDrawable(int)>"],"<com.afollestad.assent.internal.PermissionFragment: void perform$com_afollestad_assent(com.afollestad.assent.internal.PendingRequest)>":["<com.afollestad.assent.internal.PendingRequest: int getRequestCode()>","<androidx.fragment.app.Fragment: void requestPermissions(java.lang.String[],int)>","<com.afollestad.assent.internal.ExtensionsKt: java.lang.String[] allValues(java.util.List)>","<com.afollestad.assent.internal.PendingRequest: java.util.List getPermissions()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt$createCoroutineUnintercepted$$inlined$createCoroutineFromSuspendFunction$IntrinsicsKt__IntrinsicsJvmKt$4: java.lang.Object invokeSuspend(java.lang.Object)>":["<com.afollestad.photoaffix.views.MainActivity$performAffix$1$1: java.lang.Object invoke(java.lang.Object,java.lang.Object)>","<kotlin.jvm.internal.TypeIntrinsics: java.lang.Object beforeCheckcastToFunctionOfArity(java.lang.Object,int)>","<java.lang.IllegalStateException: void <init>(java.lang.String)>","<java.lang.String: java.lang.String toString()>","<kotlin.TypeCastException: void <init>(java.lang.String)>","<com.afollestad.photoaffix.views.MainActivity$performAffix$1$1$sizingResult$1: java.lang.Object invoke(java.lang.Object,java.lang.Object)>","<kotlin.ResultKt: void throwOnFailure(java.lang.Object)>"],"<kotlinx.coroutines.internal.AtomicKt: void <clinit>()>":["<kotlinx.coroutines.internal.Symbol: void <init>(java.lang.String)>","<kotlinx.coroutines.internal.AtomicKt: void <clinit>()>"],"<androidx.fragment.app.FragmentManagerImpl: void dispatchResume()>":["<androidx.fragment.app.FragmentManagerImpl: void dispatchStateChange(int)>"],"<kotlinx.coroutines.internal.ThreadContextKt$findOne$1: kotlinx.coroutines.ThreadContextElement invoke(kotlinx.coroutines.ThreadContextElement,kotlin.coroutines.CoroutineContext$Element)>":["<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<androidx.recyclerview.widget.OrientationHelper: androidx.recyclerview.widget.OrientationHelper createOrientationHelper(androidx.recyclerview.widget.RecyclerView$LayoutManager,int)>":["<androidx.recyclerview.widget.OrientationHelper: androidx.recyclerview.widget.OrientationHelper createVerticalHelper(androidx.recyclerview.widget.RecyclerView$LayoutManager)>","<java.lang.IllegalArgumentException: void <init>(java.lang.String)>","<androidx.recyclerview.widget.OrientationHelper: androidx.recyclerview.widget.OrientationHelper createHorizontalHelper(androidx.recyclerview.widget.RecyclerView$LayoutManager)>"],"<kotlin.coroutines.ContinuationInterceptor: void <clinit>()>":["<kotlin.coroutines.ContinuationInterceptor$Key: void <clinit>()>","<kotlin.coroutines.ContinuationInterceptor: void <clinit>()>"],"<kotlinx.coroutines.scheduling.CoroutineScheduler: void parkedWorkersStackPush(kotlinx.coroutines.scheduling.CoroutineScheduler$Worker)>":["<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void setNextParkedWorker(java.lang.Object)>","<java.lang.AssertionError: void <init>(java.lang.Object)>","<kotlin._Assertions: void <clinit>()>","<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: java.lang.Object getNextParkedWorker()>","<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: int getIndexInArray()>","<kotlinx.coroutines.scheduling.CoroutineScheduler: void <clinit>()>"],"<androidx.appcompat.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable getDrawable(android.content.Context,int)>":["<androidx.appcompat.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable getDrawable(android.content.Context,int,boolean)>"],"<kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt$createCoroutineUnintercepted$$inlined$createCoroutineFromSuspendFunction$IntrinsicsKt__IntrinsicsJvmKt$4: void <init>(kotlin.coroutines.Continuation,kotlin.coroutines.CoroutineContext,kotlin.coroutines.Continuation,kotlin.coroutines.CoroutineContext,kotlin.jvm.functions.Function2,java.lang.Object)>":["<kotlin.coroutines.jvm.internal.ContinuationImpl: void <init>(kotlin.coroutines.Continuation,kotlin.coroutines.CoroutineContext)>"],"<io.reactivex.exceptions.CompositeException: void <init>(java.lang.Iterable)>":["<java.lang.IllegalArgumentException: void <init>(java.lang.String)>","<java.util.AbstractCollection: boolean addAll(java.util.Collection)>","<java.lang.StringBuilder: void <init>()>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<java.lang.StringBuilder: java.lang.StringBuilder append(int)>","<java.util.Collections: void <clinit>()>","<java.util.LinkedHashSet: void <init>()>","<java.lang.NullPointerException: void <init>(java.lang.String)>","<java.lang.StringBuilder: java.lang.String toString()>","<java.util.ArrayList: boolean addAll(java.util.Collection)>","<java.util.HashSet: boolean add(java.lang.Object)>","<java.util.ArrayList: java.util.Iterator iterator()>","<java.util.Collections: java.util.List unmodifiableList(java.util.List)>","<java.util.ArrayList: void <init>()>","<java.util.HashSet: boolean isEmpty()>","<java.lang.RuntimeException: void <init>()>"],"<kotlin.text.StringsKt__StringsKt: int indexOfAny(java.lang.CharSequence,char[],int,boolean)>":["<kotlin.ranges.RangesKt___RangesKt: int coerceAtLeast(int,int)>","<kotlin.collections.ArraysKt___ArraysKt: char single(char[])>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<kotlin.text.StringsKt__StringsKt: int getLastIndex(java.lang.CharSequence)>","<kotlin.text.CharsKt__CharKt: boolean equals(char,char,boolean)>"],"<androidx.appcompat.app.AppCompatActivity: void onCreate(android.os.Bundle)>":["<androidx.appcompat.app.AppCompatDelegateImpl: void installViewFactory()>","<androidx.appcompat.app.AppCompatActivity: androidx.appcompat.app.AppCompatDelegate getDelegate()>","<androidx.appcompat.app.AppCompatDelegateImpl: void onCreate(android.os.Bundle)>","<android.app.Activity: void onApplyThemeResource(android.content.res.Resources$Theme,int,boolean)>","<androidx.fragment.app.FragmentActivity: void onCreate(android.os.Bundle)>","<androidx.appcompat.app.AppCompatActivity: void setTheme(int)>","<android.os.Build$VERSION: void <clinit>()>","<android.view.ContextThemeWrapper: android.content.res.Resources$Theme getTheme()>","<androidx.appcompat.app.AppCompatDelegateImpl: boolean applyDayNight()>"],"<com.afollestad.photoaffix.engine.photos.Photo$Companion: void <init>()>":["<java.lang.Object: void <init>()>"],"<com.afollestad.photoaffix.views.MainActivity: void onStart()>":["<androidx.appcompat.app.AppCompatActivity: void onStart()>","<com.afollestad.photoaffix.views.MainActivity: void <clinit>()>","<com.afollestad.photoaffix.views.MainActivity: void refresh$default(com.afollestad.photoaffix.views.MainActivity,boolean,int,java.lang.Object)>","<android.app.Activity: void <clinit>()>"],"<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: android.graphics.drawable.Drawable mutate()>":["<androidx.appcompat.graphics.drawable.StateListDrawable: android.graphics.drawable.Drawable mutate()>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatedStateListState: void mutate()>"],"<com.afollestad.photoaffix.engine.subengines.RealStitchEngine_Factory: java.lang.Object get()>":["<com.afollestad.photoaffix.engine.subengines.RealStitchEngine_Factory: com.afollestad.photoaffix.engine.subengines.RealStitchEngine get()>"],"<androidx.appcompat.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable onDrawableLoadedFromResources(android.content.Context,androidx.appcompat.widget.VectorEnabledTintResources,int)>":["<androidx.appcompat.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable loadDrawableFromDelegates(android.content.Context,int)>","<androidx.appcompat.widget.VectorEnabledTintResources: android.graphics.drawable.Drawable superGetDrawable(int)>","<androidx.appcompat.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable tintDrawable(android.content.Context,int,boolean,android.graphics.drawable.Drawable)>"],"<androidx.vectordrawable.graphics.drawable.ArgbEvaluator: void <clinit>()>":["<androidx.vectordrawable.graphics.drawable.ArgbEvaluator: void <clinit>()>","<androidx.vectordrawable.graphics.drawable.ArgbEvaluator: void <init>()>"],"<androidx.appcompat.view.ContextThemeWrapper: void <init>(android.content.Context,int)>":["<android.content.ContextWrapper: void <init>(android.content.Context)>"],"<androidx.appcompat.app.AppCompatDelegateImpl: void invalidatePanelMenu(int)>":["<androidx.core.view.ViewCompat: void postOnAnimation(android.view.View,java.lang.Runnable)>","<androidx.core.view.ViewCompat: void <clinit>()>"],"<androidx.fragment.app.FragmentTransition: androidx.fragment.app.FragmentTransitionImpl resolveSupportImpl()>":["<java.lang.Class: java.lang.Class forName(java.lang.String)>"],"<androidx.fragment.app.BackStackRecord: void addOp(androidx.fragment.app.BackStackRecord$Op)>":["<java.util.ArrayList: boolean add(java.lang.Object)>"],"<kotlinx.coroutines.scheduling.CoroutineScheduler: int access$getMAX_PARK_TIME_NS$cp()>":["<kotlinx.coroutines.scheduling.CoroutineScheduler: void <clinit>()>"],"<androidx.core.graphics.TypefaceCompatApi26Impl: void abortCreation(java.lang.Object)>":["<java.lang.RuntimeException: void <init>(java.lang.Throwable)>"],"<com.afollestad.materialdialogs.utils.DialogExtKt: com.afollestad.materialdialogs.MaterialDialog colorBackground(com.afollestad.materialdialogs.MaterialDialog,int)>":["<android.graphics.drawable.GradientDrawable: void setCornerRadius(float)>","<java.lang.Integer: void <clinit>()>","<android.app.Dialog: android.view.Window getWindow()>","<android.graphics.drawable.GradientDrawable: void <init>()>","<com.afollestad.materialdialogs.utils.DimensExtKt: float dimen$default(com.afollestad.materialdialogs.MaterialDialog,java.lang.Integer,java.lang.Integer,float,int,java.lang.Object)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<android.graphics.drawable.GradientDrawable: void setColor(int)>","<java.lang.Integer: java.lang.Integer valueOf(int)>"],"<androidx.fragment.app.FragmentTransitionCompat21$2: void <init>(androidx.fragment.app.FragmentTransitionCompat21,android.view.View,java.util.ArrayList)>":["<java.lang.Object: void <init>()>"],"<kotlin.coroutines.jvm.internal.ContinuationImpl: void releaseIntercepted()>":["<kotlin.coroutines.CombinedContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>","<kotlinx.coroutines.CoroutineDispatcher: void releaseInterceptedContinuation(kotlin.coroutines.Continuation)>","<kotlin.coroutines.jvm.internal.ContinuationImpl: kotlin.coroutines.CoroutineContext getContext()>","<kotlinx.coroutines.CoroutineId: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>","<kotlin.jvm.internal.Intrinsics: void throwNpe()>","<kotlinx.coroutines.CoroutineDispatcher: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>","<kotlin.coroutines.jvm.internal.CompletedContinuation: void <clinit>()>","<kotlin.coroutines.ContinuationInterceptor: void <clinit>()>","<kotlinx.coroutines.JobSupport: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>","<kotlin.coroutines.EmptyCoroutineContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>"],"<kotlinx.coroutines.internal.ThreadContextKt: void <clinit>()>":["<kotlinx.coroutines.internal.Symbol: void <init>(java.lang.String)>","<kotlinx.coroutines.internal.ThreadContextKt$findOne$1: void <clinit>()>","<kotlinx.coroutines.internal.ThreadContextKt: void <clinit>()>","<kotlinx.coroutines.internal.ThreadContextKt$countAll$1: void <clinit>()>","<kotlinx.coroutines.internal.ThreadContextKt$updateState$1: void <clinit>()>","<kotlinx.coroutines.internal.ThreadContextKt$restoreState$1: void <clinit>()>"],"<io.reactivex.internal.schedulers.RxThreadFactory: void <init>(java.lang.String,int)>":["<io.reactivex.internal.schedulers.RxThreadFactory: void <init>(java.lang.String,int,boolean)>"],"<androidx.core.view.ViewCompat: void requestApplyInsets(android.view.View)>":["<android.os.Build$VERSION: void <clinit>()>"],"<com.afollestad.rxkprefs.RealRxkPrefs$onKeyChange$1: void <init>(com.afollestad.rxkprefs.RealRxkPrefs)>":["<java.lang.Object: void <init>()>"],"<kotlinx.coroutines.JobSupport$Finishing: boolean isSealed()>":["<kotlinx.coroutines.JobSupportKt: void <clinit>()>","<kotlinx.coroutines.JobSupportKt: kotlinx.coroutines.internal.Symbol access$getSEALED$p()>"],"<kotlin.coroutines.CombinedContext: java.lang.Object fold(java.lang.Object,kotlin.jvm.functions.Function2)>":["<kotlinx.coroutines.internal.ThreadContextKt$findOne$1: java.lang.Object invoke(java.lang.Object,java.lang.Object)>","<kotlinx.coroutines.internal.ThreadContextKt$updateState$1: java.lang.Object invoke(java.lang.Object,java.lang.Object)>","<kotlinx.coroutines.internal.ThreadContextKt$countAll$1: java.lang.Object invoke(java.lang.Object,java.lang.Object)>","<kotlin.coroutines.EmptyCoroutineContext: java.lang.Object fold(java.lang.Object,kotlin.jvm.functions.Function2)>","<kotlinx.coroutines.CoroutineId: java.lang.Object fold(java.lang.Object,kotlin.jvm.functions.Function2)>","<kotlinx.coroutines.JobSupport: java.lang.Object fold(java.lang.Object,kotlin.jvm.functions.Function2)>","<kotlin.coroutines.CoroutineContext$plus$1: java.lang.Object invoke(java.lang.Object,java.lang.Object)>","<kotlin.coroutines.AbstractCoroutineContextElement: java.lang.Object fold(java.lang.Object,kotlin.jvm.functions.Function2)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<kotlin.coroutines.CombinedContext: java.lang.Object fold(java.lang.Object,kotlin.jvm.functions.Function2)>","<kotlinx.coroutines.internal.ThreadContextKt$restoreState$1: java.lang.Object invoke(java.lang.Object,java.lang.Object)>"],"<androidx.fragment.app.FragmentManagerImpl: void ensureExecReady(boolean)>":["<java.lang.IllegalStateException: void <init>(java.lang.String)>","<androidx.fragment.app.FragmentManagerImpl: void executePostponedTransaction(java.util.ArrayList,java.util.ArrayList)>","<androidx.fragment.app.FragmentHostCallback: android.os.Handler getHandler()>","<android.os.Handler: android.os.Looper getLooper()>","<java.util.ArrayList: void <init>()>","<androidx.fragment.app.FragmentManagerImpl: void checkStateLoss()>","<android.os.Looper: android.os.Looper myLooper()>"],"<com.afollestad.assent.internal.Data: java.lang.Object access$getLOCK$cp()>":["<com.afollestad.assent.internal.Data: void <clinit>()>"],"<androidx.appcompat.app.AppCompatDelegate: androidx.appcompat.app.AppCompatDelegate create(android.app.Activity,androidx.appcompat.app.AppCompatCallback)>":["<androidx.appcompat.app.AppCompatDelegate: void <clinit>()>","<android.app.Activity: android.view.Window getWindow()>","<androidx.appcompat.app.AppCompatDelegateImpl: void <init>(android.content.Context,android.view.Window,androidx.appcompat.app.AppCompatCallback)>","<androidx.appcompat.app.AppCompatDelegateImpl: void <clinit>()>"],"<androidx.core.graphics.TypefaceCompatApi28Impl: java.lang.reflect.Method obtainCreateFromFamiliesWithDefaultMethod(java.lang.Class)>":["<java.lang.Integer: void <clinit>()>","<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>","<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>"],"<com.afollestad.photoaffix.adapters.PhotoGridAdapter: boolean hasPhotos()>":["<java.util.ArrayList: boolean isEmpty()>","<kotlin.collections.EmptyList: boolean isEmpty()>"],"<androidx.core.graphics.PathParser$PathDataNode: void addCommand(android.graphics.Path,float[],char,char,float[])>":["<android.graphics.Path: void close()>","<android.graphics.Path: void lineTo(float,float)>","<android.graphics.Path: void rLineTo(float,float)>","<android.graphics.Path: void cubicTo(float,float,float,float,float,float)>","<androidx.core.graphics.PathParser$PathDataNode: void drawArc(android.graphics.Path,float,float,float,float,float,float,float,boolean,boolean)>","<android.graphics.Path: void rMoveTo(float,float)>","<android.graphics.Path: void rQuadTo(float,float,float,float)>","<android.graphics.Path: void quadTo(float,float,float,float)>","<android.graphics.Path: void rCubicTo(float,float,float,float,float,float)>","<android.graphics.Path: void moveTo(float,float)>"],"<kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt: kotlin.coroutines.Continuation createCoroutineUnintercepted(kotlin.jvm.functions.Function2,java.lang.Object,kotlin.coroutines.Continuation)>":["<kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt$createCoroutineUnintercepted$$inlined$createCoroutineFromSuspendFunction$IntrinsicsKt__IntrinsicsJvmKt$3: void <init>(kotlin.coroutines.Continuation,kotlin.coroutines.Continuation,kotlin.jvm.functions.Function2,java.lang.Object)>","<kotlin.coroutines.jvm.internal.RestrictedContinuationImpl: kotlin.coroutines.CoroutineContext getContext()>","<kotlinx.coroutines.DispatchedContinuation: kotlin.coroutines.CoroutineContext getContext()>","<kotlinx.coroutines.AbstractCoroutine: kotlin.coroutines.CoroutineContext getContext()>","<kotlin.coroutines.EmptyCoroutineContext: void <clinit>()>","<com.afollestad.photoaffix.views.MainActivity$performAffix$1$1: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)>","<kotlin.coroutines.jvm.internal.CompletedContinuation: kotlin.coroutines.CoroutineContext getContext()>","<kotlin.coroutines.jvm.internal.ContinuationImpl: kotlin.coroutines.CoroutineContext getContext()>","<kotlin.coroutines.jvm.internal.DebugProbesKt: kotlin.coroutines.Continuation probeCoroutineCreated(kotlin.coroutines.Continuation)>","<kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt$createCoroutineUnintercepted$$inlined$createCoroutineFromSuspendFunction$IntrinsicsKt__IntrinsicsJvmKt$4: void <init>(kotlin.coroutines.Continuation,kotlin.coroutines.CoroutineContext,kotlin.coroutines.Continuation,kotlin.coroutines.CoroutineContext,kotlin.jvm.functions.Function2,java.lang.Object)>","<kotlin.TypeCastException: void <init>(java.lang.String)>","<com.afollestad.photoaffix.views.MainActivity$performAffix$1$1$sizingResult$1: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<androidx.appcompat.app.TwilightManager: void updateState(android.location.Location)>":["<java.lang.System: long currentTimeMillis()>","<androidx.appcompat.app.TwilightCalculator: void calculateTwilight(long,double,double)>","<java.lang.System: void <clinit>()>","<androidx.appcompat.app.TwilightCalculator: androidx.appcompat.app.TwilightCalculator getInstance()>"],"<java.lang.Thread: java.lang.StackTraceElement[] getStackTrace()>":["<java.lang.RuntimeException: void <init>(java.lang.String)>"],"<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void setIndexInArray(int)>":["<java.lang.Thread: void setName(java.lang.String)>","<java.lang.StringBuilder: java.lang.String toString()>","<java.lang.String: java.lang.String valueOf(int)>","<java.lang.String: void <clinit>()>","<kotlinx.coroutines.scheduling.CoroutineScheduler: java.lang.String access$getSchedulerName$p(kotlinx.coroutines.scheduling.CoroutineScheduler)>","<java.lang.StringBuilder: void <init>()>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<kotlinx.coroutines.scheduling.CoroutineScheduler: void <clinit>()>"],"<androidx.recyclerview.widget.RecyclerView$LayoutManager$2: void <init>(androidx.recyclerview.widget.RecyclerView$LayoutManager)>":["<java.lang.Object: void <init>()>"],"<kotlinx.coroutines.scheduling.CoroutineScheduler: boolean tryUnpark()>":["<java.util.concurrent.locks.LockSupport: void unpark(java.lang.Thread)>","<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: boolean isParking()>","<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void idleResetBeforeUnpark()>","<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: boolean tryForbidTermination()>","<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker parkedWorkersStackPop()>"],"<com.afollestad.photoaffix.views.MainActivity$Companion: void <init>()>":["<java.lang.Object: void <init>()>"],"<androidx.loader.app.LoaderManagerImpl$LoaderViewModel: androidx.loader.app.LoaderManagerImpl$LoaderViewModel getInstance(androidx.lifecycle.ViewModelStore)>":["<androidx.loader.app.LoaderManagerImpl$LoaderViewModel: void <clinit>()>","<androidx.lifecycle.ViewModelProvider: androidx.lifecycle.ViewModel get(java.lang.Class)>","<androidx.lifecycle.ViewModelProvider: void <init>(androidx.lifecycle.ViewModelStore,androidx.lifecycle.ViewModelProvider$Factory)>"],"<kotlin.coroutines.jvm.internal.SuspendLambda: void <init>(int,kotlin.coroutines.Continuation)>":["<kotlin.coroutines.jvm.internal.ContinuationImpl: void <init>(kotlin.coroutines.Continuation)>"],"<kotlinx.coroutines.JobSupport: void <init>(boolean)>":["<java.lang.Object: void <init>()>","<kotlinx.coroutines.JobSupportKt: void <clinit>()>","<kotlinx.coroutines.JobSupportKt: kotlinx.coroutines.Empty access$getEMPTY_ACTIVE$p()>","<kotlinx.coroutines.JobSupportKt: kotlinx.coroutines.Empty access$getEMPTY_NEW$p()>"],"<kotlinx.coroutines.DeferredCoroutine$await$1: void <init>(kotlinx.coroutines.DeferredCoroutine,kotlin.coroutines.Continuation)>":["<kotlin.coroutines.jvm.internal.ContinuationImpl: void <init>(kotlin.coroutines.Continuation)>"],"<androidx.collection.LongSparseArray: void put(long,java.lang.Object)>":["<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>","<androidx.collection.ContainerHelpers: int binarySearch(long[],int,long)>","<androidx.collection.LongSparseArray: void gc()>","<java.lang.System: void <clinit>()>","<androidx.collection.ContainerHelpers: void <clinit>()>","<androidx.collection.LongSparseArray: void <clinit>()>","<androidx.collection.ContainerHelpers: int idealLongArraySize(int)>"],"<com.afollestad.rxkprefs.RealRxkPrefs: com.afollestad.rxkprefs.Pref 'boolean'(java.lang.String,boolean)>":["<java.lang.Boolean: void <clinit>()>","<com.afollestad.rxkprefs.adapters.BooleanAdapter: void <clinit>()>","<java.lang.Boolean: java.lang.Boolean valueOf(boolean)>","<com.afollestad.rxkprefs.adapters.BooleanAdapter$Companion: com.afollestad.rxkprefs.adapters.BooleanAdapter getINSTANCE()>","<com.afollestad.rxkprefs.RealPref: void <init>(android.content.SharedPreferences,java.lang.String,java.lang.Object,io.reactivex.Observable,com.afollestad.rxkprefs.adapters.PrefAdapter)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<io.reactivex.Observable: io.reactivex.Observable concatArray(io.reactivex.ObservableSource[])>":["<io.reactivex.internal.functions.Functions: void <clinit>()>","<io.reactivex.Observable: io.reactivex.Observable wrap(io.reactivex.ObservableSource)>","<io.reactivex.Observable: int bufferSize()>","<io.reactivex.internal.operators.observable.ObservableConcatMap: void <init>(io.reactivex.ObservableSource,io.reactivex.functions.Function,int,io.reactivex.internal.util.ErrorMode)>","<io.reactivex.Observable: io.reactivex.Observable empty()>","<io.reactivex.internal.functions.Functions: io.reactivex.functions.Function identity()>","<io.reactivex.Observable: io.reactivex.Observable fromArray(java.lang.Object[])>","<io.reactivex.internal.util.ErrorMode: void <clinit>()>","<io.reactivex.plugins.RxJavaPlugins: io.reactivex.Observable onAssembly(io.reactivex.Observable)>"],"<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: boolean isParking()>":["<kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: void <clinit>()>"],"<java.lang.Thread: void <init>()>":["<java.lang.Object: void <init>()>","<java.lang.RuntimeException: void <init>(java.lang.String)>"],"<androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: android.animation.Animator loadAnimator(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,int)>":["<androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: android.animation.Animator loadAnimator(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,int,float)>"],"<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: void setChangingConfigurations(int)>":["<androidx.vectordrawable.graphics.drawable.VectorDrawableCommon: void setChangingConfigurations(int)>"],"<com.afollestad.materialdialogs.actions.DialogActionExtKt: com.afollestad.materialdialogs.internal.button.DialogActionButton getActionButton(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.WhichButton)>":["<com.afollestad.materialdialogs.WhichButton: int getIndex()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<com.afollestad.materialdialogs.MaterialDialog: com.afollestad.materialdialogs.internal.main.DialogLayout getView$com_afollestad_material_dialogs_core()>"],"<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: boolean isBlocking()>":["<kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: void <clinit>()>"],"<kotlinx.coroutines.internal.Symbol: void <init>(java.lang.String)>":["<java.lang.Object: void <init>()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<com.afollestad.materialdialogs.WhichButton: void <init>(java.lang.String,int,int)>":["<java.lang.Enum: void <init>(java.lang.String,int)>"],"<io.reactivex.internal.operators.observable.ObservablePublish$PublishSource: void <init>(java.util.concurrent.atomic.AtomicReference)>":["<java.lang.Object: void <init>()>"],"<com.afollestad.materialdialogs.MaterialDialog: com.afollestad.materialdialogs.MaterialDialog positiveButton(java.lang.Integer,java.lang.CharSequence,kotlin.jvm.functions.Function1)>":["<com.afollestad.materialdialogs.utils.ViewExtKt: boolean isVisible(android.view.View)>","<com.afollestad.materialdialogs.utils.DialogExtKt: void populateText$default(com.afollestad.materialdialogs.MaterialDialog,android.widget.TextView,java.lang.Integer,java.lang.CharSequence,int,android.graphics.Typeface,java.lang.Integer,int,java.lang.Object)>","<java.util.ArrayList: boolean add(java.lang.Object)>","<com.afollestad.materialdialogs.actions.DialogActionExtKt: com.afollestad.materialdialogs.internal.button.DialogActionButton getActionButton(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.WhichButton)>","<com.afollestad.materialdialogs.WhichButton: void <clinit>()>"],"<kotlin.collections.CollectionsKt__IterablesKt: int collectionSizeOrDefault(java.lang.Iterable,int)>":["<kotlin.collections.EmptyList: int size()>","<java.util.ArrayList: int size()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<com.afollestad.rxkprefs.RealRxkPrefs: void <init>(android.content.Context,java.lang.String,int)>":["<android.content.ContextWrapper: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>","<java.lang.Object: void <init>()>","<io.reactivex.Observable: io.reactivex.Observable create(io.reactivex.ObservableOnSubscribe)>","<com.afollestad.rxkprefs.RealRxkPrefs$onKeyChange$1: void <init>(com.afollestad.rxkprefs.RealRxkPrefs)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<com.afollestad.rxkprefs.RealRxkPrefsKt: java.lang.Object dumpsterFire()>","<io.reactivex.Observable: io.reactivex.Observable share()>"],"<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableDelegateState: int getChangingConfigurations()>":["<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: int getChangingConfigurations()>","<androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState: int getChangingConfigurations()>","<androidx.core.graphics.drawable.WrappedDrawableApi14$DrawableWrapperState: int getChangingConfigurations()>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableDelegateState: int getChangingConfigurations()>","<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat$AnimatedVectorDrawableDelegateState: int getChangingConfigurations()>"],"<com.afollestad.materialdialogs.utils.MDUtil: void <clinit>()>":["<com.afollestad.materialdialogs.utils.MDUtil: void <clinit>()>","<com.afollestad.materialdialogs.utils.MDUtil: void <init>()>"],"<androidx.appcompat.graphics.drawable.DrawableContainer: void <init>()>":["<android.graphics.drawable.Drawable: void <init>()>"],"<kotlinx.coroutines.scheduling.CoroutineScheduler: void requestCpuWorker()>":["<kotlinx.coroutines.scheduling.CoroutineScheduler: int createNewWorker()>","<kotlinx.coroutines.scheduling.CoroutineScheduler: boolean tryUnpark()>","<java.util.concurrent.Semaphore: int availablePermits()>"],"<com.afollestad.photoaffix.prefs.PrefsModule: com.afollestad.rxkprefs.Pref provideScalePriorityPref(com.afollestad.rxkprefs.RxkPrefs)>":["<com.afollestad.rxkprefs.RealRxkPrefs: com.afollestad.rxkprefs.Pref 'boolean'(java.lang.String,boolean)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<androidx.fragment.app.FragmentController: void restoreAllState(android.os.Parcelable,androidx.fragment.app.FragmentManagerNonConfig)>":["<androidx.fragment.app.FragmentManagerImpl: void restoreAllState(android.os.Parcelable,androidx.fragment.app.FragmentManagerNonConfig)>"],"<androidx.fragment.app.FragmentManagerImpl: android.view.animation.Animation$AnimationListener getAnimationListener(android.view.animation.Animation)>":["<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>","<androidx.fragment.app.FragmentManagerImpl: void <clinit>()>","<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>"],"<kotlinx.coroutines.CoroutineId: kotlin.coroutines.CoroutineContext minusKey(kotlin.coroutines.CoroutineContext$Key)>":["<kotlinx.coroutines.ThreadContextElement$DefaultImpls: kotlin.coroutines.CoroutineContext minusKey(kotlinx.coroutines.ThreadContextElement,kotlin.coroutines.CoroutineContext$Key)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<kotlin._Assertions: void <init>()>":["<java.lang.Object: void <init>()>"],"<io.reactivex.internal.operators.observable.ObservableFromUnsafeSource: void <init>(io.reactivex.ObservableSource)>":["<io.reactivex.Observable: void <init>()>"],"<com.afollestad.dragselectrecyclerview.DragSelectTouchListener: void <init>(android.content.Context,com.afollestad.dragselectrecyclerview.DragSelectReceiver)>":["<com.afollestad.dragselectrecyclerview.DragSelectTouchListener$autoScrollRunnable$1: void <init>(com.afollestad.dragselectrecyclerview.DragSelectTouchListener)>","<java.lang.Object: void <init>()>","<android.os.Handler: void <init>()>","<com.afollestad.dragselectrecyclerview.ExtensionsKt: int dimen(android.content.Context,int)>","<com.afollestad.dragselectrecyclerview.Mode: void <clinit>()>"],"<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: int getChangingConfigurations()>":["<android.graphics.drawable.Drawable: int getChangingConfigurations()>"],"<io.reactivex.internal.schedulers.SchedulerPoolFactory: void <clinit>()>":["<io.reactivex.internal.schedulers.SchedulerPoolFactory: void <clinit>()>","<io.reactivex.internal.schedulers.SchedulerPoolFactory$PurgeProperties: void <init>()>","<io.reactivex.internal.schedulers.SchedulerPoolFactory$PurgeProperties: void load(java.util.Properties)>","<java.lang.System: void <clinit>()>","<java.util.concurrent.atomic.AtomicReference: void <init>()>","<io.reactivex.internal.schedulers.SchedulerPoolFactory: void start()>","<java.lang.System: java.util.Properties getProperties()>","<java.util.concurrent.ConcurrentHashMap: void <init>()>"],"<java.lang.NullPointerException: void <init>(java.lang.String)>":["<java.lang.RuntimeException: void <init>(java.lang.String)>","<java.lang.RuntimeException: void <init>()>"],"<kotlinx.coroutines.scheduling.CoroutineScheduler: int createNewWorker()>":["<java.lang.IllegalArgumentException: void <init>(java.lang.String)>","<java.lang.Thread: void start()>","<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void <clinit>()>","<kotlinx.coroutines.scheduling.CoroutineScheduler: boolean isTerminated()>","<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void <init>(kotlinx.coroutines.scheduling.CoroutineScheduler,int)>","<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void run()>","<java.lang.String: java.lang.String toString()>","<java.util.concurrent.Semaphore: int availablePermits()>","<kotlinx.coroutines.scheduling.CoroutineScheduler: void <clinit>()>"],"<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: void inflate(android.content.res.Resources,android.util.AttributeSet,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser)>":["<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: void updateStateFromTypedArray(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,android.content.res.Resources$Theme)>","<androidx.core.content.res.TypedArrayUtils: android.content.res.TypedArray obtainAttributes(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,int[])>","<androidx.vectordrawable.graphics.drawable.AndroidResources: void <clinit>()>"],"<androidx.core.provider.FontsContractCompat: androidx.core.provider.FontsContractCompat$FontFamilyResult fetchFonts(android.content.Context,android.os.CancellationSignal,androidx.core.provider.FontRequest)>":["<androidx.core.provider.FontsContractCompat: androidx.core.provider.FontsContractCompat$FontInfo[] getFontFromProvider(android.content.Context,androidx.core.provider.FontRequest,java.lang.String,android.os.CancellationSignal)>","<androidx.core.provider.FontsContractCompat: void <clinit>()>","<androidx.appcompat.app.AppCompatActivity: android.content.res.Resources getResources()>","<androidx.core.provider.FontsContractCompat: android.content.pm.ProviderInfo getProvider(android.content.pm.PackageManager,androidx.core.provider.FontRequest,android.content.res.Resources)>","<androidx.core.provider.FontsContractCompat$FontFamilyResult: void <init>(int,androidx.core.provider.FontsContractCompat$FontInfo[])>","<android.content.ContextWrapper: android.content.pm.PackageManager getPackageManager()>"],"<androidx.core.content.ContextCompat: android.graphics.drawable.Drawable getDrawable(android.content.Context,int)>":["<android.util.TypedValue: void <init>()>","<androidx.core.content.ContextCompat: void <clinit>()>","<androidx.appcompat.app.AppCompatActivity: android.content.res.Resources getResources()>","<android.os.Build$VERSION: void <clinit>()>","<androidx.appcompat.widget.VectorEnabledTintResources: android.graphics.drawable.Drawable getDrawable(int)>","<android.content.res.Resources: void getValue(int,android.util.TypedValue,boolean)>","<android.content.Context: android.graphics.drawable.Drawable getDrawable(int)>"],"<androidx.core.content.res.GrowingArrayUtils: int[] append(int[],int,int)>":["<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>","<androidx.core.content.res.GrowingArrayUtils: int growSize(int)>","<java.lang.System: void <clinit>()>","<androidx.core.content.res.GrowingArrayUtils: void <clinit>()>"],"<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: void <init>(androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath)>":["<android.graphics.Paint$Cap: void <clinit>()>","<android.graphics.Paint$Join: void <clinit>()>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPath: void <init>(androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPath)>"],"<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)>":["<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>"],"<androidx.fragment.app.FragmentTransition$FragmentContainerTransition: void <init>()>":["<java.lang.Object: void <init>()>"],"<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableDelegateState: android.graphics.drawable.Drawable newDrawable()>":["<androidx.core.graphics.drawable.WrappedDrawableApi14$DrawableWrapperState: android.graphics.drawable.Drawable newDrawable()>","<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat$AnimatedVectorDrawableDelegateState: android.graphics.drawable.Drawable newDrawable()>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableDelegateState: android.graphics.drawable.Drawable newDrawable()>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatedStateListState: android.graphics.drawable.Drawable newDrawable()>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.graphics.drawable.Drawable newDrawable()>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void <init>()>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void <clinit>()>"],"<io.reactivex.schedulers.Schedulers$SingleTask: java.lang.Object call()>":["<io.reactivex.schedulers.Schedulers$SingleTask: io.reactivex.Scheduler call()>"],"<com.afollestad.photoaffix.utilities.RealDpConverter: void <init>(android.app.Application)>":["<java.lang.Object: void <init>()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<com.afollestad.photoaffix.prefs.PrefsModule: com.afollestad.rxkprefs.Pref provideImageSpacingHorizontalPref(com.afollestad.rxkprefs.RxkPrefs)>":["<com.afollestad.rxkprefs.RealRxkPrefs: com.afollestad.rxkprefs.Pref integer(java.lang.String,int)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<kotlin.coroutines.EmptyCoroutineContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>":["<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<androidx.core.graphics.drawable.DrawableCompat: android.graphics.drawable.Drawable wrap(android.graphics.drawable.Drawable)>":["<androidx.core.graphics.drawable.WrappedDrawableApi21: void <init>(android.graphics.drawable.Drawable)>","<androidx.core.graphics.drawable.WrappedDrawableApi14: void <clinit>()>","<android.os.Build$VERSION: void <clinit>()>","<androidx.core.graphics.drawable.WrappedDrawableApi14: void <init>(android.graphics.drawable.Drawable)>"],"<com.afollestad.photoaffix.views.MainActivity$performAffix$1$1: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)>":["<com.afollestad.photoaffix.views.MainActivity$performAffix$1$1: void <init>(com.afollestad.photoaffix.views.MainActivity$performAffix$1,kotlin.coroutines.Continuation)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<kotlin.collections.ArraysKt___ArraysKt: java.util.List toMutableList(int[])>":["<java.util.ArrayList: void <init>(int)>","<java.lang.Integer: void <clinit>()>","<java.util.ArrayList: boolean add(java.lang.Object)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<java.lang.Integer: java.lang.Integer valueOf(int)>"],"<androidx.fragment.app.FragmentTransitionImpl$2: void <init>(androidx.fragment.app.FragmentTransitionImpl,java.util.ArrayList,java.util.Map)>":["<java.lang.Object: void <init>()>"],"<androidx.fragment.app.FragmentController: void noteStateNotSaved()>":["<androidx.fragment.app.FragmentManagerImpl: void noteStateNotSaved()>"],"<kotlinx.coroutines.JobSupport: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext)>":["<kotlinx.coroutines.Job$DefaultImpls: kotlin.coroutines.CoroutineContext plus(kotlinx.coroutines.Job,kotlin.coroutines.CoroutineContext)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<androidx.appcompat.widget.AppCompatDrawableManager: void addDelegate(java.lang.String,androidx.appcompat.widget.AppCompatDrawableManager$InflateDelegate)>":["<androidx.collection.ArrayMap: void <init>()>","<androidx.collection.SimpleArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>"],"<kotlin.NoWhenBranchMatchedException: void <init>()>":["<java.lang.RuntimeException: void <init>()>"],"<com.afollestad.assent.internal.Data: void access$setInstance$cp(com.afollestad.assent.internal.Data)>":["<com.afollestad.assent.internal.Data: void <clinit>()>"],"<kotlinx.coroutines.CoroutineDispatcher: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>":["<kotlin.coroutines.ContinuationInterceptor$DefaultImpls: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.ContinuationInterceptor,kotlin.coroutines.CoroutineContext$Key)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<androidx.fragment.app.FragmentTransition: void configureTransitionsReordered(androidx.fragment.app.FragmentManagerImpl,int,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.view.View,androidx.collection.ArrayMap)>":["<androidx.fragment.app.FragmentTransition: java.lang.Object getEnterTransition(androidx.fragment.app.FragmentTransitionImpl,androidx.fragment.app.Fragment,boolean)>","<androidx.fragment.app.FragmentTransitionCompat21: void beginDelayedTransition(android.view.ViewGroup,java.lang.Object)>","<androidx.fragment.app.FragmentTransition: androidx.fragment.app.FragmentTransitionImpl chooseImpl(androidx.fragment.app.Fragment,androidx.fragment.app.Fragment)>","<androidx.fragment.app.FragmentTransition: java.lang.Object mergeTransitions(androidx.fragment.app.FragmentTransitionImpl,java.lang.Object,java.lang.Object,java.lang.Object,androidx.fragment.app.Fragment,boolean)>","<androidx.fragment.app.FragmentTransition: void replaceHide(androidx.fragment.app.FragmentTransitionImpl,java.lang.Object,androidx.fragment.app.Fragment,java.util.ArrayList)>","<androidx.fragment.app.FragmentTransition: java.lang.Object getExitTransition(androidx.fragment.app.FragmentTransitionImpl,androidx.fragment.app.Fragment,boolean)>","<androidx.fragment.app.FragmentActivity$HostCallbacks: boolean onHasView()>","<java.util.ArrayList: void <init>()>","<androidx.fragment.app.FragmentTransition: java.util.ArrayList configureEnteringExitingViews(androidx.fragment.app.FragmentTransitionImpl,java.lang.Object,androidx.fragment.app.Fragment,java.util.ArrayList,android.view.View)>","<androidx.fragment.app.FragmentTransition: void <clinit>()>","<androidx.fragment.app.FragmentTransition: void setViewVisibility(java.util.ArrayList,int)>","<androidx.fragment.app.FragmentTransitionCompat21: void scheduleRemoveTargets(java.lang.Object,java.lang.Object,java.util.ArrayList,java.lang.Object,java.util.ArrayList,java.lang.Object,java.util.ArrayList)>","<androidx.fragment.app.FragmentTransition: java.lang.Object configureSharedElementsReordered(androidx.fragment.app.FragmentTransitionImpl,android.view.ViewGroup,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,java.util.ArrayList,java.util.ArrayList,java.lang.Object,java.lang.Object)>","<androidx.fragment.app.FragmentActivity$HostCallbacks: android.view.View onFindViewById(int)>","<androidx.fragment.app.FragmentTransitionImpl: void setNameOverridesReordered(android.view.View,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList,java.util.Map)>","<androidx.fragment.app.FragmentTransitionCompat21: void swapSharedElementTargets(java.lang.Object,java.util.ArrayList,java.util.ArrayList)>","<androidx.fragment.app.FragmentTransitionImpl: java.util.ArrayList prepareSetNameOverridesReordered(java.util.ArrayList)>"],"<androidx.collection.SimpleArrayMap: int indexOfKey(java.lang.Object)>":["<java.lang.String: int hashCode()>","<java.util.AbstractList: int hashCode()>","<java.lang.Object: int hashCode()>","<androidx.collection.SimpleArrayMap: int indexOf(java.lang.Object,int)>","<androidx.collection.SimpleArrayMap: int indexOfNull()>"],"<java.lang.String: boolean equals(java.lang.Object)>":["<java.lang.RuntimeException: void <init>(java.lang.String)>"],"<kotlinx.coroutines.LazyDeferredCoroutine: void <init>(kotlin.coroutines.CoroutineContext,kotlin.jvm.functions.Function2)>":["<kotlinx.coroutines.DeferredCoroutine: void <init>(kotlin.coroutines.CoroutineContext,boolean)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<androidx.recyclerview.widget.GridLayoutManager: void <init>(android.content.Context,int)>":["<android.util.SparseIntArray: void <init>()>","<android.graphics.Rect: void <init>()>","<androidx.recyclerview.widget.GridLayoutManager: void setSpanCount(int)>","<android.graphics.Rect: void <clinit>()>","<androidx.recyclerview.widget.LinearLayoutManager: void <init>(android.content.Context)>","<androidx.recyclerview.widget.GridLayoutManager$DefaultSpanSizeLookup: void <init>()>"],"<com.afollestad.assent.internal.Data$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>":["<com.afollestad.assent.internal.Data$Companion: void <init>()>"],"<androidx.arch.core.internal.SafeIterableMap$IteratorWithAdditions: java.lang.Object next()>":["<androidx.arch.core.internal.SafeIterableMap$IteratorWithAdditions: java.util.Map$Entry next()>"],"<androidx.appcompat.app.AppCompatDelegateImpl: boolean applyDayNight()>":["<androidx.appcompat.app.AppCompatDelegateImpl: int getNightMode()>","<androidx.appcompat.app.AppCompatDelegateImpl: boolean updateForNightMode(int)>","<androidx.appcompat.app.AppCompatDelegateImpl: int mapNightMode(int)>","<androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager: void setup()>","<androidx.appcompat.app.AppCompatDelegateImpl: void ensureAutoNightModeManager()>"],"<kotlinx.coroutines.JobSupport: java.util.concurrent.CancellationException getCancellationException()>":["<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>","<java.lang.IllegalStateException: void <init>(java.lang.String)>","<java.lang.StringBuilder: java.lang.String toString()>","<kotlinx.coroutines.JobCancellationException: void <init>(java.lang.String,java.lang.Throwable,kotlinx.coroutines.Job)>","<java.lang.StringBuilder: void <init>()>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<kotlinx.coroutines.JobSupport: java.lang.Object getState$kotlinx_coroutines_core()>","<kotlinx.coroutines.JobSupport: java.util.concurrent.CancellationException toCancellationException(java.lang.Throwable,java.lang.String)>"],"<androidx.core.view.ViewConfigurationCompat: boolean shouldShowMenuShortcutsWhenKeyboardPresent(android.view.ViewConfiguration,android.content.Context)>":["<androidx.appcompat.app.AppCompatActivity: android.content.res.Resources getResources()>","<android.content.res.Resources: int getIdentifier(java.lang.String,java.lang.String,java.lang.String)>","<android.content.res.Resources: boolean getBoolean(int)>","<android.os.Build$VERSION: void <clinit>()>","<androidx.appcompat.view.ContextThemeWrapper: android.content.res.Resources getResources()>"],"<androidx.core.graphics.drawable.WrappedDrawableApi14: void jumpToCurrentState()>":["<androidx.core.graphics.drawable.WrappedDrawableApi14: void jumpToCurrentState()>","<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: void jumpToCurrentState()>","<android.graphics.drawable.LayerDrawable: void jumpToCurrentState()>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: void jumpToCurrentState()>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void jumpToCurrentState()>"],"<androidx.fragment.app.FragmentManagerImpl: boolean shouldRunOnHWLayer(android.view.View,androidx.fragment.app.FragmentManagerImpl$AnimationOrAnimator)>":["<androidx.fragment.app.FragmentManagerImpl: boolean modifiesAlpha(androidx.fragment.app.FragmentManagerImpl$AnimationOrAnimator)>","<androidx.core.view.ViewCompat: boolean hasOverlappingRendering(android.view.View)>","<androidx.fragment.app.FragmentManagerImpl: void <clinit>()>","<android.os.Build$VERSION: void <clinit>()>","<androidx.core.view.ViewCompat: void <clinit>()>"],"<kotlin.coroutines.jvm.internal.DebugProbesKt: kotlin.coroutines.Continuation probeCoroutineCreated(kotlin.coroutines.Continuation)>":["<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<androidx.core.graphics.drawable.WrappedDrawableApi14: int[] getState()>":["<androidx.core.graphics.drawable.WrappedDrawableApi14: int[] getState()>","<android.graphics.drawable.Drawable: int[] getState()>","<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: int[] getState()>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: int[] getState()>"],"<kotlin.text.StringsKt__StringNumberConversionsKt: java.lang.Integer toIntOrNull(java.lang.String,int)>":["<kotlin.text.CharsKt__CharJVMKt: int digitOf(char,int)>","<java.lang.Integer: void <clinit>()>","<kotlin.text.CharsKt__CharJVMKt: int checkRadix(int)>","<java.lang.Integer: java.lang.Integer valueOf(int)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<com.afollestad.assent.internal.Data: void <init>()>":["<java.lang.Object: void <init>()>","<com.afollestad.assent.internal.Queue: void <init>()>"],"<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: void setTintList(android.content.res.ColorStateList)>":["<androidx.appcompat.graphics.drawable.DrawableContainer: void setTintList(android.content.res.ColorStateList)>"],"<androidx.loader.app.LoaderManagerImpl: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>":["<androidx.loader.app.LoaderManagerImpl$LoaderViewModel: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>"],"<com.afollestad.photoaffix.utilities.ext.NumberExtKt: int toRoundedInt(float)>":["<kotlin.math.MathKt__MathJVMKt: int roundToInt(float)>"],"<androidx.fragment.app.FragmentManagerImpl: void executeOpsTogether(java.util.ArrayList,java.util.ArrayList,int,int)>":["<androidx.fragment.app.FragmentManagerImpl: void executeOps(java.util.ArrayList,java.util.ArrayList,int,int)>","<androidx.fragment.app.FragmentManagerImpl: androidx.fragment.app.Fragment getPrimaryNavigationFragment()>","<androidx.fragment.app.FragmentManagerImpl: void reportBackStackChanged()>","<androidx.fragment.app.FragmentManagerImpl: void <clinit>()>","<java.util.ArrayList: void clear()>","<androidx.collection.ArraySet: void <clinit>()>","<androidx.fragment.app.FragmentManagerImpl: void moveToState(int,boolean)>","<java.util.ArrayList: boolean addAll(java.util.Collection)>","<androidx.collection.ArraySet: void <init>()>","<androidx.fragment.app.FragmentManagerImpl: void makeRemovedFragmentsInvisible(androidx.collection.ArraySet)>","<androidx.fragment.app.FragmentManagerImpl: int postponePostponableTransactions(java.util.ArrayList,java.util.ArrayList,int,int,androidx.collection.ArraySet)>","<java.util.ArrayList: void <init>()>","<androidx.fragment.app.FragmentTransition: void <clinit>()>","<androidx.fragment.app.FragmentManagerImpl: void freeBackStackIndex(int)>","<java.util.ArrayList: java.lang.Object get(int)>","<androidx.fragment.app.FragmentManagerImpl: void addAddedFragments(androidx.collection.ArraySet)>","<androidx.fragment.app.FragmentTransition: void startTransitions(androidx.fragment.app.FragmentManagerImpl,java.util.ArrayList,java.util.ArrayList,int,int,boolean)>"],"<androidx.core.graphics.drawable.WrappedDrawableApi14: void setChangingConfigurations(int)>":["<android.graphics.drawable.Drawable: void setChangingConfigurations(int)>","<androidx.core.graphics.drawable.WrappedDrawableApi14: void setChangingConfigurations(int)>","<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: void setChangingConfigurations(int)>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void setChangingConfigurations(int)>"],"<com.afollestad.photoaffix.prefs.PrefsModule_ProvideScalePriorityPrefFactory: com.afollestad.photoaffix.prefs.PrefsModule_ProvideScalePriorityPrefFactory create(com.afollestad.photoaffix.prefs.PrefsModule,javax.inject.Provider)>":["<com.afollestad.photoaffix.prefs.PrefsModule_ProvideScalePriorityPrefFactory: void <init>(com.afollestad.photoaffix.prefs.PrefsModule,javax.inject.Provider)>"],"<com.afollestad.rxkprefs.adapters.BooleanAdapter: java.lang.Boolean get(java.lang.String,android.content.SharedPreferences)>":["<java.lang.Boolean: void <clinit>()>","<java.lang.Boolean: java.lang.Boolean valueOf(boolean)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<androidx.core.provider.SelfDestructiveThread: void postAndReply(java.util.concurrent.Callable,androidx.core.provider.SelfDestructiveThread$ReplyCallback)>":["<androidx.core.provider.SelfDestructiveThread$2: void <init>(androidx.core.provider.SelfDestructiveThread,java.util.concurrent.Callable,android.os.Handler,androidx.core.provider.SelfDestructiveThread$ReplyCallback)>","<android.os.Handler: void <init>()>","<androidx.core.provider.SelfDestructiveThread: void post(java.lang.Runnable)>"],"<com.afollestad.rxkprefs.adapters.BooleanAdapter$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>":["<com.afollestad.rxkprefs.adapters.BooleanAdapter$Companion: void <init>()>"],"<androidx.appcompat.graphics.drawable.StateListDrawable: android.graphics.drawable.Drawable mutate()>":["<androidx.appcompat.graphics.drawable.DrawableContainer: android.graphics.drawable.Drawable mutate()>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatedStateListState: void mutate()>"],"<androidx.fragment.app.FragmentManagerImpl: void ensureInflatedFragmentView(androidx.fragment.app.Fragment)>":["<androidx.fragment.app.FragmentManagerImpl: void dispatchOnFragmentViewCreated(androidx.fragment.app.Fragment,android.view.View,android.os.Bundle,boolean)>"],"<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void <clinit>()>":["<android.graphics.PorterDuff$Mode: void <clinit>()>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void <clinit>()>"],"<androidx.fragment.app.FragmentTransition: void scheduleTargetChange(androidx.fragment.app.FragmentTransitionImpl,android.view.ViewGroup,androidx.fragment.app.Fragment,android.view.View,java.util.ArrayList,java.lang.Object,java.util.ArrayList,java.lang.Object,java.util.ArrayList)>":["<androidx.fragment.app.OneShotPreDrawListener: androidx.fragment.app.OneShotPreDrawListener add(android.view.View,java.lang.Runnable)>","<androidx.fragment.app.FragmentTransition$2: void <init>(java.lang.Object,androidx.fragment.app.FragmentTransitionImpl,android.view.View,androidx.fragment.app.Fragment,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList,java.lang.Object)>"],"<androidx.collection.LongSparseArray: void <init>(int)>":["<java.lang.Object: void <init>()>","<androidx.collection.ContainerHelpers: void <clinit>()>","<androidx.collection.ContainerHelpers: int idealLongArraySize(int)>"],"<java.lang.Object: java.lang.Object clone()>":["<java.lang.RuntimeException: void <init>(java.lang.String)>"],"<com.afollestad.photoaffix.presenters.RealMainPresenter: void <init>(com.afollestad.photoaffix.utilities.IoManager,com.afollestad.photoaffix.engine.photos.PhotoLoader)>":["<java.lang.Object: void <init>()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState: int addChild(android.graphics.drawable.Drawable)>":["<android.graphics.drawable.LayerDrawable: int getChangingConfigurations()>","<android.graphics.drawable.LayerDrawable: boolean setVisible(boolean,boolean)>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: android.graphics.drawable.Drawable mutate()>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: int getChangingConfigurations()>","<androidx.core.graphics.drawable.WrappedDrawableApi14: int getChangingConfigurations()>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: int getChangingConfigurations()>","<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: android.graphics.drawable.Drawable mutate()>","<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: boolean setVisible(boolean,boolean)>","<androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState: void invalidateCache()>","<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: int getChangingConfigurations()>","<android.graphics.drawable.LayerDrawable: android.graphics.drawable.Drawable mutate()>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mutate()>","<androidx.core.graphics.drawable.WrappedDrawableApi14: android.graphics.drawable.Drawable mutate()>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: boolean setVisible(boolean,boolean)>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: boolean setVisible(boolean,boolean)>","<androidx.core.graphics.drawable.WrappedDrawableApi14: boolean setVisible(boolean,boolean)>","<androidx.appcompat.graphics.drawable.StateListDrawable$StateListState: void growArray(int,int)>","<android.graphics.drawable.Drawable: void setCallback(android.graphics.drawable.Drawable$Callback)>"],"<androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: int inferValueTypeFromValues(android.content.res.TypedArray,int,int)>":["<androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: boolean isColorType(int)>"],"<androidx.appcompat.widget.AppCompatDrawableManager$VdcInflateDelegate: android.graphics.drawable.Drawable createFromXmlInner(android.content.Context,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>":["<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>","<androidx.appcompat.app.AppCompatActivity: android.content.res.Resources getResources()>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void <clinit>()>"],"<androidx.appcompat.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable getCachedDrawable(android.content.Context,long)>":["<androidx.appcompat.app.AppCompatActivity: android.content.res.Resources getResources()>","<java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>"],"<kotlinx.coroutines.CoroutineScopeKt: kotlinx.coroutines.CoroutineScope CoroutineScope(kotlin.coroutines.CoroutineContext)>":["<kotlin.coroutines.CombinedContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>","<kotlinx.coroutines.JobSupport: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>","<kotlin.coroutines.EmptyCoroutineContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>","<kotlin.coroutines.AbstractCoroutineContextElement: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext)>","<kotlinx.coroutines.CoroutineId: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>","<kotlin.coroutines.EmptyCoroutineContext: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext)>","<kotlinx.coroutines.JobSupport: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext)>","<kotlinx.coroutines.CoroutineDispatcher: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>","<kotlinx.coroutines.internal.ContextScope: void <init>(kotlin.coroutines.CoroutineContext)>","<kotlinx.coroutines.JobKt: kotlinx.coroutines.Job Job$default(kotlinx.coroutines.Job,int,java.lang.Object)>","<kotlinx.coroutines.CoroutineId: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<kotlinx.coroutines.Job: void <clinit>()>","<kotlin.coroutines.CombinedContext: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext)>"],"<androidx.fragment.app.FragmentManagerImpl: void setBackStackIndex(int,androidx.fragment.app.BackStackRecord)>":["<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<java.lang.StringBuilder: void <init>()>","<androidx.fragment.app.FragmentManagerImpl: void <clinit>()>","<java.lang.StringBuilder: java.lang.StringBuilder append(int)>","<java.util.ArrayList: boolean add(java.lang.Object)>","<android.util.Log: int v(java.lang.String,java.lang.String)>","<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>","<java.lang.StringBuilder: java.lang.String toString()>","<java.lang.Integer: void <clinit>()>","<java.util.ArrayList: void <init>()>","<java.util.ArrayList: int size()>","<java.lang.Integer: java.lang.Integer valueOf(int)>"],"<com.afollestad.photoaffix.engine.subengines.RealStitchEngine$rectCreator$1: void <clinit>()>":["<com.afollestad.photoaffix.engine.subengines.RealStitchEngine$rectCreator$1: void <init>()>","<com.afollestad.photoaffix.engine.subengines.RealStitchEngine$rectCreator$1: void <clinit>()>"],"<androidx.lifecycle.LifecycleRegistry: void moveToState(androidx.lifecycle.Lifecycle$State)>":["<androidx.lifecycle.LifecycleRegistry: void sync()>"],"<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: void updateStateFromTypedArray(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser)>":["<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: void updateLocalMatrix()>","<androidx.core.content.res.TypedArrayUtils: float getNamedFloat(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int,float)>"],"<kotlin.collections.CollectionsKt___CollectionsKt: java.util.List toMutableList(java.util.Collection)>":["<java.util.ArrayList: void <init>(java.util.Collection)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<kotlinx.coroutines.DispatchedKt: void resumeDirect(kotlin.coroutines.Continuation,java.lang.Object)>":["<kotlin.coroutines.jvm.internal.CompletedContinuation: void resumeWith(java.lang.Object)>","<kotlinx.coroutines.DispatchedContinuation: void resumeWith(java.lang.Object)>","<kotlin.coroutines.jvm.internal.BaseContinuationImpl: void resumeWith(java.lang.Object)>","<kotlin.Result: void <clinit>()>","<kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<kotlinx.coroutines.AbstractCoroutine: void resumeWith(java.lang.Object)>"],"<androidx.appcompat.graphics.drawable.DrawableContainer: void setConstantState(androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState)>":["<androidx.appcompat.graphics.drawable.DrawableContainer: void initializeDrawableForDisplay(android.graphics.drawable.Drawable)>","<androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState: android.graphics.drawable.Drawable getChild(int)>"],"<androidx.appcompat.view.menu.MenuBuilder: void removeMenuPresenter(androidx.appcompat.view.menu.MenuPresenter)>":["<java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>","<java.util.concurrent.CopyOnWriteArrayList: boolean remove(java.lang.Object)>"],"<kotlin.coroutines.AbstractCoroutineContextElement: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext)>":["<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<kotlin.coroutines.CoroutineContext$Element$DefaultImpls: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext$Element,kotlin.coroutines.CoroutineContext)>"],"<androidx.core.graphics.TypefaceCompat: android.graphics.Typeface createFromResourcesFamilyXml(android.content.Context,androidx.core.content.res.FontResourcesParserCompat$FamilyResourceEntry,android.content.res.Resources,int,int,androidx.core.content.res.ResourcesCompat$FontCallback,android.os.Handler,boolean)>":["<androidx.core.provider.FontsContractCompat: android.graphics.Typeface getFontSync(android.content.Context,androidx.core.provider.FontRequest,androidx.core.content.res.ResourcesCompat$FontCallback,android.os.Handler,boolean,int,int)>","<androidx.core.graphics.TypefaceCompatApi26Impl: android.graphics.Typeface createFromFontFamilyFilesResourceEntry(android.content.Context,androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry,android.content.res.Resources,int)>","<androidx.core.provider.FontsContractCompat: void <clinit>()>","<androidx.core.content.res.FontResourcesParserCompat$ProviderResourceEntry: int getFetchStrategy()>","<androidx.collection.LruCache: java.lang.Object put(java.lang.Object,java.lang.Object)>","<androidx.core.graphics.TypefaceCompat: java.lang.String createResourceUid(android.content.res.Resources,int,int)>","<androidx.core.content.res.FontResourcesParserCompat$ProviderResourceEntry: int getTimeout()>","<androidx.core.graphics.TypefaceCompatBaseImpl: android.graphics.Typeface createFromFontFamilyFilesResourceEntry(android.content.Context,androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry,android.content.res.Resources,int)>","<androidx.core.content.res.FontResourcesParserCompat$ProviderResourceEntry: androidx.core.provider.FontRequest getRequest()>","<androidx.core.graphics.TypefaceCompat: void <clinit>()>","<androidx.core.graphics.TypefaceCompatApi24Impl: android.graphics.Typeface createFromFontFamilyFilesResourceEntry(android.content.Context,androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry,android.content.res.Resources,int)>"],"<kotlinx.coroutines.Unconfined: void <clinit>()>":["<kotlinx.coroutines.Unconfined: void <init>()>","<kotlinx.coroutines.Unconfined: void <clinit>()>"],"<kotlin.coroutines.jvm.internal.ContinuationImpl: kotlin.coroutines.CoroutineContext getContext()>":["<kotlin.jvm.internal.Intrinsics: void throwNpe()>"],"<androidx.lifecycle.LifecycleRegistry: androidx.lifecycle.Lifecycle$Event downEvent(androidx.lifecycle.Lifecycle$State)>":["<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>","<java.lang.StringBuilder: java.lang.String toString()>","<androidx.lifecycle.Lifecycle$Event: void <clinit>()>","<java.lang.IllegalArgumentException: void <init>(java.lang.String)>","<androidx.lifecycle.LifecycleRegistry$1: void <clinit>()>","<java.lang.StringBuilder: void <init>()>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<java.lang.Enum: int ordinal()>","<java.lang.IllegalArgumentException: void <init>()>"],"<androidx.appcompat.graphics.drawable.DrawableContainer: void setAlpha(int)>":["<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: void setAlpha(int)>","<androidx.appcompat.graphics.drawable.DrawableContainer: void animate(boolean)>","<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: void setAlpha(int)>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void setAlpha(int)>","<androidx.core.graphics.drawable.WrappedDrawableApi14: void setAlpha(int)>","<android.graphics.drawable.LayerDrawable: void setAlpha(int)>"],"<androidx.core.app.AppOpsManagerCompat: java.lang.String permissionToOp(java.lang.String)>":["<android.os.Build$VERSION: void <clinit>()>","<android.app.AppOpsManager: java.lang.String permissionToOp(java.lang.String)>"],"<com.afollestad.photoaffix.prefs.PrefsModule_ProvideRxkPrefsFactory: com.afollestad.rxkprefs.RxkPrefs provideInstance(com.afollestad.photoaffix.prefs.PrefsModule,javax.inject.Provider)>":["<com.afollestad.photoaffix.prefs.PrefsModule_ProvideRxkPrefsFactory: com.afollestad.rxkprefs.RxkPrefs proxyProvideRxkPrefs(com.afollestad.photoaffix.prefs.PrefsModule,android.app.Application)>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideScalePriorityPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.engine.subengines.RealStitchEngine_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.utilities.RealDpConverter_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.engine.RealAffixEngine_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideStackHorizontallyPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.engine.bitmaps.RealBitmapManipulator_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.engine.photos.RealPhotoLoader_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.utilities.RealMediaScanner_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.utilities.RealIoManager_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.di.AppProvideModule_ProvideAppNameFactory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideImageSpacingVerticalPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideImageSpacingHorizontalPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideBgFillColorPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.presenters.RealMainPresenter_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideRxkPrefsFactory: java.lang.Object get()>","<dagger.internal.DoubleCheck: java.lang.Object get()>","<com.afollestad.photoaffix.engine.subengines.RealDimensionsEngine_Factory: java.lang.Object get()>","<dagger.internal.InstanceFactory: java.lang.Object get()>"],"<androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState: void growArray(int,int)>":["<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>","<java.lang.System: void <clinit>()>"],"<kotlinx.coroutines.internal.LockFreeLinkedListNode: kotlinx.coroutines.internal.Removed removed()>":["<kotlinx.coroutines.internal.Removed: void <init>(kotlinx.coroutines.internal.LockFreeLinkedListNode)>","<kotlinx.coroutines.internal.LockFreeLinkedListNode: void <clinit>()>"],"<com.afollestad.photoaffix.utilities.RealIoManager: java.io.InputStream openStream(android.net.Uri)>":["<android.content.ContextWrapper: android.content.ContentResolver getContentResolver()>","<kotlin.jvm.internal.Intrinsics: void throwNpe()>","<java.io.FileInputStream: void <init>(java.lang.String)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<kotlin.text.StringsKt__StringsJVMKt: boolean equals(java.lang.String,java.lang.String,boolean)>"],"<org.xmlpull.v1.XmlPullParserException: void printStackTrace()>":["<java.lang.RuntimeException: void <init>(java.lang.String)>"],"<kotlinx.coroutines.AbstractContinuation: void handleException(java.lang.Throwable)>":["<kotlinx.coroutines.CoroutineExceptionHandlerKt: void handleCoroutineException$default(kotlin.coroutines.CoroutineContext,java.lang.Throwable,kotlinx.coroutines.Job,int,java.lang.Object)>","<kotlinx.coroutines.CancellableContinuationImpl: kotlin.coroutines.CoroutineContext getContext()>"],"<io.reactivex.internal.functions.Functions$NullCallable: void <init>()>":["<java.lang.Object: void <init>()>"],"<androidx.fragment.app.FragmentTransition: java.util.ArrayList configureEnteringExitingViews(androidx.fragment.app.FragmentTransitionImpl,java.lang.Object,androidx.fragment.app.Fragment,java.util.ArrayList,android.view.View)>":["<java.util.ArrayList: boolean removeAll(java.util.Collection)>","<java.util.ArrayList: boolean isEmpty()>","<java.util.ArrayList: void <init>()>","<androidx.fragment.app.FragmentTransitionImpl: void captureTransitioningViews(java.util.ArrayList,android.view.View)>","<java.util.ArrayList: boolean add(java.lang.Object)>","<androidx.fragment.app.FragmentTransitionCompat21: void addTargets(java.lang.Object,java.util.ArrayList)>"],"<java.lang.Throwable: java.lang.String getMessage()>":["<java.lang.RuntimeException: void <init>(java.lang.String)>"],"<io.reactivex.Observable: io.reactivex.Observable empty()>":["<io.reactivex.internal.operators.observable.ObservableEmpty: void <clinit>()>","<io.reactivex.plugins.RxJavaPlugins: io.reactivex.Observable onAssembly(io.reactivex.Observable)>"],"<java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler getDefaultUncaughtExceptionHandler()>":["<java.lang.RuntimeException: void <init>(java.lang.String)>"],"<kotlinx.coroutines.JobSupport$ChildCompletion: void invoke(java.lang.Throwable)>":["<kotlinx.coroutines.JobSupport: void access$continueCompleting(kotlinx.coroutines.JobSupport,kotlinx.coroutines.JobSupport$Finishing,kotlinx.coroutines.ChildHandleNode,java.lang.Object)>","<kotlinx.coroutines.JobSupport: void <clinit>()>"],"<androidx.appcompat.app.AppCompatDelegateImpl: void onPostCreate(android.os.Bundle)>":["<androidx.appcompat.app.AppCompatDelegateImpl: void ensureSubDecor()>"],"<kotlinx.coroutines.scheduling.Task: void <init>()>":["<kotlinx.coroutines.scheduling.NonBlockingContext: void <clinit>()>","<kotlinx.coroutines.scheduling.Task: void <init>(long,kotlinx.coroutines.scheduling.TaskContext)>"],"<androidx.appcompat.view.WindowCallbackWrapper: void <init>(android.view.Window$Callback)>":["<java.lang.Object: void <init>()>","<java.lang.IllegalArgumentException: void <init>(java.lang.String)>"],"<androidx.core.app.ComponentActivity: void onCreate(android.os.Bundle)>":["<androidx.lifecycle.ReportFragment: void injectIfNeededIn(android.app.Activity)>","<android.app.Activity: void onCreate(android.os.Bundle)>"],"<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$Transition: void <init>()>":["<java.lang.Object: void <init>()>"],"<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: void updateStateFromTypedArray(android.content.res.TypedArray)>":["<androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState: void setExitFadeDuration(int)>","<androidx.appcompat.R$styleable: void <clinit>()>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: void setDither(boolean)>","<androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState: void setConstantSize(boolean)>","<android.os.Build$VERSION: void <clinit>()>","<androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState: void setVariablePadding(boolean)>","<androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState: void setEnterFadeDuration(int)>"],"<kotlinx.coroutines.scheduling.CoroutineScheduler$Companion: void <init>()>":["<java.lang.Object: void <init>()>"],"<java.lang.String: int length()>":["<java.lang.RuntimeException: void <init>(java.lang.String)>"],"<kotlinx.coroutines.internal.LockFreeLinkedListNode: void <clinit>()>":["<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>","<kotlinx.coroutines.internal.LockFreeLinkedListNode: void <clinit>()>"],"<androidx.core.content.ContextCompat: int getColor(android.content.Context,int)>":["<android.content.Context: int getColor(int)>","<androidx.appcompat.app.AppCompatActivity: android.content.res.Resources getResources()>","<android.content.res.Resources: int getColor(int)>","<android.os.Build$VERSION: void <clinit>()>"],"<com.afollestad.assent.internal.Data$Companion$assureFragment$1$1: java.lang.Object invoke(java.lang.Object)>":["<kotlin.Unit: void <clinit>()>","<com.afollestad.assent.internal.Data$Companion$assureFragment$1$1: void invoke(androidx.fragment.app.FragmentTransaction)>"],"<androidx.fragment.app.FragmentTransition: java.lang.Object getSharedElementTransition(androidx.fragment.app.FragmentTransitionImpl,androidx.fragment.app.Fragment,androidx.fragment.app.Fragment,boolean)>":["<androidx.fragment.app.FragmentTransitionCompat21: java.lang.Object wrapTransitionInSet(java.lang.Object)>","<androidx.fragment.app.FragmentTransitionCompat21: java.lang.Object cloneTransition(java.lang.Object)>"],"<androidx.fragment.app.FragmentTransition: void calculatePopFragments(androidx.fragment.app.BackStackRecord,android.util.SparseArray,boolean)>":["<androidx.fragment.app.FragmentTransition: void <clinit>()>","<androidx.fragment.app.FragmentTransition: void addToFirstInLastOut(androidx.fragment.app.BackStackRecord,androidx.fragment.app.BackStackRecord$Op,android.util.SparseArray,boolean,boolean)>"],"<androidx.appcompat.app.ResourcesFlusher: void flush(android.content.res.Resources)>":["<androidx.appcompat.app.ResourcesFlusher: void flushNougats(android.content.res.Resources)>","<android.os.Build$VERSION: void <clinit>()>","<androidx.appcompat.app.ResourcesFlusher: void flushMarshmallows(android.content.res.Resources)>","<androidx.appcompat.app.ResourcesFlusher: void flushLollipops(android.content.res.Resources)>"],"<kotlinx.coroutines.scheduling.CoroutineScheduler: void parkedWorkersStackTopUpdate(kotlinx.coroutines.scheduling.CoroutineScheduler$Worker,int,int)>":["<kotlinx.coroutines.scheduling.CoroutineScheduler: int parkedWorkersStackNextIndex(kotlinx.coroutines.scheduling.CoroutineScheduler$Worker)>","<kotlinx.coroutines.scheduling.CoroutineScheduler: void <clinit>()>"],"<androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager$1: void <init>(androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager)>":["<android.content.BroadcastReceiver: void <init>()>"],"<com.afollestad.photoaffix.engine.subengines.RealDimensionsEngine: com.afollestad.photoaffix.engine.subengines.SizingResult calculateSize(com.afollestad.photoaffix.engine.bitmaps.BitmapIterator)>":["<com.afollestad.photoaffix.engine.subengines.RealDimensionsEngine: com.afollestad.photoaffix.engine.subengines.SizingResult calculateHorizontalSize(com.afollestad.photoaffix.engine.bitmaps.BitmapIterator)>","<com.afollestad.photoaffix.engine.subengines.RealDimensionsEngine: com.afollestad.photoaffix.engine.subengines.SizingResult calculateVerticalSize(com.afollestad.photoaffix.engine.bitmaps.BitmapIterator)>","<com.afollestad.rxkprefs.RealPref: java.lang.Object get()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<androidx.collection.ArraySet: void allocArrays(int)>":["<androidx.collection.ArraySet: void <clinit>()>"],"<com.afollestad.photoaffix.engine.subengines.RealStitchEngine$paintCreator$1: void <init>()>":["<kotlin.jvm.internal.Lambda: void <init>(int)>"],"<androidx.fragment.app.FragmentManagerImpl: boolean generateOpsForPendingActions(java.util.ArrayList,java.util.ArrayList)>":["<androidx.fragment.app.FragmentHostCallback: android.os.Handler getHandler()>","<android.os.Handler: void removeCallbacks(java.lang.Runnable)>","<java.util.ArrayList: int size()>","<java.util.ArrayList: void clear()>","<java.util.ArrayList: java.lang.Object get(int)>"],"<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void setAlpha(int)>":["<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: int getRootAlpha()>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: void setAlpha(int)>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: void setRootAlpha(int)>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void invalidateSelf()>","<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: void setAlpha(int)>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void setAlpha(int)>","<android.graphics.drawable.LayerDrawable: void setAlpha(int)>","<androidx.core.graphics.drawable.WrappedDrawableApi14: void setAlpha(int)>"],"<kotlinx.coroutines.LazyStandaloneCoroutine: void onStart()>":["<kotlinx.coroutines.intrinsics.CancellableKt: void startCoroutineCancellable(kotlin.jvm.functions.Function2,java.lang.Object,kotlin.coroutines.Continuation)>"],"<androidx.appcompat.app.AppCompatActivity: void supportInvalidateOptionsMenu()>":["<androidx.appcompat.app.AppCompatActivity: androidx.appcompat.app.AppCompatDelegate getDelegate()>","<androidx.appcompat.app.AppCompatDelegateImpl: void invalidateOptionsMenu()>"],"<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat$1: void <init>(androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat)>":["<java.lang.Object: void <init>()>"],"<com.afollestad.photoaffix.views.MainActivity$performAffix$1: java.lang.Object invoke(java.lang.Object)>":["<com.afollestad.photoaffix.views.MainActivity$performAffix$1: void invoke(kotlinx.coroutines.CoroutineScope)>","<kotlin.Unit: void <clinit>()>"],"<kotlinx.coroutines.DispatchedContinuation: void <init>(kotlinx.coroutines.CoroutineDispatcher,kotlin.coroutines.Continuation)>":["<kotlinx.coroutines.DispatchedKt: void <clinit>()>","<kotlinx.coroutines.DispatchedKt: kotlinx.coroutines.internal.Symbol access$getUNDEFINED$p()>","<kotlinx.coroutines.internal.ThreadContextKt: void <clinit>()>","<kotlinx.coroutines.DispatchedContinuation: kotlin.coroutines.CoroutineContext getContext()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<kotlinx.coroutines.internal.ThreadContextKt: java.lang.Object threadContextElements(kotlin.coroutines.CoroutineContext)>","<kotlinx.coroutines.DispatchedTask: void <init>(int)>"],"<kotlinx.coroutines.DefaultExecutor: java.lang.Thread createThreadSync()>":["<kotlinx.coroutines.EventLoopBase: void <clinit>()>","<kotlinx.coroutines.DefaultExecutor: void <clinit>()>","<java.lang.Thread: void start()>","<java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)>","<java.lang.Thread: void setDaemon(boolean)>","<java.lang.Thread: void run()>"],"<androidx.lifecycle.LifecycleRegistry: void forwardPass(androidx.lifecycle.LifecycleOwner)>":["<androidx.arch.core.internal.SafeIterableMap: androidx.arch.core.internal.SafeIterableMap$IteratorWithAdditions iteratorWithAdditions()>","<androidx.arch.core.internal.FastSafeIterableMap: boolean contains(java.lang.Object)>","<androidx.arch.core.internal.SafeIterableMap$IteratorWithAdditions: java.lang.Object next()>","<androidx.lifecycle.LifecycleRegistry: void pushParentState(androidx.lifecycle.Lifecycle$State)>","<androidx.arch.core.internal.SafeIterableMap$IteratorWithAdditions: boolean hasNext()>","<androidx.lifecycle.LifecycleRegistry: void popParentState()>","<androidx.lifecycle.LifecycleRegistry: androidx.lifecycle.Lifecycle$Event upEvent(androidx.lifecycle.Lifecycle$State)>"],"<com.afollestad.photoaffix.utilities.RealIoManager_Factory: com.afollestad.photoaffix.utilities.RealIoManager get()>":["<com.afollestad.photoaffix.utilities.RealIoManager_Factory: com.afollestad.photoaffix.utilities.RealIoManager provideInstance(javax.inject.Provider,javax.inject.Provider)>"],"<androidx.collection.SparseArrayCompat: androidx.collection.SparseArrayCompat clone()>":["<java.lang.AssertionError: void <init>(java.lang.Object)>","<java.lang.Object: java.lang.Object clone()>"],"<kotlinx.coroutines.CommonPool: java.util.concurrent.ExecutorService createPlainPool()>":["<java.util.concurrent.atomic.AtomicInteger: void <init>()>","<kotlinx.coroutines.CommonPool: int getParallelism()>","<java.util.concurrent.Executors: java.util.concurrent.ExecutorService newFixedThreadPool(int,java.util.concurrent.ThreadFactory)>","<kotlin.jvm.internal.Intrinsics: void checkExpressionValueIsNotNull(java.lang.Object,java.lang.String)>","<kotlinx.coroutines.CommonPool$createPlainPool$1: void <init>(java.util.concurrent.atomic.AtomicInteger)>"],"<kotlinx.coroutines.Job$Key: void <init>()>":["<java.lang.Object: void <init>()>"],"<kotlinx.coroutines.NonDisposableHandle: void <clinit>()>":["<kotlinx.coroutines.NonDisposableHandle: void <clinit>()>","<kotlinx.coroutines.NonDisposableHandle: void <init>()>"],"<kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>":["<java.lang.String: boolean equals(java.lang.Object)>","<kotlinx.coroutines.JobCancellationException: boolean equals(java.lang.Object)>","<java.lang.Object: boolean equals(java.lang.Object)>"],"<io.reactivex.Observable: io.reactivex.Observable just(java.lang.Object)>":["<io.reactivex.internal.operators.observable.ObservableJust: void <init>(java.lang.Object)>","<io.reactivex.internal.functions.ObjectHelper: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>","<io.reactivex.plugins.RxJavaPlugins: io.reactivex.Observable onAssembly(io.reactivex.Observable)>","<io.reactivex.internal.functions.ObjectHelper: void <clinit>()>"],"<kotlinx.coroutines.DispatchException: void <init>(java.lang.String,java.lang.Throwable)>":["<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<androidx.core.content.res.GradientColorInflaterCompat: android.graphics.Shader createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>":["<androidx.core.content.res.TypedArrayUtils: int getNamedInt(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int,int)>","<androidx.core.content.res.TypedArrayUtils: int getNamedColor(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int,int)>","<androidx.core.content.res.TypedArrayUtils: android.content.res.TypedArray obtainAttributes(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,int[])>","<androidx.core.content.res.GradientColorInflaterCompat: androidx.core.content.res.GradientColorInflaterCompat$ColorStops checkColors(androidx.core.content.res.GradientColorInflaterCompat$ColorStops,int,int,boolean,int)>","<android.graphics.SweepGradient: void <init>(float,float,int[],float[])>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<java.lang.StringBuilder: void <init>()>","<androidx.core.content.res.GradientColorInflaterCompat: android.graphics.Shader$TileMode parseTileMode(int)>","<android.graphics.LinearGradient: void <init>(float,float,float,float,int[],float[],android.graphics.Shader$TileMode)>","<android.graphics.RadialGradient: void <init>(float,float,float,int[],float[],android.graphics.Shader$TileMode)>","<java.lang.StringBuilder: java.lang.String toString()>","<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>","<androidx.core.R$styleable: void <clinit>()>","<androidx.core.content.res.TypedArrayUtils: float getNamedFloat(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int,float)>","<androidx.core.content.res.TypedArrayUtils: boolean hasAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>","<androidx.core.content.res.GradientColorInflaterCompat: androidx.core.content.res.GradientColorInflaterCompat$ColorStops inflateChildElements(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>"],"<io.reactivex.Flowable: int bufferSize()>":["<io.reactivex.Flowable: void <clinit>()>"],"<java.lang.Class: java.lang.ClassLoader getClassLoader()>":["<java.lang.RuntimeException: void <init>(java.lang.String)>"],"<androidx.fragment.app.FragmentController: void dispatchStart()>":["<androidx.fragment.app.FragmentManagerImpl: void dispatchStart()>"],"<java.lang.Character: char toLowerCase(char)>":["<java.lang.RuntimeException: void <init>(java.lang.String)>"],"<com.afollestad.assent.internal.Data$Companion: void setInstance(com.afollestad.assent.internal.Data)>":["<com.afollestad.assent.internal.Data: void <clinit>()>","<com.afollestad.assent.internal.Data: void access$setInstance$cp(com.afollestad.assent.internal.Data)>"],"<com.afollestad.photoaffix.prefs.PrefsModule: void <clinit>()>":["<com.afollestad.photoaffix.prefs.PrefsModule: void <clinit>()>","<com.afollestad.photoaffix.prefs.PrefsModule$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>"],"<androidx.loader.app.LoaderManagerImpl$LoaderViewModel: void onCleared()>":["<androidx.collection.SparseArrayCompat: java.lang.Object valueAt(int)>","<androidx.lifecycle.ViewModel: void onCleared()>","<androidx.collection.SparseArrayCompat: void clear()>","<androidx.collection.SparseArrayCompat: int size()>"],"<com.afollestad.photoaffix.prefs.PrefsModule_ProvideScalePriorityPrefFactory: void <init>(com.afollestad.photoaffix.prefs.PrefsModule,javax.inject.Provider)>":["<java.lang.Object: void <init>()>"],"<androidx.lifecycle.LiveData$1: void <init>(androidx.lifecycle.LiveData)>":["<java.lang.Object: void <init>()>"],"<io.reactivex.internal.operators.observable.ObservableRefCount: void <init>(io.reactivex.observables.ConnectableObservable)>":["<java.util.concurrent.TimeUnit: void <clinit>()>","<io.reactivex.internal.operators.observable.ObservableRefCount: void <init>(io.reactivex.observables.ConnectableObservable,int,long,java.util.concurrent.TimeUnit,io.reactivex.Scheduler)>","<io.reactivex.schedulers.Schedulers: io.reactivex.Scheduler trampoline()>","<io.reactivex.schedulers.Schedulers: void <clinit>()>"],"<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void setTintList(android.content.res.ColorStateList)>":["<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.PorterDuffColorFilter updateTintFilter(android.graphics.PorterDuffColorFilter,android.content.res.ColorStateList,android.graphics.PorterDuff$Mode)>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void invalidateSelf()>","<androidx.core.graphics.drawable.DrawableCompat: void setTintList(android.graphics.drawable.Drawable,android.content.res.ColorStateList)>"],"<io.reactivex.internal.functions.Functions$EmptyConsumer: void <init>()>":["<java.lang.Object: void <init>()>"],"<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: boolean tryForbidTermination()>":["<java.lang.IllegalStateException: void <init>(java.lang.String)>","<java.lang.StringBuilder: java.lang.String toString()>","<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void <clinit>()>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<java.lang.StringBuilder: void <init>()>","<java.lang.StringBuilder: java.lang.StringBuilder append(int)>"],"<androidx.fragment.app.FragmentManagerImpl: void endAnimatingAwayFragments()>":["<android.util.SparseArray: int size()>","<android.util.SparseArray: java.lang.Object valueAt(int)>","<androidx.fragment.app.FragmentManagerImpl: void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean)>"],"<java.lang.Throwable: void printStackTrace()>":["<java.lang.RuntimeException: void <init>(java.lang.String)>"],"<androidx.fragment.app.FragmentManagerImpl: void dispatchCreate()>":["<androidx.fragment.app.FragmentManagerImpl: void dispatchStateChange(int)>"],"<com.afollestad.rxkprefs.adapters.BooleanAdapter$Companion: com.afollestad.rxkprefs.adapters.BooleanAdapter getINSTANCE()>":["<com.afollestad.rxkprefs.adapters.BooleanAdapter: void <clinit>()>","<com.afollestad.rxkprefs.adapters.BooleanAdapter: com.afollestad.rxkprefs.adapters.BooleanAdapter access$getINSTANCE$cp()>"],"<io.reactivex.Observable: int bufferSize()>":["<io.reactivex.Flowable: int bufferSize()>","<io.reactivex.Flowable: void <clinit>()>"],"<androidx.lifecycle.LifecycleRegistry: void markState(androidx.lifecycle.Lifecycle$State)>":["<androidx.lifecycle.LifecycleRegistry: void moveToState(androidx.lifecycle.Lifecycle$State)>"],"<androidx.recyclerview.widget.RecyclerView$Adapter: void <init>()>":["<java.lang.Object: void <init>()>","<androidx.recyclerview.widget.RecyclerView$AdapterDataObservable: void <init>()>"],"<androidx.appcompat.app.AppCompatActivity: android.view.View findViewById(int)>":["<androidx.appcompat.app.AppCompatDelegateImpl: android.view.View findViewById(int)>","<androidx.appcompat.app.AppCompatActivity: androidx.appcompat.app.AppCompatDelegate getDelegate()>"],"<androidx.core.provider.SelfDestructiveThread: void post(java.lang.Runnable)>":["<android.os.Handler: void removeMessages(int)>","<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>","<android.os.HandlerThread: void <init>(java.lang.String,int)>","<android.os.HandlerThread: android.os.Looper getLooper()>","<android.os.HandlerThread: void run()>","<android.os.Handler: void <init>(android.os.Looper,android.os.Handler$Callback)>","<android.os.Handler: boolean sendMessage(android.os.Message)>","<android.os.HandlerThread: void start()>"],"<com.afollestad.materialdialogs.utils.DialogExtKt: void populateText(com.afollestad.materialdialogs.MaterialDialog,android.widget.TextView,java.lang.Integer,java.lang.CharSequence,int,android.graphics.Typeface,java.lang.Integer)>":["<com.afollestad.materialdialogs.utils.ColorExtKt: void maybeSetTextColor(android.widget.TextView,android.content.Context,java.lang.Integer)>","<java.lang.Integer: void <clinit>()>","<kotlin.TypeCastException: void <init>(java.lang.String)>","<com.afollestad.materialdialogs.utils.MDUtil: java.lang.CharSequence resolveString$default(com.afollestad.materialdialogs.utils.MDUtil,com.afollestad.materialdialogs.MaterialDialog,java.lang.Integer,java.lang.Integer,boolean,int,java.lang.Object)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<java.lang.Integer: java.lang.Integer valueOf(int)>","<com.afollestad.materialdialogs.utils.MDUtil: void <clinit>()>","<com.afollestad.materialdialogs.MaterialDialog: android.content.Context getWindowContext()>"],"<io.reactivex.internal.operators.observable.ObservablePublish: io.reactivex.observables.ConnectableObservable create(io.reactivex.ObservableSource)>":["<io.reactivex.internal.operators.observable.ObservablePublish$PublishSource: void <init>(java.util.concurrent.atomic.AtomicReference)>","<io.reactivex.plugins.RxJavaPlugins: io.reactivex.observables.ConnectableObservable onAssembly(io.reactivex.observables.ConnectableObservable)>","<io.reactivex.internal.operators.observable.ObservablePublish: void <init>(io.reactivex.ObservableSource,io.reactivex.ObservableSource,java.util.concurrent.atomic.AtomicReference)>","<java.util.concurrent.atomic.AtomicReference: void <init>()>"],"<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void setChangingConfigurations(int)>":["<androidx.vectordrawable.graphics.drawable.VectorDrawableCommon: void setChangingConfigurations(int)>"],"<androidx.lifecycle.Lifecycle$Event: void <clinit>()>":["<androidx.lifecycle.Lifecycle$Event: void <init>(java.lang.String,int)>","<androidx.lifecycle.Lifecycle$Event: void <clinit>()>"],"<androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: android.animation.Keyframe loadKeyframe(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,int,org.xmlpull.v1.XmlPullParser)>":["<androidx.core.content.res.TypedArrayUtils: int getNamedInt(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int,int)>","<androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: boolean isColorType(int)>","<androidx.vectordrawable.graphics.drawable.AnimationUtilsCompat: android.view.animation.Interpolator loadInterpolator(android.content.Context,int)>","<androidx.core.content.res.TypedArrayUtils: android.content.res.TypedArray obtainAttributes(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,int[])>","<android.animation.Keyframe: android.animation.Keyframe ofFloat(float,float)>","<android.animation.Keyframe: android.animation.Keyframe ofFloat(float)>","<androidx.vectordrawable.graphics.drawable.AndroidResources: void <clinit>()>","<android.animation.Keyframe: android.animation.Keyframe ofInt(float)>","<android.animation.Keyframe: android.animation.Keyframe ofInt(float,int)>","<androidx.core.content.res.TypedArrayUtils: float getNamedFloat(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int,float)>","<androidx.core.content.res.TypedArrayUtils: int getNamedResourceId(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int,int)>","<androidx.core.content.res.TypedArrayUtils: android.util.TypedValue peekNamedValue(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int)>"],"<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.graphics.drawable.Drawable newDrawable(android.content.res.Resources)>":["<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void <init>(androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState)>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void <clinit>()>"],"<androidx.fragment.app.FragmentController: void <init>(androidx.fragment.app.FragmentHostCallback)>":["<java.lang.Object: void <init>()>"],"<com.afollestad.photoaffix.views.MainActivity$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>":["<com.afollestad.photoaffix.views.MainActivity$Companion: void <init>()>"],"<androidx.fragment.app.FragmentManagerImpl: void dispatchOnFragmentResumed(androidx.fragment.app.Fragment,boolean)>":["<java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>"],"<kotlinx.coroutines.internal.LockFreeTaskQueueCore$Companion: long updateHead(long,int)>":["<kotlinx.coroutines.internal.LockFreeTaskQueueCore$Companion: long wo(long,long)>"],"<kotlin.coroutines.EmptyCoroutineContext: java.lang.Object fold(java.lang.Object,kotlin.jvm.functions.Function2)>":["<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<io.reactivex.internal.functions.ObjectHelper: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>":["<java.lang.NullPointerException: void <init>(java.lang.String)>"],"<dummyMainClass: com.afollestad.photoaffix.views.MainActivity dummyMainMethod_com_afollestad_photoaffix_views_MainActivity(android.content.Intent)>":["<androidx.appcompat.app.AppCompatActivity: void onPostCreate(android.os.Bundle)>","<com.afollestad.photoaffix.views.MainActivity: void <clinit>()>","<com.afollestad.photoaffix.views.MainActivity: void <init>()>","<androidx.fragment.app.FragmentActivity: void onPause()>","<com.afollestad.photoaffix.views.MainActivity: void onCreate(android.os.Bundle)>","<com.afollestad.photoaffix.views.MainActivity: void onResume()>","<androidx.appcompat.app.AppCompatActivity: void onDestroy()>","<androidx.appcompat.app.AppCompatActivity: void onPostResume()>","<android.app.Activity: void <clinit>()>","<androidx.appcompat.app.AppCompatActivity: void onStop()>","<androidx.appcompat.app.AppCompatActivity: void onSaveInstanceState(android.os.Bundle)>","<com.afollestad.photoaffix.views.MainActivity: void onStart()>"],"<kotlinx.coroutines.DefaultExecutor: void <init>()>":["<kotlinx.coroutines.EventLoopBase: void <init>()>"],"<androidx.fragment.app.FragmentTransition: androidx.collection.ArrayMap calculateNameOverrides(int,java.util.ArrayList,java.util.ArrayList,int,int)>":["<androidx.collection.SimpleArrayMap: java.lang.Object remove(java.lang.Object)>","<androidx.collection.ArrayMap: void <init>()>","<androidx.collection.SimpleArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>","<java.util.ArrayList: java.lang.Object get(int)>"],"<androidx.core.provider.SelfDestructiveThread$1: void <init>(androidx.core.provider.SelfDestructiveThread)>":["<java.lang.Object: void <init>()>"],"<io.reactivex.plugins.RxJavaPlugins: io.reactivex.Scheduler initIoScheduler(java.util.concurrent.Callable)>":["<io.reactivex.internal.functions.ObjectHelper: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>","<io.reactivex.plugins.RxJavaPlugins: io.reactivex.Scheduler applyRequireNonNull(io.reactivex.functions.Function,java.util.concurrent.Callable)>","<io.reactivex.internal.functions.ObjectHelper: void <clinit>()>","<io.reactivex.plugins.RxJavaPlugins: io.reactivex.Scheduler callRequireNonNull(java.util.concurrent.Callable)>"],"<androidx.fragment.app.FragmentController: void attachHost(androidx.fragment.app.Fragment)>":["<androidx.fragment.app.FragmentManagerImpl: void attachController(androidx.fragment.app.FragmentHostCallback,androidx.fragment.app.FragmentContainer,androidx.fragment.app.Fragment)>"],"<androidx.core.graphics.TypefaceCompatApi26Impl: android.graphics.Typeface createFromFontInfo(android.content.Context,android.os.CancellationSignal,androidx.core.provider.FontsContractCompat$FontInfo[],int)>":["<androidx.core.graphics.TypefaceCompatApi26Impl: java.lang.Object newFamily()>","<android.graphics.Typeface$Builder: android.graphics.Typeface$Builder setWeight(int)>","<androidx.core.provider.FontsContractCompat: void <clinit>()>","<android.graphics.Typeface: void <clinit>()>","<androidx.core.graphics.TypefaceCompatBaseImpl: androidx.core.provider.FontsContractCompat$FontInfo findBestInfo(androidx.core.provider.FontsContractCompat$FontInfo[],int)>","<android.graphics.Typeface$Builder: void <init>(java.io.FileDescriptor)>","<android.graphics.Typeface$Builder: android.graphics.Typeface build()>","<androidx.core.graphics.TypefaceCompatApi26Impl: boolean isFontFamilyPrivateAPIAvailable()>","<androidx.core.graphics.TypefaceCompatApi26Impl: android.graphics.Typeface createFromFamiliesWithDefault(java.lang.Object)>","<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>","<androidx.core.graphics.TypefaceCompatApi26Impl: boolean addFontFromBuffer(java.lang.Object,java.nio.ByteBuffer,int,int,int)>","<androidx.core.graphics.TypefaceCompatApi26Impl: boolean freeze(java.lang.Object)>","<androidx.core.graphics.TypefaceCompatApi26Impl: void abortCreation(java.lang.Object)>","<android.content.ContextWrapper: android.content.ContentResolver getContentResolver()>","<android.graphics.Typeface: android.graphics.Typeface create(android.graphics.Typeface,int)>","<android.graphics.Typeface$Builder: android.graphics.Typeface$Builder setItalic(boolean)>","<androidx.core.graphics.TypefaceCompatApi28Impl: android.graphics.Typeface createFromFamiliesWithDefault(java.lang.Object)>","<androidx.core.provider.FontsContractCompat: java.util.Map prepareFontData(android.content.Context,androidx.core.provider.FontsContractCompat$FontInfo[],android.os.CancellationSignal)>"],"<kotlinx.coroutines.LazyDeferredCoroutine: void onStart()>":["<kotlinx.coroutines.intrinsics.CancellableKt: void startCoroutineCancellable(kotlin.jvm.functions.Function2,java.lang.Object,kotlin.coroutines.Continuation)>"],"<androidx.appcompat.app.ResourcesFlusher: void flushThemedResourcesCache(java.lang.Object)>":["<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>","<java.lang.Class: java.lang.Class forName(java.lang.String)>"],"<kotlin.coroutines.CombinedContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>":["<kotlin.coroutines.CombinedContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>","<kotlinx.coroutines.CoroutineId: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>","<kotlinx.coroutines.CoroutineDispatcher: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<kotlin.coroutines.EmptyCoroutineContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>","<kotlinx.coroutines.JobSupport: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>"],"<androidx.appcompat.content.res.AppCompatResources: android.graphics.drawable.Drawable getDrawable(android.content.Context,int)>":["<androidx.appcompat.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable getDrawable(android.content.Context,int)>","<androidx.appcompat.widget.AppCompatDrawableManager: androidx.appcompat.widget.AppCompatDrawableManager get()>","<androidx.appcompat.widget.AppCompatDrawableManager: void <clinit>()>"],"<androidx.appcompat.view.menu.MenuBuilder: int size()>":["<java.util.ArrayList: int size()>"],"<androidx.core.graphics.PathParser: android.graphics.Path createPathFromPathData(java.lang.String)>":["<androidx.core.graphics.PathParser: androidx.core.graphics.PathParser$PathDataNode[] createNodesFromPathData(java.lang.String)>","<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>","<androidx.core.graphics.PathParser$PathDataNode: void nodesToPath(androidx.core.graphics.PathParser$PathDataNode[],android.graphics.Path)>","<java.lang.StringBuilder: java.lang.String toString()>","<android.graphics.Path: void <init>()>","<java.lang.StringBuilder: void <init>()>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>"],"<kotlinx.coroutines.Unconfined: boolean isDispatchNeeded(kotlin.coroutines.CoroutineContext)>":["<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<kotlinx.coroutines.JobSupport$AwaitContinuation: void <init>(kotlin.coroutines.Continuation,kotlinx.coroutines.JobSupport)>":["<kotlinx.coroutines.CancellableContinuationImpl: void <init>(kotlin.coroutines.Continuation,int)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<androidx.fragment.app.FragmentActivity$HostCallbacks: void onSupportInvalidateOptionsMenu()>":["<androidx.appcompat.app.AppCompatActivity: void supportInvalidateOptionsMenu()>"],"<kotlinx.coroutines.JobSupport: java.util.concurrent.CancellationException toCancellationException(java.lang.Throwable,java.lang.String)>":["<kotlinx.coroutines.JobCancellationException: void <init>(java.lang.String,java.lang.Throwable,kotlinx.coroutines.Job)>"],"<java.lang.AssertionError: void <init>(java.lang.Object)>":["<java.lang.RuntimeException: void <init>(java.lang.String)>","<java.lang.Error: void <init>()>"],"<kotlinx.coroutines.Unconfined: void <init>()>":["<kotlinx.coroutines.CoroutineDispatcher: void <init>()>"],"<kotlin.coroutines.intrinsics.CoroutineSingletons: void <clinit>()>":["<kotlin.coroutines.intrinsics.CoroutineSingletons: void <init>(java.lang.String,int)>","<kotlin.coroutines.intrinsics.CoroutineSingletons: void <clinit>()>"],"<com.afollestad.photoaffix.di.AppProvideModule_ProvideAppNameFactory: java.lang.String get()>":["<com.afollestad.photoaffix.di.AppProvideModule_ProvideAppNameFactory: java.lang.String provideInstance(com.afollestad.photoaffix.di.AppProvideModule,javax.inject.Provider)>"],"<androidx.fragment.app.FragmentManagerImpl: void makeRemovedFragmentsInvisible(androidx.collection.ArraySet)>":["<androidx.collection.ArraySet: int size()>","<androidx.collection.ArraySet: java.lang.Object valueAt(int)>"],"<java.lang.Integer: int parseInt(java.lang.String)>":["<java.lang.RuntimeException: void <init>(java.lang.String)>"],"<androidx.appcompat.app.TwilightManager$TwilightState: void <init>()>":["<java.lang.Object: void <init>()>"],"<kotlinx.coroutines.JobSupport: int tryMakeCompleting(java.lang.Object,java.lang.Object,int)>":["<java.lang.IllegalArgumentException: void <init>(java.lang.String)>","<kotlinx.coroutines.JobSupport$Finishing: boolean isCancelling()>","<kotlinx.coroutines.JobSupport: boolean tryWaitForChild(kotlinx.coroutines.JobSupport$Finishing,kotlinx.coroutines.ChildHandleNode,java.lang.Object)>","<kotlinx.coroutines.JobSupport$Finishing: void <init>(kotlinx.coroutines.NodeList,boolean,java.lang.Throwable)>","<java.lang.String: java.lang.String toString()>","<kotlinx.coroutines.JobSupport: void notifyCancelling(kotlinx.coroutines.NodeList,java.lang.Throwable)>","<kotlinx.coroutines.JobSupport$Finishing: void addExceptionLocked(java.lang.Throwable)>","<kotlinx.coroutines.JobSupport: void <clinit>()>","<kotlinx.coroutines.JobSupport: boolean tryFinalizeSimpleState(kotlinx.coroutines.Incomplete,java.lang.Object,int)>","<kotlin.Unit: void <clinit>()>","<kotlinx.coroutines.JobSupport: boolean tryFinalizeFinishingState(kotlinx.coroutines.JobSupport$Finishing,java.lang.Object,int)>","<kotlinx.coroutines.JobSupport: kotlinx.coroutines.NodeList getOrPromoteCancellingList(kotlinx.coroutines.Incomplete)>","<kotlinx.coroutines.JobSupport$Finishing: boolean isSealed()>","<kotlinx.coroutines.JobSupport: kotlinx.coroutines.ChildHandleNode firstChild(kotlinx.coroutines.Incomplete)>"],"<com.afollestad.rxkprefs.RealPref$values$2: void <init>(com.afollestad.rxkprefs.RealPref)>":["<java.lang.Object: void <init>()>"],"<androidx.fragment.app.FragmentTransitionImpl: void bfsAddViewChildren(java.util.List,android.view.View)>":["<androidx.fragment.app.FragmentTransitionImpl: boolean containedBeforeIndex(java.util.List,android.view.View,int)>"],"<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: void setConstantState(androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState)>":["<androidx.appcompat.graphics.drawable.StateListDrawable: void setConstantState(androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState)>"],"<com.afollestad.photoaffix.prefs.PrefsModule_ProvideImageSpacingVerticalPrefFactory: com.afollestad.rxkprefs.Pref proxyProvideImageSpacingVerticalPref(com.afollestad.photoaffix.prefs.PrefsModule,com.afollestad.rxkprefs.RxkPrefs)>":["<com.afollestad.photoaffix.prefs.PrefsModule: com.afollestad.rxkprefs.Pref provideImageSpacingVerticalPref(com.afollestad.rxkprefs.RxkPrefs)>","<dagger.internal.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>"],"<androidx.core.graphics.drawable.WrappedDrawableApi21: void setHotspotBounds(int,int,int,int)>":["<android.graphics.drawable.LayerDrawable: void setHotspotBounds(int,int,int,int)>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: void setHotspotBounds(int,int,int,int)>","<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: void setHotspotBounds(int,int,int,int)>","<androidx.core.graphics.drawable.WrappedDrawableApi21: void setHotspotBounds(int,int,int,int)>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void setHotspotBounds(int,int,int,int)>","<android.graphics.drawable.Drawable: void setHotspotBounds(int,int,int,int)>"],"<androidx.appcompat.content.res.AppCompatResources$ColorStateListCacheEntry: void <init>(android.content.res.ColorStateList,android.content.res.Configuration)>":["<java.lang.Object: void <init>()>"],"<androidx.fragment.app.FragmentActivity: void onStart()>":["<androidx.fragment.app.FragmentController: void dispatchActivityCreated()>","<androidx.fragment.app.FragmentController: void noteStateNotSaved()>","<androidx.fragment.app.FragmentController: void dispatchStart()>","<androidx.fragment.app.FragmentController: boolean execPendingActions()>","<android.app.Activity: void onStart()>"],"<androidx.recyclerview.widget.GridLayoutManager$SpanSizeLookup: void <init>()>":["<android.util.SparseIntArray: void <init>()>","<java.lang.Object: void <init>()>"],"<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: android.graphics.Paint$Join getStrokeLineJoin(int,android.graphics.Paint$Join)>":["<android.graphics.Paint$Join: void <clinit>()>"],"<com.afollestad.materialdialogs.utils.ViewExtKt: java.lang.Object inflate$default(com.afollestad.materialdialogs.MaterialDialog,int,android.view.ViewGroup,int,java.lang.Object)>":["<com.afollestad.materialdialogs.utils.ViewExtKt: java.lang.Object inflate(com.afollestad.materialdialogs.MaterialDialog,int,android.view.ViewGroup)>"],"<io.reactivex.internal.schedulers.IoScheduler$ThreadWorker: void <init>(java.util.concurrent.ThreadFactory)>":["<io.reactivex.internal.schedulers.NewThreadWorker: void <init>(java.util.concurrent.ThreadFactory)>"],"<androidx.fragment.app.FragmentManagerState: void <clinit>()>":["<androidx.fragment.app.FragmentManagerState$1: void <init>()>","<androidx.fragment.app.FragmentManagerState: void <clinit>()>"],"<androidx.fragment.app.FragmentManagerImpl: void completeShowHideFragment(androidx.fragment.app.Fragment)>":["<androidx.fragment.app.FragmentManagerImpl: void setHWLayerAnimListenerIfAlpha(android.view.View,androidx.fragment.app.FragmentManagerImpl$AnimationOrAnimator)>","<android.view.animation.Animation: void start()>","<androidx.fragment.app.FragmentManagerImpl$4: void <init>(androidx.fragment.app.FragmentManagerImpl,android.view.ViewGroup,android.view.View,androidx.fragment.app.Fragment)>","<androidx.fragment.app.FragmentManagerImpl: void <clinit>()>","<androidx.fragment.app.FragmentManagerImpl: androidx.fragment.app.FragmentManagerImpl$AnimationOrAnimator loadAnimation(androidx.fragment.app.Fragment,int,boolean,int)>"],"<androidx.fragment.app.FragmentTransition: androidx.collection.ArrayMap captureInSharedElements(androidx.fragment.app.FragmentTransitionImpl,androidx.collection.ArrayMap,java.lang.Object,androidx.fragment.app.FragmentTransition$FragmentContainerTransition)>":["<androidx.collection.SimpleArrayMap: java.lang.Object remove(java.lang.Object)>","<androidx.collection.ArrayMap: boolean retainAll(java.util.Collection)>","<java.lang.String: boolean equals(java.lang.Object)>","<androidx.collection.ArrayMap: java.util.Collection values()>","<androidx.collection.SimpleArrayMap: boolean isEmpty()>","<androidx.core.view.ViewCompat: java.lang.String getTransitionName(android.view.View)>","<androidx.fragment.app.FragmentTransitionImpl: void findNamedViews(java.util.Map,android.view.View)>","<androidx.core.view.ViewCompat: void <clinit>()>","<androidx.collection.SimpleArrayMap: void clear()>","<androidx.fragment.app.FragmentTransition: java.lang.String findKeyForValue(androidx.collection.ArrayMap,java.lang.String)>","<androidx.collection.SimpleArrayMap: java.lang.Object get(java.lang.Object)>","<androidx.collection.ArrayMap: void <init>()>","<androidx.fragment.app.FragmentTransition: void <clinit>()>","<androidx.collection.SimpleArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>","<androidx.fragment.app.FragmentTransition: void retainValues(androidx.collection.ArrayMap,androidx.collection.ArrayMap)>"],"<androidx.fragment.app.FragmentActivity$HostCallbacks: boolean onHasWindowAnimations()>":["<android.app.Activity: android.view.Window getWindow()>"],"<com.afollestad.photoaffix.prefs.PrefsModule_ProvideScalePriorityPrefFactory: java.lang.Object get()>":["<com.afollestad.photoaffix.prefs.PrefsModule_ProvideScalePriorityPrefFactory: com.afollestad.rxkprefs.Pref get()>"],"<androidx.appcompat.R$styleable: void <clinit>()>":["<androidx.appcompat.R$styleable: void <clinit>()>"],"<kotlinx.coroutines.ResumeAwaitOnCompletion: void <init>(kotlinx.coroutines.JobSupport,kotlinx.coroutines.AbstractContinuation)>":["<kotlinx.coroutines.JobNode: void <init>(kotlinx.coroutines.Job)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<io.reactivex.internal.schedulers.NewThreadScheduler: void <init>()>":["<io.reactivex.Scheduler: void <clinit>()>","<io.reactivex.internal.schedulers.NewThreadScheduler: void <clinit>()>","<io.reactivex.internal.schedulers.NewThreadScheduler: void <init>(java.util.concurrent.ThreadFactory)>"],"<kotlinx.coroutines.internal.ThreadContextKt$updateState$1: void <init>()>":["<kotlin.jvm.internal.Lambda: void <init>(int)>"],"<androidx.core.graphics.drawable.WrappedDrawableApi14: int getChangingConfigurations()>":["<android.graphics.drawable.LayerDrawable: int getChangingConfigurations()>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: int getChangingConfigurations()>","<androidx.core.graphics.drawable.WrappedDrawableApi14: int getChangingConfigurations()>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: int getChangingConfigurations()>","<androidx.core.graphics.drawable.WrappedDrawableApi14$DrawableWrapperState: int getChangingConfigurations()>","<android.graphics.drawable.Drawable: int getChangingConfigurations()>","<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: int getChangingConfigurations()>"],"<androidx.fragment.app.OneShotPreDrawListener: void <init>(android.view.View,java.lang.Runnable)>":["<java.lang.Object: void <init>()>"],"<com.afollestad.materialdialogs.utils.DialogExtKt: void setWindowConstraints(com.afollestad.materialdialogs.MaterialDialog)>":["<android.graphics.Point: void <init>()>","<android.view.WindowManager$LayoutParams: int copyFrom(android.view.WindowManager$LayoutParams)>","<java.lang.Math: int min(int,int)>","<android.view.WindowManager$LayoutParams: void <clinit>()>","<kotlin.jvm.internal.Intrinsics: void throwNpe()>","<android.app.Dialog: android.view.Window getWindow()>","<android.view.WindowManager$LayoutParams: void <init>()>","<android.app.Dialog: android.content.Context getContext()>","<android.graphics.Point: void <clinit>()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<kotlin.jvm.internal.Intrinsics: void checkExpressionValueIsNotNull(java.lang.Object,java.lang.String)>","<com.afollestad.materialdialogs.MaterialDialog: com.afollestad.materialdialogs.internal.main.DialogLayout getView$com_afollestad_material_dialogs_core()>"],"<com.afollestad.photoaffix.utilities.ext.ActivityExtKt: void toast(android.app.Activity,java.lang.Integer,java.lang.String)>":["<kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>","<com.afollestad.photoaffix.utilities.ext.ActivityExtKt$toast$1: void <init>(android.app.Activity,java.lang.Integer,java.lang.String)>","<android.widget.Toast: android.widget.Toast makeText(android.content.Context,java.lang.CharSequence,int)>","<android.app.Activity: void runOnUiThread(java.lang.Runnable)>","<android.os.Looper: android.os.Looper myLooper()>","<android.widget.Toast: android.widget.Toast makeText(android.content.Context,int,int)>","<android.os.Looper: android.os.Looper getMainLooper()>"],"<androidx.collection.SimpleArrayMap: void <init>()>":["<java.lang.Object: void <init>()>","<androidx.collection.ContainerHelpers: void <clinit>()>"],"<com.afollestad.photoaffix.di.AppProvideModule_ProvideAppNameFactory: java.lang.String proxyProvideAppName(com.afollestad.photoaffix.di.AppProvideModule,android.app.Application)>":["<com.afollestad.photoaffix.di.AppProvideModule: java.lang.String provideAppName(android.app.Application)>","<dagger.internal.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>"],"<androidx.fragment.app.BackStackState: void <clinit>()>":["<androidx.fragment.app.BackStackState$1: void <init>()>","<androidx.fragment.app.BackStackState: void <clinit>()>"],"<androidx.fragment.app.BackStackRecord: int commitInternal(boolean)>":["<java.io.PrintWriter: void <init>(java.io.Writer)>","<java.io.PrintWriter: void close()>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<androidx.fragment.app.FragmentManagerImpl: void <clinit>()>","<java.lang.StringBuilder: void <init>()>","<android.util.Log: int v(java.lang.String,java.lang.String)>","<androidx.core.util.LogWriter: void <init>(java.lang.String)>","<java.lang.IllegalStateException: void <init>(java.lang.String)>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>","<java.lang.StringBuilder: java.lang.String toString()>","<androidx.fragment.app.BackStackRecord: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>","<androidx.fragment.app.FragmentManagerImpl: int allocBackStackIndex(androidx.fragment.app.BackStackRecord)>","<androidx.fragment.app.FragmentManagerImpl: void enqueueAction(androidx.fragment.app.FragmentManagerImpl$OpGenerator,boolean)>"],"<io.reactivex.internal.schedulers.SchedulerPoolFactory$PurgeProperties: void <init>()>":["<java.lang.Object: void <init>()>"],"<kotlinx.coroutines.scheduling.CoroutineScheduler: int access$getMIN_PARK_TIME_NS$cp()>":["<kotlinx.coroutines.scheduling.CoroutineScheduler: void <clinit>()>"],"<androidx.collection.MapCollections$ArrayIterator: void <init>(androidx.collection.MapCollections,int)>":["<androidx.collection.ArrayMap$1: int colGetSize()>","<java.lang.Object: void <init>()>"],"<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.graphics.drawable.Drawable newDrawable()>":["<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void <init>(androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState)>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void <clinit>()>"],"<io.reactivex.exceptions.CompositeException: void printStackTrace()>":["<java.lang.System: void <clinit>()>","<io.reactivex.exceptions.CompositeException: void printStackTrace(java.io.PrintStream)>"],"<kotlinx.coroutines.JobSupport: boolean isCompleted()>":["<kotlinx.coroutines.JobSupport: java.lang.Object getState$kotlinx_coroutines_core()>"],"<androidx.core.graphics.drawable.WrappedDrawableApi14: android.graphics.drawable.Drawable$ConstantState getConstantState()>":["<androidx.core.graphics.drawable.WrappedDrawableApi14$DrawableWrapperState: boolean canConstantState()>","<androidx.core.graphics.drawable.WrappedDrawableApi14: int getChangingConfigurations()>"],"<androidx.recyclerview.widget.OrientationHelper: void <init>(androidx.recyclerview.widget.RecyclerView$LayoutManager)>":["<java.lang.Object: void <init>()>","<android.graphics.Rect: void <init>()>","<android.graphics.Rect: void <clinit>()>"],"<androidx.core.graphics.drawable.WrappedDrawableApi21: void findAndCacheIsProjectedDrawableMethod()>":["<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>","<android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>"],"<kotlin.jvm.internal.Intrinsics: java.lang.Throwable sanitizeStackTrace(java.lang.Throwable,java.lang.String)>":["<java.util.Arrays: java.util.List asList(java.lang.Object[])>","<java.lang.Throwable: void setStackTrace(java.lang.StackTraceElement[])>","<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>"],"<kotlinx.coroutines.AbstractCoroutine: void onCompletionInternal$kotlinx_coroutines_core(java.lang.Object,int,boolean)>":["<kotlinx.coroutines.AbstractCoroutine: void onCompleted(java.lang.Object)>","<kotlinx.coroutines.AbstractCoroutine: void onCompletedExceptionally(java.lang.Throwable)>"],"<androidx.core.graphics.TypefaceCompatApi24Impl: boolean isUsable()>":["<android.util.Log: int w(java.lang.String,java.lang.String)>","<androidx.core.graphics.TypefaceCompatApi24Impl: void <clinit>()>"],"<androidx.appcompat.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable getDrawable(android.content.Context,int,boolean)>":["<androidx.appcompat.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable loadDrawableFromDelegates(android.content.Context,int)>","<androidx.appcompat.widget.AppCompatDrawableManager: void checkVectorDrawableSetup(android.content.Context)>","<androidx.core.content.ContextCompat: void <clinit>()>","<androidx.appcompat.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable createDrawableIfNeeded(android.content.Context,int)>","<androidx.appcompat.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable tintDrawable(android.content.Context,int,boolean,android.graphics.drawable.Drawable)>","<androidx.core.content.ContextCompat: android.graphics.drawable.Drawable getDrawable(android.content.Context,int)>","<androidx.appcompat.widget.DrawableUtils: void fixDrawable(android.graphics.drawable.Drawable)>","<androidx.appcompat.widget.DrawableUtils: void <clinit>()>"],"<com.afollestad.photoaffix.engine.photos.PhotoKt: void <clinit>()>":["<com.afollestad.photoaffix.engine.photos.PhotoKt: void <clinit>()>","<com.afollestad.photoaffix.engine.photos.PhotoKt$defaultUriParser$1: void <clinit>()>"],"<androidx.core.graphics.drawable.WrappedDrawableApi14: void setWrappedDrawable(android.graphics.drawable.Drawable)>":["<androidx.core.graphics.drawable.WrappedDrawableApi21: boolean setState(int[])>","<androidx.core.graphics.drawable.WrappedDrawableApi14: boolean setState(int[])>","<android.graphics.drawable.Drawable: android.graphics.Rect getBounds()>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable$ConstantState getConstantState()>","<android.graphics.drawable.Drawable: int getLevel()>","<android.graphics.drawable.LayerDrawable: android.graphics.drawable.Drawable$ConstantState getConstantState()>","<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: android.graphics.drawable.Drawable$ConstantState getConstantState()>","<android.graphics.drawable.Drawable: void invalidateSelf()>","<androidx.core.graphics.drawable.WrappedDrawableApi14: int[] getState()>","<android.graphics.drawable.Drawable: void setBounds(android.graphics.Rect)>","<android.graphics.drawable.Drawable: int[] getState()>","<androidx.appcompat.graphics.drawable.DrawableContainer: android.graphics.drawable.Drawable$ConstantState getConstantState()>","<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: int[] getState()>","<androidx.core.graphics.drawable.WrappedDrawableApi14: android.graphics.drawable.Drawable$ConstantState getConstantState()>","<android.graphics.drawable.Drawable: boolean setLevel(int)>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: int[] getState()>","<android.graphics.drawable.Drawable: void setCallback(android.graphics.drawable.Drawable$Callback)>","<androidx.core.graphics.drawable.WrappedDrawableApi14: boolean setVisible(boolean,boolean)>","<android.graphics.drawable.Drawable: boolean isVisible()>"],"<androidx.interpolator.view.animation.FastOutSlowInInterpolator: void <init>()>":["<androidx.interpolator.view.animation.FastOutSlowInInterpolator: void <clinit>()>","<androidx.interpolator.view.animation.LookupTableInterpolator: void <init>(float[])>"],"<kotlinx.coroutines.JobSupport: void parentCancelled(kotlinx.coroutines.ParentJob)>":["<kotlinx.coroutines.JobSupport: boolean cancelImpl(java.lang.Object)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<kotlinx.coroutines.scheduling.Task: kotlinx.coroutines.scheduling.TaskMode getMode()>":["<kotlinx.coroutines.scheduling.LimitingDispatcher: kotlinx.coroutines.scheduling.TaskMode getTaskMode()>","<kotlinx.coroutines.scheduling.NonBlockingContext: kotlinx.coroutines.scheduling.TaskMode getTaskMode()>"],"<com.afollestad.photoaffix.engine.RealAffixEngine_Factory: com.afollestad.photoaffix.engine.RealAffixEngine provideInstance(javax.inject.Provider,javax.inject.Provider,javax.inject.Provider,javax.inject.Provider)>":["<com.afollestad.photoaffix.prefs.PrefsModule_ProvideScalePriorityPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.engine.subengines.RealStitchEngine_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.utilities.RealDpConverter_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.engine.RealAffixEngine_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideStackHorizontallyPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.engine.bitmaps.RealBitmapManipulator_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.engine.photos.RealPhotoLoader_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.utilities.RealMediaScanner_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.utilities.RealIoManager_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.di.AppProvideModule_ProvideAppNameFactory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideImageSpacingVerticalPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideImageSpacingHorizontalPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.engine.RealAffixEngine: void <init>(com.afollestad.photoaffix.utilities.IoManager,com.afollestad.photoaffix.engine.bitmaps.BitmapManipulator,com.afollestad.photoaffix.engine.subengines.DimensionsEngine,com.afollestad.photoaffix.engine.subengines.StitchEngine)>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideBgFillColorPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.presenters.RealMainPresenter_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideRxkPrefsFactory: java.lang.Object get()>","<com.afollestad.photoaffix.engine.subengines.RealDimensionsEngine_Factory: java.lang.Object get()>","<dagger.internal.DoubleCheck: java.lang.Object get()>","<dagger.internal.InstanceFactory: java.lang.Object get()>"],"<androidx.core.content.res.TypedArrayUtils: android.util.TypedValue peekNamedValue(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int)>":["<androidx.core.content.res.TypedArrayUtils: boolean hasAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>"],"<androidx.collection.LongSparseArray: void <clinit>()>":["<java.lang.Object: void <init>()>","<androidx.collection.LongSparseArray: void <clinit>()>"],"<com.afollestad.assent.Permission$Companion: void <init>()>":["<java.lang.Object: void <init>()>"],"<androidx.fragment.app.FragmentTransitionImpl$1: void <init>(androidx.fragment.app.FragmentTransitionImpl,int,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)>":["<java.lang.Object: void <init>()>"],"<androidx.fragment.app.FragmentManagerImpl: androidx.fragment.app.Fragment getFragment(android.os.Bundle,java.lang.String)>":["<androidx.fragment.app.FragmentManagerImpl: void throwException(java.lang.RuntimeException)>","<java.lang.IllegalStateException: void <init>(java.lang.String)>","<java.lang.StringBuilder: java.lang.String toString()>","<android.util.SparseArray: java.lang.Object get(int)>","<java.lang.StringBuilder: void <init>()>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<java.lang.StringBuilder: java.lang.StringBuilder append(int)>"],"<com.afollestad.dragselectrecyclerview.DragSelectTouchListener$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>":["<com.afollestad.dragselectrecyclerview.DragSelectTouchListener$Companion: void <init>()>"],"<androidx.appcompat.app.AppCompatDelegateImpl: boolean updateForNightMode(int)>":["<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>","<androidx.appcompat.app.AppCompatDelegateImpl: boolean shouldRecreateOnNightModeChange()>","<android.content.res.Configuration: void <init>(android.content.res.Configuration)>","<android.content.res.Resources: void updateConfiguration(android.content.res.Configuration,android.util.DisplayMetrics)>","<androidx.appcompat.app.AppCompatActivity: android.content.res.Resources getResources()>","<androidx.appcompat.app.ResourcesFlusher: void flush(android.content.res.Resources)>","<android.content.res.Resources: android.content.res.Configuration getConfiguration()>","<android.os.Build$VERSION: void <clinit>()>","<android.app.Activity: void recreate()>","<android.content.res.Configuration: void <clinit>()>"],"<io.reactivex.exceptions.CompositeException: void printStackTrace(java.io.PrintStream)>":["<io.reactivex.exceptions.CompositeException$WrappedPrintStream: void <init>(java.io.PrintStream)>","<io.reactivex.exceptions.CompositeException: void printStackTrace(io.reactivex.exceptions.CompositeException$PrintStreamOrWriter)>"],"<io.reactivex.plugins.RxJavaPlugins: io.reactivex.Scheduler initNewThreadScheduler(java.util.concurrent.Callable)>":["<io.reactivex.internal.functions.ObjectHelper: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>","<io.reactivex.plugins.RxJavaPlugins: io.reactivex.Scheduler applyRequireNonNull(io.reactivex.functions.Function,java.util.concurrent.Callable)>","<io.reactivex.plugins.RxJavaPlugins: io.reactivex.Scheduler callRequireNonNull(java.util.concurrent.Callable)>","<io.reactivex.internal.functions.ObjectHelper: void <clinit>()>"],"<androidx.appcompat.widget.ThemeUtils: int getThemeAttrColor(android.content.Context,int)>":["<androidx.appcompat.widget.TintTypedArray: androidx.appcompat.widget.TintTypedArray obtainStyledAttributes(android.content.Context,android.util.AttributeSet,int[])>","<androidx.appcompat.widget.ThemeUtils: void <clinit>()>","<androidx.appcompat.widget.TintTypedArray: void recycle()>","<androidx.appcompat.widget.TintTypedArray: int getColor(int,int)>"],"<com.afollestad.materialdialogs.utils.ColorExtKt: void maybeSetTextColor(android.widget.TextView,android.content.Context,java.lang.Integer)>":["<com.afollestad.materialdialogs.utils.MDUtil: int resolveColor$default(com.afollestad.materialdialogs.utils.MDUtil,android.content.Context,java.lang.Integer,java.lang.Integer,int,java.lang.Object)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<com.afollestad.materialdialogs.utils.MDUtil: void <clinit>()>"],"<androidx.collection.MapCollections$ArrayIterator: void remove()>":["<androidx.collection.ArrayMap$1: void colRemoveAt(int)>","<java.lang.IllegalStateException: void <init>()>"],"<androidx.core.graphics.drawable.WrappedDrawableApi14: void setTintList(android.content.res.ColorStateList)>":["<androidx.core.graphics.drawable.WrappedDrawableApi14: boolean updateTint(int[])>","<androidx.core.graphics.drawable.WrappedDrawableApi14: int[] getState()>"],"<kotlinx.coroutines.internal.ThreadContextKt$countAll$1: java.lang.Object invoke(java.lang.Object,java.lang.Object)>":["<kotlinx.coroutines.internal.ThreadContextKt$countAll$1: java.lang.Object invoke(java.lang.Object,kotlin.coroutines.CoroutineContext$Element)>"],"<androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState: void updateDensity(android.content.res.Resources)>":["<androidx.appcompat.graphics.drawable.DrawableContainer: int resolveDensity(android.content.res.Resources,int)>"],"<com.afollestad.rxkprefs.RxkPrefsKt: com.afollestad.rxkprefs.RxkPrefs rxkPrefs(android.content.Context,java.lang.String,int)>":["<com.afollestad.rxkprefs.RealRxkPrefs: void <init>(android.content.Context,java.lang.String,int)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void tryTerminateWorker()>":["<kotlinx.coroutines.scheduling.CoroutineScheduler: void access$parkedWorkersStackTopUpdate(kotlinx.coroutines.scheduling.CoroutineScheduler,kotlinx.coroutines.scheduling.CoroutineScheduler$Worker,int,int)>","<kotlinx.coroutines.scheduling.CoroutineScheduler: boolean access$isTerminated$p(kotlinx.coroutines.scheduling.CoroutineScheduler)>","<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void setIndexInArray(int)>","<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: boolean blockingQuiescence()>","<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void <clinit>()>","<kotlin.jvm.internal.Intrinsics: void throwNpe()>","<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker[] access$getWorkers$p(kotlinx.coroutines.scheduling.CoroutineScheduler)>","<kotlinx.coroutines.scheduling.CoroutineScheduler: int access$getCorePoolSize$p(kotlinx.coroutines.scheduling.CoroutineScheduler)>","<kotlin.Unit: void <clinit>()>","<kotlinx.coroutines.scheduling.CoroutineScheduler: int access$getCreatedWorkers$p(kotlinx.coroutines.scheduling.CoroutineScheduler)>","<kotlinx.coroutines.scheduling.CoroutineScheduler: void <clinit>()>","<kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: void <clinit>()>"],"<com.afollestad.photoaffix.prefs.PrefsModule_ProvideImageSpacingVerticalPrefFactory: void <init>(com.afollestad.photoaffix.prefs.PrefsModule,javax.inject.Provider)>":["<java.lang.Object: void <init>()>"],"<com.afollestad.photoaffix.engine.RealAffixEngine: java.lang.Object process(java.util.List,kotlin.coroutines.Continuation)>":["<com.afollestad.photoaffix.engine.bitmaps.BitmapIterator: void <init>(java.util.List,com.afollestad.photoaffix.engine.bitmaps.BitmapManipulator)>","<kotlin.jvm.internal.Intrinsics: void throwUninitializedPropertyAccessException(java.lang.String)>","<com.afollestad.photoaffix.engine.subengines.RealDimensionsEngine: com.afollestad.photoaffix.engine.subengines.SizingResult calculateSize(com.afollestad.photoaffix.engine.bitmaps.BitmapIterator)>"],"<kotlinx.coroutines.CoroutineName$Key: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>":["<kotlinx.coroutines.CoroutineName$Key: void <init>()>"],"<kotlinx.coroutines.internal.LockFreeLinkedListNode: kotlinx.coroutines.internal.LockFreeLinkedListNode correctPrev(kotlinx.coroutines.internal.LockFreeLinkedListNode,kotlinx.coroutines.internal.OpDescriptor)>":["<kotlinx.coroutines.internal.LockFreeLinkedListNode: kotlinx.coroutines.internal.LockFreeLinkedListNode markPrev()>","<kotlinx.coroutines.internal.LockFreeLinkedListKt: void <clinit>()>","<kotlin.TypeCastException: void <init>(java.lang.String)>","<kotlinx.coroutines.internal.LockFreeLinkedListKt: kotlinx.coroutines.internal.LockFreeLinkedListNode unwrap(java.lang.Object)>","<kotlinx.coroutines.internal.LockFreeLinkedListNode: void <clinit>()>"],"<androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: void setupPathMotion(android.graphics.Path,android.animation.ObjectAnimator,float,java.lang.String,java.lang.String)>":["<android.graphics.PathMeasure: boolean nextContour()>","<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofFloat(java.lang.String,float[])>","<android.graphics.PathMeasure: void <init>(android.graphics.Path,boolean)>","<android.graphics.PathMeasure: boolean getPosTan(float,float[],float[])>","<java.util.ArrayList: boolean add(java.lang.Object)>","<java.lang.Float: java.lang.Float valueOf(float)>","<java.lang.Math: int min(int,int)>","<java.lang.Float: void <clinit>()>","<java.util.ArrayList: void <init>()>","<java.util.ArrayList: int size()>","<java.util.ArrayList: java.lang.Object get(int)>","<android.animation.ValueAnimator: void setValues(android.animation.PropertyValuesHolder[])>","<android.graphics.PathMeasure: float getLength()>"],"<androidx.fragment.app.FragmentTransitionCompat21: void addTarget(java.lang.Object,android.view.View)>":["<android.transition.TransitionSet: android.transition.Transition addTarget(android.view.View)>"],"<androidx.fragment.app.FragmentTransitionImpl: void setNameOverridesReordered(android.view.View,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList,java.util.Map)>":["<java.lang.String: boolean equals(java.lang.Object)>","<androidx.collection.SimpleArrayMap: java.lang.Object get(java.lang.Object)>","<androidx.fragment.app.OneShotPreDrawListener: androidx.fragment.app.OneShotPreDrawListener add(android.view.View,java.lang.Runnable)>","<androidx.core.view.ViewCompat: void setTransitionName(android.view.View,java.lang.String)>","<java.util.ArrayList: void <init>()>","<java.util.ArrayList: boolean add(java.lang.Object)>","<java.util.ArrayList: int size()>","<androidx.core.view.ViewCompat: java.lang.String getTransitionName(android.view.View)>","<androidx.fragment.app.FragmentTransitionImpl$1: void <init>(androidx.fragment.app.FragmentTransitionImpl,int,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)>","<java.util.ArrayList: java.lang.Object get(int)>","<androidx.core.view.ViewCompat: void <clinit>()>"],"<androidx.fragment.app.FragmentManagerImpl: void performPendingDeferredStart(androidx.fragment.app.Fragment)>":["<androidx.fragment.app.FragmentManagerImpl: void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean)>"],"<androidx.core.graphics.TypefaceCompatUtil: void closeQuietly(java.io.Closeable)>":["<java.io.FileOutputStream: void close()>"],"<java.lang.Object: java.lang.Class getClass()>":["<java.lang.RuntimeException: void <init>(java.lang.String)>"],"<androidx.collection.SimpleArrayMap: java.lang.Object remove(java.lang.Object)>":["<androidx.collection.SimpleArrayMap: int indexOfKey(java.lang.Object)>","<androidx.collection.SimpleArrayMap: java.lang.Object removeAt(int)>"],"<kotlinx.coroutines.JobSupport$AwaitContinuation: java.lang.Throwable getContinuationCancellationCause(kotlinx.coroutines.Job)>":["<kotlinx.coroutines.JobSupport: java.lang.Object getState$kotlinx_coroutines_core()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<kotlinx.coroutines.JobSupport: java.util.concurrent.CancellationException getCancellationException()>"],"<androidx.appcompat.app.AppCompatDelegateImpl: boolean shouldRecreateOnNightModeChange()>":["<android.content.ComponentName: void <init>(android.content.Context,java.lang.Class)>","<java.lang.Object: java.lang.Class getClass()>","<android.content.ComponentName: void <clinit>()>","<android.content.ContextWrapper: android.content.pm.PackageManager getPackageManager()>","<android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)>"],"<androidx.fragment.app.FragmentTransitionImpl: void scheduleNameReset(android.view.ViewGroup,java.util.ArrayList,java.util.Map)>":["<androidx.fragment.app.OneShotPreDrawListener: androidx.fragment.app.OneShotPreDrawListener add(android.view.View,java.lang.Runnable)>","<androidx.fragment.app.FragmentTransitionImpl$3: void <init>(androidx.fragment.app.FragmentTransitionImpl,java.util.ArrayList,java.util.Map)>"],"<com.afollestad.photoaffix.engine.subengines.SizingResult: void <init>(com.afollestad.photoaffix.engine.subengines.Size,java.lang.Exception,int,kotlin.jvm.internal.DefaultConstructorMarker)>":["<com.afollestad.photoaffix.engine.subengines.SizingResult: void <init>(com.afollestad.photoaffix.engine.subengines.Size,java.lang.Exception)>"],"<com.afollestad.photoaffix.prefs.PrefsModule: com.afollestad.rxkprefs.Pref provideImageSpacingVerticalPref(com.afollestad.rxkprefs.RxkPrefs)>":["<com.afollestad.rxkprefs.RealRxkPrefs: com.afollestad.rxkprefs.Pref integer(java.lang.String,int)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<androidx.fragment.app.FragmentTransition: void calculateFragments(androidx.fragment.app.BackStackRecord,android.util.SparseArray,boolean)>":["<androidx.fragment.app.FragmentTransition: void <clinit>()>","<androidx.fragment.app.FragmentTransition: void addToFirstInLastOut(androidx.fragment.app.BackStackRecord,androidx.fragment.app.BackStackRecord$Op,android.util.SparseArray,boolean,boolean)>"],"<androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: int inferValueTypeOfKeyframe(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,org.xmlpull.v1.XmlPullParser)>":["<androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: boolean isColorType(int)>","<androidx.core.content.res.TypedArrayUtils: android.content.res.TypedArray obtainAttributes(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,int[])>","<androidx.vectordrawable.graphics.drawable.AndroidResources: void <clinit>()>","<androidx.core.content.res.TypedArrayUtils: android.util.TypedValue peekNamedValue(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int)>"],"<kotlin.ExceptionsKt__ExceptionsKt: void addSuppressed(java.lang.Throwable,java.lang.Throwable)>":["<kotlin.internal.PlatformImplementationsKt: void <clinit>()>","<kotlin.internal.PlatformImplementations: void addSuppressed(java.lang.Throwable,java.lang.Throwable)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<kotlinx.coroutines.scheduling.LimitingDispatcher: void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)>":["<kotlinx.coroutines.scheduling.LimitingDispatcher: void dispatch(java.lang.Runnable,boolean)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<com.afollestad.photoaffix.views.MainActivity$onCreate$2: void <init>(com.afollestad.photoaffix.views.MainActivity)>":["<java.lang.Object: void <init>()>"],"<androidx.collection.SparseArrayCompat: void gc()>":["<androidx.collection.SparseArrayCompat: void <clinit>()>"],"<kotlin.jvm.internal.TypeIntrinsics: java.lang.Throwable sanitizeStackTrace(java.lang.Throwable)>":["<java.lang.Class: java.lang.String getName()>","<kotlin.jvm.internal.Intrinsics: java.lang.Throwable sanitizeStackTrace(java.lang.Throwable,java.lang.String)>"],"<kotlinx.coroutines.internal.ThreadContextKt$countAll$1: java.lang.Object invoke(java.lang.Object,kotlin.coroutines.CoroutineContext$Element)>":["<java.lang.Integer: void <clinit>()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<java.lang.Integer: java.lang.Integer valueOf(int)>"],"<kotlinx.coroutines.DispatchedTask: void run()>":["<kotlinx.coroutines.internal.ThreadContextKt: void restoreThreadContext(kotlin.coroutines.CoroutineContext,java.lang.Object)>","<kotlinx.coroutines.DispatchedTask: java.lang.Throwable getExceptionalResult(java.lang.Object)>","<kotlin.coroutines.jvm.internal.CompletedContinuation: void resumeWith(java.lang.Object)>","<kotlinx.coroutines.DispatchedContinuation: void resumeWith(java.lang.Object)>","<kotlin.coroutines.jvm.internal.RestrictedContinuationImpl: kotlin.coroutines.CoroutineContext getContext()>","<kotlinx.coroutines.DispatchedContinuation: kotlin.coroutines.Continuation getDelegate()>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<kotlinx.coroutines.AbstractContinuation: kotlin.coroutines.Continuation getDelegate()>","<kotlinx.coroutines.AbstractCoroutine: kotlin.coroutines.CoroutineContext getContext()>","<kotlinx.coroutines.JobSupport: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>","<kotlinx.coroutines.scheduling.LimitingDispatcher: void afterTask()>","<kotlin.coroutines.EmptyCoroutineContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>","<kotlinx.coroutines.DispatchedContinuation: java.lang.Object takeState()>","<kotlinx.coroutines.AbstractContinuation: java.lang.Object takeState()>","<java.lang.StringBuilder: java.lang.String toString()>","<kotlinx.coroutines.DispatchException: void <init>(java.lang.String,java.lang.Throwable)>","<kotlinx.coroutines.CoroutineId: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>","<kotlinx.coroutines.internal.ThreadContextKt: void <clinit>()>","<kotlin.coroutines.jvm.internal.BaseContinuationImpl: void resumeWith(java.lang.Object)>","<kotlinx.coroutines.scheduling.NonBlockingContext: void afterTask()>","<kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>","<kotlinx.coroutines.CoroutineDispatcher: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>","<kotlinx.coroutines.JobSupport: boolean isActive()>","<kotlinx.coroutines.DispatchedTask: java.lang.Object getSuccessfulResult(java.lang.Object)>","<kotlin.coroutines.CombinedContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>","<kotlinx.coroutines.DispatchedContinuation: kotlin.coroutines.CoroutineContext getContext()>","<kotlinx.coroutines.CancellableContinuationImpl: java.lang.Object getSuccessfulResult(java.lang.Object)>","<java.lang.StringBuilder: void <init>()>","<kotlinx.coroutines.ResumeModeKt: boolean isCancellableMode(int)>","<kotlinx.coroutines.JobSupport: java.util.concurrent.CancellationException getCancellationException()>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>","<kotlin.ResultKt: java.lang.Object createFailure(java.lang.Throwable)>","<kotlin.coroutines.jvm.internal.CompletedContinuation: kotlin.coroutines.CoroutineContext getContext()>","<kotlin.coroutines.jvm.internal.ContinuationImpl: kotlin.coroutines.CoroutineContext getContext()>","<kotlin.Result: void <clinit>()>","<kotlin.Unit: void <clinit>()>","<kotlinx.coroutines.AbstractCoroutine: boolean isActive()>","<kotlin.TypeCastException: void <init>(java.lang.String)>","<kotlinx.coroutines.Job: void <clinit>()>","<kotlinx.coroutines.AbstractCoroutine: void resumeWith(java.lang.Object)>","<kotlinx.coroutines.internal.ThreadContextKt: java.lang.Object updateThreadContext(kotlin.coroutines.CoroutineContext,java.lang.Object)>"],"<androidx.appcompat.widget.ThemeUtils: int getThemeAttrColor(android.content.Context,int,float)>":["<androidx.appcompat.widget.ThemeUtils: int getThemeAttrColor(android.content.Context,int)>","<java.lang.Math: int round(float)>","<android.graphics.Color: int alpha(int)>","<androidx.appcompat.widget.ThemeUtils: void <clinit>()>","<androidx.core.graphics.ColorUtils: int setAlphaComponent(int,int)>","<androidx.core.graphics.ColorUtils: void <clinit>()>"],"<androidx.interpolator.view.animation.FastOutSlowInInterpolator: void <clinit>()>":["<androidx.interpolator.view.animation.FastOutSlowInInterpolator: void <clinit>()>"],"<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: int parseTransition(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>":["<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)>","<androidx.appcompat.R$styleable: void <clinit>()>","<androidx.appcompat.content.res.AppCompatResources: android.graphics.drawable.Drawable getDrawable(android.content.Context,int)>","<androidx.core.content.res.TypedArrayUtils: android.content.res.TypedArray obtainAttributes(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,int[])>","<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat createFromXmlInner(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<java.lang.StringBuilder: void <init>()>","<java.lang.StringBuilder: java.lang.String toString()>","<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatedStateListState: int addTransition(int,int,android.graphics.drawable.Drawable,boolean)>","<android.os.Build$VERSION: void <clinit>()>","<androidx.appcompat.content.res.AppCompatResources: void <clinit>()>","<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>"],"<androidx.core.view.ViewCompat: void setOnApplyWindowInsetsListener(android.view.View,androidx.core.view.OnApplyWindowInsetsListener)>":["<androidx.core.view.ViewCompat$1: void <init>(androidx.core.view.OnApplyWindowInsetsListener)>","<android.os.Build$VERSION: void <clinit>()>"],"<androidx.fragment.app.FragmentManagerImpl: void dispatchActivityCreated()>":["<androidx.fragment.app.FragmentManagerImpl: void dispatchStateChange(int)>"],"<androidx.core.graphics.TypefaceCompatApi26Impl: void <init>()>":["<java.lang.Object: java.lang.Class getClass()>","<androidx.core.graphics.TypefaceCompatApi21Impl: void <init>()>","<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>","<androidx.core.graphics.TypefaceCompatApi26Impl: java.lang.reflect.Method obtainAddFontFromBufferMethod(java.lang.Class)>","<androidx.core.graphics.TypefaceCompatApi26Impl: java.lang.Class obtainFontFamily()>","<java.lang.StringBuilder: void <init>()>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<androidx.core.graphics.TypefaceCompatApi28Impl: java.lang.reflect.Method obtainCreateFromFamiliesWithDefaultMethod(java.lang.Class)>","<androidx.core.graphics.TypefaceCompatApi26Impl: java.lang.reflect.Constructor obtainFontFamilyCtor(java.lang.Class)>","<androidx.core.graphics.TypefaceCompatApi26Impl: java.lang.reflect.Method obtainFreezeMethod(java.lang.Class)>","<java.lang.StringBuilder: java.lang.String toString()>","<androidx.core.graphics.TypefaceCompatApi26Impl: java.lang.reflect.Method obtainAddFontFromAssetManagerMethod(java.lang.Class)>","<androidx.core.graphics.TypefaceCompatApi26Impl: java.lang.reflect.Method obtainAbortCreationMethod(java.lang.Class)>","<androidx.core.graphics.TypefaceCompatApi26Impl: java.lang.reflect.Method obtainCreateFromFamiliesWithDefaultMethod(java.lang.Class)>"],"<kotlinx.coroutines.scheduling.NanoTimeSource: long nanoTime()>":["<java.lang.System: long nanoTime()>","<java.lang.System: void <clinit>()>"],"<androidx.core.graphics.drawable.DrawableCompat: void setTintMode(android.graphics.drawable.Drawable,android.graphics.PorterDuff$Mode)>":["<androidx.core.graphics.drawable.WrappedDrawableApi21: void setTintMode(android.graphics.PorterDuff$Mode)>","<android.graphics.drawable.LayerDrawable: void setTintMode(android.graphics.PorterDuff$Mode)>","<androidx.core.graphics.drawable.WrappedDrawableApi14: void setTintMode(android.graphics.PorterDuff$Mode)>","<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: void setTintMode(android.graphics.PorterDuff$Mode)>","<android.os.Build$VERSION: void <clinit>()>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: void setTintMode(android.graphics.PorterDuff$Mode)>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void setTintMode(android.graphics.PorterDuff$Mode)>"],"<androidx.fragment.app.FragmentManagerImpl: void moveToState(int,boolean)>":["<java.lang.IllegalStateException: void <init>(java.lang.String)>","<android.util.SparseArray: int size()>","<androidx.fragment.app.FragmentManagerImpl: void moveFragmentToExpectedState(androidx.fragment.app.Fragment)>","<android.util.SparseArray: java.lang.Object valueAt(int)>","<java.util.ArrayList: int size()>","<androidx.fragment.app.FragmentActivity$HostCallbacks: void onSupportInvalidateOptionsMenu()>","<java.util.ArrayList: java.lang.Object get(int)>","<androidx.fragment.app.FragmentManagerImpl: void startPendingDeferredFragments()>"],"<androidx.appcompat.widget.TintTypedArray: androidx.appcompat.widget.TintTypedArray obtainStyledAttributes(android.content.Context,android.util.AttributeSet,int[])>":["<androidx.appcompat.widget.TintTypedArray: void <init>(android.content.Context,android.content.res.TypedArray)>","<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[])>"],"<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VClipPath: void inflate(android.content.res.Resources,android.util.AttributeSet,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser)>":["<androidx.core.content.res.TypedArrayUtils: android.content.res.TypedArray obtainAttributes(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,int[])>","<androidx.vectordrawable.graphics.drawable.AndroidResources: void <clinit>()>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VClipPath: void updateStateFromTypedArray(android.content.res.TypedArray)>","<androidx.core.content.res.TypedArrayUtils: boolean hasAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>"],"<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: void setColorFilter(android.graphics.ColorFilter)>":["<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void setColorFilter(android.graphics.ColorFilter)>"],"<com.afollestad.materialdialogs.MaterialDialog: com.afollestad.materialdialogs.MaterialDialog positiveButton$default(com.afollestad.materialdialogs.MaterialDialog,java.lang.Integer,java.lang.CharSequence,kotlin.jvm.functions.Function1,int,java.lang.Object)>":["<com.afollestad.materialdialogs.MaterialDialog: com.afollestad.materialdialogs.MaterialDialog positiveButton(java.lang.Integer,java.lang.CharSequence,kotlin.jvm.functions.Function1)>"],"<kotlin.text.StringsKt__StringsKt: int lastIndexOf(java.lang.CharSequence,java.lang.String,int,boolean)>":["<kotlin.text.StringsKt__StringsKt: int indexOf$StringsKt__StringsKt(java.lang.CharSequence,java.lang.CharSequence,int,int,boolean,boolean)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>":["<java.lang.RuntimeException: void <init>(java.lang.String)>"],"<java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)>":["<java.lang.RuntimeException: void <init>(java.lang.String)>"],"<com.afollestad.photoaffix.prefs.PrefsModule_ProvideRxkPrefsFactory: com.afollestad.rxkprefs.RxkPrefs proxyProvideRxkPrefs(com.afollestad.photoaffix.prefs.PrefsModule,android.app.Application)>":["<com.afollestad.photoaffix.prefs.PrefsModule: com.afollestad.rxkprefs.RxkPrefs provideRxkPrefs(android.app.Application)>","<dagger.internal.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>"],"<kotlinx.coroutines.CoroutineDispatcher: void <init>()>":["<kotlin.coroutines.AbstractCoroutineContextElement: void <init>(kotlin.coroutines.CoroutineContext$Key)>","<kotlin.coroutines.ContinuationInterceptor: void <clinit>()>"],"<kotlinx.coroutines.Job$DefaultImpls: kotlin.coroutines.CoroutineContext$Element get(kotlinx.coroutines.Job,kotlin.coroutines.CoroutineContext$Key)>":["<kotlin.coroutines.CoroutineContext$Element$DefaultImpls: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Element,kotlin.coroutines.CoroutineContext$Key)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<androidx.appcompat.widget.AppCompatDrawableManager: void installDefaultInflateDelegates(androidx.appcompat.widget.AppCompatDrawableManager)>":["<androidx.appcompat.widget.AppCompatDrawableManager$VdcInflateDelegate: void <init>()>","<androidx.appcompat.widget.AppCompatDrawableManager: void addDelegate(java.lang.String,androidx.appcompat.widget.AppCompatDrawableManager$InflateDelegate)>","<android.os.Build$VERSION: void <clinit>()>","<androidx.appcompat.widget.AppCompatDrawableManager$AsldcInflateDelegate: void <init>()>","<androidx.appcompat.widget.AppCompatDrawableManager$AvdcInflateDelegate: void <init>()>"],"<io.reactivex.Observable: io.reactivex.Observable create(io.reactivex.ObservableOnSubscribe)>":["<io.reactivex.internal.functions.ObjectHelper: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>","<io.reactivex.internal.operators.observable.ObservableCreate: void <init>(io.reactivex.ObservableOnSubscribe)>","<io.reactivex.plugins.RxJavaPlugins: io.reactivex.Observable onAssembly(io.reactivex.Observable)>","<io.reactivex.internal.functions.ObjectHelper: void <clinit>()>"],"<kotlinx.coroutines.internal.LockFreeTaskQueueCore: kotlinx.coroutines.internal.LockFreeTaskQueueCore next()>":["<kotlinx.coroutines.internal.LockFreeTaskQueueCore: kotlinx.coroutines.internal.LockFreeTaskQueueCore allocateOrGetNextCopy(long)>","<kotlinx.coroutines.internal.LockFreeTaskQueueCore: long markFrozen()>"],"<kotlinx.coroutines.CompletionHandlerBase: void <init>()>":["<kotlinx.coroutines.internal.LockFreeLinkedListNode: void <init>()>"],"<androidx.core.graphics.TypefaceCompatApi26Impl: android.graphics.Typeface createFromFamiliesWithDefault(java.lang.Object)>":["<java.lang.Integer: void <clinit>()>","<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>","<java.lang.Integer: java.lang.Integer valueOf(int)>","<java.lang.reflect.Array: void set(java.lang.Object,int,java.lang.Object)>","<java.lang.RuntimeException: void <init>(java.lang.Throwable)>"],"<com.afollestad.photoaffix.engine.subengines.RealStitchEngine_Factory: void <init>(javax.inject.Provider,javax.inject.Provider,javax.inject.Provider,javax.inject.Provider,javax.inject.Provider,javax.inject.Provider,javax.inject.Provider)>":["<java.lang.Object: void <init>()>"],"<androidx.vectordrawable.graphics.drawable.AnimationUtilsCompat: android.view.animation.Interpolator createInterpolatorFromXml(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser)>":["<java.lang.RuntimeException: void <init>(java.lang.String)>","<android.view.animation.DecelerateInterpolator: void <init>(android.content.Context,android.util.AttributeSet)>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<java.lang.StringBuilder: void <init>()>","<android.view.animation.AnticipateOvershootInterpolator: void <init>(android.content.Context,android.util.AttributeSet)>","<android.view.animation.AccelerateDecelerateInterpolator: void <init>()>","<java.lang.StringBuilder: java.lang.String toString()>","<android.view.animation.AnticipateInterpolator: void <init>(android.content.Context,android.util.AttributeSet)>","<android.view.animation.LinearInterpolator: void <init>()>","<android.view.animation.BounceInterpolator: void <init>()>","<android.view.animation.AccelerateInterpolator: void <init>(android.content.Context,android.util.AttributeSet)>","<android.view.animation.CycleInterpolator: void <init>(android.content.Context,android.util.AttributeSet)>","<androidx.vectordrawable.graphics.drawable.PathInterpolatorCompat: void <init>(android.content.Context,android.util.AttributeSet,org.xmlpull.v1.XmlPullParser)>","<android.util.Xml: android.util.AttributeSet asAttributeSet(org.xmlpull.v1.XmlPullParser)>","<android.util.Xml: void <clinit>()>","<android.view.animation.OvershootInterpolator: void <init>(android.content.Context,android.util.AttributeSet)>"],"<com.afollestad.photoaffix.dialogs.ImageSizingDialog: void <init>()>":["<androidx.fragment.app.DialogFragment: void <init>()>"],"<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VObject: void <init>()>":["<java.lang.Object: void <init>()>"],"<kotlinx.coroutines.Job$DefaultImpls: kotlin.coroutines.CoroutineContext plus(kotlinx.coroutines.Job,kotlin.coroutines.CoroutineContext)>":["<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<kotlin.coroutines.CoroutineContext$Element$DefaultImpls: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext$Element,kotlin.coroutines.CoroutineContext)>"],"<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: boolean selectTransition(int)>":["<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimationDrawableTransition: void start()>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatedStateListState: boolean isTransitionReversed(int,int)>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$Transition: boolean canReverse()>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatedVectorDrawableTransition: void stop()>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatableTransition: void <init>(android.graphics.drawable.Animatable)>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatedVectorDrawableTransition: void <init>(androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat)>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimationDrawableTransition: void <init>(android.graphics.drawable.AnimationDrawable,boolean,boolean)>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatableTransition: void stop()>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatableTransition: void start()>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatedStateListState: int indexOfTransition(int,int)>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: android.graphics.drawable.Drawable getCurrent()>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatedVectorDrawableTransition: void start()>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimationDrawableTransition: boolean canReverse()>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimationDrawableTransition: void stop()>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$Transition: void reverse()>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatedStateListState: int getKeyframeIdAt(int)>","<androidx.appcompat.graphics.drawable.DrawableContainer: int getCurrentIndex()>","<androidx.appcompat.graphics.drawable.DrawableContainer: boolean selectDrawable(int)>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimationDrawableTransition: void reverse()>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatedStateListState: boolean transitionHasReversibleFlag(int,int)>"],"<androidx.core.graphics.PathParser$PathDataNode: void drawArc(android.graphics.Path,float,float,float,float,float,float,float,boolean,boolean)>":["<java.lang.Math: double toRadians(double)>","<java.lang.Math: double cos(double)>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<java.lang.StringBuilder: void <init>()>","<java.lang.StringBuilder: java.lang.StringBuilder append(double)>","<java.lang.Math: double atan2(double,double)>","<java.lang.Math: double sin(double)>","<android.util.Log: int w(java.lang.String,java.lang.String)>","<java.lang.StringBuilder: java.lang.String toString()>","<java.lang.Double: boolean isNaN(double)>","<androidx.core.graphics.PathParser$PathDataNode: void drawArc(android.graphics.Path,float,float,float,float,float,float,float,boolean,boolean)>","<java.lang.Double: void <clinit>()>","<java.lang.Math: double sqrt(double)>","<androidx.core.graphics.PathParser$PathDataNode: void arcToBezier(android.graphics.Path,double,double,double,double,double,double,double,double,double)>"],"<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatedStateListState: void mutate()>":["<androidx.collection.SparseArrayCompat: androidx.collection.SparseArrayCompat clone()>","<androidx.collection.LongSparseArray: androidx.collection.LongSparseArray clone()>"],"<kotlinx.coroutines.StandaloneCoroutine: void handleJobException(java.lang.Throwable)>":["<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<kotlinx.coroutines.CoroutineExceptionHandlerKt: void handleExceptionViaHandler(kotlin.coroutines.CoroutineContext,java.lang.Throwable)>"],"<androidx.collection.LruCache: java.lang.Object get(java.lang.Object)>":["<java.lang.NullPointerException: void <init>(java.lang.String)>","<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>","<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>","<androidx.collection.LruCache: void trimToSize(int)>","<androidx.collection.LruCache: java.lang.Object create(java.lang.Object)>","<androidx.collection.LruCache: void entryRemoved(boolean,java.lang.Object,java.lang.Object,java.lang.Object)>","<androidx.collection.LruCache: int safeSizeOf(java.lang.Object,java.lang.Object)>"],"<androidx.appcompat.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable createDrawableIfNeeded(android.content.Context,int)>":["<android.graphics.drawable.Drawable: void setChangingConfigurations(int)>","<android.util.TypedValue: void <init>()>","<androidx.core.graphics.drawable.WrappedDrawableApi14: void setChangingConfigurations(int)>","<androidx.appcompat.widget.AppCompatDrawableManager: long createCacheKey(android.util.TypedValue)>","<android.graphics.drawable.LayerDrawable: void <init>(android.graphics.drawable.Drawable[])>","<androidx.appcompat.widget.AppCompatDrawableManager: boolean addDrawableToCache(android.content.Context,long,android.graphics.drawable.Drawable)>","<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: void setChangingConfigurations(int)>","<androidx.appcompat.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable getDrawable(android.content.Context,int)>","<androidx.appcompat.app.AppCompatActivity: android.content.res.Resources getResources()>","<android.content.res.Resources: void getValue(int,android.util.TypedValue,boolean)>","<androidx.appcompat.widget.AppCompatDrawableManager: void <clinit>()>","<androidx.appcompat.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable getCachedDrawable(android.content.Context,long)>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void setChangingConfigurations(int)>"],"<com.afollestad.rxkprefs.adapters.IntAdapter$Companion: com.afollestad.rxkprefs.adapters.IntAdapter getINSTANCE()>":["<com.afollestad.rxkprefs.adapters.IntAdapter: com.afollestad.rxkprefs.adapters.IntAdapter access$getINSTANCE$cp()>","<com.afollestad.rxkprefs.adapters.IntAdapter: void <clinit>()>"],"<androidx.fragment.app.FragmentState: void <init>(androidx.fragment.app.Fragment)>":["<java.lang.Object: void <init>()>"],"<kotlinx.coroutines.DefaultTimeSource: void <clinit>()>":["<kotlinx.coroutines.DefaultTimeSource: void <clinit>()>","<kotlinx.coroutines.DefaultTimeSource: void <init>()>"],"<kotlin.ResultKt: java.lang.Object createFailure(java.lang.Throwable)>":["<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<kotlin.Result$Failure: void <init>(java.lang.Throwable)>"],"<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: void setAlpha(int)>":["<androidx.appcompat.graphics.drawable.DrawableContainer: void setAlpha(int)>"],"<com.afollestad.rxkprefs.RxkPrefsKt: com.afollestad.rxkprefs.RxkPrefs rxkPrefs$default(android.content.Context,java.lang.String,int,int,java.lang.Object)>":["<com.afollestad.rxkprefs.RxkPrefsKt: com.afollestad.rxkprefs.RxkPrefs rxkPrefs(android.content.Context,java.lang.String,int)>"],"<kotlin.TypeCastException: void <init>(java.lang.String)>":["<java.lang.ClassCastException: void <init>(java.lang.String)>"],"<kotlinx.coroutines.MissingMainCoroutineDispatcher: void <init>(java.lang.Throwable)>":["<kotlinx.coroutines.MainCoroutineDispatcher: void <init>()>"],"<kotlinx.coroutines.JobSupport: kotlin.coroutines.CoroutineContext minusKey(kotlin.coroutines.CoroutineContext$Key)>":["<kotlinx.coroutines.Job$DefaultImpls: kotlin.coroutines.CoroutineContext minusKey(kotlinx.coroutines.Job,kotlin.coroutines.CoroutineContext$Key)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<androidx.core.provider.FontsContractCompat: androidx.core.provider.FontsContractCompat$FontInfo[] getFontFromProvider(android.content.Context,androidx.core.provider.FontRequest,java.lang.String,android.os.CancellationSignal)>":["<android.net.Uri$Builder: void <init>()>","<android.net.Uri$Builder: android.net.Uri$Builder appendPath(java.lang.String)>","<androidx.core.provider.FontRequest: java.lang.String getQuery()>","<java.util.ArrayList: boolean add(java.lang.Object)>","<android.net.Uri$Builder: android.net.Uri build()>","<androidx.core.provider.FontsContractCompat$FontInfo: void <init>(android.net.Uri,int,int,boolean,int)>","<android.content.ContextWrapper: android.content.ContentResolver getContentResolver()>","<java.lang.String: void <clinit>()>","<android.net.Uri$Builder: android.net.Uri$Builder authority(java.lang.String)>","<java.util.ArrayList: void <init>()>","<android.content.ContentUris: android.net.Uri withAppendedId(android.net.Uri,long)>","<android.os.Build$VERSION: void <clinit>()>","<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>","<android.net.Uri$Builder: android.net.Uri$Builder scheme(java.lang.String)>"],"<kotlinx.coroutines.ThreadContextElement$DefaultImpls: kotlin.coroutines.CoroutineContext$Element get(kotlinx.coroutines.ThreadContextElement,kotlin.coroutines.CoroutineContext$Key)>":["<kotlin.coroutines.CoroutineContext$Element$DefaultImpls: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Element,kotlin.coroutines.CoroutineContext$Key)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<androidx.collection.SparseArrayCompat: void <init>(int)>":["<java.lang.Object: void <init>()>","<androidx.collection.ContainerHelpers: int idealIntArraySize(int)>","<androidx.collection.ContainerHelpers: void <clinit>()>"],"<androidx.collection.ArrayMap$1: void colRemoveAt(int)>":["<androidx.collection.SimpleArrayMap: java.lang.Object removeAt(int)>"],"<com.afollestad.photoaffix.engine.photos.PhotoKt$defaultUriParser$1: void <clinit>()>":["<com.afollestad.photoaffix.engine.photos.PhotoKt$defaultUriParser$1: void <init>()>","<com.afollestad.photoaffix.engine.photos.PhotoKt$defaultUriParser$1: void <clinit>()>"],"<kotlinx.coroutines.scheduling.TimeSource: void <init>()>":["<java.lang.Object: void <init>()>"],"<io.reactivex.internal.schedulers.ComputationScheduler: void start()>":["<io.reactivex.Scheduler: void <clinit>()>","<io.reactivex.internal.schedulers.ComputationScheduler$FixedSchedulerPool: void <init>(int,java.util.concurrent.ThreadFactory)>","<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>","<io.reactivex.internal.schedulers.ComputationScheduler: void <clinit>()>","<io.reactivex.internal.schedulers.ComputationScheduler$FixedSchedulerPool: void shutdown()>"],"<com.afollestad.photoaffix.engine.subengines.Size$Companion: void <init>()>":["<java.lang.Object: void <init>()>"],"<kotlin.text.CharsKt__CharJVMKt: int digitOf(char,int)>":["<java.lang.Character: int digit(int,int)>","<java.lang.Character: void <clinit>()>"],"<androidx.appcompat.view.WindowCallbackWrapper: void onPanelClosed(int,android.view.Menu)>":["<androidx.appcompat.app.AppCompatDelegateImpl$AppCompatWindowCallback: void onPanelClosed(int,android.view.Menu)>"],"<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: boolean blockingQuiescence()>":["<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.GlobalQueue access$getGlobalQueue$p(kotlinx.coroutines.scheduling.CoroutineScheduler)>","<kotlinx.coroutines.scheduling.WorkQueue: boolean add(kotlinx.coroutines.scheduling.Task,kotlinx.coroutines.scheduling.GlobalQueue)>","<kotlinx.coroutines.scheduling.CoroutineScheduler: void <clinit>()>","<kotlinx.coroutines.scheduling.GlobalQueue: kotlinx.coroutines.scheduling.Task removeFirstBlockingModeOrNull()>"],"<kotlinx.coroutines.CoroutineStart: void <init>(java.lang.String,int)>":["<java.lang.Enum: void <init>(java.lang.String,int)>"],"<com.afollestad.photoaffix.App: void onCreate()>":["<com.afollestad.photoaffix.di.DaggerAppComponent$Builder: com.afollestad.photoaffix.di.AppComponent build()>","<android.app.Application: void onCreate()>","<com.afollestad.photoaffix.di.DaggerAppComponent$Builder: com.afollestad.photoaffix.di.AppComponent$Builder application(android.app.Application)>","<com.afollestad.photoaffix.di.DaggerAppComponent: com.afollestad.photoaffix.di.AppComponent$Builder builder()>"],"<androidx.collection.MapCollections$ValuesCollection: boolean contains(java.lang.Object)>":["<androidx.collection.ArrayMap$1: int colIndexOfValue(java.lang.Object)>"],"<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>":["<java.lang.RuntimeException: void <init>(java.lang.String)>","<java.lang.RuntimeException: void <init>()>"],"<androidx.fragment.app.FragmentManagerImpl: androidx.fragment.app.FragmentManagerImpl$AnimationOrAnimator loadAnimation(androidx.fragment.app.Fragment,int,boolean,int)>":["<java.lang.String: boolean equals(java.lang.Object)>","<androidx.fragment.app.FragmentHostCallback: android.content.Context getContext()>","<androidx.fragment.app.FragmentManagerImpl: void <clinit>()>","<android.animation.AnimatorInflater: android.animation.Animator loadAnimator(android.content.Context,int)>","<androidx.fragment.app.FragmentActivity$HostCallbacks: int onGetWindowAnimations()>","<androidx.fragment.app.FragmentManagerImpl$AnimationOrAnimator: void <init>(android.animation.Animator)>","<android.content.res.Resources: java.lang.String getResourceTypeName(int)>","<androidx.fragment.app.FragmentManagerImpl: androidx.fragment.app.FragmentManagerImpl$AnimationOrAnimator makeOpenCloseAnimation(android.content.Context,float,float,float,float)>","<androidx.appcompat.app.AppCompatActivity: android.content.res.Resources getResources()>","<android.view.animation.AnimationUtils: android.view.animation.Animation loadAnimation(android.content.Context,int)>","<androidx.fragment.app.FragmentManagerImpl: int transitToStyleIndex(int,boolean)>","<androidx.fragment.app.FragmentManagerImpl$AnimationOrAnimator: void <init>(android.view.animation.Animation)>","<androidx.fragment.app.FragmentActivity$HostCallbacks: boolean onHasWindowAnimations()>","<androidx.fragment.app.FragmentManagerImpl: androidx.fragment.app.FragmentManagerImpl$AnimationOrAnimator makeFadeAnimation(android.content.Context,float,float)>"],"<com.afollestad.materialdialogs.utils.MDUtil: int resolveColor$default(com.afollestad.materialdialogs.utils.MDUtil,android.content.Context,java.lang.Integer,java.lang.Integer,int,java.lang.Object)>":["<com.afollestad.materialdialogs.utils.MDUtil: int resolveColor(android.content.Context,java.lang.Integer,java.lang.Integer)>"],"<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>":["<java.lang.RuntimeException: void <init>(java.lang.String)>"],"<kotlinx.coroutines.scheduling.CoroutineScheduler: void <clinit>()>":["<kotlin.ranges.RangesKt___RangesKt: long coerceAtMost(long,long)>","<kotlinx.coroutines.internal.Symbol: void <init>(java.lang.String)>","<java.util.concurrent.TimeUnit: void <clinit>()>","<kotlin.ranges.RangesKt___RangesKt: long coerceAtLeast(long,long)>","<kotlinx.coroutines.scheduling.TasksKt: void <clinit>()>","<java.util.concurrent.atomic.AtomicLongFieldUpdater: java.util.concurrent.atomic.AtomicLongFieldUpdater newUpdater(java.lang.Class,java.lang.String)>","<kotlinx.coroutines.scheduling.CoroutineScheduler$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>","<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: java.util.concurrent.atomic.AtomicIntegerFieldUpdater newUpdater(java.lang.Class,java.lang.String)>","<kotlinx.coroutines.scheduling.CoroutineScheduler: void <clinit>()>"],"<com.afollestad.photoaffix.engine.bitmaps.RealBitmapManipulator_Factory: void <init>(javax.inject.Provider)>":["<java.lang.Object: void <init>()>"],"<kotlin.coroutines.ContinuationInterceptor$DefaultImpls: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.ContinuationInterceptor,kotlin.coroutines.CoroutineContext$Key)>":["<kotlin.coroutines.ContinuationInterceptor: void <clinit>()>","<kotlin.TypeCastException: void <init>(java.lang.String)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: void <init>()>":["<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: void <init>(androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatedStateListState,android.content.res.Resources)>"],"<io.reactivex.internal.functions.Functions$TruePredicate: void <init>()>":["<java.lang.Object: void <init>()>"],"<androidx.appcompat.graphics.drawable.DrawableContainer: void setHotspotBounds(int,int,int,int)>":["<android.graphics.Rect: void set(int,int,int,int)>","<android.graphics.Rect: void <init>(int,int,int,int)>","<android.graphics.Rect: void <clinit>()>","<androidx.core.graphics.drawable.DrawableCompat: void setHotspotBounds(android.graphics.drawable.Drawable,int,int,int,int)>"],"<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void blockingWorkerIdle()>":["<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: boolean blockingQuiescence()>","<java.lang.System: long nanoTime()>","<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void doPark(long)>","<java.lang.System: void <clinit>()>","<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void tryTerminateWorker()>","<kotlinx.coroutines.scheduling.CoroutineScheduler: long access$getIdleWorkerKeepAliveNs$p(kotlinx.coroutines.scheduling.CoroutineScheduler)>","<kotlinx.coroutines.scheduling.CoroutineScheduler: void <clinit>()>","<kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: void <clinit>()>","<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: boolean tryReleaseCpu$kotlinx_coroutines_core(kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState)>"],"<androidx.core.view.ViewConfigurationCompat: void <clinit>()>":["<android.util.Log: int i(java.lang.String,java.lang.String)>","<android.os.Build$VERSION: void <clinit>()>","<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>","<androidx.core.view.ViewConfigurationCompat: void <clinit>()>"],"<io.reactivex.schedulers.Schedulers$ComputationTask: void <init>()>":["<java.lang.Object: void <init>()>"],"<com.afollestad.photoaffix.utilities.RealMediaScanner_Factory: void <init>(javax.inject.Provider)>":["<java.lang.Object: void <init>()>"],"<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.internal.Symbol access$getNOT_IN_STACK$cp()>":["<kotlinx.coroutines.scheduling.CoroutineScheduler: void <clinit>()>"],"<androidx.core.content.res.GradientColorInflaterCompat$ColorStops: void <init>(int,int)>":["<java.lang.Object: void <init>()>"],"<kotlin.text.StringsKt__StringsKt: int indexOf$StringsKt__StringsKt(java.lang.CharSequence,java.lang.CharSequence,int,int,boolean,boolean)>":["<kotlin.ranges.RangesKt___RangesKt: kotlin.ranges.IntProgression downTo(int,int)>","<kotlin.ranges.IntProgression: int getLast()>","<kotlin.ranges.RangesKt___RangesKt: int coerceAtMost(int,int)>","<kotlin.ranges.RangesKt___RangesKt: int coerceAtLeast(int,int)>","<java.lang.String: int length()>","<kotlin.ranges.IntProgression: int getStep()>","<kotlin.ranges.IntProgression: void <clinit>()>","<kotlin.text.StringsKt__StringsKt: boolean regionMatchesImpl(java.lang.CharSequence,int,java.lang.CharSequence,int,int,boolean)>","<kotlin.ranges.IntRange: void <init>(int,int)>","<kotlin.ranges.IntProgression: int getFirst()>","<kotlin.ranges.IntRange: void <clinit>()>","<kotlin.text.StringsKt__StringsJVMKt: boolean regionMatches(java.lang.String,int,java.lang.String,int,int,boolean)>","<kotlin.text.StringsKt__StringsKt: int getLastIndex(java.lang.CharSequence)>"],"<kotlinx.coroutines.JobSupport: boolean addLastAtomic(java.lang.Object,kotlinx.coroutines.NodeList,kotlinx.coroutines.JobNode)>":["<kotlinx.coroutines.JobSupport$addLastAtomic$$inlined$addLastIf$1: void <init>(kotlinx.coroutines.internal.LockFreeLinkedListNode,kotlinx.coroutines.internal.LockFreeLinkedListNode,kotlinx.coroutines.JobSupport,java.lang.Object)>","<kotlin.TypeCastException: void <init>(java.lang.String)>"],"<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.Task trySteal()>":["<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.GlobalQueue access$getGlobalQueue$p(kotlinx.coroutines.scheduling.CoroutineScheduler)>","<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: int nextInt$kotlinx_coroutines_core(int)>","<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker[] access$getWorkers$p(kotlinx.coroutines.scheduling.CoroutineScheduler)>","<kotlinx.coroutines.scheduling.WorkQueue: boolean trySteal(kotlinx.coroutines.scheduling.WorkQueue,kotlinx.coroutines.scheduling.GlobalQueue)>","<kotlinx.coroutines.scheduling.WorkQueue: kotlinx.coroutines.scheduling.Task poll()>","<kotlinx.coroutines.scheduling.CoroutineScheduler: int access$getCreatedWorkers$p(kotlinx.coroutines.scheduling.CoroutineScheduler)>","<kotlinx.coroutines.scheduling.CoroutineScheduler: void <clinit>()>"],"<dummyMainClass: void dummyMainMethod(java.lang.String[])>":["<androidx.core.content.FileProvider: void <init>()>","<com.afollestad.photoaffix.App: void onCreate()>","<dummyMainClass: com.afollestad.photoaffix.views.MainActivity dummyMainMethod_com_afollestad_photoaffix_views_MainActivity(android.content.Intent)>","<androidx.core.content.FileProvider: void <clinit>()>","<dummyMainClass: androidx.core.content.FileProvider dummyMainMethod_androidx_core_content_FileProvider(android.content.Intent)>","<com.afollestad.photoaffix.App: void <init>()>","<androidx.core.content.FileProvider: boolean onCreate()>"],"<kotlinx.coroutines.BuildersKt__Builders_commonKt: kotlinx.coroutines.Job launch$default(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.CoroutineContext,kotlinx.coroutines.CoroutineStart,kotlin.jvm.functions.Function2,int,java.lang.Object)>":["<kotlin.coroutines.EmptyCoroutineContext: void <clinit>()>","<kotlinx.coroutines.BuildersKt: kotlinx.coroutines.Job launch(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.CoroutineContext,kotlinx.coroutines.CoroutineStart,kotlin.jvm.functions.Function2)>","<kotlinx.coroutines.CoroutineStart: void <clinit>()>"],"<androidx.appcompat.view.menu.MenuBuilder: android.view.MenuItem findItem(int)>":["<androidx.appcompat.view.menu.MenuBuilder: int size()>","<java.util.ArrayList: java.lang.Object get(int)>"],"<kotlinx.coroutines.ThreadContextElement$DefaultImpls: kotlin.coroutines.CoroutineContext minusKey(kotlinx.coroutines.ThreadContextElement,kotlin.coroutines.CoroutineContext$Key)>":["<kotlin.coroutines.CoroutineContext$Element$DefaultImpls: kotlin.coroutines.CoroutineContext minusKey(kotlin.coroutines.CoroutineContext$Element,kotlin.coroutines.CoroutineContext$Key)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat createFromXmlInner(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>":["<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>","<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: void <init>(android.content.Context)>"],"<com.afollestad.photoaffix.views.MainActivity$performAffix$1: void invoke(kotlinx.coroutines.CoroutineScope)>":["<com.afollestad.photoaffix.views.MainActivity$performAffix$1$1: void <init>(com.afollestad.photoaffix.views.MainActivity$performAffix$1,kotlin.coroutines.Continuation)>","<kotlinx.coroutines.internal.ContextScope: kotlin.coroutines.CoroutineContext getCoroutineContext()>","<kotlinx.coroutines.BuildersKt: kotlinx.coroutines.Job launch$default(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.CoroutineContext,kotlinx.coroutines.CoroutineStart,kotlin.jvm.functions.Function2,int,java.lang.Object)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<androidx.core.content.res.ColorStateListInflaterCompat: android.content.res.ColorStateList inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>":["<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>","<android.content.res.ColorStateList: void <clinit>()>","<android.util.StateSet: int[] trimStateSet(int[],int)>","<androidx.core.content.res.GrowingArrayUtils: java.lang.Object[] append(java.lang.Object[],int,java.lang.Object)>","<androidx.core.content.res.ColorStateListInflaterCompat: android.content.res.TypedArray obtainAttributes(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,int[])>","<java.lang.System: void <clinit>()>","<androidx.core.R$styleable: void <clinit>()>","<androidx.core.content.res.ColorStateListInflaterCompat: int modulateColorAlpha(int,float)>","<android.content.res.ColorStateList: void <init>(int[][],int[])>","<android.util.StateSet: void <clinit>()>","<androidx.core.content.res.GrowingArrayUtils: void <clinit>()>","<androidx.core.content.res.GrowingArrayUtils: int[] append(int[],int,int)>"],"<androidx.appcompat.app.WindowDecorActionBar$1: void <init>(androidx.appcompat.app.WindowDecorActionBar)>":["<androidx.core.view.ViewPropertyAnimatorListenerAdapter: void <init>()>"],"<androidx.appcompat.view.menu.MenuBuilder: void onItemsChanged(boolean)>":["<androidx.appcompat.view.menu.MenuBuilder: void dispatchPresenterUpdate(boolean)>"],"<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: int getChangingConfigurations()>":["<android.graphics.drawable.LayerDrawable: int getChangingConfigurations()>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: int getChangingConfigurations()>","<androidx.core.graphics.drawable.WrappedDrawableApi14: int getChangingConfigurations()>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: int getChangingConfigurations()>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: int getChangingConfigurations()>","<android.graphics.drawable.Drawable: int getChangingConfigurations()>","<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: int getChangingConfigurations()>"],"<kotlinx.coroutines.CancelledContinuation: void <init>(kotlin.coroutines.Continuation,java.lang.Throwable)>":["<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>","<java.lang.StringBuilder: java.lang.String toString()>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<java.lang.StringBuilder: void <init>()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<kotlinx.coroutines.CompletedExceptionally: void <init>(java.lang.Throwable)>","<java.util.concurrent.CancellationException: void <init>(java.lang.String)>"],"<com.afollestad.photoaffix.prefs.PrefsModule_ProvideScalePriorityPrefFactory: com.afollestad.rxkprefs.Pref proxyProvideScalePriorityPref(com.afollestad.photoaffix.prefs.PrefsModule,com.afollestad.rxkprefs.RxkPrefs)>":["<com.afollestad.photoaffix.prefs.PrefsModule: com.afollestad.rxkprefs.Pref provideScalePriorityPref(com.afollestad.rxkprefs.RxkPrefs)>","<dagger.internal.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>"],"<androidx.arch.core.internal.SafeIterableMap$ListIterator: java.lang.Object next()>":["<androidx.arch.core.internal.SafeIterableMap$ListIterator: java.util.Map$Entry next()>"],"<com.afollestad.rxkprefs.adapters.BooleanAdapter: java.lang.Object get(java.lang.String,android.content.SharedPreferences)>":["<com.afollestad.rxkprefs.adapters.BooleanAdapter: java.lang.Boolean get(java.lang.String,android.content.SharedPreferences)>"],"<androidx.appcompat.graphics.drawable.DrawableContainer: void initializeDrawableForDisplay(android.graphics.drawable.Drawable)>":["<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: boolean setState(int[])>","<androidx.core.graphics.drawable.WrappedDrawableApi21: void setHotspotBounds(int,int,int,int)>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void setHotspotBounds(int,int,int,int)>","<androidx.core.graphics.drawable.DrawableCompat: void setTintList(android.graphics.drawable.Drawable,android.content.res.ColorStateList)>","<android.graphics.drawable.Drawable: boolean setLayoutDirection(int)>","<androidx.appcompat.graphics.drawable.DrawableContainer$BlockInvalidateCallback: androidx.appcompat.graphics.drawable.DrawableContainer$BlockInvalidateCallback wrap(android.graphics.drawable.Drawable$Callback)>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: void setColorFilter(android.graphics.ColorFilter)>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: void setDither(boolean)>","<androidx.appcompat.graphics.drawable.DrawableContainer$BlockInvalidateCallback: android.graphics.drawable.Drawable$Callback unwrap()>","<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: void setHotspotBounds(int,int,int,int)>","<android.graphics.drawable.Drawable: void setBounds(android.graphics.Rect)>","<android.graphics.drawable.Drawable: void setCallback(android.graphics.drawable.Drawable$Callback)>","<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable$Callback getCallback()>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void setAutoMirrored(boolean)>","<android.graphics.drawable.LayerDrawable: void setColorFilter(android.graphics.ColorFilter)>","<androidx.appcompat.graphics.drawable.DrawableContainer$BlockInvalidateCallback: void <init>()>","<androidx.core.graphics.drawable.DrawableCompat: void setTintMode(android.graphics.drawable.Drawable,android.graphics.PorterDuff$Mode)>","<android.os.Build$VERSION: void <clinit>()>","<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: void setColorFilter(android.graphics.ColorFilter)>","<android.graphics.drawable.Drawable: int[] getState()>","<androidx.core.graphics.drawable.WrappedDrawableApi14: boolean setVisible(boolean,boolean)>","<android.graphics.drawable.LayerDrawable: boolean setVisible(boolean,boolean)>","<androidx.core.graphics.drawable.WrappedDrawableApi14: void setColorFilter(android.graphics.ColorFilter)>","<androidx.core.graphics.drawable.WrappedDrawableApi14: void setAutoMirrored(boolean)>","<android.graphics.drawable.Drawable: android.graphics.Rect getBounds()>","<android.graphics.drawable.Drawable: int getLevel()>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: void setAutoMirrored(boolean)>","<android.graphics.drawable.LayerDrawable: void setDither(boolean)>","<androidx.core.graphics.drawable.WrappedDrawableApi14: void setDither(boolean)>","<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: void setAlpha(int)>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void setColorFilter(android.graphics.ColorFilter)>","<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: void setAutoMirrored(boolean)>","<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: boolean setState(int[])>","<android.graphics.drawable.LayerDrawable: void setAutoMirrored(boolean)>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: boolean setVisible(boolean,boolean)>","<android.graphics.drawable.Drawable: boolean setLevel(int)>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: boolean setVisible(boolean,boolean)>","<android.graphics.drawable.Drawable: boolean isVisible()>","<android.graphics.drawable.Drawable: boolean setState(int[])>","<android.graphics.drawable.LayerDrawable: void setHotspotBounds(int,int,int,int)>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: void setHotspotBounds(int,int,int,int)>","<androidx.core.graphics.drawable.WrappedDrawableApi21: boolean setState(int[])>","<android.graphics.drawable.Drawable: int getLayoutDirection()>","<android.graphics.drawable.Drawable: void setDither(boolean)>","<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: boolean setVisible(boolean,boolean)>","<androidx.core.graphics.drawable.WrappedDrawableApi14: boolean setState(int[])>","<androidx.core.graphics.drawable.WrappedDrawableApi14: void setAlpha(int)>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: void setAlpha(int)>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void setAlpha(int)>","<android.graphics.drawable.Drawable: void setHotspotBounds(int,int,int,int)>","<android.graphics.drawable.LayerDrawable: void setAlpha(int)>"],"<kotlinx.coroutines.DispatchedContinuation: java.lang.Object takeState()>":["<kotlinx.coroutines.DispatchedKt: void <clinit>()>","<kotlinx.coroutines.DispatchedKt: kotlinx.coroutines.internal.Symbol access$getUNDEFINED$p()>","<java.lang.IllegalStateException: void <init>(java.lang.String)>","<java.lang.String: java.lang.String toString()>"],"<io.reactivex.internal.operators.observable.ObservableJust: void <init>(java.lang.Object)>":["<io.reactivex.Observable: void <init>()>"],"<com.afollestad.photoaffix.di.DaggerAppComponent: void <init>(com.afollestad.photoaffix.di.DaggerAppComponent$Builder)>":["<com.afollestad.photoaffix.di.DaggerAppComponent: void initialize(com.afollestad.photoaffix.di.DaggerAppComponent$Builder)>","<java.lang.Object: void <init>()>"],"<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPath: void <init>()>":["<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VObject: void <init>(androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$1)>"],"<com.afollestad.photoaffix.views.MainActivity: void onResume()>":["<com.afollestad.photoaffix.views.MainActivity: void <clinit>()>","<com.afollestad.photoaffix.views.MainActivity: void refresh$default(com.afollestad.photoaffix.views.MainActivity,boolean,int,java.lang.Object)>","<androidx.fragment.app.FragmentActivity: void onResume()>","<kotlin.jvm.internal.Intrinsics: void throwUninitializedPropertyAccessException(java.lang.String)>","<android.app.Activity: void <clinit>()>","<com.afollestad.photoaffix.adapters.PhotoGridAdapter: boolean hasPhotos()>"],"<androidx.appcompat.app.WindowDecorActionBar: void setDefaultDisplayHomeAsUpEnabled(boolean)>":["<androidx.appcompat.app.WindowDecorActionBar: void setDisplayHomeAsUpEnabled(boolean)>"],"<androidx.fragment.app.FragmentActivity$HostCallbacks: boolean onShouldSaveFragmentState(androidx.fragment.app.Fragment)>":["<android.app.Activity: boolean isFinishing()>"],"<androidx.lifecycle.LifecycleRegistry: void <init>(androidx.lifecycle.LifecycleOwner)>":["<androidx.lifecycle.Lifecycle$State: void <clinit>()>","<androidx.arch.core.internal.FastSafeIterableMap: void <init>()>","<java.util.ArrayList: void <init>()>","<java.lang.ref.WeakReference: void <init>(java.lang.Object)>","<androidx.lifecycle.Lifecycle: void <init>()>"],"<androidx.appcompat.app.AppCompatDelegateImpl: void onDestroy()>":["<androidx.appcompat.app.ActionBar: void onDestroy()>","<androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager: void cleanup()>"],"<androidx.collection.SimpleArrayMap: int indexOfValue(java.lang.Object)>":["<java.lang.String: boolean equals(java.lang.Object)>","<java.util.AbstractList: boolean equals(java.lang.Object)>","<java.lang.Object: boolean equals(java.lang.Object)>"],"<kotlinx.coroutines.scheduling.CoroutineScheduler: int access$getCreatedWorkers$p(kotlinx.coroutines.scheduling.CoroutineScheduler)>":["<kotlinx.coroutines.scheduling.CoroutineScheduler: int getCreatedWorkers()>"],"<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: boolean setVisible(boolean,boolean)>":["<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimationDrawableTransition: void start()>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatableTransition: void start()>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: void jumpToCurrentState()>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatedVectorDrawableTransition: void start()>","<androidx.appcompat.graphics.drawable.DrawableContainer: boolean setVisible(boolean,boolean)>"],"<androidx.fragment.app.DialogFragment: void show(androidx.fragment.app.FragmentManager,java.lang.String)>":["<androidx.fragment.app.FragmentManagerImpl: androidx.fragment.app.FragmentTransaction beginTransaction()>","<androidx.fragment.app.BackStackRecord: int commit()>","<androidx.fragment.app.BackStackRecord: androidx.fragment.app.FragmentTransaction add(androidx.fragment.app.Fragment,java.lang.String)>"],"<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>":["<java.lang.RuntimeException: void <init>(java.lang.String)>","<java.lang.Throwable: void <init>()>"],"<com.afollestad.photoaffix.views.MainActivity: com.afollestad.photoaffix.engine.AffixEngine getAffixEngine()>":["<kotlin.jvm.internal.Intrinsics: void throwUninitializedPropertyAccessException(java.lang.String)>"],"<androidx.core.graphics.TypefaceCompatUtil: java.nio.ByteBuffer copyToDirectBuffer(android.content.Context,android.content.res.Resources,int)>":["<java.io.File: boolean delete()>","<androidx.core.graphics.TypefaceCompatUtil: java.nio.ByteBuffer mmap(java.io.File)>","<androidx.core.graphics.TypefaceCompatUtil: boolean copyToFile(java.io.File,android.content.res.Resources,int)>","<androidx.core.graphics.TypefaceCompatUtil: java.io.File getTempFile(android.content.Context)>"],"<kotlin.coroutines.CoroutineContext$Element$DefaultImpls: java.lang.Object fold(kotlin.coroutines.CoroutineContext$Element,java.lang.Object,kotlin.jvm.functions.Function2)>":["<kotlinx.coroutines.internal.ThreadContextKt$findOne$1: java.lang.Object invoke(java.lang.Object,java.lang.Object)>","<kotlinx.coroutines.internal.ThreadContextKt$updateState$1: java.lang.Object invoke(java.lang.Object,java.lang.Object)>","<kotlinx.coroutines.internal.ThreadContextKt$countAll$1: java.lang.Object invoke(java.lang.Object,java.lang.Object)>","<kotlin.coroutines.CoroutineContext$plus$1: java.lang.Object invoke(java.lang.Object,java.lang.Object)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<kotlinx.coroutines.internal.ThreadContextKt$restoreState$1: java.lang.Object invoke(java.lang.Object,java.lang.Object)>"],"<androidx.fragment.app.FragmentTransition$3: void <init>(androidx.fragment.app.Fragment,androidx.fragment.app.Fragment,boolean,androidx.collection.ArrayMap,android.view.View,androidx.fragment.app.FragmentTransitionImpl,android.graphics.Rect)>":["<java.lang.Object: void <init>()>"],"<kotlinx.coroutines.CoroutineId: void <init>(long)>":["<kotlinx.coroutines.CoroutineId: void <clinit>()>","<kotlin.coroutines.AbstractCoroutineContextElement: void <init>(kotlin.coroutines.CoroutineContext$Key)>"],"<com.afollestad.dragselectrecyclerview.DragSelectTouchListener$Companion: com.afollestad.dragselectrecyclerview.DragSelectTouchListener create$default(com.afollestad.dragselectrecyclerview.DragSelectTouchListener$Companion,android.content.Context,com.afollestad.dragselectrecyclerview.DragSelectReceiver,kotlin.jvm.functions.Function1,int,java.lang.Object)>":["<com.afollestad.dragselectrecyclerview.DragSelectTouchListener$Companion: com.afollestad.dragselectrecyclerview.DragSelectTouchListener create(android.content.Context,com.afollestad.dragselectrecyclerview.DragSelectReceiver,kotlin.jvm.functions.Function1)>"],"<androidx.core.graphics.drawable.WrappedDrawableApi21$DrawableWrapperStateLollipop: android.graphics.drawable.Drawable newDrawable(android.content.res.Resources)>":["<androidx.core.graphics.drawable.WrappedDrawableApi21: void <init>(androidx.core.graphics.drawable.WrappedDrawableApi14$DrawableWrapperState,android.content.res.Resources)>"],"<com.afollestad.photoaffix.di.DaggerAppComponent$Builder: void <init>(com.afollestad.photoaffix.di.DaggerAppComponent$1)>":["<com.afollestad.photoaffix.di.DaggerAppComponent$Builder: void <init>()>"],"<com.afollestad.photoaffix.engine.subengines.Size: void <clinit>()>":["<com.afollestad.photoaffix.engine.subengines.Size: void <clinit>()>","<com.afollestad.photoaffix.engine.subengines.Size$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>"],"<java.lang.Throwable: java.lang.Throwable getCause()>":["<java.lang.RuntimeException: void <init>(java.lang.String)>"],"<androidx.appcompat.app.AppCompatActivity: void <init>()>":["<androidx.fragment.app.FragmentActivity: void <init>()>"],"<androidx.fragment.app.BackStackRecord$Op: void <init>(int,androidx.fragment.app.Fragment)>":["<java.lang.Object: void <init>()>"],"<io.reactivex.Observable: io.reactivex.Observable wrap(io.reactivex.ObservableSource)>":["<io.reactivex.internal.functions.ObjectHelper: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>","<io.reactivex.internal.operators.observable.ObservableFromUnsafeSource: void <init>(io.reactivex.ObservableSource)>","<io.reactivex.plugins.RxJavaPlugins: io.reactivex.Observable onAssembly(io.reactivex.Observable)>","<io.reactivex.internal.functions.ObjectHelper: void <clinit>()>"],"<kotlinx.coroutines.internal.LockFreeTaskQueueCore: kotlinx.coroutines.internal.LockFreeTaskQueueCore allocateNextCopy(long)>":["<kotlinx.coroutines.internal.LockFreeTaskQueueCore$Companion: long wo(long,long)>","<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>","<kotlinx.coroutines.internal.LockFreeTaskQueueCore: void <clinit>()>","<kotlinx.coroutines.internal.LockFreeTaskQueueCore: void <init>(int,boolean)>","<kotlinx.coroutines.internal.LockFreeTaskQueueCore$Placeholder: void <init>(int)>","<java.util.concurrent.atomic.AtomicReferenceArray: void set(int,java.lang.Object)>"],"<io.reactivex.schedulers.Schedulers: io.reactivex.Scheduler trampoline()>":["<io.reactivex.schedulers.Schedulers: void <clinit>()>"],"<androidx.vectordrawable.graphics.drawable.VectorDrawableCommon: int[] getState()>":["<androidx.core.graphics.drawable.WrappedDrawableApi14: int[] getState()>","<android.graphics.drawable.Drawable: int[] getState()>","<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: int[] getState()>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: int[] getState()>"],"<kotlinx.coroutines.ChildContinuation: void invoke(java.lang.Throwable)>":["<kotlinx.coroutines.JobSupport$AwaitContinuation: java.lang.Throwable getContinuationCancellationCause(kotlinx.coroutines.Job)>","<kotlinx.coroutines.AbstractContinuation: boolean cancelImpl(java.lang.Throwable)>"],"<androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager: void setup()>":["<androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager: void cleanup()>","<androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager$1: void <init>(androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager)>","<android.content.IntentFilter: void addAction(java.lang.String)>","<android.content.IntentFilter: void <init>()>","<android.content.ContextWrapper: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>","<android.content.IntentFilter: void <clinit>()>"],"<androidx.appcompat.app.AppCompatDelegateImpl$4: void <init>(androidx.appcompat.app.AppCompatDelegateImpl)>":["<java.lang.Object: void <init>()>"],"<io.reactivex.disposables.CompositeDisposable: void dispose()>":["<io.reactivex.disposables.CompositeDisposable: void dispose(io.reactivex.internal.util.OpenHashSet)>"],"<androidx.appcompat.widget.AppCompatDrawableManager$ColorFilterLruCache: android.graphics.PorterDuffColorFilter put(int,android.graphics.PorterDuff$Mode,android.graphics.PorterDuffColorFilter)>":["<java.lang.Integer: void <clinit>()>","<androidx.collection.LruCache: java.lang.Object put(java.lang.Object,java.lang.Object)>","<androidx.appcompat.widget.AppCompatDrawableManager$ColorFilterLruCache: int generateCacheKey(int,android.graphics.PorterDuff$Mode)>","<java.lang.Integer: java.lang.Integer valueOf(int)>"],"<kotlinx.coroutines.internal.LockFreeTaskQueueCore: kotlinx.coroutines.internal.LockFreeTaskQueueCore allocateOrGetNextCopy(long)>":["<kotlinx.coroutines.internal.LockFreeTaskQueueCore: kotlinx.coroutines.internal.LockFreeTaskQueueCore allocateNextCopy(long)>","<kotlinx.coroutines.internal.LockFreeTaskQueueCore: void <clinit>()>"],"<io.reactivex.Flowable: void <clinit>()>":["<java.lang.Integer: java.lang.Integer getInteger(java.lang.String,int)>","<java.lang.Integer: void <clinit>()>","<java.lang.Math: int max(int,int)>","<io.reactivex.Flowable: void <clinit>()>"],"<androidx.core.provider.FontsContractCompat$FontInfo: void <init>(android.net.Uri,int,int,boolean,int)>":["<androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>","<java.lang.Object: void <init>()>"],"<java.lang.Boolean: java.lang.Boolean valueOf(boolean)>":["<java.lang.RuntimeException: void <init>(java.lang.String)>"],"<androidx.core.content.res.GrowingArrayUtils: java.lang.Object[] append(java.lang.Object[],int,java.lang.Object)>":["<java.lang.Object: java.lang.Class getClass()>","<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>","<androidx.core.content.res.GrowingArrayUtils: int growSize(int)>","<java.lang.System: void <clinit>()>","<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>","<androidx.core.content.res.GrowingArrayUtils: void <clinit>()>"],"<androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager: int getApplyableNightMode()>":["<androidx.appcompat.app.TwilightManager: boolean isNight()>"],"<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: void setDither(boolean)>":["<androidx.appcompat.graphics.drawable.DrawableContainer: void setDither(boolean)>"],"<androidx.core.provider.FontsContractCompat$2: void <init>(androidx.core.content.res.ResourcesCompat$FontCallback,android.os.Handler)>":["<java.lang.Object: void <init>()>"],"<androidx.core.content.PermissionChecker: int checkPermission(android.content.Context,java.lang.String,int,int,java.lang.String)>":["<android.content.ContextWrapper: int checkPermission(java.lang.String,int,int)>","<androidx.core.app.AppOpsManagerCompat: int noteProxyOpNoThrow(android.content.Context,java.lang.String,java.lang.String)>","<android.content.ContextWrapper: android.content.pm.PackageManager getPackageManager()>","<androidx.core.app.AppOpsManagerCompat: java.lang.String permissionToOp(java.lang.String)>"],"<androidx.collection.ArrayMap$1: void <init>(androidx.collection.ArrayMap)>":["<androidx.collection.MapCollections: void <init>()>"],"<androidx.fragment.app.FragmentController: androidx.fragment.app.FragmentController createController(androidx.fragment.app.FragmentHostCallback)>":["<androidx.fragment.app.FragmentController: void <init>(androidx.fragment.app.FragmentHostCallback)>"],"<com.afollestad.rxkprefs.RealPref: java.lang.Object get()>":["<com.afollestad.rxkprefs.RealPref: boolean isSet()>","<com.afollestad.rxkprefs.adapters.IntAdapter: java.lang.Object get(java.lang.String,android.content.SharedPreferences)>","<com.afollestad.rxkprefs.adapters.BooleanAdapter: java.lang.Object get(java.lang.String,android.content.SharedPreferences)>"],"<kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher: void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)>":["<kotlinx.coroutines.DefaultExecutor: void <clinit>()>","<kotlinx.coroutines.EventLoopBase: void <clinit>()>","<kotlinx.coroutines.scheduling.CoroutineScheduler: void dispatch$default(kotlinx.coroutines.scheduling.CoroutineScheduler,java.lang.Runnable,kotlinx.coroutines.scheduling.TaskContext,boolean,int,java.lang.Object)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<kotlinx.coroutines.EventLoopBase: void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)>","<kotlinx.coroutines.scheduling.CoroutineScheduler: void <clinit>()>"],"<androidx.fragment.app.FragmentManagerImpl$StartEnterTransitionListener: void <init>(androidx.fragment.app.BackStackRecord,boolean)>":["<java.lang.Object: void <init>()>"],"<androidx.lifecycle.ViewModelProvider: androidx.lifecycle.ViewModel get(java.lang.Class)>":["<java.lang.StringBuilder: java.lang.String toString()>","<java.lang.IllegalArgumentException: void <init>(java.lang.String)>","<java.lang.Class: java.lang.String getCanonicalName()>","<androidx.lifecycle.ViewModelProvider: androidx.lifecycle.ViewModel get(java.lang.String,java.lang.Class)>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<java.lang.StringBuilder: void <init>()>"],"<java.lang.OutOfMemoryError: void <init>()>":["<java.lang.RuntimeException: void <init>(java.lang.String)>","<java.lang.VirtualMachineError: void <init>()>"],"<androidx.core.content.res.GradientColorInflaterCompat: androidx.core.content.res.GradientColorInflaterCompat$ColorStops checkColors(androidx.core.content.res.GradientColorInflaterCompat$ColorStops,int,int,boolean,int)>":["<androidx.core.content.res.GradientColorInflaterCompat$ColorStops: void <init>(int,int)>","<androidx.core.content.res.GradientColorInflaterCompat$ColorStops: void <init>(int,int,int)>"],"<androidx.loader.app.LoaderManager: androidx.loader.app.LoaderManager getInstance(androidx.lifecycle.LifecycleOwner)>":["<androidx.fragment.app.FragmentActivity: androidx.lifecycle.ViewModelStore getViewModelStore()>","<androidx.loader.app.LoaderManagerImpl: void <init>(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.ViewModelStore)>","<androidx.loader.app.LoaderManagerImpl: void <clinit>()>"],"<io.reactivex.internal.operators.observable.ObservableFilter: void <init>(io.reactivex.ObservableSource,io.reactivex.functions.Predicate)>":["<io.reactivex.internal.operators.observable.AbstractObservableWithUpstream: void <init>(io.reactivex.ObservableSource)>"],"<kotlinx.coroutines.scheduling.NonBlockingContext: kotlinx.coroutines.scheduling.TaskMode getTaskMode()>":["<kotlinx.coroutines.scheduling.NonBlockingContext: void <clinit>()>"],"<androidx.appcompat.app.WindowDecorActionBar: void <clinit>()>":["<android.view.animation.DecelerateInterpolator: void <init>()>","<android.view.animation.AccelerateInterpolator: void <init>()>","<androidx.appcompat.app.WindowDecorActionBar: void <clinit>()>"],"<com.afollestad.rxkprefs.adapters.IntAdapter: java.lang.Integer get(java.lang.String,android.content.SharedPreferences)>":["<java.lang.Integer: void <clinit>()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<java.lang.Integer: java.lang.Integer valueOf(int)>"],"<com.afollestad.photoaffix.di.AppProvideModule_ProvideAppNameFactory: java.lang.Object get()>":["<com.afollestad.photoaffix.di.AppProvideModule_ProvideAppNameFactory: java.lang.String get()>"],"<kotlinx.coroutines.JobKt__JobKt: kotlinx.coroutines.Job Job$default(kotlinx.coroutines.Job,int,java.lang.Object)>":["<kotlinx.coroutines.JobKt: kotlinx.coroutines.Job Job(kotlinx.coroutines.Job)>"],"<kotlin.collections.EmptyList: void <init>()>":["<java.lang.Object: void <init>()>"],"<com.afollestad.rxkprefs.adapters.IntAdapter$Companion: void <init>()>":["<java.lang.Object: void <init>()>"],"<androidx.appcompat.app.AppCompatActivity: void onStart()>":["<androidx.appcompat.app.AppCompatDelegateImpl: void onStart()>","<androidx.appcompat.app.AppCompatActivity: androidx.appcompat.app.AppCompatDelegate getDelegate()>","<androidx.fragment.app.FragmentActivity: void onStart()>"],"<androidx.core.graphics.TypefaceCompatApi26Impl: android.graphics.Typeface createFromResourcesFontFile(android.content.Context,android.content.res.Resources,int,java.lang.String,int)>":["<androidx.core.graphics.TypefaceCompatApi26Impl: java.lang.Object newFamily()>","<androidx.core.graphics.TypefaceCompatApi26Impl: boolean freeze(java.lang.Object)>","<androidx.core.graphics.TypefaceCompatBaseImpl: android.graphics.Typeface createFromResourcesFontFile(android.content.Context,android.content.res.Resources,int,java.lang.String,int)>","<androidx.core.graphics.TypefaceCompatApi26Impl: void abortCreation(java.lang.Object)>","<androidx.core.graphics.TypefaceCompatApi26Impl: boolean addFontFromAssetManager(android.content.Context,java.lang.Object,java.lang.String,int,int,int,android.graphics.fonts.FontVariationAxis[])>","<androidx.core.graphics.TypefaceCompatApi26Impl: boolean isFontFamilyPrivateAPIAvailable()>","<androidx.core.graphics.TypefaceCompatApi26Impl: android.graphics.Typeface createFromFamiliesWithDefault(java.lang.Object)>","<androidx.core.graphics.TypefaceCompatApi28Impl: android.graphics.Typeface createFromFamiliesWithDefault(java.lang.Object)>"],"<com.afollestad.materialdialogs.utils.ColorExtKt: int resolveColor$default(com.afollestad.materialdialogs.MaterialDialog,java.lang.Integer,java.lang.Integer,int,java.lang.Object)>":["<com.afollestad.materialdialogs.utils.ColorExtKt: int resolveColor(com.afollestad.materialdialogs.MaterialDialog,java.lang.Integer,java.lang.Integer)>"],"<kotlinx.coroutines.Job$DefaultImpls: kotlin.coroutines.CoroutineContext minusKey(kotlinx.coroutines.Job,kotlin.coroutines.CoroutineContext$Key)>":["<kotlin.coroutines.CoroutineContext$Element$DefaultImpls: kotlin.coroutines.CoroutineContext minusKey(kotlin.coroutines.CoroutineContext$Element,kotlin.coroutines.CoroutineContext$Key)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<com.afollestad.materialdialogs.utils.FontExtKt: android.graphics.Typeface font$default(com.afollestad.materialdialogs.MaterialDialog,java.lang.Integer,java.lang.Integer,int,java.lang.Object)>":["<com.afollestad.materialdialogs.utils.FontExtKt: android.graphics.Typeface font(com.afollestad.materialdialogs.MaterialDialog,java.lang.Integer,java.lang.Integer)>"],"<androidx.appcompat.app.ActionBar: void <init>()>":["<java.lang.Object: void <init>()>"],"<java.lang.Boolean: void <clinit>()>":["<java.lang.Boolean: void <clinit>()>"],"<androidx.appcompat.widget.AppCompatDrawableManager$AsldcInflateDelegate: android.graphics.drawable.Drawable createFromXmlInner(android.content.Context,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>":["<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>","<androidx.appcompat.app.AppCompatActivity: android.content.res.Resources getResources()>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: void <clinit>()>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat createFromXmlInner(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>"],"<io.reactivex.internal.schedulers.TrampolineScheduler: void <clinit>()>":["<io.reactivex.Scheduler: void <clinit>()>","<io.reactivex.internal.schedulers.TrampolineScheduler: void <clinit>()>","<io.reactivex.internal.schedulers.TrampolineScheduler: void <init>()>"],"<androidx.appcompat.view.ContextThemeWrapper: android.content.res.Resources$Theme getTheme()>":["<androidx.appcompat.view.ContextThemeWrapper: void initializeTheme()>"],"<androidx.fragment.app.FragmentTransitionCompat21: void beginDelayedTransition(android.view.ViewGroup,java.lang.Object)>":["<android.transition.TransitionManager: void beginDelayedTransition(android.view.ViewGroup,android.transition.Transition)>"],"<kotlinx.coroutines.DefaultTimeSource: void unpark(java.lang.Thread)>":["<java.util.concurrent.locks.LockSupport: void unpark(java.lang.Thread)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<kotlinx.coroutines.internal.LockFreeLinkedListNode: void <init>()>":["<java.lang.Object: void <init>()>"],"<com.afollestad.photoaffix.utilities.RealIoManager_Factory: com.afollestad.photoaffix.utilities.RealIoManager provideInstance(javax.inject.Provider,javax.inject.Provider)>":["<com.afollestad.photoaffix.engine.subengines.RealStitchEngine_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideScalePriorityPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.utilities.RealDpConverter_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.engine.RealAffixEngine_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideStackHorizontallyPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.engine.photos.RealPhotoLoader_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.engine.bitmaps.RealBitmapManipulator_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.utilities.RealMediaScanner_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.utilities.RealIoManager: void <init>(android.app.Application,java.lang.String)>","<com.afollestad.photoaffix.utilities.RealIoManager_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideImageSpacingHorizontalPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.di.AppProvideModule_ProvideAppNameFactory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideImageSpacingVerticalPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideBgFillColorPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.presenters.RealMainPresenter_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideRxkPrefsFactory: java.lang.Object get()>","<com.afollestad.photoaffix.engine.subengines.RealDimensionsEngine_Factory: java.lang.Object get()>","<dagger.internal.DoubleCheck: java.lang.Object get()>","<dagger.internal.InstanceFactory: java.lang.Object get()>"],"<androidx.appcompat.widget.ThemeUtils: int getDisabledThemeAttrColor(android.content.Context,int)>":["<android.util.TypedValue: float getFloat()>","<android.content.res.ColorStateList: int getDefaultColor()>","<androidx.appcompat.widget.ThemeUtils: void <clinit>()>","<android.content.res.ColorStateList: int getColorForState(int[],int)>","<androidx.appcompat.widget.ThemeUtils: android.content.res.ColorStateList getThemeAttrColorStateList(android.content.Context,int)>","<android.content.res.ColorStateList: boolean isStateful()>","<android.view.ContextThemeWrapper: android.content.res.Resources$Theme getTheme()>","<androidx.appcompat.widget.ThemeUtils: android.util.TypedValue getTypedValue()>","<androidx.appcompat.widget.ThemeUtils: int getThemeAttrColor(android.content.Context,int,float)>"],"<com.afollestad.rxkprefs.RealRxkPrefsKt: java.lang.Object dumpsterFire()>":["<java.lang.IllegalStateException: void <init>(java.lang.String)>"],"<com.afollestad.photoaffix.presenters.RealMainPresenter_Factory: com.afollestad.photoaffix.presenters.RealMainPresenter provideInstance(javax.inject.Provider,javax.inject.Provider)>":["<com.afollestad.photoaffix.engine.subengines.RealStitchEngine_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideScalePriorityPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.utilities.RealDpConverter_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.engine.RealAffixEngine_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideStackHorizontallyPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.engine.photos.RealPhotoLoader_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.engine.bitmaps.RealBitmapManipulator_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.utilities.RealMediaScanner_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.utilities.RealIoManager_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.di.AppProvideModule_ProvideAppNameFactory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideImageSpacingVerticalPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideImageSpacingHorizontalPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideBgFillColorPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.presenters.RealMainPresenter_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideRxkPrefsFactory: java.lang.Object get()>","<com.afollestad.photoaffix.presenters.RealMainPresenter: void <init>(com.afollestad.photoaffix.utilities.IoManager,com.afollestad.photoaffix.engine.photos.PhotoLoader)>","<com.afollestad.photoaffix.engine.subengines.RealDimensionsEngine_Factory: java.lang.Object get()>","<dagger.internal.DoubleCheck: java.lang.Object get()>","<dagger.internal.InstanceFactory: java.lang.Object get()>","<com.afollestad.photoaffix.presenters.RealMainPresenter: void <clinit>()>"],"<kotlinx.coroutines.DispatchedKt: void resumeDirectWithException(kotlin.coroutines.Continuation,java.lang.Throwable)>":["<kotlin.ResultKt: java.lang.Object createFailure(java.lang.Throwable)>","<kotlin.coroutines.jvm.internal.CompletedContinuation: void resumeWith(java.lang.Object)>","<kotlinx.coroutines.DispatchedContinuation: void resumeWith(java.lang.Object)>","<kotlin.coroutines.jvm.internal.BaseContinuationImpl: void resumeWith(java.lang.Object)>","<kotlin.Result: void <clinit>()>","<kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<kotlinx.coroutines.AbstractCoroutine: void resumeWith(java.lang.Object)>"],"<kotlinx.coroutines.internal.SystemPropsKt: int getAVAILABLE_PROCESSORS()>":["<kotlinx.coroutines.internal.SystemPropsKt: void <clinit>()>"],"<kotlinx.coroutines.JobSupport: void initParentJobInternal$kotlinx_coroutines_core(kotlinx.coroutines.Job)>":["<kotlinx.coroutines.NonDisposableHandle: void <clinit>()>","<java.lang.IllegalStateException: void <init>(java.lang.String)>","<kotlinx.coroutines.JobSupport: kotlinx.coroutines.ChildHandle attachChild(kotlinx.coroutines.ChildJob)>","<kotlinx.coroutines.NonDisposableHandle: void dispose()>","<kotlinx.coroutines.JobNode: void dispose()>","<java.lang.String: java.lang.String toString()>","<kotlinx.coroutines.JobSupport: boolean start()>","<kotlinx.coroutines.JobSupport: boolean isCompleted()>"],"<androidx.fragment.app.FragmentState$1: void <init>()>":["<java.lang.Object: void <init>()>"],"<androidx.collection.LruCache: int safeSizeOf(java.lang.Object,java.lang.Object)>":["<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>","<java.lang.IllegalStateException: void <init>(java.lang.String)>","<java.lang.StringBuilder: java.lang.String toString()>","<java.lang.StringBuilder: void <init>()>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<androidx.collection.LruCache: int sizeOf(java.lang.Object,java.lang.Object)>"],"<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: void setAutoMirrored(boolean)>":["<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void setAutoMirrored(boolean)>","<androidx.core.graphics.drawable.DrawableCompat: void setAutoMirrored(android.graphics.drawable.Drawable,boolean)>"],"<com.afollestad.photoaffix.dialogs.ImageSizingDialog$Companion: void <init>()>":["<java.lang.Object: void <init>()>"],"<com.afollestad.photoaffix.presenters.RealMainPresenter: void <clinit>()>":["<com.afollestad.photoaffix.presenters.RealMainPresenter$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>","<com.afollestad.photoaffix.presenters.RealMainPresenter: void <clinit>()>"],"<androidx.core.graphics.TypefaceCompatApi28Impl: android.graphics.Typeface createFromFamiliesWithDefault(java.lang.Object)>":["<java.lang.Integer: void <clinit>()>","<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>","<java.lang.reflect.Array: void set(java.lang.Object,int,java.lang.Object)>","<java.lang.Integer: java.lang.Integer valueOf(int)>","<java.lang.RuntimeException: void <init>(java.lang.Throwable)>"],"<kotlinx.coroutines.internal.LockFreeTaskQueueCore: kotlinx.coroutines.internal.LockFreeTaskQueueCore access$removeSlowPath(kotlinx.coroutines.internal.LockFreeTaskQueueCore,int,int)>":["<kotlinx.coroutines.internal.LockFreeTaskQueueCore: kotlinx.coroutines.internal.LockFreeTaskQueueCore removeSlowPath(int,int)>"],"<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: boolean setVisible(boolean,boolean)>":["<android.graphics.drawable.LayerDrawable: boolean setVisible(boolean,boolean)>","<android.graphics.drawable.Drawable: boolean setVisible(boolean,boolean)>","<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: boolean setVisible(boolean,boolean)>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: boolean setVisible(boolean,boolean)>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: boolean setVisible(boolean,boolean)>","<androidx.core.graphics.drawable.WrappedDrawableApi14: boolean setVisible(boolean,boolean)>"],"<androidx.core.provider.FontsContractCompat: java.util.Map prepareFontData(android.content.Context,androidx.core.provider.FontsContractCompat$FontInfo[],android.os.CancellationSignal)>":["<java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>","<java.util.HashMap: void <init>()>","<java.util.HashMap: boolean containsKey(java.lang.Object)>","<java.util.Collections: void <clinit>()>","<androidx.core.graphics.TypefaceCompatUtil: java.nio.ByteBuffer mmap(android.content.Context,android.os.CancellationSignal,android.net.Uri)>","<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>"],"<androidx.fragment.app.FragmentTransition: void startTransitions(androidx.fragment.app.FragmentManagerImpl,java.util.ArrayList,java.util.ArrayList,int,int,boolean)>":["<android.view.View: void <clinit>()>","<androidx.fragment.app.FragmentHostCallback: android.content.Context getContext()>","<android.util.SparseArray: int size()>","<android.util.SparseArray: void <init>()>","<androidx.fragment.app.FragmentTransition: void calculateFragments(androidx.fragment.app.BackStackRecord,android.util.SparseArray,boolean)>","<android.util.SparseArray: int keyAt(int)>","<androidx.fragment.app.FragmentTransition: void calculatePopFragments(androidx.fragment.app.BackStackRecord,android.util.SparseArray,boolean)>","<android.view.View: void <init>(android.content.Context)>","<androidx.fragment.app.FragmentTransition: androidx.collection.ArrayMap calculateNameOverrides(int,java.util.ArrayList,java.util.ArrayList,int,int)>","<androidx.fragment.app.FragmentTransition: void <clinit>()>","<androidx.fragment.app.FragmentTransition: void configureTransitionsReordered(androidx.fragment.app.FragmentManagerImpl,int,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.view.View,androidx.collection.ArrayMap)>","<android.util.SparseArray: java.lang.Object valueAt(int)>","<java.util.ArrayList: java.lang.Object get(int)>","<androidx.fragment.app.FragmentTransition: void configureTransitionsOrdered(androidx.fragment.app.FragmentManagerImpl,int,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.view.View,androidx.collection.ArrayMap)>"],"<com.afollestad.assent.internal.Data$Companion: void <init>()>":["<java.lang.Object: void <init>()>"],"<kotlin.collections.EmptyList: void <clinit>()>":["<kotlin.collections.EmptyList: void <init>()>","<kotlin.collections.EmptyList: void <clinit>()>"],"<androidx.fragment.app.OneShotPreDrawListener: androidx.fragment.app.OneShotPreDrawListener add(android.view.View,java.lang.Runnable)>":["<androidx.fragment.app.OneShotPreDrawListener: void <init>(android.view.View,java.lang.Runnable)>"],"<com.afollestad.rxkprefs.adapters.IntAdapter$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>":["<com.afollestad.rxkprefs.adapters.IntAdapter$Companion: void <init>()>"],"<java.lang.Throwable: void setStackTrace(java.lang.StackTraceElement[])>":["<java.lang.RuntimeException: void <init>(java.lang.String)>"],"<kotlinx.coroutines.JobSupport: int startInternal(java.lang.Object)>":["<kotlinx.coroutines.AbstractCoroutine: void onStartInternal$kotlinx_coroutines_core()>","<kotlinx.coroutines.JobSupportKt: void <clinit>()>","<kotlinx.coroutines.JobSupportKt: kotlinx.coroutines.Empty access$getEMPTY_ACTIVE$p()>","<kotlinx.coroutines.JobSupport: void <clinit>()>","<kotlinx.coroutines.JobSupport: void onStartInternal$kotlinx_coroutines_core()>","<kotlinx.coroutines.Empty: boolean isActive()>"],"<java.lang.Integer: java.lang.Integer getInteger(java.lang.String,int)>":["<java.lang.RuntimeException: void <init>(java.lang.String)>"],"<androidx.fragment.app.FragmentManagerImpl$3: void <init>(androidx.fragment.app.FragmentManagerImpl,android.view.ViewGroup,android.view.View,androidx.fragment.app.Fragment)>":["<android.animation.AnimatorListenerAdapter: void <init>()>"],"<androidx.fragment.app.FragmentManagerImpl$AnimationOrAnimator: void <init>(android.animation.Animator)>":["<java.lang.IllegalStateException: void <init>(java.lang.String)>","<java.lang.Object: void <init>()>"],"<com.afollestad.photoaffix.di.DaggerAppComponent$Builder: com.afollestad.photoaffix.di.AppComponent$Builder application(android.app.Application)>":["<com.afollestad.photoaffix.di.DaggerAppComponent$Builder: com.afollestad.photoaffix.di.DaggerAppComponent$Builder application(android.app.Application)>"],"<kotlin.ranges.IntRange$Companion: void <init>()>":["<java.lang.Object: void <init>()>"],"<androidx.appcompat.view.ActionBarPolicy: void <init>(android.content.Context)>":["<java.lang.Object: void <init>()>"],"<kotlinx.coroutines.CommonPool$isGoodCommonPool$1: void <init>()>":["<java.lang.Object: void <init>()>"],"<com.afollestad.assent.Permission: void <clinit>()>":["<com.afollestad.assent.Permission$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>","<com.afollestad.assent.Permission: void <init>(java.lang.String,int,java.lang.String)>","<com.afollestad.assent.Permission: void <clinit>()>"],"<androidx.appcompat.graphics.drawable.DrawableContainer: void setTintList(android.content.res.ColorStateList)>":["<androidx.core.graphics.drawable.DrawableCompat: void setTintList(android.graphics.drawable.Drawable,android.content.res.ColorStateList)>"],"<com.afollestad.photoaffix.di.DaggerAppComponent: void initialize(com.afollestad.photoaffix.di.DaggerAppComponent$Builder)>":["<com.afollestad.photoaffix.utilities.RealMediaScanner_Factory: com.afollestad.photoaffix.utilities.RealMediaScanner_Factory create(javax.inject.Provider)>","<com.afollestad.photoaffix.engine.RealAffixEngine_Factory: com.afollestad.photoaffix.engine.RealAffixEngine_Factory create(javax.inject.Provider,javax.inject.Provider,javax.inject.Provider,javax.inject.Provider)>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideScalePriorityPrefFactory: com.afollestad.photoaffix.prefs.PrefsModule_ProvideScalePriorityPrefFactory create(com.afollestad.photoaffix.prefs.PrefsModule,javax.inject.Provider)>","<dagger.internal.InstanceFactory: void <clinit>()>","<dagger.internal.InstanceFactory: dagger.internal.Factory create(java.lang.Object)>","<com.afollestad.photoaffix.engine.subengines.RealStitchEngine_Factory: com.afollestad.photoaffix.engine.subengines.RealStitchEngine_Factory create(javax.inject.Provider,javax.inject.Provider,javax.inject.Provider,javax.inject.Provider,javax.inject.Provider,javax.inject.Provider,javax.inject.Provider)>","<com.afollestad.photoaffix.di.AppProvideModule_ProvideAppNameFactory: com.afollestad.photoaffix.di.AppProvideModule_ProvideAppNameFactory create(com.afollestad.photoaffix.di.AppProvideModule,javax.inject.Provider)>","<com.afollestad.photoaffix.di.DaggerAppComponent$Builder: com.afollestad.photoaffix.prefs.PrefsModule access$300(com.afollestad.photoaffix.di.DaggerAppComponent$Builder)>","<com.afollestad.photoaffix.di.DaggerAppComponent$Builder: android.app.Application access$100(com.afollestad.photoaffix.di.DaggerAppComponent$Builder)>","<com.afollestad.photoaffix.utilities.RealDpConverter_Factory: com.afollestad.photoaffix.utilities.RealDpConverter_Factory create(javax.inject.Provider)>","<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideBgFillColorPrefFactory: com.afollestad.photoaffix.prefs.PrefsModule_ProvideBgFillColorPrefFactory create(com.afollestad.photoaffix.prefs.PrefsModule,javax.inject.Provider)>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideRxkPrefsFactory: com.afollestad.photoaffix.prefs.PrefsModule_ProvideRxkPrefsFactory create(com.afollestad.photoaffix.prefs.PrefsModule,javax.inject.Provider)>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideStackHorizontallyPrefFactory: com.afollestad.photoaffix.prefs.PrefsModule_ProvideStackHorizontallyPrefFactory create(com.afollestad.photoaffix.prefs.PrefsModule,javax.inject.Provider)>","<dagger.internal.DoubleCheck: void <clinit>()>","<com.afollestad.photoaffix.utilities.RealIoManager_Factory: com.afollestad.photoaffix.utilities.RealIoManager_Factory create(javax.inject.Provider,javax.inject.Provider)>","<com.afollestad.photoaffix.di.DaggerAppComponent$Builder: com.afollestad.photoaffix.di.AppProvideModule access$200(com.afollestad.photoaffix.di.DaggerAppComponent$Builder)>","<com.afollestad.photoaffix.engine.bitmaps.RealBitmapManipulator_Factory: com.afollestad.photoaffix.engine.bitmaps.RealBitmapManipulator_Factory create(javax.inject.Provider)>","<com.afollestad.photoaffix.engine.photos.RealPhotoLoader_Factory: com.afollestad.photoaffix.engine.photos.RealPhotoLoader_Factory create(javax.inject.Provider)>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideImageSpacingHorizontalPrefFactory: com.afollestad.photoaffix.prefs.PrefsModule_ProvideImageSpacingHorizontalPrefFactory create(com.afollestad.photoaffix.prefs.PrefsModule,javax.inject.Provider)>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideImageSpacingVerticalPrefFactory: com.afollestad.photoaffix.prefs.PrefsModule_ProvideImageSpacingVerticalPrefFactory create(com.afollestad.photoaffix.prefs.PrefsModule,javax.inject.Provider)>","<com.afollestad.photoaffix.engine.subengines.RealDimensionsEngine_Factory: com.afollestad.photoaffix.engine.subengines.RealDimensionsEngine_Factory create(javax.inject.Provider,javax.inject.Provider,javax.inject.Provider,javax.inject.Provider,javax.inject.Provider)>","<com.afollestad.photoaffix.presenters.RealMainPresenter_Factory: com.afollestad.photoaffix.presenters.RealMainPresenter_Factory create(javax.inject.Provider,javax.inject.Provider)>"],"<com.afollestad.assent.internal.Data: void <clinit>()>":["<com.afollestad.assent.internal.Data: void <clinit>()>","<java.lang.Object: void <init>()>","<com.afollestad.assent.internal.Data$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>"],"<androidx.appcompat.content.res.AppCompatResources: android.content.res.ColorStateList getColorStateList(android.content.Context,int)>":["<android.content.Context: android.content.res.ColorStateList getColorStateList(int)>","<androidx.appcompat.content.res.AppCompatResources: android.content.res.ColorStateList getCachedColorStateList(android.content.Context,int)>","<androidx.core.content.ContextCompat: void <clinit>()>","<android.os.Build$VERSION: void <clinit>()>","<androidx.appcompat.content.res.AppCompatResources: void addColorStateListToCache(android.content.Context,int,android.content.res.ColorStateList)>","<androidx.appcompat.content.res.AppCompatResources: void <clinit>()>","<androidx.appcompat.content.res.AppCompatResources: android.content.res.ColorStateList inflateColorStateList(android.content.Context,int)>","<androidx.core.content.ContextCompat: android.content.res.ColorStateList getColorStateList(android.content.Context,int)>"],"<io.reactivex.internal.schedulers.SchedulerPoolFactory$PurgeProperties: void load(java.util.Properties)>":["<java.lang.Boolean: void <clinit>()>","<java.lang.Integer: void <clinit>()>","<java.lang.Integer: int parseInt(java.lang.String)>","<java.lang.Boolean: boolean parseBoolean(java.lang.String)>"],"<com.afollestad.assent.internal.ExtensionsKt: boolean equalsPermissions(java.util.List,com.afollestad.assent.Permission[])>":["<com.afollestad.assent.internal.ExtensionsKt: boolean equalsPermissions(java.util.List,java.util.List)>","<kotlin.collections.ArraysKt___ArraysKt: java.util.List toList(java.lang.Object[])>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<androidx.appcompat.graphics.drawable.DrawableContainer: void animate(boolean)>":["<android.graphics.drawable.LayerDrawable: boolean setVisible(boolean,boolean)>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: void setAlpha(int)>","<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: void setAlpha(int)>","<android.graphics.drawable.Drawable: void scheduleSelf(java.lang.Runnable,long)>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void setAlpha(int)>","<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: boolean setVisible(boolean,boolean)>","<android.graphics.drawable.LayerDrawable: void setAlpha(int)>","<android.os.SystemClock: long uptimeMillis()>","<androidx.core.graphics.drawable.WrappedDrawableApi14: void setAlpha(int)>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: boolean setVisible(boolean,boolean)>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: boolean setVisible(boolean,boolean)>","<androidx.core.graphics.drawable.WrappedDrawableApi14: boolean setVisible(boolean,boolean)>"],"<androidx.collection.LruCache: void trimToSize(int)>":["<java.lang.Object: java.lang.Class getClass()>","<java.lang.IllegalStateException: void <init>(java.lang.String)>","<java.lang.StringBuilder: java.lang.String toString()>","<java.util.LinkedHashMap: java.util.Set entrySet()>","<androidx.collection.LruCache: void entryRemoved(boolean,java.lang.Object,java.lang.Object,java.lang.Object)>","<java.util.LinkedHashMap: java.lang.Object remove(java.lang.Object)>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<java.lang.StringBuilder: void <init>()>","<androidx.collection.LruCache: int safeSizeOf(java.lang.Object,java.lang.Object)>","<java.util.LinkedHashMap: boolean isEmpty()>"],"<androidx.fragment.app.FragmentTransition: androidx.fragment.app.FragmentTransition$FragmentContainerTransition ensureContainer(androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.util.SparseArray,int)>":["<android.util.SparseArray: void put(int,java.lang.Object)>","<androidx.fragment.app.FragmentTransition$FragmentContainerTransition: void <init>()>"],"<androidx.appcompat.widget.AppCompatDrawableManager: boolean addDrawableToCache(android.content.Context,long,android.graphics.drawable.Drawable)>":["<android.graphics.drawable.LayerDrawable: android.graphics.drawable.Drawable$ConstantState getConstantState()>","<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: android.graphics.drawable.Drawable$ConstantState getConstantState()>","<java.lang.ref.WeakReference: void <init>(java.lang.Object)>","<androidx.collection.LongSparseArray: void put(long,java.lang.Object)>","<androidx.collection.LongSparseArray: void <clinit>()>","<androidx.appcompat.graphics.drawable.DrawableContainer: android.graphics.drawable.Drawable$ConstantState getConstantState()>","<java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable$ConstantState getConstantState()>","<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>","<androidx.core.graphics.drawable.WrappedDrawableApi14: android.graphics.drawable.Drawable$ConstantState getConstantState()>","<androidx.collection.LongSparseArray: void <init>()>"],"<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void setHotspotBounds(int,int,int,int)>":["<androidx.vectordrawable.graphics.drawable.VectorDrawableCommon: void setHotspotBounds(int,int,int,int)>"],"<androidx.core.graphics.TypefaceCompatUtil: java.io.File getTempFile(android.content.Context)>":["<android.os.Process: int myTid()>","<java.lang.StringBuilder: java.lang.String toString()>","<android.content.ContextWrapper: java.io.File getCacheDir()>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<java.lang.StringBuilder: void <init>()>","<android.os.Process: int myPid()>","<java.io.File: void <clinit>()>","<java.lang.StringBuilder: java.lang.StringBuilder append(int)>","<java.io.File: boolean createNewFile()>","<java.io.File: void <init>(java.io.File,java.lang.String)>"],"<androidx.core.content.res.TypedArrayUtils: java.lang.String getNamedString(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int)>":["<androidx.core.content.res.TypedArrayUtils: boolean hasAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>"],"<androidx.appcompat.widget.ViewUtils: void makeOptionalFitsSystemWindows(android.view.View)>":["<android.util.Log: int d(java.lang.String,java.lang.String)>","<android.os.Build$VERSION: void <clinit>()>","<android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)>"],"<kotlinx.coroutines.CoroutineId$Key: void <init>()>":["<java.lang.Object: void <init>()>"],"<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void doPark(long)>":["<java.util.concurrent.locks.LockSupport: void parkNanos(long)>","<kotlinx.coroutines.scheduling.CoroutineScheduler: void access$parkedWorkersStackPush(kotlinx.coroutines.scheduling.CoroutineScheduler,kotlinx.coroutines.scheduling.CoroutineScheduler$Worker)>","<kotlinx.coroutines.scheduling.CoroutineScheduler: void <clinit>()>"],"<com.afollestad.photoaffix.engine.subengines.RealStitchEngine$paintCreator$1: void <clinit>()>":["<com.afollestad.photoaffix.engine.subengines.RealStitchEngine$paintCreator$1: void <clinit>()>","<com.afollestad.photoaffix.engine.subengines.RealStitchEngine$paintCreator$1: void <init>()>"],"<kotlinx.coroutines.scheduling.CoroutineScheduler: void <init>(int,int,long,java.lang.String)>":["<kotlinx.coroutines.scheduling.GlobalQueue: void <init>()>","<java.lang.IllegalArgumentException: void <init>(java.lang.String)>","<java.lang.Object: void <init>()>","<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void <clinit>()>","<java.lang.StringBuilder: void <init>()>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<java.lang.String: java.lang.String toString()>","<java.util.Random: void <init>()>","<java.lang.StringBuilder: java.lang.StringBuilder append(int)>","<java.lang.StringBuilder: java.lang.StringBuilder append(long)>","<java.util.concurrent.Semaphore: void <init>(int,boolean)>","<java.lang.StringBuilder: java.lang.String toString()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<com.afollestad.photoaffix.App: com.afollestad.photoaffix.di.AppComponent getAppComponent()>":["<kotlin.jvm.internal.Intrinsics: void throwUninitializedPropertyAccessException(java.lang.String)>"],"<androidx.lifecycle.LifecycleRegistry: void pushParentState(androidx.lifecycle.Lifecycle$State)>":["<java.util.ArrayList: boolean add(java.lang.Object)>"],"<java.lang.IndexOutOfBoundsException: void <init>()>":["<java.lang.RuntimeException: void <init>(java.lang.String)>","<java.lang.RuntimeException: void <init>()>"],"<kotlinx.coroutines.internal.ThreadLocalWithInitialValue: void <init>(kotlin.jvm.functions.Function0)>":["<java.lang.ThreadLocal: void <init>()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<androidx.fragment.app.FragmentActivity: void onStop()>":["<android.app.Activity: void onStop()>","<androidx.fragment.app.FragmentActivity: void markFragmentsCreated()>","<androidx.fragment.app.FragmentController: void dispatchStop()>"],"<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: float getAlpha()>":["<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: int getRootAlpha()>"],"<com.afollestad.photoaffix.views.ActivityExtKt: void unlockOrientation(android.app.Activity)>":["<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<android.app.Activity: void setRequestedOrientation(int)>"],"<androidx.fragment.app.FragmentController: androidx.fragment.app.FragmentManager getSupportFragmentManager()>":["<androidx.fragment.app.FragmentHostCallback: androidx.fragment.app.FragmentManagerImpl getFragmentManagerImpl()>"],"<kotlin.text.StringsKt__StringNumberConversionsKt: java.lang.Long toLongOrNull(java.lang.String)>":["<kotlin.text.StringsKt__StringNumberConversionsKt: java.lang.Long toLongOrNull(java.lang.String,int)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<kotlinx.coroutines.CoroutineContextKt: kotlinx.coroutines.CoroutineDispatcher createDefaultDispatcher()>":["<kotlinx.coroutines.CoroutineContextKt: void <clinit>()>","<kotlinx.coroutines.scheduling.DefaultScheduler: void <clinit>()>","<kotlinx.coroutines.CommonPool: void <clinit>()>"],"<kotlinx.coroutines.JobSupport: boolean makeCancelling(java.lang.Object)>":["<kotlinx.coroutines.JobSupport: java.lang.Throwable createCauseException(java.lang.Object)>","<kotlinx.coroutines.JobSupport: java.lang.Object getState$kotlinx_coroutines_core()>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<java.lang.StringBuilder: void <init>()>","<java.lang.String: java.lang.String toString()>","<kotlinx.coroutines.JobSupport: void notifyCancelling(kotlinx.coroutines.NodeList,java.lang.Throwable)>","<kotlinx.coroutines.JobSupport: boolean tryMakeCancelling(kotlinx.coroutines.Incomplete,java.lang.Throwable)>","<kotlinx.coroutines.CompletedExceptionally: void <init>(java.lang.Throwable)>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>","<java.lang.IllegalStateException: void <init>(java.lang.String)>","<java.lang.StringBuilder: java.lang.String toString()>","<kotlinx.coroutines.JobSupport: int tryMakeCompleting(java.lang.Object,java.lang.Object,int)>","<kotlinx.coroutines.Empty: boolean isActive()>"],"<androidx.fragment.app.FragmentTransition: java.lang.Object getExitTransition(androidx.fragment.app.FragmentTransitionImpl,androidx.fragment.app.Fragment,boolean)>":["<androidx.fragment.app.FragmentTransitionCompat21: java.lang.Object cloneTransition(java.lang.Object)>"],"<androidx.core.graphics.TypefaceCompatApi26Impl: android.graphics.Typeface createFromFontFamilyFilesResourceEntry(android.content.Context,androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry,android.content.res.Resources,int)>":["<androidx.core.graphics.TypefaceCompatApi26Impl: java.lang.Object newFamily()>","<androidx.core.graphics.TypefaceCompatApi26Impl: boolean freeze(java.lang.Object)>","<androidx.core.graphics.TypefaceCompatApi26Impl: void abortCreation(java.lang.Object)>","<android.graphics.fonts.FontVariationAxis: android.graphics.fonts.FontVariationAxis[] fromFontVariationSettings(java.lang.String)>","<androidx.core.graphics.TypefaceCompatApi26Impl: boolean addFontFromAssetManager(android.content.Context,java.lang.Object,java.lang.String,int,int,int,android.graphics.fonts.FontVariationAxis[])>","<androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry: androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry[] getEntries()>","<androidx.core.graphics.TypefaceCompatBaseImpl: android.graphics.Typeface createFromFontFamilyFilesResourceEntry(android.content.Context,androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry,android.content.res.Resources,int)>","<androidx.core.graphics.TypefaceCompatApi26Impl: boolean isFontFamilyPrivateAPIAvailable()>","<androidx.core.graphics.TypefaceCompatApi26Impl: android.graphics.Typeface createFromFamiliesWithDefault(java.lang.Object)>","<androidx.core.graphics.TypefaceCompatApi28Impl: android.graphics.Typeface createFromFamiliesWithDefault(java.lang.Object)>"],"<kotlinx.coroutines.JobNode: void dispose()>":["<kotlin.TypeCastException: void <init>(java.lang.String)>","<kotlinx.coroutines.JobSupport: void removeNode$kotlinx_coroutines_core(kotlinx.coroutines.JobNode)>"],"<io.reactivex.internal.functions.Functions$ErrorConsumer: void <init>()>":["<java.lang.Object: void <init>()>"],"<androidx.core.provider.FontsContractCompat$FontFamilyResult: void <init>(int,androidx.core.provider.FontsContractCompat$FontInfo[])>":["<java.lang.Object: void <init>()>"],"<kotlin.ranges.IntProgression$Companion: void <init>()>":["<java.lang.Object: void <init>()>"],"<androidx.core.graphics.drawable.WrappedDrawableApi14: boolean setVisible(boolean,boolean)>":["<android.graphics.drawable.LayerDrawable: boolean setVisible(boolean,boolean)>","<android.graphics.drawable.Drawable: boolean setVisible(boolean,boolean)>","<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: boolean setVisible(boolean,boolean)>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: boolean setVisible(boolean,boolean)>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: boolean setVisible(boolean,boolean)>","<androidx.core.graphics.drawable.WrappedDrawableApi14: boolean setVisible(boolean,boolean)>"],"<kotlinx.coroutines.internal.ThreadContextKt$restoreState$1: void <clinit>()>":["<kotlinx.coroutines.internal.ThreadContextKt$restoreState$1: void <init>()>","<kotlinx.coroutines.internal.ThreadContextKt$restoreState$1: void <clinit>()>"],"<androidx.core.graphics.drawable.WrappedDrawableApi14: void setColorFilter(android.graphics.ColorFilter)>":["<androidx.core.graphics.drawable.WrappedDrawableApi14: void setColorFilter(android.graphics.ColorFilter)>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: void setColorFilter(android.graphics.ColorFilter)>","<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: void setColorFilter(android.graphics.ColorFilter)>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void setColorFilter(android.graphics.ColorFilter)>","<android.graphics.drawable.LayerDrawable: void setColorFilter(android.graphics.ColorFilter)>"],"<com.afollestad.photoaffix.engine.photos.RealPhotoLoader_Factory: com.afollestad.photoaffix.engine.photos.RealPhotoLoader provideInstance(javax.inject.Provider)>":["<com.afollestad.photoaffix.engine.subengines.RealStitchEngine_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideScalePriorityPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.utilities.RealDpConverter_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.engine.RealAffixEngine_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.engine.photos.RealPhotoLoader: void <init>(android.app.Application)>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideStackHorizontallyPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.engine.bitmaps.RealBitmapManipulator_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.engine.photos.RealPhotoLoader_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.utilities.RealMediaScanner_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.utilities.RealIoManager_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideImageSpacingHorizontalPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideImageSpacingVerticalPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.di.AppProvideModule_ProvideAppNameFactory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideBgFillColorPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.presenters.RealMainPresenter_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideRxkPrefsFactory: java.lang.Object get()>","<dagger.internal.DoubleCheck: java.lang.Object get()>","<com.afollestad.photoaffix.engine.subengines.RealDimensionsEngine_Factory: java.lang.Object get()>","<dagger.internal.InstanceFactory: java.lang.Object get()>"],"<androidx.fragment.app.FragmentActivity: void markFragmentsCreated()>":["<androidx.fragment.app.FragmentActivity: boolean markState(androidx.fragment.app.FragmentManager,androidx.lifecycle.Lifecycle$State)>","<androidx.lifecycle.Lifecycle$State: void <clinit>()>","<androidx.fragment.app.FragmentActivity: androidx.fragment.app.FragmentManager getSupportFragmentManager()>"],"<kotlin.coroutines.AbstractCoroutineContextElement: void <init>(kotlin.coroutines.CoroutineContext$Key)>":["<java.lang.Object: void <init>()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<kotlin.jvm.internal.TypeIntrinsics: void throwCce(java.lang.String)>":["<kotlin.jvm.internal.TypeIntrinsics: java.lang.ClassCastException throwCce(java.lang.ClassCastException)>","<java.lang.ClassCastException: void <init>(java.lang.String)>"],"<java.lang.Long: java.lang.Long valueOf(long)>":["<java.lang.RuntimeException: void <init>(java.lang.String)>"],"<androidx.core.util.LogWriter: void <init>(java.lang.String)>":["<java.io.Writer: void <init>()>","<java.lang.StringBuilder: void <init>(int)>"],"<kotlinx.coroutines.CommonPool: java.util.concurrent.ExecutorService createPool()>":["<java.lang.System: java.lang.SecurityManager getSecurityManager()>","<java.lang.Integer: void <clinit>()>","<java.lang.System: void <clinit>()>","<kotlinx.coroutines.CommonPool: int getParallelism()>","<java.lang.Integer: java.lang.Integer valueOf(int)>","<kotlinx.coroutines.CommonPool: void <clinit>()>","<kotlinx.coroutines.CommonPool: java.util.concurrent.ExecutorService createPlainPool()>","<kotlinx.coroutines.CommonPool: boolean isGoodCommonPool$kotlinx_coroutines_core(java.lang.Class,java.util.concurrent.ExecutorService)>","<java.lang.Class: java.lang.Class forName(java.lang.String)>"],"<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: void setAutoMirrored(boolean)>":["<androidx.appcompat.graphics.drawable.DrawableContainer: void setAutoMirrored(boolean)>"],"<androidx.lifecycle.LifecycleRegistry: void sync()>":["<android.util.Log: int w(java.lang.String,java.lang.String)>","<androidx.lifecycle.LifecycleRegistry: boolean isSynced()>","<androidx.lifecycle.LifecycleRegistry: void backwardPass(androidx.lifecycle.LifecycleOwner)>","<java.lang.Enum: int compareTo(java.lang.Enum)>","<androidx.lifecycle.LifecycleRegistry: void forwardPass(androidx.lifecycle.LifecycleOwner)>","<androidx.arch.core.internal.SafeIterableMap: java.util.Map$Entry newest()>","<androidx.arch.core.internal.SafeIterableMap: java.util.Map$Entry eldest()>","<java.lang.ref.WeakReference: java.lang.Object get()>"],"<androidx.appcompat.app.AppCompatActivity: void onPostCreate(android.os.Bundle)>":["<androidx.appcompat.app.AppCompatActivity: androidx.appcompat.app.AppCompatDelegate getDelegate()>","<android.app.Activity: void onPostCreate(android.os.Bundle)>","<androidx.appcompat.app.AppCompatDelegateImpl: void onPostCreate(android.os.Bundle)>"],"<io.reactivex.internal.operators.observable.ObservableCreate: void <init>(io.reactivex.ObservableOnSubscribe)>":["<io.reactivex.Observable: void <init>()>"],"<androidx.fragment.app.FragmentManagerImpl: void dispatchStateChange(int)>":["<androidx.fragment.app.FragmentManagerImpl: boolean execPendingActions()>","<androidx.fragment.app.FragmentManagerImpl: void moveToState(int,boolean)>"],"<com.afollestad.photoaffix.adapters.PhotoGridAdapter: void <clinit>()>":["<com.afollestad.photoaffix.adapters.PhotoGridAdapter$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>","<com.afollestad.photoaffix.adapters.PhotoGridAdapter: void <clinit>()>"],"<androidx.core.graphics.TypefaceCompatBaseImpl$2: boolean isItalic(java.lang.Object)>":["<androidx.core.graphics.TypefaceCompatBaseImpl$2: boolean isItalic(androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry)>"],"<dagger.internal.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>":["<java.lang.NullPointerException: void <init>()>"],"<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.Task createTask$kotlinx_coroutines_core(java.lang.Runnable,kotlinx.coroutines.scheduling.TaskContext)>":["<kotlinx.coroutines.scheduling.TasksKt: void <clinit>()>","<kotlinx.coroutines.scheduling.NanoTimeSource: long nanoTime()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<kotlinx.coroutines.scheduling.TaskImpl: void <init>(java.lang.Runnable,long,kotlinx.coroutines.scheduling.TaskContext)>"],"<kotlinx.coroutines.JobSupport: java.lang.Throwable createCauseException(java.lang.Object)>":["<kotlinx.coroutines.JobSupport: java.lang.Throwable getChildJobCancellationCause()>","<kotlin.TypeCastException: void <init>(java.lang.String)>","<kotlinx.coroutines.JobSupport: kotlinx.coroutines.JobCancellationException createJobCancellationException()>"],"<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: void <init>()>":["<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: void <init>()>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: void <clinit>()>","<android.graphics.drawable.Drawable$ConstantState: void <init>()>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void <clinit>()>"],"<androidx.core.graphics.drawable.WrappedDrawableApi21: void setTintMode(android.graphics.PorterDuff$Mode)>":["<androidx.core.graphics.drawable.WrappedDrawableApi21: boolean isCompatTintEnabled()>","<androidx.core.graphics.drawable.WrappedDrawableApi21: void setTintMode(android.graphics.PorterDuff$Mode)>","<androidx.core.graphics.drawable.WrappedDrawableApi14: void setTintMode(android.graphics.PorterDuff$Mode)>","<android.graphics.drawable.LayerDrawable: void setTintMode(android.graphics.PorterDuff$Mode)>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: void setTintMode(android.graphics.PorterDuff$Mode)>","<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: void setTintMode(android.graphics.PorterDuff$Mode)>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void setTintMode(android.graphics.PorterDuff$Mode)>"],"<androidx.fragment.app.FragmentTransitionCompat21: void scheduleHideFragmentView(java.lang.Object,android.view.View,java.util.ArrayList)>":["<androidx.fragment.app.FragmentTransitionCompat21$2: void <init>(androidx.fragment.app.FragmentTransitionCompat21,android.view.View,java.util.ArrayList)>","<android.transition.TransitionSet: android.transition.Transition addListener(android.transition.Transition$TransitionListener)>"],"<kotlin.coroutines.intrinsics.CoroutineSingletons: void <init>(java.lang.String,int)>":["<java.lang.Enum: void <init>(java.lang.String,int)>"],"<kotlin.coroutines.CoroutineContext$plus$1: kotlin.coroutines.CoroutineContext invoke(kotlin.coroutines.CoroutineContext,kotlin.coroutines.CoroutineContext$Element)>":["<kotlin.coroutines.CombinedContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>","<kotlin.coroutines.EmptyCoroutineContext: kotlin.coroutines.CoroutineContext minusKey(kotlin.coroutines.CoroutineContext$Key)>","<kotlinx.coroutines.CoroutineId: kotlin.coroutines.CoroutineContext minusKey(kotlin.coroutines.CoroutineContext$Key)>","<kotlinx.coroutines.JobSupport: kotlin.coroutines.CoroutineContext$Key getKey()>","<kotlin.coroutines.ContinuationInterceptor: void <clinit>()>","<kotlinx.coroutines.JobSupport: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>","<kotlin.coroutines.EmptyCoroutineContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>","<kotlin.coroutines.EmptyCoroutineContext: void <clinit>()>","<kotlin.coroutines.CombinedContext: void <init>(kotlin.coroutines.CoroutineContext,kotlin.coroutines.CoroutineContext$Element)>","<kotlinx.coroutines.CoroutineId: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>","<kotlin.coroutines.CombinedContext: kotlin.coroutines.CoroutineContext minusKey(kotlin.coroutines.CoroutineContext$Key)>","<kotlinx.coroutines.CoroutineDispatcher: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<kotlinx.coroutines.JobSupport: kotlin.coroutines.CoroutineContext minusKey(kotlin.coroutines.CoroutineContext$Key)>","<kotlin.coroutines.AbstractCoroutineContextElement: kotlin.coroutines.CoroutineContext$Key getKey()>","<kotlinx.coroutines.CoroutineDispatcher: kotlin.coroutines.CoroutineContext minusKey(kotlin.coroutines.CoroutineContext$Key)>"],"<io.reactivex.internal.schedulers.RxThreadFactory: void <init>(java.lang.String)>":["<io.reactivex.internal.schedulers.RxThreadFactory: void <init>(java.lang.String,int,boolean)>"],"<androidx.lifecycle.ViewModelStore: androidx.lifecycle.ViewModel get(java.lang.String)>":["<java.util.HashMap: java.lang.Object get(java.lang.Object)>"],"<androidx.appcompat.widget.VectorEnabledTintResources: void <init>(android.content.Context,android.content.res.Resources)>":["<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>","<android.content.res.Resources: android.content.res.AssetManager getAssets()>","<android.content.res.Resources: android.content.res.Configuration getConfiguration()>","<java.lang.ref.WeakReference: void <init>(java.lang.Object)>","<android.content.res.Resources: void <init>(android.content.res.AssetManager,android.util.DisplayMetrics,android.content.res.Configuration)>"],"<kotlinx.coroutines.CommonPool: void <clinit>()>":["<java.lang.System: java.lang.String getProperty(java.lang.String)>","<java.lang.IllegalStateException: void <init>(java.lang.String)>","<java.lang.StringBuilder: java.lang.String toString()>","<java.lang.System: void <clinit>()>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<java.lang.StringBuilder: void <init>()>","<kotlinx.coroutines.CommonPool: void <init>()>","<kotlin.text.StringsKt__StringNumberConversionsKt: java.lang.Integer toIntOrNull(java.lang.String)>","<kotlinx.coroutines.CommonPool: void <clinit>()>"],"<com.afollestad.photoaffix.prefs.PrefsModule_ProvideImageSpacingHorizontalPrefFactory: java.lang.Object get()>":["<com.afollestad.photoaffix.prefs.PrefsModule_ProvideImageSpacingHorizontalPrefFactory: com.afollestad.rxkprefs.Pref get()>"],"<kotlinx.coroutines.internal.ThreadContextKt$findOne$1: void <clinit>()>":["<kotlinx.coroutines.internal.ThreadContextKt$findOne$1: void <clinit>()>","<kotlinx.coroutines.internal.ThreadContextKt$findOne$1: void <init>()>"],"<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>":["<java.lang.Exception: void <init>()>","<java.lang.RuntimeException: void <init>(java.lang.String)>"],"<androidx.fragment.app.FragmentTransition: java.lang.String findKeyForValue(androidx.collection.ArrayMap,java.lang.String)>":["<androidx.collection.SimpleArrayMap: java.lang.Object keyAt(int)>","<java.lang.String: boolean equals(java.lang.Object)>","<androidx.collection.SimpleArrayMap: java.lang.Object valueAt(int)>","<androidx.collection.SimpleArrayMap: int size()>"],"<kotlinx.coroutines.UndispatchedEventLoop: void <init>()>":["<java.lang.Object: void <init>()>"],"<androidx.appcompat.widget.AppCompatDrawableManager: androidx.appcompat.widget.AppCompatDrawableManager get()>":["<androidx.appcompat.widget.AppCompatDrawableManager: void installDefaultInflateDelegates(androidx.appcompat.widget.AppCompatDrawableManager)>","<androidx.appcompat.widget.AppCompatDrawableManager: void <clinit>()>","<androidx.appcompat.widget.AppCompatDrawableManager: void <init>()>"],"<androidx.core.content.res.ColorStateListInflaterCompat: android.content.res.TypedArray obtainAttributes(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,int[])>":["<android.content.res.Resources: android.content.res.TypedArray obtainAttributes(android.util.AttributeSet,int[])>"],"<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat$AnimatedVectorDrawableDelegateState: android.graphics.drawable.Drawable newDrawable()>":["<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: void <init>()>"],"<kotlin.text.StringsKt__StringsKt: int indexOf$default(java.lang.CharSequence,char,int,boolean,int,java.lang.Object)>":["<kotlin.text.StringsKt__StringsKt: int indexOf(java.lang.CharSequence,char,int,boolean)>"],"<androidx.fragment.app.FragmentManagerImpl: void <clinit>()>":["<android.view.animation.DecelerateInterpolator: void <init>(float)>","<android.view.animation.AccelerateInterpolator: void <init>(float)>","<androidx.fragment.app.FragmentManagerImpl: void <clinit>()>"],"<androidx.appcompat.app.AppCompatDelegateImpl$3: void <init>(androidx.appcompat.app.AppCompatDelegateImpl)>":["<java.lang.Object: void <init>()>"],"<androidx.core.app.ComponentActivity: void <init>()>":["<androidx.collection.SimpleArrayMap: void <init>()>","<android.app.Activity: void <init>()>","<androidx.lifecycle.LifecycleRegistry: void <init>(androidx.lifecycle.LifecycleOwner)>"],"<androidx.fragment.app.FragmentTransitionImpl: void captureTransitioningViews(java.util.ArrayList,android.view.View)>":["<androidx.core.view.ViewGroupCompat: boolean isTransitionGroup(android.view.ViewGroup)>","<androidx.fragment.app.FragmentTransitionImpl: void captureTransitioningViews(java.util.ArrayList,android.view.View)>","<java.util.ArrayList: boolean add(java.lang.Object)>"],"<io.reactivex.plugins.RxJavaPlugins: io.reactivex.observables.ConnectableObservable onAssembly(io.reactivex.observables.ConnectableObservable)>":["<io.reactivex.plugins.RxJavaPlugins: java.lang.Object apply(io.reactivex.functions.Function,java.lang.Object)>"],"<kotlinx.coroutines.JobSupport: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>":["<kotlinx.coroutines.Job$DefaultImpls: kotlin.coroutines.CoroutineContext$Element get(kotlinx.coroutines.Job,kotlin.coroutines.CoroutineContext$Key)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<androidx.fragment.app.BackStackRecord: void <init>(androidx.fragment.app.FragmentManagerImpl)>":["<java.util.ArrayList: void <init>()>","<androidx.fragment.app.FragmentTransaction: void <init>()>"],"<androidx.vectordrawable.graphics.drawable.PathInterpolatorCompat: void initQuad(float,float)>":["<android.graphics.Path: void <init>()>","<android.graphics.Path: void quadTo(float,float,float,float)>","<androidx.vectordrawable.graphics.drawable.PathInterpolatorCompat: void initPath(android.graphics.Path)>","<android.graphics.Path: void moveTo(float,float)>"],"<kotlinx.coroutines.CoroutineId: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>":["<kotlinx.coroutines.ThreadContextElement$DefaultImpls: kotlin.coroutines.CoroutineContext$Element get(kotlinx.coroutines.ThreadContextElement,kotlin.coroutines.CoroutineContext$Key)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<androidx.core.provider.SelfDestructiveThread: java.lang.Object postAndWait(java.util.concurrent.Callable,int)>":["<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>","<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>","<java.util.concurrent.TimeUnit: void <clinit>()>","<java.util.concurrent.locks.ReentrantLock: void lock()>","<java.util.concurrent.atomic.AtomicBoolean: boolean get()>","<java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.Condition newCondition()>","<java.util.concurrent.locks.ReentrantLock: void unlock()>","<java.lang.InterruptedException: void <init>(java.lang.String)>","<androidx.core.provider.SelfDestructiveThread: void post(java.lang.Runnable)>","<java.util.concurrent.locks.ReentrantLock: void <init>()>","<androidx.core.provider.SelfDestructiveThread$3: void <init>(androidx.core.provider.SelfDestructiveThread,java.util.concurrent.atomic.AtomicReference,java.util.concurrent.Callable,java.util.concurrent.locks.ReentrantLock,java.util.concurrent.atomic.AtomicBoolean,java.util.concurrent.locks.Condition)>","<java.util.concurrent.atomic.AtomicReference: void <init>()>"],"<androidx.core.app.ComponentActivity: void onSaveInstanceState(android.os.Bundle)>":["<androidx.lifecycle.Lifecycle$State: void <clinit>()>","<androidx.lifecycle.LifecycleRegistry: void markState(androidx.lifecycle.Lifecycle$State)>","<android.app.Activity: void onSaveInstanceState(android.os.Bundle)>"],"<androidx.fragment.app.FragmentTransitionCompat21: void scheduleRemoveTargets(java.lang.Object,java.lang.Object,java.util.ArrayList,java.lang.Object,java.util.ArrayList,java.lang.Object,java.util.ArrayList)>":["<androidx.fragment.app.FragmentTransitionCompat21$3: void <init>(androidx.fragment.app.FragmentTransitionCompat21,java.lang.Object,java.util.ArrayList,java.lang.Object,java.util.ArrayList,java.lang.Object,java.util.ArrayList)>","<android.transition.TransitionSet: android.transition.Transition addListener(android.transition.Transition$TransitionListener)>"],"<androidx.fragment.app.FragmentTransitionImpl: java.util.ArrayList prepareSetNameOverridesReordered(java.util.ArrayList)>":["<java.util.ArrayList: void <init>()>","<androidx.core.view.ViewCompat: void setTransitionName(android.view.View,java.lang.String)>","<java.util.ArrayList: boolean add(java.lang.Object)>","<java.util.ArrayList: int size()>","<androidx.core.view.ViewCompat: java.lang.String getTransitionName(android.view.View)>","<java.util.ArrayList: java.lang.Object get(int)>","<androidx.core.view.ViewCompat: void <clinit>()>"],"<kotlinx.coroutines.internal.ThreadContextKt$findOne$1: void <init>()>":["<kotlin.jvm.internal.Lambda: void <init>(int)>"],"<androidx.fragment.app.FragmentManagerImpl: void cleanupExec()>":["<java.util.ArrayList: void clear()>"],"<kotlin.text.StringsKt__StringNumberConversionsKt: java.lang.Long toLongOrNull(java.lang.String,int)>":["<kotlin.text.CharsKt__CharJVMKt: int digitOf(char,int)>","<java.lang.String: char charAt(int)>","<kotlin.text.CharsKt__CharJVMKt: int checkRadix(int)>","<java.lang.Long: java.lang.Long valueOf(long)>","<java.lang.String: int length()>","<java.lang.Long: void <clinit>()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<androidx.fragment.app.FragmentActivity: androidx.fragment.app.FragmentManager getSupportFragmentManager()>":["<androidx.fragment.app.FragmentController: androidx.fragment.app.FragmentManager getSupportFragmentManager()>"],"<kotlinx.coroutines.scheduling.WorkQueue: boolean trySteal(kotlinx.coroutines.scheduling.WorkQueue,kotlinx.coroutines.scheduling.GlobalQueue)>":["<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object getAndSet(int,java.lang.Object)>","<kotlinx.coroutines.scheduling.TasksKt: void <clinit>()>","<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>","<kotlinx.coroutines.scheduling.WorkQueue: void <clinit>()>","<kotlin.ranges.RangesKt___RangesKt: int coerceAtLeast(int,int)>","<kotlinx.coroutines.scheduling.WorkQueue: boolean add(kotlinx.coroutines.scheduling.Task,kotlinx.coroutines.scheduling.GlobalQueue)>","<kotlinx.coroutines.scheduling.WorkQueue: int getBufferSize$kotlinx_coroutines_core()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<kotlinx.coroutines.scheduling.NanoTimeSource: long nanoTime()>","<kotlinx.coroutines.scheduling.WorkQueue: java.util.concurrent.atomic.AtomicReferenceArray access$getBuffer$p(kotlinx.coroutines.scheduling.WorkQueue)>","<kotlinx.coroutines.scheduling.WorkQueue: boolean tryStealLastScheduled(long,kotlinx.coroutines.scheduling.WorkQueue,kotlinx.coroutines.scheduling.GlobalQueue)>"],"<kotlinx.coroutines.UndispatchedEventLoop$threadLocalEventLoop$1: void <clinit>()>":["<kotlinx.coroutines.UndispatchedEventLoop$threadLocalEventLoop$1: void <init>()>","<kotlinx.coroutines.UndispatchedEventLoop$threadLocalEventLoop$1: void <clinit>()>"],"<io.reactivex.disposables.CompositeDisposable: void <init>()>":["<java.lang.Object: void <init>()>"],"<androidx.core.graphics.TypefaceCompatApi26Impl: boolean addFontFromBuffer(java.lang.Object,java.nio.ByteBuffer,int,int,int)>":["<java.lang.Integer: void <clinit>()>","<java.lang.Integer: java.lang.Integer valueOf(int)>","<java.lang.RuntimeException: void <init>(java.lang.Throwable)>"],"<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat$AnimatedVectorDrawableDelegateState: void <init>(android.graphics.drawable.Drawable$ConstantState)>":["<android.graphics.drawable.Drawable$ConstantState: void <init>()>"],"<com.afollestad.photoaffix.prefs.PrefsModule_ProvideScalePriorityPrefFactory: com.afollestad.rxkprefs.Pref provideInstance(com.afollestad.photoaffix.prefs.PrefsModule,javax.inject.Provider)>":["<com.afollestad.photoaffix.prefs.PrefsModule_ProvideScalePriorityPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.engine.subengines.RealStitchEngine_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.utilities.RealDpConverter_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.engine.RealAffixEngine_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideStackHorizontallyPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.engine.bitmaps.RealBitmapManipulator_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.engine.photos.RealPhotoLoader_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.utilities.RealMediaScanner_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.utilities.RealIoManager_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideImageSpacingHorizontalPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideScalePriorityPrefFactory: com.afollestad.rxkprefs.Pref proxyProvideScalePriorityPref(com.afollestad.photoaffix.prefs.PrefsModule,com.afollestad.rxkprefs.RxkPrefs)>","<com.afollestad.photoaffix.di.AppProvideModule_ProvideAppNameFactory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideImageSpacingVerticalPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideBgFillColorPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.presenters.RealMainPresenter_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideRxkPrefsFactory: java.lang.Object get()>","<dagger.internal.DoubleCheck: java.lang.Object get()>","<com.afollestad.photoaffix.engine.subengines.RealDimensionsEngine_Factory: java.lang.Object get()>","<dagger.internal.InstanceFactory: java.lang.Object get()>"],"<kotlinx.coroutines.internal.ThreadContextKt$updateState$1: void <clinit>()>":["<kotlinx.coroutines.internal.ThreadContextKt$updateState$1: void <init>()>","<kotlinx.coroutines.internal.ThreadContextKt$updateState$1: void <clinit>()>"],"<kotlinx.coroutines.Dispatchers: kotlinx.coroutines.MainCoroutineDispatcher getMain()>":["<kotlinx.coroutines.MainDispatcherLoader: void <clinit>()>"],"<kotlinx.coroutines.JobSupport: boolean cancelParent(java.lang.Throwable)>":["<kotlinx.coroutines.StandaloneCoroutine: boolean getCancelsParent()>","<kotlinx.coroutines.NonDisposableHandle: boolean childCancelled(java.lang.Throwable)>","<kotlinx.coroutines.DeferredCoroutine: boolean getCancelsParent()>","<kotlinx.coroutines.ChildHandleNode: boolean childCancelled(java.lang.Throwable)>","<kotlinx.coroutines.JobImpl: boolean getCancelsParent()>"],"<kotlinx.coroutines.ChildHandleNode: java.lang.Object invoke(java.lang.Object)>":["<kotlinx.coroutines.ChildHandleNode: void invoke(java.lang.Throwable)>","<kotlin.Unit: void <clinit>()>"],"<kotlin.coroutines.jvm.internal.RestrictedContinuationImpl: kotlin.coroutines.CoroutineContext getContext()>":["<kotlin.coroutines.EmptyCoroutineContext: void <clinit>()>"],"<androidx.appcompat.app.AppCompatDelegateImpl: int sanitizeWindowFeatureId(int)>":["<android.util.Log: int i(java.lang.String,java.lang.String)>"],"<androidx.appcompat.widget.AppCompatDrawableManager: android.content.res.ColorStateList createButtonColorStateList(android.content.Context,int)>":["<androidx.appcompat.widget.ThemeUtils: int getThemeAttrColor(android.content.Context,int)>","<android.content.res.ColorStateList: void <clinit>()>","<androidx.appcompat.widget.ThemeUtils: void <clinit>()>","<androidx.core.graphics.ColorUtils: int compositeColors(int,int)>","<android.content.res.ColorStateList: void <init>(int[][],int[])>","<androidx.appcompat.widget.ThemeUtils: int getDisabledThemeAttrColor(android.content.Context,int)>","<androidx.core.graphics.ColorUtils: void <clinit>()>"],"<kotlinx.coroutines.internal.LockFreeTaskQueue: void <init>(boolean)>":["<java.lang.Object: void <init>()>","<kotlinx.coroutines.internal.LockFreeTaskQueueCore: void <clinit>()>","<kotlinx.coroutines.internal.LockFreeTaskQueueCore: void <init>(int,boolean)>"],"<com.afollestad.assent.internal.Data$Companion: com.afollestad.assent.internal.PermissionFragment assureFragment(android.content.Context)>":["<com.afollestad.assent.internal.Data$Companion$assureFragment$1$1: void <init>(com.afollestad.assent.internal.Data)>","<com.afollestad.assent.internal.Data$Companion: com.afollestad.assent.internal.Data get()>","<com.afollestad.assent.internal.PermissionFragment: void <init>()>","<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>","<kotlin.jvm.internal.Intrinsics: void throwNpe()>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<java.lang.StringBuilder: void <init>()>","<com.afollestad.assent.internal.Data: void setPermissionFragment$com_afollestad_assent(com.afollestad.assent.internal.PermissionFragment)>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>","<java.lang.StringBuilder: java.lang.String toString()>","<com.afollestad.assent.internal.ExtensionsKt: void transact(androidx.fragment.app.FragmentActivity,kotlin.jvm.functions.Function1)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<com.afollestad.assent.internal.Data: com.afollestad.assent.internal.PermissionFragment getPermissionFragment$com_afollestad_assent()>"],"<kotlin.text.CharsKt__CharKt: boolean equals(char,char,boolean)>":["<java.lang.Character: char toLowerCase(char)>","<java.lang.Character: char toUpperCase(char)>","<java.lang.Character: void <clinit>()>"],"<kotlinx.coroutines.AbstractContinuation: void <init>(kotlin.coroutines.Continuation,int)>":["<kotlinx.coroutines.AbstractContinuationKt: void <clinit>()>","<kotlinx.coroutines.AbstractContinuationKt: kotlinx.coroutines.Active access$getACTIVE$p()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<kotlinx.coroutines.DispatchedTask: void <init>(int)>"],"<kotlinx.coroutines.scheduling.WorkQueue: void <clinit>()>":["<kotlinx.coroutines.scheduling.WorkQueue: void <clinit>()>","<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: java.util.concurrent.atomic.AtomicIntegerFieldUpdater newUpdater(java.lang.Class,java.lang.String)>","<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>"],"<androidx.appcompat.widget.AppCompatDrawableManager: android.content.res.ColorStateList createDefaultButtonColorStateList(android.content.Context)>":["<androidx.appcompat.widget.ThemeUtils: int getThemeAttrColor(android.content.Context,int)>","<androidx.appcompat.widget.ThemeUtils: void <clinit>()>","<androidx.appcompat.widget.AppCompatDrawableManager: android.content.res.ColorStateList createButtonColorStateList(android.content.Context,int)>"],"<io.reactivex.internal.schedulers.ComputationScheduler: void <init>(java.util.concurrent.ThreadFactory)>":["<io.reactivex.Scheduler: void <clinit>()>","<io.reactivex.Scheduler: void <init>()>","<io.reactivex.internal.schedulers.ComputationScheduler: void <clinit>()>","<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>","<io.reactivex.internal.schedulers.ComputationScheduler: void start()>"],"<androidx.appcompat.app.WindowDecorActionBar: void setDisplayHomeAsUpEnabled(boolean)>":["<androidx.appcompat.app.WindowDecorActionBar: void setDisplayOptions(int,int)>"],"<io.reactivex.Observable: io.reactivex.Observable map(io.reactivex.functions.Function)>":["<io.reactivex.internal.functions.ObjectHelper: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>","<io.reactivex.internal.operators.observable.ObservableMap: void <init>(io.reactivex.ObservableSource,io.reactivex.functions.Function)>","<io.reactivex.plugins.RxJavaPlugins: io.reactivex.Observable onAssembly(io.reactivex.Observable)>","<io.reactivex.internal.functions.ObjectHelper: void <clinit>()>"],"<com.afollestad.materialdialogs.callbacks.DialogCallbackExtKt: void invokeAll(java.util.List,com.afollestad.materialdialogs.MaterialDialog)>":["<java.util.ArrayList: java.util.Iterator iterator()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<androidx.collection.SimpleArrayMap: int indexOfNull()>":["<androidx.collection.SimpleArrayMap: int binarySearchHashes(int[],int,int)>"],"<com.afollestad.photoaffix.presenters.RealMainPresenter$Companion: void <init>()>":["<java.lang.Object: void <init>()>"],"<androidx.recyclerview.widget.LinearLayoutManager: void assertNotInLayoutOrScroll(java.lang.String)>":["<androidx.recyclerview.widget.RecyclerView$LayoutManager: void assertNotInLayoutOrScroll(java.lang.String)>"],"<io.reactivex.internal.functions.Functions$Identity: void <init>()>":["<java.lang.Object: void <init>()>"],"<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: void setHotspotBounds(int,int,int,int)>":["<androidx.appcompat.graphics.drawable.DrawableContainer: void setHotspotBounds(int,int,int,int)>"],"<dagger.internal.InstanceFactory: void <clinit>()>":["<dagger.internal.InstanceFactory: void <init>(java.lang.Object)>","<dagger.internal.InstanceFactory: void <clinit>()>"],"<kotlinx.coroutines.JobSupport: kotlin.coroutines.CoroutineContext$Key getKey()>":["<kotlinx.coroutines.Job: void <clinit>()>"],"<androidx.appcompat.view.menu.MenuBuilder: void dispatchPresenterUpdate(boolean)>":["<androidx.appcompat.view.menu.MenuBuilder: void startDispatchingItemsChanged()>","<java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>","<java.util.concurrent.CopyOnWriteArrayList: boolean isEmpty()>","<androidx.appcompat.view.menu.MenuBuilder: void stopDispatchingItemsChanged()>","<java.util.concurrent.CopyOnWriteArrayList: boolean remove(java.lang.Object)>"],"<kotlinx.coroutines.scheduling.WorkQueue: boolean add(kotlinx.coroutines.scheduling.Task,kotlinx.coroutines.scheduling.GlobalQueue)>":["<kotlinx.coroutines.scheduling.WorkQueue: boolean addLast(kotlinx.coroutines.scheduling.Task,kotlinx.coroutines.scheduling.GlobalQueue)>","<kotlinx.coroutines.scheduling.WorkQueue: void <clinit>()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)>":["<android.graphics.drawable.Drawable: void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>","<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)>"],"<com.afollestad.photoaffix.utilities.RealMediaScanner: void <init>(android.app.Application)>":["<java.lang.Object: void <init>()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<androidx.appcompat.graphics.drawable.StateListDrawable$StateListState: int addStateSet(int[],android.graphics.drawable.Drawable)>":["<androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState: int addChild(android.graphics.drawable.Drawable)>"],"<kotlinx.coroutines.CommonPool$createPlainPool$1: void <init>(java.util.concurrent.atomic.AtomicInteger)>":["<java.lang.Object: void <init>()>"],"<kotlin.jvm.internal.CollectionToArray: java.lang.Object[] toArray(java.util.Collection,java.lang.Object[])>":["<kotlin.collections.EmptyIterator: java.lang.Object next()>","<java.lang.Object: java.lang.Class getClass()>","<java.lang.NullPointerException: void <init>()>","<kotlin.collections.EmptyList: int size()>","<kotlin.collections.EmptyList: java.util.Iterator iterator()>","<kotlin.collections.EmptyIterator: boolean hasNext()>","<java.lang.OutOfMemoryError: void <init>()>","<java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>","<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>","<kotlin.TypeCastException: void <init>(java.lang.String)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<kotlin.jvm.internal.Intrinsics: void checkExpressionValueIsNotNull(java.lang.Object,java.lang.String)>"],"<kotlinx.coroutines.scheduling.DefaultScheduler: void <clinit>()>":["<kotlinx.coroutines.scheduling.DefaultScheduler: void <clinit>()>","<kotlinx.coroutines.internal.SystemPropsKt: int getAVAILABLE_PROCESSORS()>","<kotlin.ranges.RangesKt___RangesKt: int coerceAtLeast(int,int)>","<kotlinx.coroutines.internal.SystemPropsKt: int systemProp$default(java.lang.String,int,int,int,int,java.lang.Object)>","<kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher: kotlinx.coroutines.CoroutineDispatcher blocking(int)>","<kotlinx.coroutines.scheduling.DefaultScheduler: void <init>()>","<kotlinx.coroutines.internal.SystemPropsKt: void <clinit>()>"],"<androidx.appcompat.app.AppCompatDelegateImpl$AppCompatWindowCallback: void <init>(androidx.appcompat.app.AppCompatDelegateImpl,android.view.Window$Callback)>":["<androidx.appcompat.view.WindowCallbackWrapper: void <init>(android.view.Window$Callback)>"],"<androidx.vectordrawable.graphics.drawable.VectorDrawableCommon: boolean setState(int[])>":["<android.graphics.drawable.Drawable: boolean setState(int[])>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: boolean setState(int[])>","<androidx.core.graphics.drawable.WrappedDrawableApi21: boolean setState(int[])>","<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: boolean setState(int[])>","<androidx.core.graphics.drawable.WrappedDrawableApi14: boolean setState(int[])>"],"<com.afollestad.assent.AssentInContextKt: void runWithPermissions(android.content.Context,com.afollestad.assent.Permission[],int,kotlin.jvm.functions.Function1)>":["<com.afollestad.assent.AssentInContextKt$runWithPermissions$1: void <init>(com.afollestad.assent.Permission[],kotlin.jvm.functions.Function1)>","<java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>","<com.afollestad.assent.AssentInContextKt: void askForPermissions(android.content.Context,com.afollestad.assent.Permission[],int,kotlin.jvm.functions.Function1)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<androidx.recyclerview.widget.LinearLayoutManager: void <init>(android.content.Context,int,boolean)>":["<androidx.recyclerview.widget.LinearLayoutManager$LayoutChunkResult: void <init>()>","<androidx.recyclerview.widget.LinearLayoutManager$AnchorInfo: void <init>()>","<androidx.recyclerview.widget.LinearLayoutManager: void setReverseLayout(boolean)>","<androidx.recyclerview.widget.RecyclerView$LayoutManager: void <init>()>","<androidx.recyclerview.widget.LinearLayoutManager: void setOrientation(int)>"],"<com.afollestad.photoaffix.utilities.RealDpConverter_Factory: com.afollestad.photoaffix.utilities.RealDpConverter provideInstance(javax.inject.Provider)>":["<com.afollestad.photoaffix.prefs.PrefsModule_ProvideScalePriorityPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.engine.subengines.RealStitchEngine_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.utilities.RealDpConverter_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.engine.RealAffixEngine_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideStackHorizontallyPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.utilities.RealDpConverter: void <init>(android.app.Application)>","<com.afollestad.photoaffix.engine.bitmaps.RealBitmapManipulator_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.engine.photos.RealPhotoLoader_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.utilities.RealMediaScanner_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.utilities.RealIoManager_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideImageSpacingVerticalPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideImageSpacingHorizontalPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.di.AppProvideModule_ProvideAppNameFactory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideBgFillColorPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.presenters.RealMainPresenter_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideRxkPrefsFactory: java.lang.Object get()>","<dagger.internal.DoubleCheck: java.lang.Object get()>","<com.afollestad.photoaffix.engine.subengines.RealDimensionsEngine_Factory: java.lang.Object get()>","<dagger.internal.InstanceFactory: java.lang.Object get()>"],"<androidx.core.provider.FontsContractCompat: android.graphics.Typeface getFontSync(android.content.Context,androidx.core.provider.FontRequest,androidx.core.content.res.ResourcesCompat$FontCallback,android.os.Handler,boolean,int,int)>":["<androidx.collection.LruCache: java.lang.Object get(java.lang.Object)>","<androidx.core.provider.FontsContractCompat: void <clinit>()>","<java.lang.StringBuilder: void <init>()>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<androidx.core.provider.SelfDestructiveThread: void postAndReply(java.util.concurrent.Callable,androidx.core.provider.SelfDestructiveThread$ReplyCallback)>","<java.lang.StringBuilder: java.lang.StringBuilder append(int)>","<java.util.ArrayList: boolean add(java.lang.Object)>","<androidx.core.provider.FontRequest: java.lang.String getIdentifier()>","<java.lang.StringBuilder: java.lang.String toString()>","<androidx.collection.SimpleArrayMap: java.lang.Object get(java.lang.Object)>","<androidx.core.provider.FontsContractCompat$2: void <init>(androidx.core.content.res.ResourcesCompat$FontCallback,android.os.Handler)>","<androidx.core.provider.FontsContractCompat$3: void <init>(java.lang.String)>","<androidx.core.provider.SelfDestructiveThread: java.lang.Object postAndWait(java.util.concurrent.Callable,int)>","<java.util.ArrayList: void <init>()>","<androidx.collection.SimpleArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>","<androidx.core.provider.FontsContractCompat: androidx.core.provider.FontsContractCompat$TypefaceResult getFontInternal(android.content.Context,androidx.core.provider.FontRequest,int)>","<androidx.collection.SimpleArrayMap: boolean containsKey(java.lang.Object)>","<androidx.core.provider.FontsContractCompat$1: void <init>(android.content.Context,androidx.core.provider.FontRequest,int,java.lang.String)>"],"<kotlinx.coroutines.CoroutineId: void restoreThreadContext(kotlin.coroutines.CoroutineContext,java.lang.String)>":["<java.lang.Thread: void setName(java.lang.String)>","<java.lang.Thread: java.lang.Thread currentThread()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<kotlin.jvm.internal.Intrinsics: void checkExpressionValueIsNotNull(java.lang.Object,java.lang.String)>"],"<kotlinx.coroutines.JobSupport: kotlinx.coroutines.JobNode makeNode(kotlin.jvm.functions.Function1,boolean)>":["<java.lang.IllegalArgumentException: void <init>(java.lang.String)>","<kotlinx.coroutines.InvokeOnCancelling: void <clinit>()>","<java.lang.String: java.lang.String toString()>","<kotlinx.coroutines.InvokeOnCompletion: void <init>(kotlinx.coroutines.Job,kotlin.jvm.functions.Function1)>","<kotlinx.coroutines.internal.LockFreeLinkedListNode: void <clinit>()>","<kotlinx.coroutines.InvokeOnCancelling: void <init>(kotlinx.coroutines.Job,kotlin.jvm.functions.Function1)>"],"<androidx.core.content.res.ComplexColorCompat: androidx.core.content.res.ComplexColorCompat inflate(android.content.res.Resources,int,android.content.res.Resources$Theme)>":["<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>","<androidx.core.content.res.ComplexColorCompat: androidx.core.content.res.ComplexColorCompat createFromXml(android.content.res.Resources,int,android.content.res.Resources$Theme)>"],"<androidx.interpolator.view.animation.LookupTableInterpolator: void <init>(float[])>":["<java.lang.Object: void <init>()>"],"<androidx.collection.ArrayMap: void <init>(int)>":["<androidx.collection.SimpleArrayMap: void <init>(int)>"],"<kotlinx.coroutines.internal.ThreadContextKt$countAll$1: void <init>()>":["<kotlin.jvm.internal.Lambda: void <init>(int)>"],"<androidx.appcompat.widget.TintTypedArray: android.content.res.ColorStateList getColorStateList(int)>":["<androidx.appcompat.content.res.AppCompatResources: android.content.res.ColorStateList getColorStateList(android.content.Context,int)>","<androidx.appcompat.content.res.AppCompatResources: void <clinit>()>"],"<kotlinx.coroutines.UndispatchedEventLoop: boolean resumeUndispatched(kotlinx.coroutines.DispatchedTask)>":["<kotlinx.coroutines.DispatchedKt: void <clinit>()>","<java.lang.ThreadLocal: java.lang.Object get()>","<kotlinx.coroutines.UndispatchedEventLoop: void <clinit>()>","<kotlinx.coroutines.DispatchException: void <init>(java.lang.String,java.lang.Throwable)>","<kotlinx.coroutines.DispatchedKt: void resume(kotlinx.coroutines.DispatchedTask,kotlin.coroutines.Continuation,int)>","<kotlinx.coroutines.AbstractContinuation: kotlin.coroutines.Continuation getDelegate()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<kotlin.jvm.internal.Intrinsics: void checkExpressionValueIsNotNull(java.lang.Object,java.lang.String)>"],"<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: void setTintList(android.content.res.ColorStateList)>":["<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void setTintList(android.content.res.ColorStateList)>","<androidx.core.graphics.drawable.DrawableCompat: void setTintList(android.graphics.drawable.Drawable,android.content.res.ColorStateList)>"],"<androidx.core.graphics.TypefaceCompat: android.graphics.Typeface findFromCache(android.content.res.Resources,int,int)>":["<androidx.collection.LruCache: java.lang.Object get(java.lang.Object)>","<androidx.core.graphics.TypefaceCompat: java.lang.String createResourceUid(android.content.res.Resources,int,int)>","<androidx.core.graphics.TypefaceCompat: void <clinit>()>"],"<kotlinx.coroutines.CoroutineExceptionHandlerKt: void handleCoroutineException$default(kotlin.coroutines.CoroutineContext,java.lang.Throwable,kotlinx.coroutines.Job,int,java.lang.Object)>":["<kotlinx.coroutines.CoroutineExceptionHandlerKt: void handleCoroutineException(kotlin.coroutines.CoroutineContext,java.lang.Throwable,kotlinx.coroutines.Job)>"],"<io.reactivex.plugins.RxJavaPlugins: io.reactivex.Scheduler applyRequireNonNull(io.reactivex.functions.Function,java.util.concurrent.Callable)>":["<io.reactivex.plugins.RxJavaPlugins: java.lang.Object apply(io.reactivex.functions.Function,java.lang.Object)>","<io.reactivex.internal.functions.ObjectHelper: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>","<io.reactivex.internal.functions.ObjectHelper: void <clinit>()>"],"<androidx.fragment.app.FragmentTransition: java.lang.Object configureSharedElementsReordered(androidx.fragment.app.FragmentTransitionImpl,android.view.ViewGroup,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,java.util.ArrayList,java.util.ArrayList,java.lang.Object,java.lang.Object)>":["<androidx.fragment.app.FragmentTransition$3: void <init>(androidx.fragment.app.Fragment,androidx.fragment.app.Fragment,boolean,androidx.collection.ArrayMap,android.view.View,androidx.fragment.app.FragmentTransitionImpl,android.graphics.Rect)>","<androidx.fragment.app.OneShotPreDrawListener: androidx.fragment.app.OneShotPreDrawListener add(android.view.View,java.lang.Runnable)>","<android.graphics.Rect: void <init>()>","<androidx.collection.ArrayMap: java.util.Collection values()>","<android.graphics.Rect: void <clinit>()>","<androidx.collection.SimpleArrayMap: boolean isEmpty()>","<java.util.ArrayList: boolean add(java.lang.Object)>","<androidx.fragment.app.FragmentTransitionCompat21: void setEpicenter(java.lang.Object,android.graphics.Rect)>","<androidx.fragment.app.FragmentTransition: java.lang.Object getSharedElementTransition(androidx.fragment.app.FragmentTransitionImpl,androidx.fragment.app.Fragment,androidx.fragment.app.Fragment,boolean)>","<androidx.collection.SimpleArrayMap: void clear()>","<androidx.fragment.app.FragmentTransition: void setOutEpicenter(androidx.fragment.app.FragmentTransitionImpl,java.lang.Object,java.lang.Object,androidx.collection.ArrayMap,boolean,androidx.fragment.app.BackStackRecord)>","<androidx.fragment.app.FragmentTransition: android.view.View getInEpicenterView(androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,java.lang.Object,boolean)>","<androidx.fragment.app.FragmentTransition: void <clinit>()>","<androidx.fragment.app.FragmentTransition: void addSharedElementsWithMatchingNames(java.util.ArrayList,androidx.collection.ArrayMap,java.util.Collection)>","<androidx.fragment.app.FragmentTransitionCompat21: void setSharedElementTargets(java.lang.Object,android.view.View,java.util.ArrayList)>","<androidx.collection.ArrayMap: java.util.Set keySet()>","<androidx.fragment.app.FragmentTransition: androidx.collection.ArrayMap captureInSharedElements(androidx.fragment.app.FragmentTransitionImpl,androidx.collection.ArrayMap,java.lang.Object,androidx.fragment.app.FragmentTransition$FragmentContainerTransition)>","<androidx.fragment.app.FragmentTransition: androidx.collection.ArrayMap captureOutSharedElements(androidx.fragment.app.FragmentTransitionImpl,androidx.collection.ArrayMap,java.lang.Object,androidx.fragment.app.FragmentTransition$FragmentContainerTransition)>","<androidx.fragment.app.FragmentTransition: void callSharedElementStartEnd(androidx.fragment.app.Fragment,androidx.fragment.app.Fragment,boolean,androidx.collection.ArrayMap,boolean)>"],"<java.lang.Integer: java.lang.Integer valueOf(int)>":["<java.lang.RuntimeException: void <init>(java.lang.String)>"],"<com.afollestad.photoaffix.prefs.PrefsModule_ProvideRxkPrefsFactory: void <init>(com.afollestad.photoaffix.prefs.PrefsModule,javax.inject.Provider)>":["<java.lang.Object: void <init>()>"],"<java.lang.Throwable: void <init>()>":["<java.lang.Object: void <init>()>","<java.lang.RuntimeException: void <init>(java.lang.String)>"],"<androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState: android.graphics.drawable.Drawable prepareDrawable(android.graphics.drawable.Drawable)>":["<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: android.graphics.drawable.Drawable mutate()>","<android.graphics.drawable.LayerDrawable: android.graphics.drawable.Drawable mutate()>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mutate()>","<android.os.Build$VERSION: void <clinit>()>","<androidx.core.graphics.drawable.WrappedDrawableApi14: android.graphics.drawable.Drawable mutate()>","<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: android.graphics.drawable.Drawable mutate()>","<android.graphics.drawable.Drawable: void setCallback(android.graphics.drawable.Drawable$Callback)>","<android.graphics.drawable.Drawable: boolean setLayoutDirection(int)>"],"<io.reactivex.plugins.RxJavaPlugins: java.lang.Object apply(io.reactivex.functions.Function,java.lang.Object)>":["<io.reactivex.internal.util.ExceptionHelper: void <clinit>()>","<io.reactivex.internal.util.ExceptionHelper: java.lang.RuntimeException wrapOrThrow(java.lang.Throwable)>"],"<kotlinx.coroutines.JobCancellationException: void <init>(java.lang.String,java.lang.Throwable,kotlinx.coroutines.Job)>":["<java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<java.util.concurrent.CancellationException: void <init>(java.lang.String)>"],"<kotlinx.coroutines.CoroutineDispatcher: boolean isDispatchNeeded(kotlin.coroutines.CoroutineContext)>":["<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<androidx.core.graphics.TypefaceCompatBaseImpl: java.lang.Object findBestFont(java.lang.Object[],int,androidx.core.graphics.TypefaceCompatBaseImpl$StyleExtractor)>":["<java.lang.Math: int abs(int)>","<androidx.core.graphics.TypefaceCompatBaseImpl$2: int getWeight(java.lang.Object)>","<androidx.core.graphics.TypefaceCompatBaseImpl$1: boolean isItalic(java.lang.Object)>","<androidx.core.graphics.TypefaceCompatBaseImpl$1: int getWeight(java.lang.Object)>","<androidx.core.graphics.TypefaceCompatBaseImpl$2: boolean isItalic(java.lang.Object)>"],"<java.lang.RuntimeException: void <init>(java.lang.Throwable)>":["<java.lang.Exception: void <init>()>","<java.lang.RuntimeException: void <init>(java.lang.String)>"],"<kotlinx.coroutines.JobSupportKt: kotlinx.coroutines.Empty access$getEMPTY_ACTIVE$p()>":["<kotlinx.coroutines.JobSupportKt: void <clinit>()>"],"<androidx.collection.ArraySet: void <clinit>()>":["<androidx.collection.ArraySet: void <clinit>()>"],"<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: android.graphics.drawable.Drawable getCurrent()>":["<androidx.appcompat.graphics.drawable.DrawableContainer: android.graphics.drawable.Drawable getCurrent()>"],"<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: void <init>()>":["<java.lang.Object: void <init>()>","<android.graphics.Path: void <init>()>","<android.graphics.Matrix: void <init>()>","<androidx.collection.ArrayMap: void <init>()>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: void <init>()>"],"<androidx.fragment.app.FragmentActivity$HostCallbacks: boolean onHasView()>":["<android.app.Activity: android.view.Window getWindow()>"],"<androidx.appcompat.widget.AppCompatDrawableManager: android.content.res.ColorStateList createBorderlessButtonColorStateList(android.content.Context)>":["<androidx.appcompat.widget.AppCompatDrawableManager: android.content.res.ColorStateList createButtonColorStateList(android.content.Context,int)>"],"<androidx.core.graphics.PathParser: float[] getFloats(java.lang.String)>":["<java.lang.Float: float parseFloat(java.lang.String)>","<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>","<java.lang.StringBuilder: java.lang.String toString()>","<java.lang.Float: void <clinit>()>","<androidx.core.graphics.PathParser: float[] copyOfRange(float[],int,int)>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<java.lang.StringBuilder: void <init>()>","<androidx.core.graphics.PathParser$ExtractFloatResult: void <init>()>","<androidx.core.graphics.PathParser: void extract(java.lang.String,int,androidx.core.graphics.PathParser$ExtractFloatResult)>"],"<androidx.core.graphics.TypefaceCompatApi24Impl: void <clinit>()>":["<java.lang.Boolean: void <clinit>()>","<java.lang.Object: java.lang.Class getClass()>","<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>","<androidx.core.graphics.TypefaceCompatApi24Impl: void <clinit>()>","<java.lang.Integer: void <clinit>()>","<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>","<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>","<java.lang.Class: java.lang.String getName()>","<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>","<java.lang.Class: java.lang.Class forName(java.lang.String)>"],"<androidx.fragment.app.FragmentTransition: android.view.View getInEpicenterView(androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,java.lang.Object,boolean)>":["<androidx.collection.SimpleArrayMap: java.lang.Object get(java.lang.Object)>"],"<androidx.appcompat.app.AppCompatDelegateImpl: boolean requestWindowFeature(int)>":["<androidx.appcompat.app.AppCompatDelegateImpl: void throwFeatureRequestIfSubDecorInstalled()>","<androidx.appcompat.app.AppCompatDelegateImpl: int sanitizeWindowFeatureId(int)>"],"<kotlinx.coroutines.JobKt: kotlinx.coroutines.Job Job$default(kotlinx.coroutines.Job,int,java.lang.Object)>":["<kotlinx.coroutines.JobKt__JobKt: kotlinx.coroutines.Job Job$default(kotlinx.coroutines.Job,int,java.lang.Object)>"],"<androidx.core.content.res.GradientColorInflaterCompat: androidx.core.content.res.GradientColorInflaterCompat$ColorStops inflateChildElements(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>":["<java.util.ArrayList: void <init>(int)>","<androidx.core.content.res.TypedArrayUtils: android.content.res.TypedArray obtainAttributes(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,int[])>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<java.lang.StringBuilder: void <init>()>","<java.util.ArrayList: boolean add(java.lang.Object)>","<java.lang.Float: java.lang.Float valueOf(float)>","<androidx.core.content.res.GradientColorInflaterCompat$ColorStops: void <init>(java.util.List,java.util.List)>","<java.lang.StringBuilder: java.lang.String toString()>","<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>","<java.lang.Integer: void <clinit>()>","<androidx.core.R$styleable: void <clinit>()>","<java.lang.Float: void <clinit>()>","<java.util.ArrayList: int size()>","<java.lang.Integer: java.lang.Integer valueOf(int)>"],"<kotlinx.coroutines.CoroutineStart: void <clinit>()>":["<kotlinx.coroutines.CoroutineStart: void <init>(java.lang.String,int)>","<kotlinx.coroutines.CoroutineStart: void <clinit>()>"],"<kotlinx.coroutines.CommonPool$isGoodCommonPool$1: void <clinit>()>":["<kotlinx.coroutines.CommonPool$isGoodCommonPool$1: void <clinit>()>","<kotlinx.coroutines.CommonPool$isGoodCommonPool$1: void <init>()>"],"<kotlinx.coroutines.InvokeOnCancelling: void invoke(java.lang.Throwable)>":["<kotlinx.coroutines.InvokeOnCancelling: void <clinit>()>","<kotlinx.coroutines.ChildHandleNode: java.lang.Object invoke(java.lang.Object)>","<kotlinx.coroutines.JobSupport$ChildCompletion: java.lang.Object invoke(java.lang.Object)>","<kotlinx.coroutines.internal.LockFreeLinkedListNode: void <clinit>()>","<kotlinx.coroutines.ResumeAwaitOnCompletion: java.lang.Object invoke(java.lang.Object)>","<kotlinx.coroutines.ChildContinuation: java.lang.Object invoke(java.lang.Object)>"],"<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: boolean onStateChange(int[])>":["<android.graphics.drawable.Drawable: boolean setState(int[])>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: boolean setState(int[])>","<androidx.core.graphics.drawable.WrappedDrawableApi21: boolean setState(int[])>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: boolean selectTransition(int)>","<androidx.appcompat.graphics.drawable.DrawableContainer: int getCurrentIndex()>","<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: boolean setState(int[])>","<androidx.core.graphics.drawable.WrappedDrawableApi14: boolean setState(int[])>","<androidx.appcompat.graphics.drawable.DrawableContainer: boolean selectDrawable(int)>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatedStateListState: int indexOfKeyframe(int[])>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: android.graphics.drawable.Drawable getCurrent()>"],"<androidx.arch.core.internal.SafeIterableMap$ListIterator: void <init>(androidx.arch.core.internal.SafeIterableMap$Entry,androidx.arch.core.internal.SafeIterableMap$Entry)>":["<java.lang.Object: void <init>()>"],"<kotlinx.coroutines.DispatchedKt: void dispatch(kotlinx.coroutines.DispatchedTask,int)>":["<kotlinx.coroutines.DispatchedKt: void <clinit>()>","<kotlinx.coroutines.MissingMainCoroutineDispatcher: void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)>","<kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher: void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)>","<kotlinx.coroutines.Unconfined: boolean isDispatchNeeded(kotlin.coroutines.CoroutineContext)>","<kotlinx.coroutines.UndispatchedEventLoop: void <clinit>()>","<kotlin.coroutines.jvm.internal.RestrictedContinuationImpl: kotlin.coroutines.CoroutineContext getContext()>","<kotlinx.coroutines.CoroutineDispatcher: boolean isDispatchNeeded(kotlin.coroutines.CoroutineContext)>","<kotlinx.coroutines.DispatchedContinuation: kotlin.coroutines.CoroutineContext getContext()>","<kotlinx.coroutines.DispatchedKt: void resume(kotlinx.coroutines.DispatchedTask,kotlin.coroutines.Continuation,int)>","<kotlinx.coroutines.AbstractContinuation: kotlin.coroutines.Continuation getDelegate()>","<kotlinx.coroutines.ResumeModeKt: boolean isCancellableMode(int)>","<kotlinx.coroutines.AbstractCoroutine: kotlin.coroutines.CoroutineContext getContext()>","<kotlinx.coroutines.UndispatchedEventLoop: boolean resumeUndispatched(kotlinx.coroutines.DispatchedTask)>","<kotlinx.coroutines.CommonPool: void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)>","<kotlin.coroutines.jvm.internal.CompletedContinuation: kotlin.coroutines.CoroutineContext getContext()>","<kotlinx.coroutines.scheduling.LimitingDispatcher: void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)>","<kotlin.coroutines.jvm.internal.ContinuationImpl: kotlin.coroutines.CoroutineContext getContext()>","<kotlinx.coroutines.ResumeModeKt: boolean isDispatchedMode(int)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<kotlinx.coroutines.Unconfined: void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)>"],"<java.lang.String: int hashCode()>":["<java.lang.RuntimeException: void <init>(java.lang.String)>"],"<androidx.recyclerview.widget.LinearLayoutManager$AnchorInfo: void <init>()>":["<androidx.recyclerview.widget.LinearLayoutManager$AnchorInfo: void reset()>","<java.lang.Object: void <init>()>"],"<io.reactivex.internal.operators.observable.ObservableRefCount: void <init>(io.reactivex.observables.ConnectableObservable,int,long,java.util.concurrent.TimeUnit,io.reactivex.Scheduler)>":["<io.reactivex.Observable: void <init>()>"],"<io.reactivex.schedulers.Schedulers$IOTask: io.reactivex.Scheduler call()>":["<io.reactivex.schedulers.Schedulers$IoHolder: void <clinit>()>"],"<io.reactivex.exceptions.CompositeException: void appendStackTrace(java.lang.StringBuilder,java.lang.Throwable,java.lang.String)>":["<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>","<java.lang.StringBuilder: java.lang.StringBuilder append(char)>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<io.reactivex.exceptions.CompositeException: void appendStackTrace(java.lang.StringBuilder,java.lang.Throwable,java.lang.String)>"],"<androidx.appcompat.app.AppCompatActivity: void onStop()>":["<androidx.fragment.app.FragmentActivity: void onStop()>","<androidx.appcompat.app.AppCompatDelegateImpl: void onStop()>","<androidx.appcompat.app.AppCompatActivity: androidx.appcompat.app.AppCompatDelegate getDelegate()>"],"<kotlinx.coroutines.CoroutineDispatcher: void releaseInterceptedContinuation(kotlin.coroutines.Continuation)>":["<kotlin.coroutines.ContinuationInterceptor$DefaultImpls: void releaseInterceptedContinuation(kotlin.coroutines.ContinuationInterceptor,kotlin.coroutines.Continuation)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<androidx.core.view.ViewCompat$1: void <init>(androidx.core.view.OnApplyWindowInsetsListener)>":["<java.lang.Object: void <init>()>"],"<kotlinx.coroutines.AbstractContinuation: void dispatchResume(int)>":["<kotlinx.coroutines.DispatchedKt: void <clinit>()>","<kotlinx.coroutines.AbstractContinuation: boolean tryResume()>","<kotlinx.coroutines.DispatchedKt: void dispatch(kotlinx.coroutines.DispatchedTask,int)>"],"<com.afollestad.photoaffix.prefs.PrefsModule_ProvideImageSpacingHorizontalPrefFactory: void <init>(com.afollestad.photoaffix.prefs.PrefsModule,javax.inject.Provider)>":["<java.lang.Object: void <init>()>"],"<kotlin.collections.ArraysKt___ArraysKt: java.util.List toList(java.lang.Object[])>":["<kotlin.collections.CollectionsKt__CollectionsKt: java.util.List emptyList()>","<kotlin.collections.CollectionsKt__CollectionsJVMKt: java.util.List listOf(java.lang.Object)>","<kotlin.collections.ArraysKt___ArraysKt: java.util.List toMutableList(java.lang.Object[])>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<kotlinx.coroutines.DebugKt: void <clinit>()>":["<java.lang.Class: boolean desiredAssertionStatus()>","<java.lang.IllegalStateException: void <init>(java.lang.String)>","<java.lang.String: int hashCode()>","<java.lang.StringBuilder: java.lang.String toString()>","<java.lang.String: boolean equals(java.lang.Object)>","<java.lang.StringBuilder: java.lang.StringBuilder append(char)>","<java.lang.StringBuilder: void <init>()>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<kotlinx.coroutines.internal.SystemPropsKt: java.lang.String systemProp(java.lang.String)>","<java.lang.String: java.lang.String toString()>","<kotlinx.coroutines.internal.SystemPropsKt: void <clinit>()>","<kotlinx.coroutines.DebugKt: void <clinit>()>"],"<java.lang.Error: void <init>()>":["<java.lang.RuntimeException: void <init>(java.lang.String)>","<java.lang.Throwable: void <init>()>"],"<androidx.lifecycle.LifecycleRegistry: androidx.lifecycle.Lifecycle$Event upEvent(androidx.lifecycle.Lifecycle$State)>":["<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>","<java.lang.IllegalArgumentException: void <init>(java.lang.String)>","<androidx.lifecycle.Lifecycle$Event: void <clinit>()>","<java.lang.StringBuilder: java.lang.String toString()>","<androidx.lifecycle.LifecycleRegistry$1: void <clinit>()>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<java.lang.StringBuilder: void <init>()>","<java.lang.IllegalArgumentException: void <init>()>"],"<androidx.appcompat.widget.ViewUtils: void <clinit>()>":["<androidx.appcompat.widget.ViewUtils: void <clinit>()>","<android.util.Log: int d(java.lang.String,java.lang.String)>","<android.os.Build$VERSION: void <clinit>()>","<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>"],"<kotlinx.coroutines.scheduling.CoroutineScheduler: boolean access$isTerminated$p(kotlinx.coroutines.scheduling.CoroutineScheduler)>":["<kotlinx.coroutines.scheduling.CoroutineScheduler: boolean isTerminated()>"],"<kotlinx.coroutines.CommonPool: void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)>":["<kotlinx.coroutines.TimeSourceKt: void <clinit>()>","<kotlinx.coroutines.DefaultTimeSource: java.lang.Runnable wrapTask(java.lang.Runnable)>","<kotlinx.coroutines.TimeSourceKt: kotlinx.coroutines.TimeSource getTimeSource()>","<kotlinx.coroutines.EventLoopBase: void <clinit>()>","<kotlinx.coroutines.DefaultExecutor: void <clinit>()>","<kotlinx.coroutines.DefaultTimeSource: void unTrackTask()>","<kotlinx.coroutines.EventLoopBase: void execute$kotlinx_coroutines_core(java.lang.Runnable)>","<kotlinx.coroutines.CommonPool: java.util.concurrent.Executor getOrCreatePoolSync()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<kotlinx.coroutines.DispatchedTask: void run()>","<kotlinx.coroutines.CommonPool: void <clinit>()>"],"<kotlinx.coroutines.AbstractCoroutine: void handleOnCompletionException$kotlinx_coroutines_core(java.lang.Throwable)>":["<kotlinx.coroutines.CoroutineExceptionHandlerKt: void handleCoroutineException(kotlin.coroutines.CoroutineContext,java.lang.Throwable,kotlinx.coroutines.Job)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<com.afollestad.photoaffix.utilities.RealIoManager_Factory: com.afollestad.photoaffix.utilities.RealIoManager_Factory create(javax.inject.Provider,javax.inject.Provider)>":["<com.afollestad.photoaffix.utilities.RealIoManager_Factory: void <init>(javax.inject.Provider,javax.inject.Provider)>"],"<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: void setTintMode(android.graphics.PorterDuff$Mode)>":["<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void setTintMode(android.graphics.PorterDuff$Mode)>","<androidx.core.graphics.drawable.DrawableCompat: void setTintMode(android.graphics.drawable.Drawable,android.graphics.PorterDuff$Mode)>"],"<kotlinx.coroutines.MainDispatcherLoader: kotlinx.coroutines.MainCoroutineDispatcher tryCreateDispatcher(kotlinx.coroutines.internal.MainDispatcherFactory)>":["<kotlinx.coroutines.MissingMainCoroutineDispatcher: void <init>(java.lang.Throwable)>"],"<kotlin.coroutines.ContinuationInterceptor$Key: void <init>()>":["<java.lang.Object: void <init>()>"],"<androidx.fragment.app.FragmentActivity$HostCallbacks: void onDump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>":["<androidx.fragment.app.FragmentActivity: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>"],"<com.afollestad.photoaffix.engine.bitmaps.RealBitmapManipulator_Factory: com.afollestad.photoaffix.engine.bitmaps.RealBitmapManipulator provideInstance(javax.inject.Provider)>":["<com.afollestad.photoaffix.prefs.PrefsModule_ProvideScalePriorityPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.engine.subengines.RealStitchEngine_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.utilities.RealDpConverter_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.engine.RealAffixEngine_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideStackHorizontallyPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.engine.photos.RealPhotoLoader_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.engine.bitmaps.RealBitmapManipulator_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.utilities.RealMediaScanner_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.utilities.RealIoManager_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideImageSpacingHorizontalPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.di.AppProvideModule_ProvideAppNameFactory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideImageSpacingVerticalPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideBgFillColorPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.presenters.RealMainPresenter_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideRxkPrefsFactory: java.lang.Object get()>","<dagger.internal.DoubleCheck: java.lang.Object get()>","<com.afollestad.photoaffix.engine.subengines.RealDimensionsEngine_Factory: java.lang.Object get()>","<dagger.internal.InstanceFactory: java.lang.Object get()>","<com.afollestad.photoaffix.engine.bitmaps.RealBitmapManipulator: void <init>(com.afollestad.photoaffix.utilities.IoManager)>"],"<com.afollestad.photoaffix.engine.photos.Photo$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>":["<com.afollestad.photoaffix.engine.photos.Photo$Companion: void <init>()>"],"<androidx.fragment.app.FragmentManagerImpl: void dispatchStop()>":["<androidx.fragment.app.FragmentManagerImpl: void dispatchStateChange(int)>"],"<com.afollestad.photoaffix.di.DaggerAppComponent: com.afollestad.photoaffix.views.MainActivity injectMainActivity(com.afollestad.photoaffix.views.MainActivity)>":["<com.afollestad.photoaffix.prefs.PrefsModule_ProvideScalePriorityPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.engine.subengines.RealStitchEngine_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.utilities.RealDpConverter_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.engine.RealAffixEngine_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideStackHorizontallyPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.engine.photos.RealPhotoLoader_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.engine.bitmaps.RealBitmapManipulator_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.utilities.RealMediaScanner_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.utilities.RealIoManager_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.di.AppProvideModule_ProvideAppNameFactory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideImageSpacingHorizontalPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideImageSpacingVerticalPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.views.MainActivity_MembersInjector: void injectPresenter(com.afollestad.photoaffix.views.MainActivity,com.afollestad.photoaffix.presenters.MainPresenter)>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideBgFillColorPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.views.MainActivity_MembersInjector: void injectAffixEngine(com.afollestad.photoaffix.views.MainActivity,com.afollestad.photoaffix.engine.AffixEngine)>","<com.afollestad.photoaffix.presenters.RealMainPresenter_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideRxkPrefsFactory: java.lang.Object get()>","<dagger.internal.DoubleCheck: java.lang.Object get()>","<com.afollestad.photoaffix.engine.subengines.RealDimensionsEngine_Factory: java.lang.Object get()>","<dagger.internal.InstanceFactory: java.lang.Object get()>","<com.afollestad.photoaffix.views.MainActivity_MembersInjector: void injectMediaScanner(com.afollestad.photoaffix.views.MainActivity,com.afollestad.photoaffix.utilities.MediaScanner)>"],"<androidx.core.provider.FontsContractCompat: java.util.List convertToByteArrayList(android.content.pm.Signature[])>":["<java.util.ArrayList: void <init>()>","<java.util.ArrayList: boolean add(java.lang.Object)>"],"<androidx.lifecycle.LifecycleRegistry: void popParentState()>":["<java.util.ArrayList: java.lang.Object remove(int)>","<java.util.ArrayList: int size()>"],"<kotlinx.coroutines.AbstractContinuation: void <clinit>()>":["<kotlinx.coroutines.AbstractContinuation: void <clinit>()>","<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: java.util.concurrent.atomic.AtomicIntegerFieldUpdater newUpdater(java.lang.Class,java.lang.String)>","<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>"],"<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>":["<java.lang.RuntimeException: void <init>(java.lang.String)>"],"<com.afollestad.assent.AssentInContextKt: void askForPermissions(android.content.Context,com.afollestad.assent.Permission[],int,kotlin.jvm.functions.Function1)>":["<com.afollestad.assent.internal.PendingRequest: int getRequestCode()>","<com.afollestad.assent.internal.Data: void <clinit>()>","<com.afollestad.assent.internal.Data$Companion: com.afollestad.assent.internal.Data get()>","<com.afollestad.assent.internal.ExtensionsKt: boolean equalsPermissions(java.util.List,com.afollestad.assent.Permission[])>","<com.afollestad.assent.internal.Data: void setCurrentPendingRequest$com_afollestad_assent(com.afollestad.assent.internal.PendingRequest)>","<kotlin.collections.ArraysKt___ArraysKt: java.util.List toList(java.lang.Object[])>","<com.afollestad.assent.internal.Queue: void plusAssign(java.lang.Object)>","<java.util.ArrayList: boolean add(java.lang.Object)>","<com.afollestad.assent.internal.PendingRequest: java.util.List getPermissions()>","<com.afollestad.assent.internal.Data$Companion: com.afollestad.assent.internal.PermissionFragment assureFragment(android.content.Context)>","<com.afollestad.assent.internal.Data: com.afollestad.assent.internal.PendingRequest getCurrentPendingRequest$com_afollestad_assent()>","<com.afollestad.assent.internal.PendingRequest: void <init>(java.util.List,int,java.util.List)>","<kotlin.collections.EmptyList: boolean add(java.lang.Object)>","<com.afollestad.assent.internal.Data: com.afollestad.assent.internal.Queue getRequestQueue$com_afollestad_assent()>","<com.afollestad.assent.internal.PendingRequest: java.util.List getCallbacks()>","<kotlin.collections.CollectionsKt__CollectionsKt: java.util.List mutableListOf(java.lang.Object[])>","<java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>","<kotlin.Unit: void <clinit>()>","<com.afollestad.assent.internal.Data$Companion: java.lang.Object getLOCK()>","<com.afollestad.assent.internal.PermissionFragment: void perform$com_afollestad_assent(com.afollestad.assent.internal.PendingRequest)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<com.afollestad.assent.internal.PendingRequest: void setRequestCode(int)>"],"<kotlinx.coroutines.JobSupport: boolean cancel(java.lang.Throwable)>":["<kotlinx.coroutines.JobImpl: boolean getHandlesException()>","<kotlinx.coroutines.JobSupport: boolean cancelImpl(java.lang.Object)>","<kotlinx.coroutines.JobSupport: boolean getHandlesException()>"],"<androidx.core.content.res.FontResourcesParserCompat: androidx.core.content.res.FontResourcesParserCompat$FamilyResourceEntry parse(org.xmlpull.v1.XmlPullParser,android.content.res.Resources)>":["<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>","<androidx.core.content.res.FontResourcesParserCompat: androidx.core.content.res.FontResourcesParserCompat$FamilyResourceEntry readFamilies(org.xmlpull.v1.XmlPullParser,android.content.res.Resources)>"],"<androidx.fragment.app.FragmentManagerImpl: void freeBackStackIndex(int)>":["<java.lang.StringBuilder: java.lang.String toString()>","<java.lang.Integer: void <clinit>()>","<java.util.ArrayList: void <init>()>","<androidx.fragment.app.FragmentManagerImpl: void <clinit>()>","<java.lang.StringBuilder: void <init>()>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<java.lang.StringBuilder: java.lang.StringBuilder append(int)>","<android.util.Log: int v(java.lang.String,java.lang.String)>","<java.util.ArrayList: boolean add(java.lang.Object)>","<java.lang.Integer: java.lang.Integer valueOf(int)>","<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>"],"<androidx.core.view.ViewGroupCompat: boolean isTransitionGroup(android.view.ViewGroup)>":["<android.os.Build$VERSION: void <clinit>()>","<androidx.core.view.ViewCompat: java.lang.String getTransitionName(android.view.View)>","<androidx.core.view.ViewCompat: void <clinit>()>"],"<com.afollestad.photoaffix.views.MainActivity$performAffix$1$1$sizingResult$1: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)>":["<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<com.afollestad.photoaffix.views.MainActivity$performAffix$1$1$sizingResult$1: void <init>(com.afollestad.photoaffix.views.MainActivity$performAffix$1$1,kotlin.coroutines.Continuation)>"],"<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: void <init>(android.content.Context)>":["<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: void <init>(android.content.Context,androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat$AnimatedVectorDrawableCompatState,android.content.res.Resources)>"],"<androidx.appcompat.graphics.drawable.DrawableContainer: android.graphics.drawable.Drawable$ConstantState getConstantState()>":["<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: int getChangingConfigurations()>","<androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState: boolean canConstantState()>"],"<androidx.appcompat.widget.AppCompatDrawableManager: void <clinit>()>":["<androidx.appcompat.widget.AppCompatDrawableManager$ColorFilterLruCache: void <init>(int)>","<android.graphics.PorterDuff$Mode: void <clinit>()>","<androidx.appcompat.widget.AppCompatDrawableManager: void <clinit>()>"],"<java.lang.String: java.lang.String valueOf(java.lang.Object)>":["<java.lang.RuntimeException: void <init>(java.lang.String)>"],"<com.afollestad.photoaffix.prefs.PrefsModule$Companion: void <init>()>":["<java.lang.Object: void <init>()>"],"<kotlinx.coroutines.JobSupport: void promoteEmptyToNodeList(kotlinx.coroutines.Empty)>":["<kotlinx.coroutines.InactiveNodeList: void <init>(kotlinx.coroutines.NodeList)>","<kotlinx.coroutines.NodeList: void <init>()>","<kotlinx.coroutines.JobSupport: void <clinit>()>","<kotlinx.coroutines.Empty: boolean isActive()>"],"<kotlinx.coroutines.JobSupport: kotlinx.coroutines.DisposableHandle invokeOnCompletion(kotlin.jvm.functions.Function1)>":["<kotlinx.coroutines.JobSupport: kotlinx.coroutines.DisposableHandle invokeOnCompletion(boolean,boolean,kotlin.jvm.functions.Function1)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt$createCoroutineUnintercepted$$inlined$createCoroutineFromSuspendFunction$IntrinsicsKt__IntrinsicsJvmKt$3: void <init>(kotlin.coroutines.Continuation,kotlin.coroutines.Continuation,kotlin.jvm.functions.Function2,java.lang.Object)>":["<kotlin.coroutines.jvm.internal.RestrictedContinuationImpl: void <init>(kotlin.coroutines.Continuation)>"],"<androidx.appcompat.app.AppCompatDelegate: void <init>()>":["<java.lang.Object: void <init>()>"],"<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void setAutoMirrored(boolean)>":["<androidx.core.graphics.drawable.DrawableCompat: void setAutoMirrored(android.graphics.drawable.Drawable,boolean)>"],"<dagger.internal.InstanceFactory: dagger.internal.Factory create(java.lang.Object)>":["<dagger.internal.InstanceFactory: void <init>(java.lang.Object)>","<dagger.internal.InstanceFactory: void <clinit>()>","<dagger.internal.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>"],"<kotlinx.coroutines.AbstractCoroutine: void start(kotlinx.coroutines.CoroutineStart,java.lang.Object,kotlin.jvm.functions.Function2)>":["<kotlinx.coroutines.AbstractCoroutine: void initParentJob$kotlinx_coroutines_core()>","<kotlinx.coroutines.CoroutineStart: void invoke(kotlin.jvm.functions.Function2,java.lang.Object,kotlin.coroutines.Continuation)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<androidx.appcompat.app.ResourcesFlusher: void flushMarshmallows(android.content.res.Resources)>":["<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>","<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>","<androidx.appcompat.app.ResourcesFlusher: void flushThemedResourcesCache(java.lang.Object)>"],"<com.afollestad.photoaffix.views.MainActivity$onCreate$3: void <init>(com.afollestad.photoaffix.views.MainActivity)>":["<java.lang.Object: void <init>()>"],"<kotlinx.coroutines.CoroutineName$Key: void <init>()>":["<java.lang.Object: void <init>()>"],"<androidx.core.graphics.drawable.WrappedDrawableApi21: void <init>(android.graphics.drawable.Drawable)>":["<androidx.core.graphics.drawable.WrappedDrawableApi21: void findAndCacheIsProjectedDrawableMethod()>","<androidx.core.graphics.drawable.WrappedDrawableApi14: void <init>(android.graphics.drawable.Drawable)>"],"<com.afollestad.photoaffix.engine.bitmaps.BitmapIterator: java.lang.Object next()>":["<com.afollestad.photoaffix.engine.bitmaps.BitmapIterator: android.graphics.BitmapFactory$Options next()>"],"<androidx.fragment.app.FragmentController: void dispatchResume()>":["<androidx.fragment.app.FragmentManagerImpl: void dispatchResume()>"],"<androidx.appcompat.app.WindowDecorActionBar$3: void <init>(androidx.appcompat.app.WindowDecorActionBar)>":["<java.lang.Object: void <init>()>"],"<androidx.fragment.app.FragmentActivity: void onResume()>":["<android.os.Handler: boolean sendEmptyMessage(int)>","<android.app.Activity: void onResume()>","<androidx.fragment.app.FragmentController: boolean execPendingActions()>","<androidx.fragment.app.FragmentActivity$1: void handleMessage(android.os.Message)>"],"<androidx.fragment.app.FragmentTransitionCompat21: java.lang.Object wrapTransitionInSet(java.lang.Object)>":["<android.transition.TransitionSet: android.transition.TransitionSet addTransition(android.transition.Transition)>","<android.transition.TransitionSet: void <init>()>"],"<kotlinx.coroutines.InvokeOnCompletion: void <init>(kotlinx.coroutines.Job,kotlin.jvm.functions.Function1)>":["<kotlinx.coroutines.JobNode: void <init>(kotlinx.coroutines.Job)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<androidx.recyclerview.widget.LinearLayoutManager: void <init>(android.content.Context)>":["<androidx.recyclerview.widget.LinearLayoutManager: void <init>(android.content.Context,int,boolean)>"],"<androidx.fragment.app.FragmentActivity$HostCallbacks: android.view.View onFindViewById(int)>":["<androidx.appcompat.app.AppCompatActivity: android.view.View findViewById(int)>"],"<kotlin.jvm.internal.Intrinsics: void throwUninitializedProperty(java.lang.String)>":["<kotlin.UninitializedPropertyAccessException: void <init>(java.lang.String)>","<kotlin.jvm.internal.Intrinsics: java.lang.Throwable sanitizeStackTrace(java.lang.Throwable)>"],"<androidx.core.graphics.PathParser$PathDataNode: void <init>(char,float[])>":["<java.lang.Object: void <init>()>"],"<androidx.fragment.app.FragmentTransition: void retainValues(androidx.collection.ArrayMap,androidx.collection.ArrayMap)>":["<androidx.collection.SimpleArrayMap: java.lang.Object valueAt(int)>","<androidx.collection.SimpleArrayMap: boolean containsKey(java.lang.Object)>","<androidx.collection.SimpleArrayMap: int size()>","<androidx.collection.SimpleArrayMap: java.lang.Object removeAt(int)>"],"<java.lang.Class: java.lang.Class forName(java.lang.String)>":["<java.lang.RuntimeException: void <init>(java.lang.String)>"],"<com.afollestad.photoaffix.prefs.PrefsModule_ProvideStackHorizontallyPrefFactory: com.afollestad.rxkprefs.Pref provideInstance(com.afollestad.photoaffix.prefs.PrefsModule,javax.inject.Provider)>":["<com.afollestad.photoaffix.prefs.PrefsModule_ProvideScalePriorityPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.engine.subengines.RealStitchEngine_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.utilities.RealDpConverter_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.engine.RealAffixEngine_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideStackHorizontallyPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideStackHorizontallyPrefFactory: com.afollestad.rxkprefs.Pref proxyProvideStackHorizontallyPref(com.afollestad.photoaffix.prefs.PrefsModule,com.afollestad.rxkprefs.RxkPrefs)>","<com.afollestad.photoaffix.engine.bitmaps.RealBitmapManipulator_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.engine.photos.RealPhotoLoader_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.utilities.RealMediaScanner_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.utilities.RealIoManager_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideImageSpacingHorizontalPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideImageSpacingVerticalPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.di.AppProvideModule_ProvideAppNameFactory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideBgFillColorPrefFactory: java.lang.Object get()>","<com.afollestad.photoaffix.presenters.RealMainPresenter_Factory: java.lang.Object get()>","<com.afollestad.photoaffix.prefs.PrefsModule_ProvideRxkPrefsFactory: java.lang.Object get()>","<dagger.internal.DoubleCheck: java.lang.Object get()>","<com.afollestad.photoaffix.engine.subengines.RealDimensionsEngine_Factory: java.lang.Object get()>","<dagger.internal.InstanceFactory: java.lang.Object get()>"],"<kotlinx.coroutines.internal.ThreadContextKt$findOne$1: java.lang.Object invoke(java.lang.Object,java.lang.Object)>":["<kotlinx.coroutines.internal.ThreadContextKt$findOne$1: kotlinx.coroutines.ThreadContextElement invoke(kotlinx.coroutines.ThreadContextElement,kotlin.coroutines.CoroutineContext$Element)>"],"<androidx.core.graphics.TypefaceCompatApi26Impl: java.lang.Object newFamily()>":["<java.lang.RuntimeException: void <init>(java.lang.Throwable)>"],"<java.lang.Thread: void setName(java.lang.String)>":["<java.lang.RuntimeException: void <init>(java.lang.String)>"],"<kotlinx.coroutines.JobSupport: kotlinx.coroutines.DisposableHandle invokeOnCompletion(boolean,boolean,kotlin.jvm.functions.Function1)>":["<kotlinx.coroutines.JobSupport: void promoteSingleToNodeList(kotlinx.coroutines.JobNode)>","<kotlinx.coroutines.JobSupport: void promoteEmptyToNodeList(kotlinx.coroutines.Empty)>","<kotlinx.coroutines.ChildHandleNode: java.lang.Object invoke(java.lang.Object)>","<kotlinx.coroutines.JobSupport: kotlinx.coroutines.JobNode makeNode(kotlin.jvm.functions.Function1,boolean)>","<kotlinx.coroutines.JobSupport: java.lang.Object getState$kotlinx_coroutines_core()>","<kotlinx.coroutines.JobSupport$ChildCompletion: java.lang.Object invoke(java.lang.Object)>","<kotlinx.coroutines.Empty: kotlinx.coroutines.NodeList getList()>","<kotlinx.coroutines.JobSupport: void <clinit>()>","<kotlinx.coroutines.NonDisposableHandle: void <clinit>()>","<kotlinx.coroutines.JobSupport: boolean addLastAtomic(java.lang.Object,kotlinx.coroutines.NodeList,kotlinx.coroutines.JobNode)>","<kotlin.Unit: void <clinit>()>","<kotlin.TypeCastException: void <init>(java.lang.String)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<kotlinx.coroutines.ResumeAwaitOnCompletion: java.lang.Object invoke(java.lang.Object)>","<kotlinx.coroutines.ChildContinuation: java.lang.Object invoke(java.lang.Object)>","<kotlinx.coroutines.Empty: boolean isActive()>"],"<androidx.loader.app.LoaderManagerImpl: void <init>(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.ViewModelStore)>":["<androidx.loader.app.LoaderManagerImpl$LoaderViewModel: void <clinit>()>","<androidx.loader.app.LoaderManagerImpl$LoaderViewModel: androidx.loader.app.LoaderManagerImpl$LoaderViewModel getInstance(androidx.lifecycle.ViewModelStore)>","<androidx.loader.app.LoaderManager: void <init>()>"],"<androidx.lifecycle.LifecycleRegistry$1: void <clinit>()>":["<androidx.lifecycle.Lifecycle$State: void <clinit>()>","<androidx.lifecycle.Lifecycle$Event: void <clinit>()>","<androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event[] values()>","<androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State[] values()>","<androidx.lifecycle.LifecycleRegistry$1: void <clinit>()>","<java.lang.Enum: int ordinal()>"],"<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>":["<java.lang.RuntimeException: void <init>(java.lang.String)>"],"<kotlinx.coroutines.scheduling.CoroutineScheduler: int parkedWorkersStackNextIndex(kotlinx.coroutines.scheduling.CoroutineScheduler$Worker)>":["<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: java.lang.Object getNextParkedWorker()>","<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: int getIndexInArray()>","<kotlinx.coroutines.scheduling.CoroutineScheduler: void <clinit>()>"],"<com.afollestad.photoaffix.engine.subengines.RealDimensionsEngine_Factory: com.afollestad.photoaffix.engine.subengines.RealDimensionsEngine get()>":["<com.afollestad.photoaffix.engine.subengines.RealDimensionsEngine_Factory: com.afollestad.photoaffix.engine.subengines.RealDimensionsEngine provideInstance(javax.inject.Provider,javax.inject.Provider,javax.inject.Provider,javax.inject.Provider,javax.inject.Provider)>"],"<com.afollestad.photoaffix.di.AppProvideModule: void <init>()>":["<java.lang.Object: void <init>()>"],"<com.afollestad.materialdialogs.MaterialDialog: com.afollestad.materialdialogs.MaterialDialog title$default(com.afollestad.materialdialogs.MaterialDialog,java.lang.Integer,java.lang.String,int,java.lang.Object)>":["<com.afollestad.materialdialogs.MaterialDialog: com.afollestad.materialdialogs.MaterialDialog title(java.lang.Integer,java.lang.String)>"],"<androidx.interpolator.view.animation.FastOutLinearInInterpolator: void <clinit>()>":["<androidx.interpolator.view.animation.FastOutLinearInInterpolator: void <clinit>()>"],"<kotlinx.coroutines.scheduling.TasksKt: void <clinit>()>":["<kotlin.ranges.RangesKt___RangesKt: int coerceIn(int,int,int)>","<java.util.concurrent.TimeUnit: void <clinit>()>","<kotlinx.coroutines.scheduling.NanoTimeSource: void <clinit>()>","<kotlinx.coroutines.scheduling.TasksKt: void <clinit>()>","<kotlinx.coroutines.internal.SystemPropsKt: int getAVAILABLE_PROCESSORS()>","<kotlin.ranges.RangesKt___RangesKt: int coerceAtLeast(int,int)>","<kotlinx.coroutines.internal.SystemPropsKt: int systemProp$default(java.lang.String,int,int,int,int,java.lang.Object)>","<kotlinx.coroutines.internal.SystemPropsKt: long systemProp$default(java.lang.String,long,long,long,int,java.lang.Object)>","<kotlinx.coroutines.internal.SystemPropsKt: void <clinit>()>"],"<com.afollestad.photoaffix.prefs.PrefsModule_ProvideScalePriorityPrefFactory: com.afollestad.rxkprefs.Pref get()>":["<com.afollestad.photoaffix.prefs.PrefsModule_ProvideScalePriorityPrefFactory: com.afollestad.rxkprefs.Pref provideInstance(com.afollestad.photoaffix.prefs.PrefsModule,javax.inject.Provider)>"],"<kotlinx.coroutines.internal.LockFreeTaskQueueCore: kotlinx.coroutines.internal.LockFreeTaskQueueCore fillPlaceholder(int,java.lang.Object)>":["<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>","<java.util.concurrent.atomic.AtomicReferenceArray: void set(int,java.lang.Object)>"],"<androidx.lifecycle.ReportFragment: void injectIfNeededIn(android.app.Activity)>":["<androidx.lifecycle.ReportFragment: void <init>()>","<android.app.Activity: android.app.FragmentManager getFragmentManager()>"],"<com.afollestad.photoaffix.dialogs.ImageSizingDialog: void <clinit>()>":["<com.afollestad.photoaffix.dialogs.ImageSizingDialog$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>","<com.afollestad.photoaffix.dialogs.ImageSizingDialog: void <clinit>()>","<androidx.fragment.app.Fragment: void <clinit>()>"],"<java.lang.Character: int digit(int,int)>":["<java.lang.RuntimeException: void <init>(java.lang.String)>"],"<androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: android.animation.Keyframe createNewKeyframe(android.animation.Keyframe,float)>":["<java.lang.Integer: void <clinit>()>","<android.animation.Keyframe: android.animation.Keyframe ofInt(float)>","<android.animation.Keyframe: android.animation.Keyframe ofFloat(float)>","<java.lang.Float: void <clinit>()>","<android.animation.Keyframe: android.animation.Keyframe ofObject(float)>"],"<com.afollestad.photoaffix.views.MainActivity: void <clinit>()>":["<com.afollestad.photoaffix.views.MainActivity: void <clinit>()>","<android.app.Activity: void <clinit>()>","<com.afollestad.photoaffix.views.MainActivity$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>"],"<com.afollestad.dragselectrecyclerview.Mode: void <init>(java.lang.String,int)>":["<java.lang.Enum: void <init>(java.lang.String,int)>"],"<com.afollestad.photoaffix.views.MainActivity: void onCreate(android.os.Bundle)>":["<com.afollestad.photoaffix.views.MainActivity: android.view.View _$_findCachedViewById(int)>","<com.afollestad.photoaffix.di.DaggerAppComponent: void inject(com.afollestad.photoaffix.views.MainActivity)>","<android.app.Activity: android.app.Application getApplication()>","<androidx.appcompat.app.AppCompatActivity: void setContentView(int)>","<com.afollestad.photoaffix.views.MainActivity$onCreate$3: void <init>(com.afollestad.photoaffix.views.MainActivity)>","<com.afollestad.photoaffix.views.MainActivity$onCreate$2: void <init>(com.afollestad.photoaffix.views.MainActivity)>","<com.afollestad.photoaffix.views.MainActivity: void processIntent(android.content.Intent)>","<com.afollestad.photoaffix.App: com.afollestad.photoaffix.di.AppComponent getAppComponent()>","<kotlin.TypeCastException: void <init>(java.lang.String)>","<com.afollestad.photoaffix.views.MainActivity$onCreate$1: void <init>(com.afollestad.photoaffix.views.MainActivity)>","<androidx.appcompat.app.AppCompatActivity: void onCreate(android.os.Bundle)>","<com.afollestad.photoaffix.views.MainActivity: void setupMainGrid(android.os.Bundle)>","<com.afollestad.photoaffix.views.MainActivity: android.content.Intent getIntent()>"],"<kotlin.jvm.internal.CollectionToArray: void <clinit>()>":["<kotlin.jvm.internal.CollectionToArray: void <clinit>()>"],"<androidx.collection.SimpleArrayMap: int indexOf(java.lang.Object,int)>":["<java.util.AbstractList: boolean equals(java.lang.Object)>","<java.lang.String: boolean equals(java.lang.Object)>","<java.lang.Object: boolean equals(java.lang.Object)>","<androidx.collection.SimpleArrayMap: int binarySearchHashes(int[],int,int)>"],"<androidx.appcompat.widget.ThemeUtils: android.util.TypedValue getTypedValue()>":["<java.lang.ThreadLocal: void set(java.lang.Object)>","<android.util.TypedValue: void <init>()>","<java.lang.ThreadLocal: java.lang.Object get()>","<androidx.appcompat.widget.ThemeUtils: void <clinit>()>"],"<kotlinx.coroutines.scheduling.Task: void <init>(long,kotlinx.coroutines.scheduling.TaskContext)>":["<java.lang.Object: void <init>()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<io.reactivex.internal.schedulers.IoScheduler: void start()>":["<io.reactivex.internal.schedulers.IoScheduler$CachedWorkerPool: void shutdown()>","<io.reactivex.Scheduler: void <clinit>()>","<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>","<io.reactivex.internal.schedulers.IoScheduler: void <clinit>()>","<io.reactivex.internal.schedulers.IoScheduler$CachedWorkerPool: void <init>(long,java.util.concurrent.TimeUnit,java.util.concurrent.ThreadFactory)>"],"<kotlinx.coroutines.scheduling.NonBlockingContext: void <clinit>()>":["<kotlinx.coroutines.scheduling.NonBlockingContext: void <clinit>()>","<kotlinx.coroutines.scheduling.TaskMode: void <clinit>()>","<kotlinx.coroutines.scheduling.NonBlockingContext: void <init>()>"],"<androidx.arch.core.internal.SafeIterableMap: void <init>()>":["<java.lang.Object: void <init>()>","<java.util.WeakHashMap: void <init>()>"],"<androidx.collection.ArraySet: void <init>()>":["<androidx.collection.ArraySet: void <init>(int)>"],"<androidx.fragment.app.FragmentActivity: void onPause()>":["<androidx.fragment.app.FragmentController: void dispatchPause()>","<androidx.fragment.app.FragmentActivity: void onResumeFragments()>","<android.os.Handler: void removeMessages(int)>","<android.app.Activity: void onPause()>","<android.os.Handler: boolean hasMessages(int)>"],"<com.afollestad.photoaffix.engine.bitmaps.RealBitmapManipulator: android.graphics.Bitmap decodeUri(android.net.Uri,android.graphics.BitmapFactory$Options)>":["<com.afollestad.photoaffix.utilities.ext.IoExtKt: void closeQuietely(java.io.Closeable)>","<com.afollestad.photoaffix.utilities.RealIoManager: java.io.InputStream openStream(android.net.Uri)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options)>"],"<androidx.fragment.app.FragmentTransition: void callSharedElementStartEnd(androidx.fragment.app.Fragment,androidx.fragment.app.Fragment,boolean,androidx.collection.ArrayMap,boolean)>":["<androidx.collection.SimpleArrayMap: java.lang.Object keyAt(int)>","<androidx.collection.SimpleArrayMap: java.lang.Object valueAt(int)>","<java.util.ArrayList: void <init>()>","<java.util.ArrayList: boolean add(java.lang.Object)>","<androidx.collection.SimpleArrayMap: int size()>"],"<kotlinx.coroutines.DeferredCoroutine$await$1: java.lang.Object invokeSuspend(java.lang.Object)>":["<kotlinx.coroutines.DeferredCoroutine: java.lang.Object await$suspendImpl(kotlinx.coroutines.DeferredCoroutine,kotlin.coroutines.Continuation)>"],"<androidx.fragment.app.FragmentManagerImpl: void dispatchOnFragmentDestroyed(androidx.fragment.app.Fragment,boolean)>":["<java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>"],"<com.afollestad.rxkprefs.RealPref: void <init>(android.content.SharedPreferences,java.lang.String,java.lang.Object,io.reactivex.Observable,com.afollestad.rxkprefs.adapters.PrefAdapter)>":["<io.reactivex.Observable: io.reactivex.Observable startWith(java.lang.Object)>","<java.lang.Object: void <init>()>","<com.afollestad.rxkprefs.RealPref$values$2: void <init>(com.afollestad.rxkprefs.RealPref)>","<io.reactivex.Observable: io.reactivex.Observable filter(io.reactivex.functions.Predicate)>","<com.afollestad.rxkprefs.RealPref$values$1: void <init>(com.afollestad.rxkprefs.RealPref)>","<io.reactivex.Observable: io.reactivex.Observable map(io.reactivex.functions.Function)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<com.afollestad.rxkprefs.RealRxkPrefsKt: java.lang.Object dumpsterFire()>"],"<androidx.recyclerview.widget.OrientationHelper$2: void <init>(androidx.recyclerview.widget.RecyclerView$LayoutManager)>":["<androidx.recyclerview.widget.OrientationHelper: void <init>(androidx.recyclerview.widget.RecyclerView$LayoutManager,androidx.recyclerview.widget.OrientationHelper$1)>"],"<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VClipPath: void <init>()>":["<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPath: void <init>()>"],"<androidx.core.graphics.drawable.DrawableCompat: void setTintList(android.graphics.drawable.Drawable,android.content.res.ColorStateList)>":["<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: void setTintList(android.content.res.ColorStateList)>","<androidx.core.graphics.drawable.WrappedDrawableApi14: void setTintList(android.content.res.ColorStateList)>","<androidx.core.graphics.drawable.WrappedDrawableApi21: void setTintList(android.content.res.ColorStateList)>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void setTintList(android.content.res.ColorStateList)>","<android.os.Build$VERSION: void <clinit>()>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: void setTintList(android.content.res.ColorStateList)>","<android.graphics.drawable.LayerDrawable: void setTintList(android.content.res.ColorStateList)>"],"<androidx.appcompat.widget.DrawableUtils: void fixDrawable(android.graphics.drawable.Drawable)>":["<java.lang.Object: java.lang.Class getClass()>","<java.lang.String: boolean equals(java.lang.Object)>","<android.os.Build$VERSION: void <clinit>()>","<androidx.appcompat.widget.DrawableUtils: void fixVectorDrawableTinting(android.graphics.drawable.Drawable)>","<androidx.appcompat.widget.DrawableUtils: void <clinit>()>"],"<androidx.fragment.app.FragmentManagerImpl$1: void <init>(androidx.fragment.app.FragmentManagerImpl)>":["<java.lang.Object: void <init>()>"],"<io.reactivex.exceptions.CompositeException$WrappedPrintStream: void <init>(java.io.PrintStream)>":["<io.reactivex.exceptions.CompositeException$PrintStreamOrWriter: void <init>()>"],"<androidx.collection.SimpleArrayMap: void clear()>":["<java.util.ConcurrentModificationException: void <init>()>","<androidx.collection.ContainerHelpers: void <clinit>()>","<androidx.collection.SimpleArrayMap: void freeArrays(int[],java.lang.Object[],int)>"],"<androidx.appcompat.widget.ThemeUtils: void <clinit>()>":["<androidx.appcompat.widget.ThemeUtils: void <clinit>()>","<java.lang.ThreadLocal: void <init>()>"],"<io.reactivex.internal.schedulers.IoScheduler: void <clinit>()>":["<io.reactivex.Scheduler: void <clinit>()>","<io.reactivex.internal.schedulers.RxThreadFactory: void <init>(java.lang.String)>","<io.reactivex.internal.schedulers.NewThreadWorker: void dispose()>","<java.lang.Math: int max(int,int)>","<io.reactivex.internal.schedulers.IoScheduler$CachedWorkerPool: void shutdown()>","<java.lang.Integer: java.lang.Integer getInteger(java.lang.String,int)>","<java.util.concurrent.TimeUnit: void <clinit>()>","<java.lang.Math: int min(int,int)>","<java.lang.Integer: void <clinit>()>","<io.reactivex.internal.schedulers.RxThreadFactory: void <init>(java.lang.String,int)>","<io.reactivex.internal.schedulers.IoScheduler: void <clinit>()>","<io.reactivex.internal.schedulers.IoScheduler$ThreadWorker: void <init>(java.util.concurrent.ThreadFactory)>","<io.reactivex.internal.schedulers.IoScheduler$CachedWorkerPool: void <init>(long,java.util.concurrent.TimeUnit,java.util.concurrent.ThreadFactory)>"],"<androidx.appcompat.widget.AppCompatDrawableManager: android.content.res.ColorStateList createColoredButtonColorStateList(android.content.Context)>":["<androidx.appcompat.widget.ThemeUtils: int getThemeAttrColor(android.content.Context,int)>","<androidx.appcompat.widget.ThemeUtils: void <clinit>()>","<androidx.appcompat.widget.AppCompatDrawableManager: android.content.res.ColorStateList createButtonColorStateList(android.content.Context,int)>"],"<kotlinx.coroutines.AbstractContinuation: void resumeWith(java.lang.Object)>":["<kotlinx.coroutines.CompletedExceptionallyKt: java.lang.Object toState(java.lang.Object)>","<kotlinx.coroutines.AbstractContinuation: void resumeImpl(java.lang.Object,int)>"],"<kotlinx.coroutines.ResumeAwaitOnCompletion: java.lang.Object invoke(java.lang.Object)>":["<kotlinx.coroutines.ResumeAwaitOnCompletion: void invoke(java.lang.Throwable)>","<kotlin.Unit: void <clinit>()>"],"<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: void inflate(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>":["<androidx.appcompat.R$styleable: void <clinit>()>","<androidx.core.content.res.TypedArrayUtils: android.content.res.TypedArray obtainAttributes(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,int[])>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: void updateStateFromTypedArray(android.content.res.TypedArray)>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: void init()>","<androidx.appcompat.graphics.drawable.DrawableContainer: void updateDensity(android.content.res.Resources)>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: boolean setVisible(boolean,boolean)>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat: void inflateChildElements(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>"],"<androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>":["<java.lang.NullPointerException: void <init>(java.lang.String)>","<java.lang.String: void <clinit>()>","<java.lang.String: java.lang.String valueOf(java.lang.Object)>"],"<com.afollestad.rxkprefs.adapters.IntAdapter: com.afollestad.rxkprefs.adapters.IntAdapter access$getINSTANCE$cp()>":["<com.afollestad.rxkprefs.adapters.IntAdapter: void <clinit>()>"],"<com.afollestad.photoaffix.di.AppProvideModule: java.lang.String provideAppName(android.app.Application)>":["<android.content.ContextWrapper: android.content.res.Resources getResources()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<androidx.interpolator.view.animation.LinearOutSlowInInterpolator: void <clinit>()>":["<androidx.interpolator.view.animation.LinearOutSlowInInterpolator: void <clinit>()>"],"<kotlinx.coroutines.scheduling.WorkQueue: boolean tryAddLast(kotlinx.coroutines.scheduling.Task)>":["<java.util.concurrent.atomic.AtomicReferenceArray: void lazySet(int,java.lang.Object)>","<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>","<kotlinx.coroutines.scheduling.WorkQueue: void <clinit>()>","<kotlinx.coroutines.scheduling.WorkQueue: int getBufferSize$kotlinx_coroutines_core()>"],"<kotlinx.coroutines.JobSupport: boolean suppressExceptions(java.lang.Throwable,java.util.List)>":["<java.util.ArrayList: java.util.Iterator iterator()>","<kotlinx.coroutines.internal.ConcurrentKt: java.util.Set identitySet(int)>","<kotlinx.coroutines.internal.ConcurrentKt: void <clinit>()>","<java.util.ArrayList: int size()>","<kotlin.ExceptionsKt__ExceptionsKt: void addSuppressed(java.lang.Throwable,java.lang.Throwable)>"],"<kotlin.collections.EmptyList: java.lang.Object get(int)>":["<kotlin.collections.EmptyList: java.lang.Void get(int)>"],"<androidx.fragment.app.FragmentManagerImpl: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>":["<java.io.PrintWriter: void print(java.lang.String)>","<java.io.PrintWriter: void println(boolean)>","<android.util.SparseArray: int size()>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<java.lang.StringBuilder: void <init>()>","<java.util.ArrayList: java.lang.Object[] toArray()>","<java.util.Arrays: java.lang.String toString(java.lang.Object[])>","<java.lang.StringBuilder: java.lang.String toString()>","<java.io.PrintWriter: void println(java.lang.Object)>","<java.lang.Integer: java.lang.String toHexString(int)>","<java.io.PrintWriter: void println(java.lang.String)>","<java.lang.System: void <clinit>()>","<java.lang.Integer: void <clinit>()>","<java.io.PrintWriter: void print(int)>","<java.lang.System: int identityHashCode(java.lang.Object)>","<java.io.PrintWriter: void print(boolean)>","<android.util.SparseArray: java.lang.Object valueAt(int)>","<java.util.ArrayList: int size()>","<java.util.ArrayList: java.lang.Object get(int)>"],"<kotlinx.coroutines.CommonPool: java.util.concurrent.Executor getOrCreatePoolSync()>":["<kotlinx.coroutines.CommonPool: void <clinit>()>","<kotlinx.coroutines.CommonPool: java.util.concurrent.ExecutorService createPool()>"],"<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VObject: void <init>(androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$1)>":["<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VObject: void <init>()>"],"<androidx.core.graphics.PathParser: int nextStart(java.lang.String,int)>":["<java.lang.String: char charAt(int)>","<java.lang.String: int length()>"],"<androidx.collection.LongSparseArray: void <init>()>":["<androidx.collection.LongSparseArray: void <init>(int)>"],"<androidx.fragment.app.FragmentManagerImpl: void putFragment(android.os.Bundle,java.lang.String,androidx.fragment.app.Fragment)>":["<androidx.fragment.app.FragmentManagerImpl: void throwException(java.lang.RuntimeException)>","<java.lang.IllegalStateException: void <init>(java.lang.String)>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>","<java.lang.StringBuilder: java.lang.String toString()>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<java.lang.StringBuilder: void <init>()>","<android.os.BaseBundle: void putInt(java.lang.String,int)>"],"<kotlinx.coroutines.DefaultTimeSource: java.lang.Runnable wrapTask(java.lang.Runnable)>":["<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<androidx.appcompat.view.menu.MenuBuilder: void clear()>":["<androidx.appcompat.view.menu.MenuBuilder: void onItemsChanged(boolean)>","<java.util.ArrayList: void clear()>","<androidx.appcompat.view.menu.MenuBuilder: boolean collapseItemActionView(androidx.appcompat.view.menu.MenuItemImpl)>"],"<androidx.fragment.app.FragmentManagerImpl: void dispatchOnFragmentViewDestroyed(androidx.fragment.app.Fragment,boolean)>":["<java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>"],"<kotlin.coroutines.CoroutineContext$plus$1: void <init>()>":["<kotlin.jvm.internal.Lambda: void <init>(int)>"],"<kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: void <init>(java.lang.String,int)>":["<java.lang.Enum: void <init>(java.lang.String,int)>"],"<androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager: void <init>(androidx.appcompat.app.AppCompatDelegateImpl,androidx.appcompat.app.TwilightManager)>":["<java.lang.Object: void <init>()>","<androidx.appcompat.app.TwilightManager: boolean isNight()>"],"<java.lang.RuntimeException: void <init>()>":["<java.lang.Exception: void <init>()>","<java.lang.RuntimeException: void <init>(java.lang.String)>"],"<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatedStateListState: boolean transitionHasReversibleFlag(int,int)>":["<androidx.collection.LongSparseArray: java.lang.Object get(long,java.lang.Object)>","<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatedStateListState: long generateTransitionKey(int,int)>","<java.lang.Long: java.lang.Long valueOf(long)>","<java.lang.Long: void <clinit>()>"],"<kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher: void <init>(int,int,java.lang.String)>":["<kotlinx.coroutines.scheduling.TasksKt: void <clinit>()>","<kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher: void <init>(int,int,long,java.lang.String)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<androidx.fragment.app.FragmentManagerImpl$AnimatorOnHWLayerIfNeededListener: void <init>(android.view.View)>":["<android.animation.AnimatorListenerAdapter: void <init>()>"],"<kotlinx.coroutines.JobCancellingNode: void <init>(kotlinx.coroutines.Job)>":["<kotlinx.coroutines.JobNode: void <init>(kotlinx.coroutines.Job)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<androidx.core.graphics.TypefaceCompatApi26Impl: boolean addFontFromAssetManager(android.content.Context,java.lang.Object,java.lang.String,int,int,int,android.graphics.fonts.FontVariationAxis[])>":["<java.lang.Boolean: void <clinit>()>","<java.lang.Boolean: java.lang.Boolean valueOf(boolean)>","<java.lang.Integer: void <clinit>()>","<android.view.ContextThemeWrapper: android.content.res.AssetManager getAssets()>","<java.lang.Integer: java.lang.Integer valueOf(int)>","<java.lang.RuntimeException: void <init>(java.lang.Throwable)>"],"<kotlin.text.StringsKt__StringsKt: boolean regionMatchesImpl(java.lang.CharSequence,int,java.lang.CharSequence,int,int,boolean)>":["<java.lang.String: char charAt(int)>","<java.lang.String: int length()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<kotlin.text.CharsKt__CharKt: boolean equals(char,char,boolean)>"],"<kotlinx.coroutines.scheduling.DefaultScheduler: kotlinx.coroutines.CoroutineDispatcher getIO()>":["<kotlinx.coroutines.scheduling.DefaultScheduler: void <clinit>()>"],"<kotlinx.coroutines.AbstractCoroutine: void onCompletedExceptionally(java.lang.Throwable)>":["<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VClipPath: void <init>(androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VClipPath)>":["<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPath: void <init>(androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPath)>"],"<kotlin.internal.PlatformImplementations: void <init>()>":["<java.lang.Object: void <init>()>"],"<kotlinx.coroutines.internal.ThreadContextKt$restoreState$1: void <init>()>":["<kotlin.jvm.internal.Lambda: void <init>(int)>"],"<androidx.appcompat.app.AppCompatDelegateImpl: void onStop()>":["<androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.app.ActionBar getSupportActionBar()>","<androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager: void cleanup()>","<androidx.appcompat.app.WindowDecorActionBar: void setShowHideAnimationEnabled(boolean)>"],"<androidx.core.graphics.ColorUtils: int setAlphaComponent(int,int)>":["<java.lang.IllegalArgumentException: void <init>(java.lang.String)>"],"<androidx.core.graphics.drawable.WrappedDrawableApi14$DrawableWrapperStateBase: android.graphics.drawable.Drawable newDrawable(android.content.res.Resources)>":["<androidx.core.graphics.drawable.WrappedDrawableApi14: void <clinit>()>","<androidx.core.graphics.drawable.WrappedDrawableApi14: void <init>(androidx.core.graphics.drawable.WrappedDrawableApi14$DrawableWrapperState,android.content.res.Resources)>"],"<kotlin.text.CharsKt__CharJVMKt: int checkRadix(int)>":["<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>","<kotlin.ranges.IntRange: void <init>(int,int)>","<java.lang.IllegalArgumentException: void <init>(java.lang.String)>","<java.lang.StringBuilder: java.lang.String toString()>","<kotlin.ranges.IntRange: void <clinit>()>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<java.lang.StringBuilder: void <init>()>","<java.lang.StringBuilder: java.lang.StringBuilder append(int)>","<kotlin.ranges.IntProgression: void <clinit>()>"],"<androidx.recyclerview.widget.GridLayoutManager: void setSpanCount(int)>":["<java.lang.StringBuilder: java.lang.String toString()>","<java.lang.IllegalArgumentException: void <init>(java.lang.String)>","<androidx.recyclerview.widget.GridLayoutManager$SpanSizeLookup: void invalidateSpanIndexCache()>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<java.lang.StringBuilder: void <init>()>","<java.lang.StringBuilder: java.lang.StringBuilder append(int)>","<androidx.recyclerview.widget.RecyclerView$LayoutManager: void requestLayout()>"],"<androidx.collection.ContainerHelpers: int idealIntArraySize(int)>":["<androidx.collection.ContainerHelpers: int idealByteArraySize(int)>","<androidx.collection.ContainerHelpers: void <clinit>()>"],"<androidx.core.graphics.TypefaceCompatBaseImpl$1: boolean isItalic(java.lang.Object)>":["<androidx.core.graphics.TypefaceCompatBaseImpl$1: boolean isItalic(androidx.core.provider.FontsContractCompat$FontInfo)>"],"<java.lang.Object: int hashCode()>":["<java.lang.RuntimeException: void <init>(java.lang.String)>"],"<kotlinx.coroutines.scheduling.TaskImpl: void <init>(java.lang.Runnable,long,kotlinx.coroutines.scheduling.TaskContext)>":["<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<kotlinx.coroutines.scheduling.Task: void <init>(long,kotlinx.coroutines.scheduling.TaskContext)>"],"<androidx.core.view.ViewCompat: void postOnAnimation(android.view.View,java.lang.Runnable)>":["<android.animation.ValueAnimator: long getFrameDelay()>","<androidx.appcompat.app.AppCompatDelegateImpl$2: void run()>","<android.os.Build$VERSION: void <clinit>()>"],"<androidx.loader.app.LoaderManagerImpl$LoaderViewModel: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>":["<androidx.collection.SparseArrayCompat: java.lang.Object valueAt(int)>","<java.io.PrintWriter: void print(java.lang.String)>","<java.lang.StringBuilder: java.lang.String toString()>","<java.io.PrintWriter: void println(java.lang.String)>","<java.io.PrintWriter: void print(int)>","<java.lang.StringBuilder: void <init>()>","<androidx.collection.SparseArrayCompat: int keyAt(int)>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<androidx.collection.SparseArrayCompat: int size()>"],"<androidx.appcompat.view.menu.MenuBuilder: void saveActionViewStates(android.os.Bundle)>":["<androidx.appcompat.view.menu.MenuBuilder: android.view.MenuItem getItem(int)>","<androidx.appcompat.view.menu.MenuBuilder: int size()>","<android.os.Bundle: void putSparseParcelableArray(java.lang.String,android.util.SparseArray)>","<android.util.SparseArray: void <init>()>","<android.os.BaseBundle: void putInt(java.lang.String,int)>","<androidx.appcompat.view.menu.MenuBuilder: java.lang.String getActionViewStatesKey()>"],"<kotlin.coroutines.jvm.internal.CompletedContinuation: kotlin.coroutines.CoroutineContext getContext()>":["<java.lang.IllegalStateException: void <init>(java.lang.String)>","<java.lang.String: java.lang.String toString()>"],"<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void beforeTask(kotlinx.coroutines.scheduling.TaskMode,long)>":["<kotlinx.coroutines.scheduling.TasksKt: void <clinit>()>","<kotlinx.coroutines.scheduling.TaskMode: void <clinit>()>","<kotlinx.coroutines.scheduling.CoroutineScheduler: void access$requestCpuWorker(kotlinx.coroutines.scheduling.CoroutineScheduler)>","<kotlinx.coroutines.scheduling.CoroutineScheduler: java.util.concurrent.Semaphore access$getCpuPermits$p(kotlinx.coroutines.scheduling.CoroutineScheduler)>","<java.util.concurrent.Semaphore: int availablePermits()>","<kotlinx.coroutines.scheduling.NanoTimeSource: long nanoTime()>","<kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: void <clinit>()>","<kotlinx.coroutines.scheduling.CoroutineScheduler: void <clinit>()>","<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: boolean tryReleaseCpu$kotlinx_coroutines_core(kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState)>"],"<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: void setupAnimatorsForTarget(java.lang.String,android.animation.Animator)>":["<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: void setupColorAnimator(android.animation.Animator)>","<android.animation.Animator: void setTarget(java.lang.Object)>","<android.animation.ObjectAnimator: void setTarget(java.lang.Object)>","<android.animation.AnimatorSet: void setTarget(java.lang.Object)>","<java.util.ArrayList: void <init>()>","<androidx.collection.ArrayMap: void <init>()>","<android.os.Build$VERSION: void <clinit>()>","<androidx.collection.SimpleArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: java.lang.Object getTargetByName(java.lang.String)>","<java.util.ArrayList: boolean add(java.lang.Object)>"],"<com.afollestad.photoaffix.adapters.PhotoGridAdapter$Companion: void <init>()>":["<java.lang.Object: void <init>()>"],"<kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher: kotlinx.coroutines.CoroutineDispatcher blocking(int)>":["<java.lang.StringBuilder: java.lang.String toString()>","<java.lang.IllegalArgumentException: void <init>(java.lang.String)>","<kotlinx.coroutines.scheduling.LimitingDispatcher: void <init>(kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher,int,kotlinx.coroutines.scheduling.TaskMode)>","<kotlinx.coroutines.scheduling.TaskMode: void <clinit>()>","<kotlinx.coroutines.scheduling.LimitingDispatcher: void <clinit>()>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<java.lang.StringBuilder: void <init>()>","<java.lang.StringBuilder: java.lang.StringBuilder append(int)>"],"<androidx.fragment.app.FragmentActivity: androidx.lifecycle.ViewModelStore getViewModelStore()>":["<android.app.Activity: android.app.Application getApplication()>","<java.lang.IllegalStateException: void <init>(java.lang.String)>","<androidx.lifecycle.ViewModelStore: void <init>()>","<android.app.Activity: java.lang.Object getLastNonConfigurationInstance()>"],"<androidx.recyclerview.widget.OrientationHelper: androidx.recyclerview.widget.OrientationHelper createVerticalHelper(androidx.recyclerview.widget.RecyclerView$LayoutManager)>":["<androidx.recyclerview.widget.OrientationHelper$2: void <init>(androidx.recyclerview.widget.RecyclerView$LayoutManager)>"],"<kotlinx.coroutines.JobSupport$addLastAtomic$$inlined$addLastIf$1: void <init>(kotlinx.coroutines.internal.LockFreeLinkedListNode,kotlinx.coroutines.internal.LockFreeLinkedListNode,kotlinx.coroutines.JobSupport,java.lang.Object)>":["<kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp: void <init>(kotlinx.coroutines.internal.LockFreeLinkedListNode)>"],"<kotlinx.coroutines.AbstractContinuation: boolean updateStateToFinal(kotlinx.coroutines.NotCompleted,java.lang.Object,int)>":["<kotlinx.coroutines.AbstractContinuation: void completeStateUpdate(kotlinx.coroutines.NotCompleted,java.lang.Object,int)>","<kotlinx.coroutines.AbstractContinuation: boolean tryUpdateStateToFinal(kotlinx.coroutines.NotCompleted,java.lang.Object)>"],"<androidx.appcompat.app.AppCompatDelegateImpl$ActionMenuPresenterCallback: void <init>(androidx.appcompat.app.AppCompatDelegateImpl)>":["<java.lang.Object: void <init>()>"],"<kotlinx.coroutines.JobSupport$ChildCompletion: void <init>(kotlinx.coroutines.JobSupport,kotlinx.coroutines.JobSupport$Finishing,kotlinx.coroutines.ChildHandleNode,java.lang.Object)>":["<kotlinx.coroutines.JobNode: void <init>(kotlinx.coroutines.Job)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<com.afollestad.photoaffix.di.DaggerAppComponent: com.afollestad.photoaffix.di.AppComponent$Builder builder()>":["<com.afollestad.photoaffix.di.DaggerAppComponent$Builder: void <init>(com.afollestad.photoaffix.di.DaggerAppComponent$1)>"],"<kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: void <clinit>()>":["<kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: void <init>(java.lang.String,int)>","<kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: void <clinit>()>"],"<androidx.appcompat.widget.AppCompatDrawableManager: void checkVectorDrawableSetup(android.content.Context)>":["<androidx.appcompat.widget.AppCompatDrawableManager: boolean isVectorDrawable(android.graphics.drawable.Drawable)>","<java.lang.IllegalStateException: void <init>(java.lang.String)>","<androidx.appcompat.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable getDrawable(android.content.Context,int)>","<androidx.appcompat.widget.AppCompatDrawableManager: void <clinit>()>"],"<kotlinx.coroutines.internal.LockFreeLinkedListHead: void <init>()>":["<kotlinx.coroutines.internal.LockFreeLinkedListNode: void <init>()>"],"<com.afollestad.photoaffix.presenters.RealMainPresenter_Factory: com.afollestad.photoaffix.presenters.RealMainPresenter get()>":["<com.afollestad.photoaffix.presenters.RealMainPresenter_Factory: com.afollestad.photoaffix.presenters.RealMainPresenter provideInstance(javax.inject.Provider,javax.inject.Provider)>"],"<androidx.loader.app.LoaderManagerImpl$LoaderViewModel$1: androidx.lifecycle.ViewModel create(java.lang.Class)>":["<androidx.loader.app.LoaderManagerImpl$LoaderViewModel: void <clinit>()>","<androidx.loader.app.LoaderManagerImpl$LoaderViewModel: void <init>()>"],"<com.afollestad.materialdialogs.utils.DialogExtKt: void preShow(com.afollestad.materialdialogs.MaterialDialog)>":["<java.lang.Boolean: void <clinit>()>","<com.afollestad.materialdialogs.MaterialDialog: java.util.List getPreShowListeners$com_afollestad_material_dialogs_core()>","<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>","<com.afollestad.materialdialogs.checkbox.DialogCheckboxExtKt: android.widget.CheckBox getCheckBoxPrompt(com.afollestad.materialdialogs.MaterialDialog)>","<com.afollestad.materialdialogs.MaterialDialog: java.util.Map getConfig()>","<com.afollestad.materialdialogs.internal.main.DialogContentLayout: void modifyFirstAndLastPadding$default(com.afollestad.materialdialogs.internal.main.DialogContentLayout,int,int,int,java.lang.Object)>","<com.afollestad.materialdialogs.MaterialDialog: com.afollestad.materialdialogs.internal.main.DialogLayout getView$com_afollestad_material_dialogs_core()>","<kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>","<java.lang.Boolean: java.lang.Boolean valueOf(boolean)>","<com.afollestad.materialdialogs.internal.main.DialogContentLayout: void modifyScrollViewPadding$default(com.afollestad.materialdialogs.internal.main.DialogContentLayout,int,int,int,java.lang.Object)>","<com.afollestad.materialdialogs.utils.ViewExtKt: boolean isVisible(android.view.View)>","<com.afollestad.materialdialogs.callbacks.DialogCallbackExtKt: void invokeAll(java.util.List,com.afollestad.materialdialogs.MaterialDialog)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<androidx.appcompat.widget.DrawableUtils: void <clinit>()>":["<android.graphics.Rect: void <init>()>","<android.graphics.Rect: void <clinit>()>","<android.os.Build$VERSION: void <clinit>()>","<java.lang.Class: java.lang.Class forName(java.lang.String)>","<androidx.appcompat.widget.DrawableUtils: void <clinit>()>"],"<androidx.core.graphics.PathParser: androidx.core.graphics.PathParser$PathDataNode[] createNodesFromPathData(java.lang.String)>":["<java.lang.String: char charAt(int)>","<androidx.core.graphics.PathParser: float[] getFloats(java.lang.String)>","<java.util.ArrayList: void <init>()>","<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>","<java.lang.String: int length()>","<java.util.ArrayList: int size()>","<androidx.core.graphics.PathParser: void addNode(java.util.ArrayList,char,float[])>","<androidx.core.graphics.PathParser: int nextStart(java.lang.String,int)>","<java.lang.String: java.lang.String substring(int,int)>"],"<androidx.fragment.app.FragmentActivity: void onResumeFragments()>":["<androidx.fragment.app.FragmentController: void dispatchResume()>"],"<io.reactivex.internal.functions.Functions$NaturalObjectComparator: void <init>()>":["<java.lang.Object: void <init>()>"],"<kotlinx.coroutines.DebugKt: boolean getDEBUG()>":["<kotlinx.coroutines.DebugKt: void <clinit>()>"],"<com.afollestad.photoaffix.prefs.PrefsModule_ProvideBgFillColorPrefFactory: com.afollestad.rxkprefs.Pref get()>":["<com.afollestad.photoaffix.prefs.PrefsModule_ProvideBgFillColorPrefFactory: com.afollestad.rxkprefs.Pref provideInstance(com.afollestad.photoaffix.prefs.PrefsModule,javax.inject.Provider)>"],"<kotlinx.coroutines.JobSupport$Finishing: void <init>(kotlinx.coroutines.NodeList,boolean,java.lang.Throwable)>":["<java.lang.Object: void <init>()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<androidx.collection.SparseArrayCompat: int keyAt(int)>":["<androidx.collection.SparseArrayCompat: void gc()>"],"<kotlinx.coroutines.JobKt__JobKt: kotlinx.coroutines.Job Job(kotlinx.coroutines.Job)>":["<kotlinx.coroutines.JobImpl: void <init>(kotlinx.coroutines.Job)>"],"<androidx.appcompat.widget.TintTypedArray: void <init>(android.content.Context,android.content.res.TypedArray)>":["<java.lang.Object: void <init>()>"],"<kotlin.collections.EmptyIterator: void <clinit>()>":["<kotlin.collections.EmptyIterator: void <clinit>()>","<kotlin.collections.EmptyIterator: void <init>()>"],"<androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatableTransition: void stop()>":["<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: void stop()>"],"<androidx.fragment.app.FragmentController: void dispatchCreate()>":["<androidx.fragment.app.FragmentManagerImpl: void dispatchCreate()>"],"<kotlinx.coroutines.scheduling.LimitingDispatcher: void <init>(kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher,int,kotlinx.coroutines.scheduling.TaskMode)>":["<kotlinx.coroutines.ExecutorCoroutineDispatcher: void <init>()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>","<java.util.concurrent.ConcurrentLinkedQueue: void <init>()>"],"<com.afollestad.dragselectrecyclerview.DragSelectTouchListener: void <clinit>()>":["<com.afollestad.dragselectrecyclerview.DragSelectTouchListener: void <clinit>()>","<com.afollestad.dragselectrecyclerview.DragSelectTouchListener$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>"],"<androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State[] values()>":["<androidx.lifecycle.Lifecycle$State: void <clinit>()>","<java.lang.Object: java.lang.Object clone()>"],"<kotlinx.coroutines.Job: void <clinit>()>":["<kotlinx.coroutines.Job$Key: void <clinit>()>","<kotlinx.coroutines.Job: void <clinit>()>"],"<kotlin.collections.EmptyIterator: java.lang.Object next()>":["<kotlin.collections.EmptyIterator: java.lang.Void next()>"],"<androidx.appcompat.app.AppCompatDelegateImpl: android.view.ViewGroup createSubDecor()>":["<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>","<androidx.appcompat.R$styleable: void <clinit>()>","<android.util.TypedValue: void <init>()>","<androidx.appcompat.view.ContextThemeWrapper: android.content.res.Resources$Theme getTheme()>","<androidx.appcompat.app.AppCompatDelegateImpl$4: void <init>(androidx.appcompat.app.AppCompatDelegateImpl)>","<java.lang.IllegalArgumentException: void <init>(java.lang.String)>","<androidx.appcompat.app.AppCompatDelegateImpl: android.view.Window$Callback getWindowCallback()>","<androidx.appcompat.view.ContextThemeWrapper: void <init>(android.content.Context,int)>","<androidx.core.view.ViewCompat: void setOnApplyWindowInsetsListener(android.view.View,androidx.core.view.OnApplyWindowInsetsListener)>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<java.lang.StringBuilder: void <init>()>","<androidx.appcompat.app.AppCompatDelegateImpl$3: void <init>(androidx.appcompat.app.AppCompatDelegateImpl)>","<android.view.ContextThemeWrapper: android.content.res.Resources$Theme getTheme()>","<android.view.LayoutInflater: android.view.LayoutInflater 'from'(android.content.Context)>","<androidx.core.view.ViewCompat: void <clinit>()>","<androidx.appcompat.widget.ViewUtils: void <clinit>()>","<java.lang.IllegalStateException: void <init>(java.lang.String)>","<java.lang.StringBuilder: java.lang.String toString()>","<androidx.appcompat.app.AppCompatDelegateImpl$5: void <init>(androidx.appcompat.app.AppCompatDelegateImpl)>","<androidx.appcompat.widget.ViewUtils: void makeOptionalFitsSystemWindows(android.view.View)>","<android.os.Build$VERSION: void <clinit>()>","<androidx.appcompat.app.AppCompatDelegateImpl: boolean requestWindowFeature(int)>","<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(int[])>"],"<androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event[] values()>":["<androidx.lifecycle.Lifecycle$Event: void <clinit>()>","<java.lang.Object: java.lang.Object clone()>"],"<androidx.recyclerview.widget.RecyclerView$AdapterDataObservable: void <init>()>":["<android.database.Observable: void <init>()>"],"<com.afollestad.photoaffix.engine.photos.RealPhotoLoader: void <init>(android.app.Application)>":["<android.content.ContextWrapper: android.content.ContentResolver getContentResolver()>","<java.lang.Object: void <init>()>","<com.afollestad.photoaffix.utilities.ext.StringExtKt: android.net.Uri toUri(java.lang.String)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<androidx.vectordrawable.graphics.drawable.AndroidResources: void <clinit>()>":["<androidx.vectordrawable.graphics.drawable.AndroidResources: void <clinit>()>"],"<kotlinx.coroutines.AbstractContinuation: boolean tryUpdateStateToFinal(kotlinx.coroutines.NotCompleted,java.lang.Object)>":["<kotlinx.coroutines.NonDisposableHandle: void <clinit>()>","<java.lang.IllegalArgumentException: void <init>(java.lang.String)>","<kotlinx.coroutines.AbstractContinuation: void <clinit>()>","<kotlinx.coroutines.NonDisposableHandle: void dispose()>","<kotlinx.coroutines.JobNode: void dispose()>","<java.lang.String: java.lang.String toString()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void updateStateFromTypedArray(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser)>":["<androidx.core.content.res.TypedArrayUtils: int getNamedInt(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int,int)>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: float getAlpha()>","<android.graphics.PorterDuff$Mode: void <clinit>()>","<java.lang.StringBuilder: void <init>()>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.PorterDuff$Mode parseTintModeCompat(int,android.graphics.PorterDuff$Mode)>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void <clinit>()>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: void setAlpha(float)>","<androidx.core.content.res.TypedArrayUtils: boolean getNamedBoolean(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int,boolean)>","<java.lang.StringBuilder: java.lang.String toString()>","<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>","<androidx.collection.SimpleArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>","<androidx.core.content.res.TypedArrayUtils: float getNamedFloat(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int,float)>"],"<com.afollestad.photoaffix.prefs.PrefsModule_ProvideImageSpacingHorizontalPrefFactory: com.afollestad.rxkprefs.Pref get()>":["<com.afollestad.photoaffix.prefs.PrefsModule_ProvideImageSpacingHorizontalPrefFactory: com.afollestad.rxkprefs.Pref provideInstance(com.afollestad.photoaffix.prefs.PrefsModule,javax.inject.Provider)>"],"<androidx.appcompat.widget.VectorEnabledTintResources: android.graphics.drawable.Drawable superGetDrawable(int)>":["<android.content.res.Resources: android.graphics.drawable.Drawable getDrawable(int)>"],"<androidx.fragment.app.Fragment: void requestPermissions(java.lang.String[],int)>":["<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>","<java.lang.IllegalStateException: void <init>(java.lang.String)>","<java.lang.StringBuilder: java.lang.String toString()>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<java.lang.StringBuilder: void <init>()>"],"<androidx.appcompat.widget.DrawableUtils: void fixVectorDrawableTinting(android.graphics.drawable.Drawable)>":["<android.graphics.drawable.Drawable: boolean setState(int[])>","<androidx.appcompat.widget.ThemeUtils: void <clinit>()>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: boolean setState(int[])>","<androidx.core.graphics.drawable.WrappedDrawableApi14: int[] getState()>","<androidx.core.graphics.drawable.WrappedDrawableApi21: boolean setState(int[])>","<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: boolean setState(int[])>","<android.graphics.drawable.Drawable: int[] getState()>","<androidx.core.graphics.drawable.WrappedDrawableApi14: boolean setState(int[])>","<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: int[] getState()>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: int[] getState()>"],"<androidx.core.app.AppOpsManagerCompat: int noteProxyOpNoThrow(android.content.Context,java.lang.String,java.lang.String)>":["<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>","<android.os.Build$VERSION: void <clinit>()>"],"<com.afollestad.photoaffix.engine.photos.PhotoKt: kotlin.jvm.functions.Function1 getDefaultUriParser()>":["<com.afollestad.photoaffix.engine.photos.PhotoKt: void <clinit>()>"],"<androidx.core.graphics.PathParser$PathDataNode: void arcToBezier(android.graphics.Path,double,double,double,double,double,double,double,double,double)>":["<java.lang.Math: double abs(double)>","<java.lang.Math: double cos(double)>","<java.lang.Double: boolean isNaN(double)>","<android.graphics.Path: void rLineTo(float,float)>","<android.graphics.Path: void cubicTo(float,float,float,float,float,float)>","<java.lang.Math: double tan(double)>","<java.lang.Double: void <clinit>()>","<java.lang.Math: double sin(double)>","<java.lang.Math: double sqrt(double)>","<java.lang.Math: double ceil(double)>"],"<androidx.appcompat.app.WindowDecorActionBar: void <init>(android.app.Dialog)>":["<androidx.appcompat.app.WindowDecorActionBar$2: void <init>(androidx.appcompat.app.WindowDecorActionBar)>","<androidx.appcompat.app.WindowDecorActionBar$3: void <init>(androidx.appcompat.app.WindowDecorActionBar)>","<java.util.ArrayList: void <init>()>","<androidx.appcompat.app.WindowDecorActionBar$1: void <init>(androidx.appcompat.app.WindowDecorActionBar)>","<androidx.appcompat.app.WindowDecorActionBar: void init(android.view.View)>","<androidx.appcompat.app.ActionBar: void <init>()>"],"<kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>":["<kotlin.coroutines.intrinsics.CoroutineSingletons: void <clinit>()>"],"<androidx.core.content.res.ResourcesCompat: android.graphics.drawable.Drawable getDrawable(android.content.res.Resources,int,android.content.res.Resources$Theme)>":["<android.os.Build$VERSION: void <clinit>()>","<androidx.appcompat.widget.VectorEnabledTintResources: android.graphics.drawable.Drawable getDrawable(int)>","<android.content.res.Resources: android.graphics.drawable.Drawable getDrawable(int,android.content.res.Resources$Theme)>"],"<androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager: void cleanup()>":["<android.content.ContextWrapper: void unregisterReceiver(android.content.BroadcastReceiver)>"],"<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: void <init>(androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer)>":["<android.graphics.Path: void <init>(android.graphics.Path)>","<java.lang.Object: void <init>()>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: void <init>(androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup,androidx.collection.ArrayMap)>","<android.graphics.Matrix: void <init>()>","<androidx.collection.ArrayMap: void <init>()>","<androidx.collection.SimpleArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>"],"<kotlinx.coroutines.internal.Removed: void <init>(kotlinx.coroutines.internal.LockFreeLinkedListNode)>":["<java.lang.Object: void <init>()>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<com.afollestad.materialdialogs.utils.DialogExtKt: void populateText$default(com.afollestad.materialdialogs.MaterialDialog,android.widget.TextView,java.lang.Integer,java.lang.CharSequence,int,android.graphics.Typeface,java.lang.Integer,int,java.lang.Object)>":["<com.afollestad.materialdialogs.utils.DialogExtKt: void populateText(com.afollestad.materialdialogs.MaterialDialog,android.widget.TextView,java.lang.Integer,java.lang.CharSequence,int,android.graphics.Typeface,java.lang.Integer)>"],"<androidx.core.graphics.drawable.WrappedDrawableApi14: boolean setState(int[])>":["<androidx.core.graphics.drawable.WrappedDrawableApi14: boolean updateTint(int[])>","<android.graphics.drawable.Drawable: boolean setState(int[])>","<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: boolean setState(int[])>","<androidx.core.graphics.drawable.WrappedDrawableApi21: boolean setState(int[])>","<androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat: boolean setState(int[])>","<androidx.core.graphics.drawable.WrappedDrawableApi14: boolean setState(int[])>"],"<androidx.fragment.app.Fragment: void <clinit>()>":["<java.lang.Object: void <init>()>","<androidx.collection.SimpleArrayMap: void <init>()>","<androidx.fragment.app.Fragment: void <clinit>()>"],"<androidx.fragment.app.FragmentActivity$1: void <init>(androidx.fragment.app.FragmentActivity)>":["<android.os.Handler: void <init>()>"],"<kotlinx.coroutines.CoroutineStart: boolean isLazy()>":["<kotlinx.coroutines.CoroutineStart: void <clinit>()>"],"<androidx.fragment.app.FragmentController: void dispatchPause()>":["<androidx.fragment.app.FragmentManagerImpl: void dispatchPause()>"],"<kotlinx.coroutines.JobSupport: java.lang.Object fold(java.lang.Object,kotlin.jvm.functions.Function2)>":["<kotlinx.coroutines.Job$DefaultImpls: java.lang.Object fold(kotlinx.coroutines.Job,java.lang.Object,kotlin.jvm.functions.Function2)>","<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>"],"<androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: android.animation.Animator createAnimatorFromXml(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser,float)>":["<androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: android.animation.Animator createAnimatorFromXml(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.animation.AnimatorSet,int,float)>","<android.util.Xml: android.util.AttributeSet asAttributeSet(org.xmlpull.v1.XmlPullParser)>","<android.util.Xml: void <clinit>()>"],"<com.afollestad.materialdialogs.utils.MDUtil: java.lang.CharSequence resolveString$default(com.afollestad.materialdialogs.utils.MDUtil,com.afollestad.materialdialogs.MaterialDialog,java.lang.Integer,java.lang.Integer,boolean,int,java.lang.Object)>":["<com.afollestad.materialdialogs.utils.MDUtil: java.lang.CharSequence resolveString(com.afollestad.materialdialogs.MaterialDialog,java.lang.Integer,java.lang.Integer,boolean)>"],"<kotlinx.coroutines.Dispatchers: kotlinx.coroutines.CoroutineDispatcher getDefault()>":["<kotlinx.coroutines.Dispatchers: void <clinit>()>"],"<androidx.core.graphics.TypefaceCompatApi24Impl: void <init>()>":["<androidx.core.graphics.TypefaceCompatBaseImpl: void <init>()>"],"<kotlin.collections.EmptyIterator: void <init>()>":["<java.lang.Object: void <init>()>"]}