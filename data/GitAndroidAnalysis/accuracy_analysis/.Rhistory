y <- data["Effort"]
corr <- cor(x,y)
View(y)
View(y)
corr <- cor(x,y)
plot(corr,xlim=c(0, 36))
text(1:42,corr,row.names(corr),cex=0.4, pos=4, col="blue")
abline(h=0.15,col="red")
corr <- cor(x,y)
plot(corr,xlim=c(0, 36))
text(1:42,corr,row.names(corr),cex=0.4, pos=4, col="blue")
corr <- cor(x,y)
plot(corr,xlim=c(0, ncol))
text(1:42,corr,row.names(corr),cex=0.4, pos=4, col="blue")
text(1:ncol,corr,row.names(corr),cex=0.4, pos=4, col="blue")
abline(h=0.15,col="red")
x <- data[cols]
corr <- cor(x,y)
plot(corr,xlim=c(0, ncol))
text(1:ncol,corr,row.names(corr),cex=0.4, pos=4, col="blue")
abline(h=0.15,col="red")
knitr::opts_chunk$set(echo = TRUE)
corr <- cor(x,y)
plot(corr,xlim=c(0, ncol))
text(1:ncol,corr,row.names(corr),cex=0.4, pos=4, col="blue")
independentVar <- data.frame(x$Effort_Norm_UCP, x$UseCase_Num, x$CTRL, x$NT, x$Complex_UC, x$UEUCW, x$TCF, x$EUCP, x$EXUCP, x$DUCP, x$Top_Level_Classes, x$Number_Of_Inheritance_Relationships, x$Number_Of_Derived_Classes, x$Number_Of_Classes_Inherited, x$Number_Of_Classes_Inherited_From, x$Number_Of_Children, x$Depth_Inheritance_Tree, x$Coupling_Between_Objects, x$FUNC_NA, x$UAW)
View(corr)
View(corr)
corr <- corr[!is.na(corr)]
y <- data["Effort"]
corr <- cor(x,y)
corr$colName <- colnames(corr)
corr <- cor(x,y)
corr <- cor(x,y)
corr$rowName <- rownames(corr)
x <- data[cols]
y <- data["Effort"]
corr <- cor(x,y)
corr$rowName <- rownames(corr)
corr <- as.matrix(cor(x,y))
y <- data["Effort"]
corr <- as.matrix(cor(x,y))
corr$rowName <- rownames(corr)
print(rownames(corr))
y <- data["Effort"]
corr <- as.matrix(cor(x,y))
print(rownames(corr))
corr$rown <- as.vector(rownames(corr))
View(corr)
View(corr)
View(corr)
View(corr)
View(corr)
x <- data[cols]
y <- data["Effort"]
corr <- as.matrix(cor(x,y))
corr$rown <- as.vector(rownames(corr))
View(corr)
View(corr)
corr <- as.data.frame(corr(x, y))
corr$rown <- as.vector(rownames(corr))
corr <- as.data.frame(corr(x, y))
corr <- as.data.frame(cor(x, y))
corr$rown <- as.vector(rownames(corr))
View(corr)
View(corr)
corr <- corr[!is.na(corr)]
corr$rown <- as.vector(rownames(corr))
corr <- corr[!is.na(corr["Effort"])]
View(corr)
View(corr)
corr <- corr[!is.na(corr["Effort"]),]
corr$rown <- as.vector(rownames(corr))
corr <- as.data.frame(cor(x, y))
corr$rown <- as.vector(rownames(corr))
y <- data["Effort"]
corr <- as.data.frame(cor(x, y))
corr$rown <- as.vector(rownames(corr))
corr <- subst(corr, !is.na(corr["Effort"]))
corr <- as.data.frame(cor(x, y))
corr$rown <- as.vector(rownames(corr))
corr <- subset(corr, !is.na(corr["Effort"]))
x <- data[cols]
y <- data["Effort"]
corr <- as.data.frame(cor(x, y))
corr <- subset(corr, !is.na(corr["Effort"]))
plot(corr,xlim=c(0, nrow(corr)))
plot(t(corr), xlim=c(0, nrow(corr)))
plot(corr["Effort"], xlim=c(0, nrow(corr)))
plot(corr["Effort"], xlim=c(0, 20))
plot(as.vector(corr["Effort"]), xlim=c(0, 20))
text(1:nrow(corr),corr,row.names(corr),cex=0.4, pos=4, col="blue")
plot(as.vector(corr["Effort"]), col=rownames(corr))
plot(as.vector(corr["Effort"]), col=factor(rownames(corr)))
plot(as.vector(corr["Effort"]), col=corr["Effort"])
plot(as.vector(corr["Effort"]))
plot(corr["Effort"])
print(corr["Effort"])
hist(corr["Effort"])
plot(corr["Effort"])
x <- data[cols]
y <- data["Effort"]
corr <- cor(x, y)
corr <- subset(corr, !is.na(corr["Effort"]))
print(corr["Effort"])
corr <- cor(x, y)
plot(corr)
plot(corr, col=rownames(corr))
plot(corr, col=c(1:length(corr))
plot(corr, col=c(1:length(corr))
plot(corr, col=c(1:length(corr))
text(1:nrow(corr),corr,row.names(corr),cex=0.4, pos=4, col="blue")
plot(corr)
text(1:nrow(corr),corr,row.names(corr),cex=0.4, pos=4, col="blue")
plot(corr)
text(1:length(corr),corr,row.names(corr),cex=0.4, pos=4, col="blue")
text(1:length(corr),corr,rownames(corr),cex=0.4, pos=4, col="blue")
plot(length(corr))
print(corr["Effort"])
print(length(corr))
plot(corr)
plot(names(corr))
print(names(corr))
print(rownames(corr))
text(1:length(corr),corr,rownames(corr),cex=0.4, pos=4, col="blue")
corr <- subset(corr, !is.na(corr["Effort"]))
print(rownames(corr))
corr <- cor(x, y)
corr <- subset(corr, !is.na(corr["Effort"]))
print(rownames(corr))
plot(corr)
corr <- subset(corr, !is.na(corr["Effort"]))
print(rownames(corr))
x <- data[cols]
y <- data["Effort"]
corr <- cor(x, y)
corr <- subset(corr, !is.na(corr["Effort"]))
print(rownames(corr))
x <- data[cols]
y <- data["Effort"]
corr <- cor(x, y)
corr <- subset(corr, !is.na(corr["Effort"]))
corr <- corr[!is.na(corr))
corr <- corr[!is.na(corr)]
corr <- cor(x, y)
corr <- corr[!is.na(corr)]
print(rownames(corr))
plot(corr)
text(1:length(corr),corr,rownames(corr),cex=0.4, pos=4, col="blue")
text(1:length(corr),corr, c(1:length(corr)),cex=0.4, pos=4, col="blue")
corr <- as.data.frame(cor(x, y))
corr <- corr[!is.na(corr[, "Effort"])]
corr <- corr[!is.na(corr[c("Effort")])]
corr <- subset(corr, !is.na(corr[,"Effort"]))
corr <- subset(corr, !is.na(corr["Effort"]))
corr <- subset(corr, !is.na(corr[,"Effort"]))
corr <- subset(corr, !is.na(corr["Effort"]))
corr <- cor(x, y)
corr <- subset(corr, !is.na(corr["Effort"]))
print((corr))
x <- data[cols]
y <- data["Effort"]
corr <- cor(x, y)
corr <- subset(corr, !is.na(corr["Effort"]))
corr <- cor(x, y)
corr <- subset(corr, !is.na(corr[c("Effort")]))
y <- data["Effort"]
corr <- cor(x, y)
corr <- subset(corr, !is.na(corr[c("Effort")]))
x <- data[cols]
y <- data["Effort"]
corr <- cor(x, y)
x <- data[cols]
y <- data["Effort"]
View(y)
View(y)
corr <- cor(x, y)
View(corr)
View(corr)
corr <- corr[!is.na(corr)]
#corr <- corr[!is.na(corr)]
corr <- na.omit(corr)
corr <- cor(x, y)
#corr <- corr[!is.na(corr)]
corr <- na.omit(corr)
#corr <- subset(corr, !is.na(corr[c("Effort")]))
#print((corr))
plot(corr)
#corr <- subset(corr, !is.na(corr[c("Effort")]))
print(length(corr))
#corr <- subset(corr, !is.na(corr[c("Effort")]))
print(row.names(corr))
plot(corr)
text(1:length(corr),corr,row.names(corr),cex=0.4, pos=4, col="blue")
plot(corr)
text(1:length(corr),corr,row.names(corr),cex=0.4, pos=4, col="blue")
abline(h=0.15,col="red")
abline(h=-0.15,col="red")
plot(corr)
text(1:length(corr),corr,row.names(corr),cex=0.4, pos=4, col="blue")
abline(h=0.6,col="red")
abline(h=-0.6,col="red")
r_limit <- 0.5
plot(corr)
text(1:length(corr),corr,row.names(corr),cex=0.4, pos=4, col="blue")
abline(h=r_limit,col="red")
abline(h=-1*r_limit,col="red")
corr <- corr[corr >= r_limit]
corr <- cor(x, y)
#corr <- corr[!is.na(corr)]
corr <- na.omit(corr)
corr <- data.matrix(cor=corr, proj=row.names(corr))
corr <- data.frame(cor=corr, proj=row.names(corr))
corr <- subset(corr, corr["Effort"] >= r_limit)
corr <- cor(x, y)
#corr <- corr[!is.na(corr)]
corr <- na.omit(corr)
corr <- as.data.frame(corr)
corr <- subset(corr, corr["Effort"] >= r_limit)
x <- data[cols]
x <- data[-c("Effort")]
y <- data["Effort"]
x <- data[cols]
View(x)
View(x)
View(y)
View(y)
y <- data[c("Effort")]
View(y)
View(y)
View(x)
View(x)
x <- data[-c("Effort")]
x <- x[-c("Effort")]
x <- x[,-c("Effort")]
x <- subset(x, select = c("Effort"))
r_limit <- 0.5
x <- data[cols]
x <- subset(x, select = - c("Effort"))
r_limit <- 0.5
x <- data[cols]
x <- subset(x, select = -c("Effort"))
x <- subset(x, select = colnames(x) !in c("Effort"))
x <- subset(x, select = colnames(x) != "Effort")
y <- data[c("Effort")]
corr <- cor(x, y)
#corr <- corr[!is.na(corr)]
corr <- na.omit(corr)
#corr <- subset(corr, !is.na(corr[c("Effort")]))
print(row.names(corr))
plot(corr)
r_limit <- 0.5
x <- data[cols]
x <- subset(x, select = colnames(x) != "Effort")
y <- data[c("Effort")]
corr <- cor(x, y)
#corr <- corr[!is.na(corr)]
corr <- na.omit(corr)
#corr <- subset(corr, !is.na(corr[c("Effort")]))
print(row.names(corr))
plot(corr)
text(1:length(corr),corr,row.names(corr),cex=0.4, pos=4, col="blue")
plot(corr)
text(1:length(corr),corr,row.names(corr),cex=0.4, pos=4, col="blue")
abline(h=r_limit,col="red")
abline(h=-1*r_limit,col="red")
corr <- as.data.frame(corr)
corr <- subset(corr, corr["Effort"] >= r_limit)
View(corr)
View(corr)
View(corr)
ind_variables <- row.names(corr)
independentVar <- data[ind_variables]
View(independentVar)
View(independentVar)
fit <- lm(y~.,data=independentVar)
vars <- data[ind_variables]
vars$y <- data[c("Effort")]
View(vars)
View(vars)
vars$Effort <- data[c("Effort")]
vars <- data[ind_variables]
vars$Effort <- data[c("Effort")]
vars <- data[ind_variables]
vars <- cbind(vars, data[c("Effort")])
fit <- lm(Effort ~ .,data=independentVar)
fit <- lm(Effort ~ .,data=vars)
summary(fit)
plot(fit)
x_data <- data[ind_variables]
y_data <- data[c("Effort")]
lasso_lm <- glmnet(x = x_data, y = y_data, alpha = 1, standardize = T)
library(glmnet)
install.packages("glmnet")
library(glmnet)
install.packages("Matrix")
install.packages("Matrix")
install.packages("Matrix")
install.packages("Matrix")
install.packages("Matrix")
install.packages("Matrix")
install.packages("Matrix")
install.packages("foreach")
knitr::opts_chunk$set(echo = TRUE)
library(glmnet)
x_data <- data[ind_variables]
y_data <- data[c("Effort")]
lasso_lm <- glmnet(x = x_data, y = y_data, alpha = 1, standardize = T)
lasso_lm <- glmnet(x = x_data, y = as.vector(y_data), alpha = 1, standardize = T)
View(y_data)
View(y_data)
lasso_lm <- glmnet(x = as.data.frame(x_data), y = as.vector(y_data), alpha = 1, standardize = T)
View(x_data)
View(x_data)
lasso_lm <- glmnet(x = as.matrix(x_data), y = as.vector(y_data), alpha = 1, standardize = T)
x_data <- as.matrix(data[ind_variables])
View(x_data)
View(x_data)
x_data <- as.matrix(data[ind_variables])
y_data <- as.vector(data[c("Effort")])
x_data <- as.matrix(data[ind_variables])
y_data <- as.vector(data[c("Effort")])
lasso_lm <- glmnet(x = x_data, y = y_data, alpha = 1, standardize = T)
View(x_data)
View(x_data)
View(y_data)
View(y_data)
x_data <- data.matrix(data[ind_variables])
y_data <- as.vector(data[c("Effort")])
lasso_lm <- glmnet(x = x_data, y = y_data, alpha = 1, standardize = T)
View(y_data)
View(y_data)
View(x)
View(x)
x_data <- data.matrix(data[ind_variables])
View(x_data)
View(x_data)
y_data <- as.vector(data[c("Effort")])
lasso_lm <- glmnet(x = x_data, y = y_data, alpha = 1, standardize = T)
x_data <- data.matrix(data[ind_variables])
y_data <- data.matrix(data[c("Effort")])
lasso_lm <- glmnet(x = x_data, y = y_data, alpha = 1, standardize = T)
print(lasso_lm$lambda)
plot(lasso_lm)
library(plotmo) # for plot_glmnet
install.packages("plotmo")
library(plotmo) # for plot_glmnet
x_data <- data.matrix(data[ind_variables])
y_data <- data.matrix(data[c("Effort")])
lasso_lm <- glmnet(x = x_data, y = y_data, alpha = 1, standardize = T)
print(lasso_lm$lambda)
#for 10 biggest final features
plot_glmnet(lasso_lm)                             # default colors
```{r}
Lasso_range = function(x, y, k){
# inputs:
# x_matrix, a matrix containing independent variables
# y: vector of dependent varaibles
# k: the length of sequence
# output:
# seq: a sequence of lambdaa from high to low
# define my own scale function to simulate that in glmnet
myscale = function(x) sqrt(sum((x - mean(x)) ^ 2) / length(x))
# normalize x
sx = as.matrix(scale(x, scale = apply(x, 2, myscale)))
# sy = as.vector(scale(y, scale = myscale(y)))
max_lambda = max(abs(colSums(sx * as.vector(y)))) / dim(sx)[1]
# The default depends on the sample size nobs relative to the number of variables nvars.
# If nobs > nvars, the default is 0.0001, close to zero.
# If nobs < nvars, the default is 0.01.
# A very small value of lambda.min.ratio will lead to a saturated fit in the nobs < nvars case.
ratio = 0
if(dim(sx)[1] > dim(sx)[2]){
ratio = 0.0001
}else{
ratio = 0.01
}
min_lambda = max_lambda * ratio
log_seq = seq(from  = log(min_lambda), to = log(max_lambda), length.out = k)
seq = sort(exp(log_seq), decreasing = T)
return(seq)
}
Lasso_range(x_data,y_data, 100)
lambda_list <- Lasso_range(x_data,y_data,100)
percent = 50
cvfit = cv.glmnet(data.matrix(X_data),as.vector(Y_data),
standardize = T, type.measure = 'mse', nfolds = 5, alpha = 1)
# # 5 fold cross validation
k <- 5
cvfit = cv.glmnet(x_data,y_data,
standardize = T, type.measure = 'mse', nfolds = 5, alpha = 1)
# # 5 fold cross validation
k <- 5
#
# function to calculate MMRE
calcMMRE <- function(testData,pred){
mmre <- abs(testData - pred)/testData
mean_value <- mean(mmre)
mean_value
}
# # function to calculate PRED
calcPRED <- function(testData,pred,percent){
value <- abs(testData - pred)/testData
percent_value <- percent/100
pred_value <- value <= percent_value
mean(pred_value)
}
#
folds <- cut(seq(1,nrow(X_data)),breaks=k,labels=FALSE)
#
folds <- cut(seq(1,nrow(x_data)),breaks=k,labels=FALSE)
mean_mmre <- vector("list",k)
mean_pred <- vector("list",k)
overall_mean_mmre <- vector("list",100)
overall_mean_pred <- vector("list",100)
for(iterator in seq(1,100)){
for(i in 1:k){
testIndexes <- which(folds==i,arr.ind=TRUE)
testData <- Y_data[testIndexes]
pred <- predict(cvfit,newx=as.matrix(X_data),s=lambda_list[[iterator]])
mean_mmre[[i]] <- calcMMRE(testData,pred[testIndexes])
mean_pred[[i]] <- calcPRED(testData,pred[testIndexes],percent)
}
overall_mean_mmre[[iterator]] <- mean(as.numeric(mean_mmre))
overall_mean_pred[[iterator]] <- mean(as.numeric(mean_pred))
}
set.seed(2)
lambda_list <- Lasso_range(x_data,y_data,100)
percent = 50
cvfit = cv.glmnet(x_data,y_data,
standardize = T, type.measure = 'mse', nfolds = 5, alpha = 1)
# # 5 fold cross validation
k <- 5
#
# function to calculate MMRE
calcMMRE <- function(testData,pred){
mmre <- abs(testData - pred)/testData
mean_value <- mean(mmre)
mean_value
}
# # function to calculate PRED
calcPRED <- function(testData,pred,percent){
value <- abs(testData - pred)/testData
percent_value <- percent/100
pred_value <- value <= percent_value
mean(pred_value)
}
#
folds <- cut(seq(1,nrow(x_data)),breaks=k,labels=FALSE)
mean_mmre <- vector("list",k)
mean_pred <- vector("list",k)
overall_mean_mmre <- vector("list",100)
overall_mean_pred <- vector("list",100)
for(iterator in seq(1,100)){
for(i in 1:k){
testIndexes <- which(folds==i,arr.ind=TRUE)
testData <- y_data[testIndexes]
pred <- predict(cvfit,newx=x_data,s=lambda_list[[iterator]])
mean_mmre[[i]] <- calcMMRE(testData,pred[testIndexes])
mean_pred[[i]] <- calcPRED(testData,pred[testIndexes],percent)
}
overall_mean_mmre[[iterator]] <- mean(as.numeric(mean_mmre))
overall_mean_pred[[iterator]] <- mean(as.numeric(mean_pred))
}
plot(log(lambda_list),overall_mean_mmre,xlab="log(Lambda)",ylab="MMRE")
lines(log(lambda_list),overall_mean_mmre,xlim=range(log(lambda_list)), ylim=range(overall_mean_mmre), pch=16)
plot(log(lambda_list),overall_mean_mmre,xlab="log(Lambda)",ylab="MMRE")
lines(log(lambda_list),overall_mean_mmre,xlim=range(log(lambda_list)), ylim=range(overall_mean_mmre), pch=16)
plot(log(lambda_list),overall_mean_pred,xlab="log(Lambda)",ylab = "PRED")
lines(log(lambda_list),overall_mean_pred,xlim=range(log(lambda_list)), ylim=range(overall_mean_pred), pch=16)
plot(cvfit)
stats <- data.frame(matrix(nrow = 0, ncol = 5))
colnames(stats) <- c("var", "r2", "AIC", "BIC", "BF")
for (var in features[2:47]) {
regression_formula <- as.formula(paste("Effort ~ ", var))
model <- lm(regression_formula, data = model_data)
r2 = summary(model)$r.squared
aic = AIC(model)
bic = BIC(model)
bf = lmBF(regression_formula, data = model_data)
stats[nrow(stats) + 1,] <- list(var, r2, aic, bic, bf)
}
features <- cols[-c(Effort)]
features <- cols[cols != "Effort"]
for (var in features[2:47]) {
regression_formula <- as.formula(paste("Effort ~ ", var))
model <- lm(regression_formula, data = model_data)
r2 = summary(model)$r.squared
aic = AIC(model)
bic = BIC(model)
bf = lmBF(regression_formula, data = model_data)
stats[nrow(stats) + 1,] <- list(var, r2, aic, bic, bf)
}
stats <- data.frame(matrix(nrow = 0, ncol = 5))
colnames(stats) <- c("var", "r2", "AIC", "BIC", "BF")
features <- cols[cols != "Effort"]
for (var in features[2:47]) {
regression_formula <- as.formula(paste("Effort ~ ", var))
model <- lm(regression_formula, data = data)
r2 = summary(model)$r.squared
aic = AIC(model)
bic = BIC(model)
bf = lmBF(regression_formula, data = model_data)
stats[nrow(stats) + 1,] <- list(var, r2, aic, bic, bf)
}
library(BayesFactor)
install.packages(BayesFactor)
install.packages("BayesFactor")
library(BayesFactor)
install.packages("mvtnorm")
library(BayesFactor)
r -version
